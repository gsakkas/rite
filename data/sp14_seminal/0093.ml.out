------------------------------------------------------------------
File "0093.ml", line 19, characters 35-39:
This expression has type 'a list * 'b list but is here used with type 'c list
Relevant code: base
------------------------------------------------------------------
File "0093.ml", line 19, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    'd list * 'e list -> 'f * 'g -> 'd list * 'e list
within context
    let f a x = (match a with 
                 | [] ->
                   []) in let base = [], [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0093.ml", line 19, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('h list -> 'i -> 'j list) -> 'k list * 'l list -> ('m * 'n) list -> 'o * 'p
within context
    let f a x = (match a with 
                 | [] ->
                   []) in let base = [], [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0093.ml", line 16, characters 10-39:
Try replacing
    fun a x -> (match a with 
                | [] -> [])
with
    fun a x -> (match a with 
                | [] -> []); [[...]]
of type
    'q
within context
    fun l1 l2 -> (let add (l1, l2) = let f = fun a x -> (match a with 
                                                         | [] ->
                                                           []); [[...]] in let base
              =
              [], []
              in
              let args = (List.combine (List.rev l1) (List.rev l2)) in
              let (_, res) = (List.fold_left f base  args) in
              res in (removeZero (add (padZero l1 l2))))
==============================
