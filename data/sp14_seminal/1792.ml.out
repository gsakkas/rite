------------------------------------------------------------------
File "1792.ml", line 7, characters 57-58:
This expression has type string but is here used with type string list
Relevant code: l
------------------------------------------------------------------
File "1792.ml", line 7, characters 35-49:
Try replacing
    List.fold_left
with
    sep
of type
    (string -> string -> string) -> 'a -> 'a -> string
within context
    (match sl with 
     | [] -> ""
     | h :: t ->
       (let f a x = a ^ x in let base = h in let l = h in (sep f base  l)))
==============================
File "1792.ml", line 7, characters 52-56:
Try replacing
    base
with
    sep
of type
    string
within context
    (match sl with 
     | [] -> ""
     | h :: t ->
       (let f a x = a ^ x in
             let base = h in let l = h in (List.fold_left f sep  l)))
==============================
File "1792.ml", line 7, characters 30-31:
Try replacing
    h
with
    t
of type
    string list
within context
    fun sl -> (match sl with 
               | [] -> ""
               | h :: t ->
                 (let f a x = a ^ x in
                       let base = h in let l = t in (List.fold_left f base  l)))
==============================
File "1792.ml", line 7, characters 57-58:
Try replacing
    l
with
    t
of type
    string list
within context
    (match sl with 
     | [] -> ""
     | h :: t ->
       (let f a x = a ^ x in
             let base = h in let l = h in (List.fold_left f base  t)))
==============================
File "1792.ml", line 7, characters 57-58:
Try replacing
    l
with
    sl
of type
    string list
within context
    (match sl with 
     | [] -> ""
     | h :: t ->
       (let f a x = a ^ x in
             let base = h in let l = h in (List.fold_left f base  sl)))
==============================
