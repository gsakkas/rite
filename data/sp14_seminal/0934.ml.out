------------------------------------------------------------------
File "0934.ml", line 17, characters 40-44:
This expression has type ('a * 'b) list but is here used with type char list
Relevant code: args
------------------------------------------------------------------
File "0934.ml", line 17, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'c list -> 'd * 'e -> int * 'c list
within context
    let f a x = (match x with 
                 | 'a' ->
                   a) in let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0934.ml", line 17, characters 40-44:
Try replacing
    args
with
    args; [[...]]
of type
    char list
within context
    let f a x = (match x with 
                 | 'a' ->
                   a) in let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "0934.ml", line 17, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('f -> char -> 'f) -> int * 'g list -> ('h * 'i) list -> 'j * 'k
within context
    let f a x = (match x with 
                 | 'a' ->
                   a) in let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0934.ml", line 16, characters 15-33:
Try replacing
    (List.combine l1 l2)
with
    (List.combine l1 l2); [[...]]
of type
    'l
within context
    let add (l1, l2) = let f a x = (match x with 
                                    | 'a' ->
                                      a) in let base = 0, [] in
        let args = (List.combine l1 l2); [[...]] in
        let (_, res) = (List.fold_left f base  args) in
        res in (removeZero (add (padZero l1 l2)))
==============================
File "0934.ml", line 14, characters 10-39:
Try replacing
    fun a x -> (match x with 
                | 'a' -> a)
with
    fun a x -> (match x with 
                | 'a' -> a); [[...]]
of type
    'm
within context
    fun l1 l2 -> (let add (l1, l2) = let f = fun a x -> (match x with 
                                                         | 'a' ->
                                                           a); [[...]] in let base =
              0, []
              in
              let args = (List.combine l1 l2) in
              let (_, res) = (List.fold_left f base  args) in
              res in (removeZero (add (padZero l1 l2))))
==============================
