------------------------------------------------------------------
File "0467.ml", line 27, characters 36-40:
This expression has type int but is here used with type float
Relevant code: (-1)
------------------------------------------------------------------
File "0467.ml", line 27, characters 36-40:
Try replacing
    -1
with
    -1; [[...]]
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (a, b, a_less, b_less) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (a_less, x, y))
                                    else
                                    (eval (b_less, x, y)))
                              | Negate e -> ((eval (e, x, y)) *. -1; [[...]])
                              | Foo (e1, e2, e3) ->
                                (((eval (e1, x, y)) +.
                                          ((eval (e2, x, y)) *. (eval (e3, x, y))))
                                      /. 2.0)) ;; 
==============================
File "0467.ml", line 27, characters 33-35:
Try replacing
    *.
with
    *.; [[...]]
of type
    float -> int -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (a, b, a_less, b_less) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (a_less, x, y))
                                    else
                                    (eval (b_less, x, y)))
                              | Negate e -> ((eval (e, x, y)) *.; [[...]] -1)
                              | Foo (e1, e2, e3) ->
                                (((eval (e1, x, y)) +.
                                          ((eval (e2, x, y)) *. (eval (e3, x, y))))
                                      /. 2.0)) ;; 
==============================
