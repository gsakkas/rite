------------------------------------------------------------------
File "2441.ml", line 8, characters 16-38:
This expression has type 'a list * (int -> (int * int) list)
but is here used with type 'b list
Relevant code: (l1, (clone (0, l1G)))
------------------------------------------------------------------
Triaged the following locations:
File "2441.ml", line 10, characters 4-167:
And modified the following location:
File "2441.ml", line 8, characters 16-38:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    l1, (clone (0, l1G))
with
    l1, (clone (0, l1G)); [[...]]
The actual replacement has type
    'c list
within context
    let padZero l1 l2 =
    (if (List.length l1) > (List.length l2) then
      (let l1G = (List.length l1) - (List.length l2) in
          (List.append (l1, (clone (0, l1G)); [[...]])))
      else
      [[...other program...]])
    ;; 
==============================
Triaged the following locations:
File "2441.ml", line 10, characters 4-167:
And modified the following location:
File "2441.ml", line 8, characters 4-15:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    List.append
with
    <
The actual replacement has type
    'd list * (int -> (int * int) list) ->
    'd list * (int -> (int * int) list) -> bool
within context
    let padZero l1 l2 =
    (if (List.length l1) > (List.length l2) then
      (let l1G = (List.length l1) - (List.length l2) in (< (l1, (clone (0, l1G)))))
      else
      [[...other program...]])
    ;; 
==============================
Triaged the following locations:
File "2441.ml", line 10, characters 4-167:
And modified the following location:
File "2441.ml", line 8, characters 4-15:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    List.append
with
    List.append; [[...]]
The actual replacement has type
    'e list * (int -> (int * int) list) -> 'f
within context
    let padZero l1 l2 =
    (if (List.length l1) > (List.length l2) then
      (let l1G = (List.length l1) - (List.length l2) in
          ((List.append; [[...]]) (l1, (clone (0, l1G)))))
      else
      [[...other program...]])
    ;; 
==============================
Triaged the following locations:
File "2441.ml", line 10, characters 4-167:
And modified the following location:
File "2441.ml", line 8, characters 4-15:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    List.append
with
    >
The actual replacement has type
    'g list * (int -> (int * int) list) ->
    'g list * (int -> (int * int) list) -> bool
within context
    let padZero l1 l2 =
    (if (List.length l1) > (List.length l2) then
      (let l1G = (List.length l1) - (List.length l2) in (> (l1, (clone (0, l1G)))))
      else
      [[...other program...]])
    ;; 
==============================
Triaged the following locations:
File "2441.ml", line 7, characters 4-91:
And modified the following location:
File "2441.ml", line 13, characters 7-40:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (List.append ((clone (0 l2G)), l2))
with
    [[...]]
The actual replacement has type
    'h list * 'i list
within context
    let padZero l1 l2 =
    (if (List.length l1) > (List.length l2) then [[...other program...]] else
      (if (List.length l1) < (List.length l2) then
        (let l2G = (List.length l2) - (List.length l2) in [[...]])
        else
        l1, l2))
    ;; 
==============================
