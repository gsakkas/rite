------------------------------------------------------------------
File "1247.ml", line 23, characters 35-39:
This expression has type int * int but is here used with type int * int list
Relevant code: base
------------------------------------------------------------------
File "1247.ml", line 23, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int * int list
within context
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) ->
                                                ((w + z) / 10,
                                                      (mod (w + z) 10) ::
                                                          y)) in let base = 0, 0 in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "1247.ml", line 21, characters 15-21:
Try replacing
    0, 0
with
    0, 0; [[...]]
of type
    'a
within context
    fun l2 ->
      (let add (l1, l2) = let f a x = let z = (fst x) + (snd x) in (match a with 
                                                                    | (w, y) ->
                                                                      ((w + z) / 10,
                                                                            (mod
                                                                                  (w
                                                                                      +
                                                                                      z)
                                                                                  10)
                                                                                ::
                                                                                y)) in let
            base
            =
            0, 0; [[...]]
            in
            let args = (List.rev (List.combine l1 l2)) in
            let (_, res) = (List.fold_left f base  args) in
            res in (removeZero (add (padZero l1 l2))))
==============================
File "1247.ml", line 23, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int * int -> int * int list) ->
    int * int -> ('b * 'c) list -> 'd * 'e
within context
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) ->
                                                ((w + z) / 10,
                                                      (mod (w + z) 10) ::
                                                          y)) in let base = 0, 0 in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
