------------------------------------------------------------------
File "0593.ml", line 19, characters 18-33:
This expression has type int list * int list but is here used with type
  'a list list * 'b list list
Relevant code: (padZero l1 l2)
------------------------------------------------------------------
File "0593.ml", line 19, characters 18-33:
Try replacing
    (padZero l1 l2)
with
    (padZero l1 l2); [[...]]
of type
    'c list list * 'd list list
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x = (failwith "to be implemented") in
              let base = [0], [0] in
              let args = [(List.rev (List.hd l1)), (List.rev (List.hd l2))] in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add ((padZero l1 l2); [[...]]))))
==============================
File "0593.ml", line 19, characters 14-17:
Try replacing
    add
with
    add; [[...]]
of type
    int list * int list -> int list
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x = (failwith "to be implemented") in
              let base = [0], [0] in
              let args = [(List.rev (List.hd l1)), (List.rev (List.hd l2))] in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero ((add; [[...]]) (padZero l1 l2))))
==============================
File "0593.ml", line 14, characters 10-219:
Try replacing
    fun (l1, l2) ->
      (let f a x = (failwith "to be implemented") in
          let base = [0], [0] in
          let args = [(List.rev (List.hd l1)), (List.rev (List.hd l2))] in
          let (_, res) = (List.fold_left f base  args) in res)
with
    fun (l1, l2) ->
      (let f a x = (failwith "to be implemented") in
          let base = [0], [0] in
          let args = [(List.rev (List.hd l1)), (List.rev (List.hd l2))] in
          let (_, res) = (List.fold_left f base  args) in res);
    [[...]]
of type
    'e
==============================
