------------------------------------------------------------------
File "1756.ml", line 22, characters 35-54:
This expression has type int * int but is here used with type 'a list
Relevant code: (1, ((i + j) - 10))
------------------------------------------------------------------
Triaged the following locations:
File "1756.ml", line 24, characters 4-131:
And modified the following location:
File "1756.ml", line 22, characters 10-77:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (if i + j > 9 then a :: 1 :: (i + j) - 10 else a :: 0 :: i + j)
with
    [[...]]
The actual replacement has type
    'b
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match x with 
                                                  | (i, j) -> [[...]]
                                                  | _ ->
                                                    a) in [[...other program...]] in (removeZero
                (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1756.ml", line 24, characters 4-131:
And modified the following location:
File "1756.ml", line 19, characters 4-279:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x = (match x with 
                 | (i, j) ->
                   (if i + j > 9 then a :: 1 :: (i + j) - 10 else a :: 0 :: i + j)
                 | _ ->
                   a) in let base = [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'c
==============================
