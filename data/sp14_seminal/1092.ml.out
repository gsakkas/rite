------------------------------------------------------------------
File "1092.ml", line 4, characters 35-36:
This expression has type (('a -> 'b) -> 'a -> 'b) -> 'c -> bool
but is here used with type
  (('a -> 'b) -> 'a -> 'b) -> 'c -> ('a -> 'b) -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "1092.ml", line 3, characters 8-43:
Try replacing
    fun a x -> a = (fun x a -> (x a))
with
    fun _ a x -> a = (fun x a -> (x a))
of type
    'd -> (('e -> 'f) -> 'e -> 'f) -> 'g -> bool
within context
    let pipe fs =
    let f _ a x = a = (fun x a -> (x a)) in
      let base x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "1092.ml", line 4, characters 20-34:
Try replacing
    List.fold_left
with
    base
of type
    ((('h -> 'i) -> 'h -> 'i) -> 'j -> bool) ->
    (('h -> 'i) -> 'h -> 'i) -> 'j -> bool
within context
    let pipe fs =
    let f a x = a = (fun x a -> (x a)) in let base x = x in (base f base  fs)
    ;; 
==============================
File "1092.ml", line 3, characters 16-17:
Try replacing
    =
with
    x
of type
    'k -> (('l -> 'm) -> 'l -> 'm) -> 'n
within context
    fun fs ->
      (let f a x = (a x fun x a -> (x a)) in
          let base x = x in (List.fold_left f base  fs))
==============================
