------------------------------------------------------------------
File "0622.ml", line 18, characters 13-23:
This expression has type 'a list but is here used with type 'b * 'c
Relevant code: [((), ())]
------------------------------------------------------------------
Triaged the following locations:
File "0622.ml", line 19, characters 11-17:
And modified the following location:
File "0622.ml", line 18, characters 13-23:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    c :: s
If you ignore other surrounding code, try replacing
    [(), ()]
with
    [(), ()]; [[...]]
The actual replacement has type
    int * int
within context
    fun a
      x ->
        (let (x', x'') = x in
            let (c, s) = a in
            (if x = ([(), ()]; [[...]]) then (c :: s; [[...]]) else
                ((c + x') + x'') / 10, (mod ((c + x') + x'') 10) :: s))
==============================
Triaged the following locations:
File "0622.ml", line 19, characters 11-17:
And modified the following location:
File "0622.ml", line 18, characters 11-12:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    c :: s
If you ignore other surrounding code, try replacing
    =
with
    =; [[...]]
The actual replacement has type
    int * int -> (unit * unit) list -> bool
within context
    fun a
      x ->
        (let (x', x'') = x in
            let (c, s) = a in
            (if (x =; [[...]] [(), ()]) then (c :: s; [[...]]) else
                ((c + x') + x'') / 10, (mod ((c + x') + x'') 10) :: s))
==============================
Triaged the following locations:
File "0622.ml", line 19, characters 11-17:
And modified the following location:
File "0622.ml", line 18, characters 9-10:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    c :: s
If you ignore other surrounding code, try replacing
    x
with
    x; [[...]]
The actual replacement has type
    (unit * unit) list
within context
    fun a
      x ->
        (let (x', x'') = x in
            let (c, s) = a in
            (if (x; [[...]]) = [(), ()] then (c :: s; [[...]]) else
                ((c + x') + x'') / 10, (mod ((c + x') + x'') 10) :: s))
==============================
