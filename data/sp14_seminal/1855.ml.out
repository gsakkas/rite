------------------------------------------------------------------
File "1855.ml", line 3, characters 62-66:
This expression has type ('a -> 'a) -> 'a -> 'a but is here used with type
  ('a -> 'a) -> 'a
Relevant code: base
------------------------------------------------------------------
File "1855.ml", line 3, characters 36-41:
Try replacing
    fun g -> g
with
    fun _ g -> g
of type
    'b -> 'c -> 'c
within context
    let pipe fs =
    let f a x g = (g (a x)) in let base _ g = g in (List.fold_left f base  fs)
    ;; 
==============================
File "1855.ml", line 3, characters 45-59:
Try replacing
    List.fold_left
with
    f
of type
    (('d -> 'd) -> 'd -> ('d -> 'e) -> 'e) ->
    ('d -> 'd) -> (('d -> ('d -> 'e) -> 'e) -> 'f) -> 'f
within context
    let pipe fs = let f a x g = (g (a x)) in let base g = g in (f f base  fs) ;; 
==============================
File "1855.ml", line 3, characters 45-59:
Try replacing
    List.fold_left
with
    base
of type
    (('g -> 'g) -> 'g -> ('g -> 'h) -> 'h) ->
    ('g -> 'g) -> 'g -> ('g -> 'h) -> 'h
within context
    let pipe fs = let f a x g = (g (a x)) in let base g = g in (base f base  fs) ;; 
==============================
File "1855.ml", line 3, characters 16-17:
Try replacing
    g
with
    a
of type
    'i -> 'i
within context
    let f a x g = (a (a x)) in let base g = g in (List.fold_left f base  fs)
==============================
File "1855.ml", line 3, characters 40-41:
Try replacing
    g
with
    List.fold_left
of type
    ('j -> 'k -> 'j) -> 'j -> 'k list -> 'j
within context
    let pipe fs =
    let f a x g = (g (a x)) in
      let base g = List.fold_left in (List.fold_left f base  fs)
    ;; 
==============================
File "1855.ml", line 3, characters 40-41:
Try replacing
    g
with
    f
of type
    ('l -> 'm) -> 'l -> ('m -> 'n) -> 'n
within context
    let pipe fs =
    let f a x g = (g (a x)) in let base g = f in (List.fold_left f base  fs)
    ;; 
==============================
