------------------------------------------------------------------
File "1240.ml", line 25, characters 33-34:
This expression has type (int * int) list -> int * int -> int * int
but is here used with type (int * int) list -> int * int -> (int * int) list
Relevant code: f
------------------------------------------------------------------
File "1240.ml", line 25, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ((int * int) list -> int * int -> int * int) ->
    int * int -> ('a * 'b) list -> 'c * 'd
within context
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) :: t ->
                                                (((w + z) + y) / 10,
                                                      (mod ((w + y) + z) 10))
                                              | [] ->
                                                (0,
                                                      0)) in let base = 0, 0 in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
