------------------------------------------------------------------
File "0989.ml", line 3, characters 61-65:
This expression has type int but is here used with type 'a list -> 'b list
Relevant code: base
------------------------------------------------------------------
File "0989.ml", line 3, characters 39-40:
Try replacing
    3
with
    3; [[...]]
of type
    'c
within context
    let pipe fs =
    let f a x = (List.map x) in let base = 3; [[...]] in (List.fold_left f base  fs)
    ;; 
==============================
File "0989.ml", line 3, characters 59-60:
Try replacing
    f
with
    f; [[...]]
of type
    int -> 'd -> int
within context
    let pipe fs =
    let f a x = (List.map x) in
      let base = 3 in (List.fold_left (f; [[...]]) base  fs)
    ;; 
==============================
File "0989.ml", line 3, characters 61-65:
Try replacing
    base
with
    base; [[...]]
of type
    'e list -> 'f list
within context
    let pipe fs =
    let f a x = (List.map x) in
      let base = 3 in (List.fold_left f (base; [[...]])  fs)
    ;; 
==============================
File "0989.ml", line 3, characters 44-58:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('g -> ('h -> 'i) -> 'h list -> 'i list) -> int -> 'j -> 'k
within context
    let pipe fs =
    let f a x = (List.map x) in
      let base = 3 in ((List.fold_left; [[...]]) f base  fs)
    ;; 
==============================
File "0989.ml", line 3, characters 8-24:
Try replacing
    fun a x -> (List.map x)
with
    fun a x -> (List.map x); [[...]]
of type
    'l
within context
    let pipe fs =
    let f = fun a x -> (List.map x); [[...]] in
      let base = 3 in (List.fold_left f base  fs)
    ;; 
==============================
