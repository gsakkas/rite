------------------------------------------------------------------
File "0066.ml", line 3, characters 62-66:
This expression has type 'a -> 'a but is here used with type
  'a -> 'b -> 'c -> 'a
Relevant code: base
------------------------------------------------------------------
File "0066.ml", line 3, characters 12-16:
Try replacing
    fun x fn x a -> fn
with
    fun x x fn a -> fn
of type
    'd -> 'e -> 'f -> 'g -> 'f
within context
    let pipe fs =
    let f a x x fn a = fn in let base b = b in (List.fold_left f base  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 10-14:
Try replacing
    fun x fn x a -> fn
with
    fun fn x x a -> fn
of type
    'h -> 'i -> 'j -> 'k -> 'h
within context
    let pipe fs =
    let f a fn x x a = fn in let base b = b in (List.fold_left f base  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 12-16:
Try replacing
    fun fn x a -> fn
with
    fun x fn a -> fn
of type
    'l -> 'm -> 'n -> 'm
within context
    let pipe fs =
    let f a x x fn a = fn in let base b = b in (List.fold_left f base  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 10-14:
Try replacing
    fun a x fn x a -> fn
with
    fun a fn x x a -> fn
of type
    'o -> 'p -> 'q -> 'r -> 's -> 'p
within context
    let pipe fs =
    let f a fn x x a = fn in let base b = b in (List.fold_left f base  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 12-16:
Try replacing
    fun a x fn x a -> fn
with
    fun a x x fn a -> fn
of type
    't -> 'u -> 'v -> 'w -> 'x -> 'w
within context
    let pipe fs =
    let f a x x fn a = fn in let base b = b in (List.fold_left f base  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 36-41:
Try replacing
    fun b -> b
with
    fun _ b -> b
of type
    'y -> 'z -> 'z
within context
    let pipe fs =
    let f a x fn x a = fn in let base _ b = b in (List.fold_left f base  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 45-59:
Try replacing
    List.fold_left
with
    base
of type
    (('a1 -> 'a1) -> 'b1 -> 'c1 -> 'd1 -> 'e1 -> 'c1) ->
    ('a1 -> 'a1) -> 'b1 -> 'c1 -> 'd1 -> 'e1 -> 'c1
within context
    let pipe fs = let f a x fn x a = fn in let base b = b in (base f base  fs) ;; 
==============================
File "0066.ml", line 3, characters 45-59:
Try replacing
    List.fold_left
with
    f
of type
    ('f1 -> 'g1 -> 'h1 -> 'i1 -> 'j1 -> 'h1) ->
    ('k1 -> 'k1) -> 'l1 -> 'm1 -> 'n1 -> 'l1
within context
    let pipe fs = let f a x fn x a = fn in let base b = b in (f f base  fs) ;; 
==============================
File "0066.ml", line 3, characters 62-66:
Try replacing
    base
with
    f
of type
    ('o1 -> 'p1 -> 'q1) -> 'r1 -> 'q1 -> 'o1 -> 'p1 -> 'q1
within context
    let pipe fs =
    let f a x fn x a = fn in let base b = b in (List.fold_left f f  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 21-23:
Try replacing
    fn
with
    a
of type
    's1
within context
    fun a x fn x a -> a
==============================
File "0066.ml", line 3, characters 21-23:
Try replacing
    fn
with
    fs
of type
    't1 list
within context
    fun a x fn x a -> fs
==============================
File "0066.ml", line 3, characters 21-23:
Try replacing
    fn
with
    List.fold_left
of type
    ('u1 -> 'v1 -> 'u1) -> 'u1 -> 'v1 list -> 'u1
within context
    fun a x fn x a -> List.fold_left
==============================
File "0066.ml", line 3, characters 21-23:
Try replacing
    fn
with
    x
of type
    'w1
within context
    fun a x fn x a -> x
==============================
File "0066.ml", line 3, characters 40-41:
Try replacing
    b
with
    List.fold_left
of type
    ('x1 -> 'y1 -> 'x1) -> 'x1 -> 'y1 list -> 'x1
within context
    let pipe fs =
    let f a x fn x a = fn in
      let base b = List.fold_left in (List.fold_left f base  fs)
    ;; 
==============================
File "0066.ml", line 3, characters 40-41:
Try replacing
    b
with
    f
of type
    'z1 -> 'a2 -> 'b2 -> 'c2 -> 'd2 -> 'b2
within context
    let pipe fs =
    let f a x fn x a = fn in let base b = f in (List.fold_left f base  fs)
    ;; 
==============================
