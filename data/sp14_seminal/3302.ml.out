------------------------------------------------------------------
File "3302.ml", line 11, characters 38-42:
This expression has type (int * 'a) list but is here used with type
  ('b list * int list) list
Relevant code: args
------------------------------------------------------------------
File "3302.ml", line 3, characters 8-11:
Try replacing
    fun a x -> (match x with 
                | (k, v) -> (k, v))
with
    fun x a -> (match x with 
                | (k, v) -> (k, v))
of type
    'c * 'd -> 'e -> 'c * 'd
within context
    let bigMul l1 l2 = let f x a = (match x with 
                                    | (k, v) ->
                                      (k,
                                            v)) in let base = [], [0] in
      let args = let rec helper acc l1 l2 = (match l1 with 
                                             | [] -> acc
                                             | h :: t ->
                                               (helper
                                                   h, l2 :: acc (List.map (fun x -> x * 10) t)
                                                   l2)) in (helper
            [] (List.rev l1) l2) in let (_, res) = (List.fold_left f base  args) in res ;; 
==============================
File "3302.ml", line 9, characters 25-26:
Try replacing
    h
with
    t
of type
    int list * 'f
within context
    fun l2 -> (match l1 with 
               | [] -> acc
               | h :: t -> (helper t, l2 :: acc (List.map (fun x -> x * 10) t)  l2))
==============================
File "3302.ml", line 3, characters 20-21:
Try replacing
    x
with
    a
of type
    'g * 'h
within context
    fun l2 -> (let f a x = (match a with 
                            | (k, v) ->
                              (k,
                                    v)) in let base = [], [0] in
          let args = let rec helper acc l1 l2 = (match l1 with 
                                                 | [] -> acc
                                                 | h :: t ->
                                                   (helper
                                                       h, l2 :: acc
                                                       (List.map
                                                         (fun x -> x * 10) t)
                                                       l2)) in (helper
                [] (List.rev l1) l2) in let (_, res) = (List.fold_left f base  args) in res)
==============================
File "3302.ml", line 3, characters 39-40:
Try replacing
    k
with
    v
of type
    'i * 'i
within context
    let f a x = (match x with 
                 | (k, v) ->
                   (v,
                         v)) in let base = [], [0] in
      let args = let rec helper acc l1 l2 = (match l1 with 
                                             | [] -> acc
                                             | h :: t ->
                                               (helper
                                                   h, l2 :: acc (List.map (fun x -> x * 10) t)
                                                   l2)) in (helper
            [] (List.rev l1) l2) in let (_, res) = (List.fold_left f base  args) in res
==============================
