------------------------------------------------------------------
File "1307.ml", line 21, characters 35-39:
This expression has type 'a list * 'b list but is here used with type
  int list
Relevant code: base
------------------------------------------------------------------
File "1307.ml", line 21, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    'c list * 'd list -> 'e * 'f -> 'c list * 'd list
within context
    let f a x = (match x with 
                 | (h1, h2) -> (h1 + h2) / 10 :: (mod (h1 + h2) 10) :: a
                 | _ ->
                   a) in let base = [], [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "1307.ml", line 21, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list -> int * int -> int list) ->
    'g list * 'h list -> ('i * 'j) list -> 'k * 'l
within context
    let f a x = (match x with 
                 | (h1, h2) -> (h1 + h2) / 10 :: (mod (h1 + h2) 10) :: a
                 | _ ->
                   a) in let base = [], [] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "1307.ml", line 15, characters 10-112:
Try replacing
    fun a x -> (match x with 
                | (h1, h2) -> (h1 + h2) / 10 :: (mod (h1 + h2) 10) :: a
                | _ -> a)
with
    fun a x -> (match x with 
                | (h1, h2) -> (h1 + h2) / 10 :: (mod (h1 + h2) 10) :: a
                | _ -> a); [[...]]
of type
    'm
==============================
