------------------------------------------------------------------
File "2595.ml", line 23, characters 37-41:
This expression has type 'a list * 'b list but is here used with type
  int * int
Relevant code: base
------------------------------------------------------------------
File "2595.ml", line 23, characters 35-36:
Try replacing
    f
with
    f; [[...]]
of type
    'c list * 'd list -> 'e * 'f -> 'c list * 'd list
within context
    let f a x = let (a, b) = (List.hd x) in (List.hd a) + 1, (List.hd b) + 2 in
      let base = [], [] in
      let args = [l1, l2] in
      let (bar, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "2595.ml", line 23, characters 20-34:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('g -> (int list * int list) list -> int * int) ->
    'h list * 'i list -> ('j * 'k) list -> 'l * 'm
within context
    let f a x = let (a, b) = (List.hd x) in (List.hd a) + 1, (List.hd b) + 2 in
      let base = [], [] in
      let args = [l1, l2] in
      let (bar, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "2595.ml", line 19, characters 10-85:
Try replacing
    fun a x -> (let (a, b) = (List.hd x) in (List.hd a) + 1, (List.hd b) + 2)
with
    fun a x -> (let (a, b) = (List.hd x) in (List.hd a) + 1, (List.hd b) + 2);
    [[...]]
of type
    'n
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f =
              fun a
                x -> (let (a, b) = (List.hd x) in (List.hd a) + 1, (List.hd b) + 2);
              [[...]]
              in
              let base = [], [] in
              let args = [l1, l2] in
              let (bar, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
