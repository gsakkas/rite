------------------------------------------------------------------
File "0999.ml", line 2, characters 70-74:
This expression has type 'a -> 'a but is here used with type 'a -> 'b -> 'a
Relevant code: base
------------------------------------------------------------------
File "0999.ml", line 2, characters 24-27:
Try replacing
    fun x x a -> x
with
    fun x a x -> x
of type
    'c -> 'd -> 'e -> 'e
within context
    let pipe fs = let f a x a x = x in let base p = p in (List.fold_left f base  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 24-27:
Try replacing
    fun x a -> x
with
    fun a x -> x
of type
    'f -> 'g -> 'g
within context
    let pipe fs = let f a x a x = x in let base p = p in (List.fold_left f base  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 24-27:
Try replacing
    fun a x x a -> x
with
    fun a x a x -> x
of type
    'h -> 'i -> 'j -> 'k -> 'k
within context
    let pipe fs = let f a x a x = x in let base p = p in (List.fold_left f base  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 44-49:
Try replacing
    fun p -> p
with
    fun p _ -> p
of type
    'l -> 'm -> 'l
within context
    let pipe fs =
    let f a x x a = x in let base p _ = p in (List.fold_left f base  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 44-49:
Try replacing
    fun p -> p
with
    fun _ p -> p
of type
    'n -> 'o -> 'o
within context
    let pipe fs =
    let f a x x a = x in let base _ p = p in (List.fold_left f base  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 20-25:
Try replacing
    fun a x x a -> x
with
    fun x x a a -> x
of type
    'p -> 'q -> 'r -> 's -> 'q
within context
    let pipe fs = let f x x a a = x in let base p = p in (List.fold_left f base  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 53-69:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    't -> 'u list -> 't
within context
    let pipe fs =
    let f a x x a = x in let base p = p in (List.fold_left (f base fs))
    ;; 
==============================
File "0999.ml", line 2, characters 53-67:
Try replacing
    List.fold_left
with
    base
of type
    (('v -> 'v) -> 'w -> 'x -> 'y -> 'x) -> ('v -> 'v) -> 'w -> 'x -> 'y -> 'x
within context
    let pipe fs = let f a x x a = x in let base p = p in (base f base  fs) ;; 
==============================
File "0999.ml", line 2, characters 53-67:
Try replacing
    List.fold_left
with
    f
of type
    ('z -> 'a1 -> 'b1 -> 'c1 -> 'b1) -> ('d1 -> 'd1) -> 'e1 -> 'f1 -> 'e1
within context
    let pipe fs = let f a x x a = x in let base p = p in (f f base  fs) ;; 
==============================
File "0999.ml", line 2, characters 70-74:
Try replacing
    base
with
    f
of type
    ('g1 -> 'h1 -> 'g1) -> 'i1 -> 'g1 -> 'h1 -> 'g1
within context
    let pipe fs = let f a x x a = x in let base p = p in (List.fold_left f f  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 30-31:
Try replacing
    x
with
    fs
of type
    'j1 list
within context
    let f a x x a = fs in let base p = p in (List.fold_left f base  fs)
==============================
File "0999.ml", line 2, characters 30-31:
Try replacing
    x
with
    List.fold_left
of type
    ('k1 -> 'l1 -> 'k1) -> 'k1 -> 'l1 list -> 'k1
within context
    let f a x x a = List.fold_left in let base p = p in (List.fold_left f base  fs)
==============================
File "0999.ml", line 2, characters 30-31:
Try replacing
    x
with
    a
of type
    'm1
within context
    let f a x x a = a in let base p = p in (List.fold_left f base  fs)
==============================
File "0999.ml", line 2, characters 48-49:
Try replacing
    p
with
    f
of type
    'n1 -> 'o1 -> 'p1 -> 'q1 -> 'p1
within context
    let pipe fs = let f a x x a = x in let base p = f in (List.fold_left f base  fs)
    ;; 
==============================
File "0999.ml", line 2, characters 48-49:
Try replacing
    p
with
    List.fold_left
of type
    ('r1 -> 's1 -> 'r1) -> 'r1 -> 's1 list -> 'r1
within context
    let pipe fs =
    let f a x x a = x in let base p = List.fold_left in (List.fold_left f base  fs)
    ;; 
==============================
