
------------------------------------------------------------------
File "3351.ml", line 3, characters 2-323:
This expression has type int list but is here used with type int list list
Relevant code: match List.rev l with
  | [] -> []
  | h::t ->
      let rec helper acc v =
        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
      let rec adder x = match x with | [] -> [] | h::t -> h in
      adder
        ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
           [helper [] (h * i)])
------------------------------------------------------------------
File "3351.ml", line 8, characters 58-59:
Try replacing
    h
with
    t
of type
    'a list
within context
    (match (List.rev l) with 
     | [] -> []
     | h :: t ->
       (let rec helper acc v =
             (if v = 0 then acc else (helper (mod v 10) :: acc (v / 10)))
             in
             let rec adder x = (match x with 
                                | [] -> []
                                | h :: t ->
                                  t) in (adder
                 ((mulByDigit i (List.rev (List.map (fun x -> x * 10) t)))
                     @ [(helper [] (h * i))]))))
==============================
