------------------------------------------------------------------
File "3557.ml", line 7, characters 23-41:
This expression has type ('a * 'b) list -> bool but is here used with type
  bool
Relevant code: List.mem (h, seen)
------------------------------------------------------------------
Triaged the following locations:
And modified the following location:
File "3557.ml", line 7, characters 41-41:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (List.mem (h, seen))
with
    (List.mem (h, seen) [[...]])
The actual replacement has type
    bool
within context
    let rec helper (seen, rest) = (match rest with 
                                   | [] -> seen
                                   | h :: t ->
                                     (let seen' =
                                           (if (List.mem (h, seen) [[...]]) then
                                             (helper (h :: seen, t))
                                             else
                                             [[...]])
                                           in
                                           let rest' = (helper (seen', t)) in
                                           (helper
                                               (seen',
                                                   rest')))) in (List.rev
          (helper ([], l)))
==============================
Triaged the following locations:
And modified the following location:
File "3557.ml", line 7, characters 32-41:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (List.mem (h, seen))
with
    (List.mem h seen)
The actual replacement has type
    bool
within context
    let rec helper (seen, rest) = (match rest with 
                                   | [] -> seen
                                   | h :: t ->
                                     (let seen' =
                                           (if (List.mem h seen) then
                                             (helper (h :: seen, t))
                                             else
                                             [[...]])
                                           in
                                           let rest' = (helper (seen', t)) in
                                           (helper
                                               (seen',
                                                   rest')))) in (List.rev
          (helper ([], l)))
==============================
