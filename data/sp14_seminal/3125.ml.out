------------------------------------------------------------------
File "3125.ml", line 26, characters 35-39:
This expression has type int * 'a list but is here used with type int
Relevant code: base
------------------------------------------------------------------
File "3125.ml", line 26, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x = (match x with 
                 | (c, d :: t) ->
                   c + d) in let base = 0, [] in let args = (match l1 with 
                                                             | h :: t ->
                                                               [h, l2
                                                                     ]) in let
      (_, res)
      =
      (List.fold_left (f; [[...]]) base  args)
      in
      res
==============================
File "3125.ml", line 26, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('e -> int * int list -> int) -> int * 'f list -> ('g * 'h) list -> 'i * 'j
within context
    let f a x = (match x with 
                 | (c, d :: t) ->
                   c + d) in let base = 0, [] in let args = (match l1 with 
                                                             | h :: t ->
                                                               [h, l2
                                                                     ]) in let
      (_, res)
      =
      ((List.fold_left; [[...]]) f base  args)
      in
      res
==============================
File "3125.ml", line 23, characters 10-48:
Try replacing
    fun a x -> (match x with 
                | (c, d :: t) -> c + d)
with
    fun a x -> (match x with 
                | (c, d :: t) -> c + d); [[...]]
of type
    'k
within context
    fun l1 l2 -> (let add (l1, l2) = let f = fun a x -> (match x with 
                                                         | (c, d :: t) ->
                                                           c
                                                               +
                                                               d); [[...]] in let
              base
              =
              0, []
              in
              let args = (match l1 with 
                          | h :: t ->
                            [h, l2
                                  ]) in let (_, res) = (List.fold_left f base  args)
              in
              res in (removeZero (add (padZero l1 l2))))
==============================
