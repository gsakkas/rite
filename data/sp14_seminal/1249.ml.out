------------------------------------------------------------------
File "1249.ml", line 19, characters 48-54:
This expression has type int * int but is here used with type ('a * 'b) list
Relevant code: (0, 0)
------------------------------------------------------------------
File "1249.ml", line 19, characters 48-54:
Try replacing
    0, 0
with
    0, 0; [[...]]
of type
    (int * int) list
within context
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) ->
                                                ((w + z) / 10,
                                                      (mod (w + z) 10) ::
                                                          y)) in let base = 0, [] in
      let args = (List.rev ((List.combine l1 l2) @ (0, 0; [[...]]))) in
      let (_, res) = (List.fold_left f base  args) in res
==============================
File "1249.ml", line 19, characters 46-47:
Try replacing
    @
with
    @; [[...]]
of type
    ('c * 'd) list -> int * int -> 'e list
within context
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) ->
                                                ((w + z) / 10,
                                                      (mod (w + z) 10) ::
                                                          y)) in let base = 0, [] in
      let args = (List.rev ((List.combine l1 l2) @; [[...]] 0, 0)) in
      let (_, res) = (List.fold_left f base  args) in res
==============================
