------------------------------------------------------------------
File "0123.ml", line 16, characters 13-34:
This expression has type int but is here used with type int list
Relevant code: (add (padZero l1 l2))
------------------------------------------------------------------
File "0123.ml", line 15, characters 43-57:
Try replacing
    List.fold_left
with
    f
of type
    ('a -> 'b -> 'c) -> int * int -> ('d * 'e) list -> 'f * 'g
within context
    let f a x = (failwith "") in
      let base = 0, 0 in
      let args = [l1, l2] in let (_, res) = (f f base  args) in res
==============================
File "0123.ml", line 16, characters 2-12:
Try replacing
    removeZero
with
    =
of type
    int -> int -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x = (failwith "") in
        let base = 0, 0 in
        let args = [l1, l2] in let (_, res) = (List.fold_left f base  args) in res
      in
      (= (add (padZero l1 l2)))
    ;; 
==============================
File "0123.ml", line 16, characters 2-12:
Try replacing
    removeZero
with
    -
of type
    int -> int -> int
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x = (failwith "") in
        let base = 0, 0 in
        let args = [l1, l2] in let (_, res) = (List.fold_left f base  args) in res
      in
      (- (add (padZero l1 l2)))
    ;; 
==============================
File "0123.ml", line 16, characters 2-12:
Try replacing
    removeZero
with
    clone
of type
    int -> int -> int list
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x = (failwith "") in
        let base = 0, 0 in
        let args = [l1, l2] in let (_, res) = (List.fold_left f base  args) in res
      in
      (clone (add (padZero l1 l2)))
    ;; 
==============================
