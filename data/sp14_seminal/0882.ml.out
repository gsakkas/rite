------------------------------------------------------------------
File "0882.ml", line 4, characters 49-50:
This expression has type 'a -> ('b -> 'c) -> ('a -> 'b) -> 'c
but is here used with type 'a -> ('b -> 'c) -> 'a
Relevant code: f
------------------------------------------------------------------
File "0882.ml", line 4, characters 34-50:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    (('d -> 'd) -> 'e) -> 'f list -> ('d -> 'd) -> 'e
within context
    let pipe fs =
    let f a x f' = (x (f' a)) in let base y = y in (List.fold_left (f base fs))
    ;; 
==============================
File "0882.ml", line 3, characters 10-27:
Try replacing
    fun x f' -> (x (f' a))
with
    fun (x, f') -> (x (f' a))
of type
    ('g -> 'h) * ('i -> 'g) -> 'h
within context
    let pipe fs =
    let f a (x, f') = (x (f' a)) in let base y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "0882.ml", line 4, characters 34-48:
Try replacing
    List.fold_left
with
    f
of type
    ('j -> ('k -> 'l) -> ('j -> 'k) -> 'l) ->
    ('m -> 'm) -> (('j -> ('k -> 'l) -> ('j -> 'k) -> 'l) -> 'm) -> 'm
within context
    let pipe fs = let f a x f' = (x (f' a)) in let base y = y in (f f base  fs) ;; 
==============================
File "0882.ml", line 4, characters 34-48:
Try replacing
    List.fold_left
with
    base
of type
    (('n -> 'n) -> ('o -> 'p) -> (('n -> 'n) -> 'o) -> 'p) ->
    ('n -> 'n) -> ('o -> 'p) -> (('n -> 'n) -> 'o) -> 'p
within context
    let pipe fs = let f a x f' = (x (f' a)) in let base y = y in (base f base  fs)
    ;; 
==============================
File "0882.ml", line 3, characters 37-38:
Try replacing
    a
with
    List.fold_left
of type
    ('q -> 'r -> 'q) -> 'q -> 'r list -> 'q
within context
    fun a x f' -> (x (f' List.fold_left))
==============================
