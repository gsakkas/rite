------------------------------------------------------------------
File "0605.ml", line 17, characters 46-58:
This expression has type int but is here used with type int list
Relevant code: (sum mod 10)
------------------------------------------------------------------
Triaged the following locations:
File "0605.ml", line 18, characters 4-120:
And modified the following location:
File "0605.ml", line 17, characters 46-58:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (mod sum 10)
with
    (mod sum 10); [[...]]
The actual replacement has type
    int list
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x c =
              let (s, t) = x in
                let sum = (c + s) + t in sum / 10 :: (mod sum 10); [[...]] :: a
              in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "0605.ml", line 18, characters 4-120:
And modified the following location:
File "0605.ml", line 17, characters 31-59:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    sum / 10 :: (mod sum 10)
with
    sum / 10, (mod sum 10)
The actual replacement has type
    int * int
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x c =
              let (s, t) = x in let sum = (c + s) + t in sum / 10, (mod sum 10) :: a
              in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "0605.ml", line 18, characters 4-120:
And modified the following location:
File "0605.ml", line 15, characters 4-229:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x c =
      let (s, t) = x in let sum = (c + s) + t in sum / 10 :: (mod sum 10) :: a
      in
      let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'a
==============================
