------------------------------------------------------------------
File "0904.ml", line 16, characters 53-57:
This expression has type 'a list * 'b list but is here used with type int
Relevant code: base
------------------------------------------------------------------
File "0904.ml", line 16, characters 51-52:
Try replacing
    f
with
    f; [[...]]
of type
    'c list * 'd list -> int -> 'c list * 'd list
within context
    let f a x = a + 1 in
      let base = [], [] in
      let args = [0] in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0904.ml", line 14, characters 10-21:
Try replacing
    fun a x -> a + 1
with
    fun a x -> a + 1; [[...]]
of type
    'e
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f = fun a x -> a + 1; [[...]] in
              let base = [], [] in
              let args = [0] in let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
File "0904.ml", line 16, characters 36-50:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int -> 'f -> int) -> 'g list * 'h list -> int list -> 'i * 'j
within context
    let f a x = a + 1 in
      let base = [], [] in
      let args = [0] in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
