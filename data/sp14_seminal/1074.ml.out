------------------------------------------------------------------
File "1074.ml", line 24, characters 13-34:
This expression has type int but is here used with type int list
Relevant code: (add (padZero l1 l2))
------------------------------------------------------------------
File "1074.ml", line 24, characters 2-12:
Try replacing
    removeZero
with
    mod
of type
    int -> int -> int
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let sum = (fst a) + (mod ((fst x) + (snd x)) 10) in sum / 10, (mod sum 10)
        in
        let base = 0, 0 in
        let args = (List.combine l1 l2) in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (mod (add (padZero l1 l2)))
    ;; 
==============================
File "1074.ml", line 24, characters 2-12:
Try replacing
    removeZero
with
    -
of type
    int -> int -> int
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let sum = (fst a) + (mod ((fst x) + (snd x)) 10) in sum / 10, (mod sum 10)
        in
        let base = 0, 0 in
        let args = (List.combine l1 l2) in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (- (add (padZero l1 l2)))
    ;; 
==============================
File "1074.ml", line 24, characters 2-12:
Try replacing
    removeZero
with
    <
of type
    int -> int -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let sum = (fst a) + (mod ((fst x) + (snd x)) 10) in sum / 10, (mod sum 10)
        in
        let base = 0, 0 in
        let args = (List.combine l1 l2) in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (< (add (padZero l1 l2)))
    ;; 
==============================
File "1074.ml", line 24, characters 2-12:
Try replacing
    removeZero
with
    /
of type
    int -> int -> int
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let sum = (fst a) + (mod ((fst x) + (snd x)) 10) in sum / 10, (mod sum 10)
        in
        let base = 0, 0 in
        let args = (List.combine l1 l2) in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (/ (add (padZero l1 l2)))
    ;; 
==============================
File "1074.ml", line 24, characters 2-12:
Try replacing
    removeZero
with
    =
of type
    int -> int -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let sum = (fst a) + (mod ((fst x) + (snd x)) 10) in sum / 10, (mod sum 10)
        in
        let base = 0, 0 in
        let args = (List.combine l1 l2) in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (= (add (padZero l1 l2)))
    ;; 
==============================
File "1074.ml", line 24, characters 2-12:
Try replacing
    removeZero
with
    +
of type
    int -> int -> int
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let sum = (fst a) + (mod ((fst x) + (snd x)) 10) in sum / 10, (mod sum 10)
        in
        let base = 0, 0 in
        let args = (List.combine l1 l2) in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (+ (add (padZero l1 l2)))
    ;; 
==============================
