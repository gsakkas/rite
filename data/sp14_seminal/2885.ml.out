------------------------------------------------------------------
File "2885.ml", line 26, characters 48-49:
This expression has type int but is here used with type float
Relevant code: 1
------------------------------------------------------------------
Triaged the following locations:
File "2885.ml", line 26, characters 66-67:
And modified the following location:
File "2885.ml", line 26, characters 48-49:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    0
If you ignore other surrounding code, try replacing
    1
with
    1; [[...]]
The actual replacement has type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Log e1 ->
                                (let b = (eval (e1, x, y)) in
                                      (if b > (1; [[...]]) then (log b) else
                                          (0; [[...]])))) ;; 
==============================
Triaged the following locations:
File "2885.ml", line 26, characters 66-67:
And modified the following location:
File "2885.ml", line 26, characters 46-47:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    0
If you ignore other surrounding code, try replacing
    >
with
    >; [[...]]
The actual replacement has type
    float -> int -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Log e1 ->
                                (let b = (eval (e1, x, y)) in
                                      (if (b >; [[...]] 1) then (log b) else
                                          (0; [[...]])))) ;; 
==============================
Triaged the following locations:
File "2885.ml", line 26, characters 66-67:
And modified the following location:
File "2885.ml", line 26, characters 44-45:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    0
If you ignore other surrounding code, try replacing
    b
with
    b; [[...]]
The actual replacement has type
    int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Log e1 ->
                                (let b = (eval (e1, x, y)) in
                                      (if (b; [[...]]) > 1 then (log b) else
                                          (0; [[...]])))) ;; 
==============================
Triaged the following locations:
File "2885.ml", line 18, characters 15-44:
File "2885.ml", line 19, characters 17-46:
File "2885.ml", line 20, characters 23-70:
File "2885.ml", line 21, characters 21-59:
File "2885.ml", line 23, characters 6-100:
And modified the following location:
File "2885.ml", line 26, characters 55-58:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    log
with
    log; [[...]]
The actual replacement has type
    int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Log e1 ->
                                (let b = (eval (e1, x, y)) in
                                      (if b > 1 then ((log; [[...]]) b) else
                                          0))) ;; 
==============================
