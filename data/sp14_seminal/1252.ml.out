------------------------------------------------------------------
File "1252.ml", line 20, characters 35-39:
This expression has type 'a list but is here used with type int * int list
Relevant code: base
------------------------------------------------------------------
File "1252.ml", line 18, characters 15-17:
Try replacing
    []
with
    []; [[...]]
of type
    'b
within context
    fun l2 ->
      (let add (l1, l2) = let f a x = let z = (fst x) + (snd x) in (match a with 
                                                                    | (w, y) ->
                                                                      ((w + z) / 10,
                                                                            (mod
                                                                                  (w
                                                                                      +
                                                                                      z)
                                                                                  10)
                                                                                ::
                                                                                y)) in let
            base
            =
            []; [[...]]
            in
            let args = (List.rev (List.combine l1 l2)) in
            let (_, res) = (List.fold_left f base  args) in
            res in (add (padZero l1 l2)))
==============================
File "1252.ml", line 20, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int * int list
within context
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) ->
                                                ((w + z) / 10,
                                                      (mod (w + z) 10) ::
                                                          y)) in let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "1252.ml", line 20, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int * int -> int * int list) ->
    'c list -> ('d * 'e) list -> 'f * 'g
within context
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) ->
                                                ((w + z) / 10,
                                                      (mod (w + z) 10) ::
                                                          y)) in let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
