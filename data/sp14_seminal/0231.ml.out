------------------------------------------------------------------
File "0231.ml", line 45, characters 18-20:
This expression has type unit but is here used with type
  (int -> int -> int) * int
Relevant code: ()
------------------------------------------------------------------
File "0231.ml", line 45, characters 12-17:
Try replacing
    build
with
    buildY
of type
    unit -> expr
within context
    fun (rand, depth) ->
      (if depth = 0 then
        (let result = (rand 0 1) in
            (if result = 0 then (buildX ()) else (buildY ())))
        else
        (let result = (rand 0 6) in (match result with 
                                     | 0 -> (buildX ())
                                     | 1 -> (buildY ())
                                     | 2 -> (buildSine (build (rand, depth - 1)))
                                     | 3 -> (buildCosine (build (rand, depth - 1)))
                                     | 4 ->
                                       (buildAverage
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1))))
                                     | 5 ->
                                       (buildTimes
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1))))
                                     | 6 ->
                                       (buildThresh
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1))))
                                     | _ -> (buildY ()))))
==============================
File "0231.ml", line 45, characters 12-17:
Try replacing
    build
with
    buildX
of type
    unit -> expr
within context
    fun (rand, depth) ->
      (if depth = 0 then
        (let result = (rand 0 1) in
            (if result = 0 then (buildX ()) else (buildY ())))
        else
        (let result = (rand 0 6) in (match result with 
                                     | 0 -> (buildX ())
                                     | 1 -> (buildY ())
                                     | 2 -> (buildSine (build (rand, depth - 1)))
                                     | 3 -> (buildCosine (build (rand, depth - 1)))
                                     | 4 ->
                                       (buildAverage
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1))))
                                     | 5 ->
                                       (buildTimes
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1))))
                                     | 6 ->
                                       (buildThresh
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1))))
                                     | _ -> (buildX ()))))
==============================
