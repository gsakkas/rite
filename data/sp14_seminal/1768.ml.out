------------------------------------------------------------------
File "1768.ml", line 24, characters 33-34:
This expression has type int * int -> int * int -> bool
but is here used with type int * int -> int * int -> int * int
Relevant code: f
------------------------------------------------------------------
File "1768.ml", line 24, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list -> 'b * 'c -> int * 'a list
within context
    let f a x =
      let (i, j) = x in let (s, t) = a in ((i + j) / 10, (mod (i + j) 10)) = a
      in
      let base = 0, [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "1768.ml", line 24, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int -> int * int -> bool) ->
    int * 'd list -> ('e * 'f) list -> 'g * 'h
within context
    let f a x =
      let (i, j) = x in let (s, t) = a in ((i + j) / 10, (mod (i + j) 10)) = a
      in
      let base = 0, [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "1768.ml", line 19, characters 10-100:
Try replacing
    fun a
      x ->
        (let (i, j) = x in let (s, t) = a in ((i + j) / 10, (mod (i + j) 10)) = a)
with
    fun a
      x ->
        (let (i, j) = x in let (s, t) = a in ((i + j) / 10, (mod (i + j) 10)) = a);
    [[...]]
of type
    'i
==============================
