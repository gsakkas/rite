------------------------------------------------------------------
File "1897.ml", line 17, characters 31-32:
This expression has type expr but is here used with type expr * 'a * 'a
Relevant code: e
------------------------------------------------------------------
Triaged the following locations:
File "1897.ml", line 18, characters 16-36:
File "1897.ml", line 19, characters 23-52:
File "1897.ml", line 20, characters 21-43:
File "1897.ml", line 22, characters 6-56:
And modified the following location:
File "1897.ml", line 17, characters 31-32:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e
with
    e; [[...]]
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e; [[...]]))))
                              | Cosine e -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1897.ml", line 18, characters 16-36:
File "1897.ml", line 19, characters 23-52:
File "1897.ml", line 20, characters 21-43:
File "1897.ml", line 22, characters 6-56:
And modified the following location:
File "1897.ml", line 17, characters 26-30:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval; [[...]]
The actual replacement has type
    expr -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> (sin (pi *. ((eval; [[...]]) e)))
                              | Cosine e -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1897.ml", line 17, characters 14-34:
File "1897.ml", line 19, characters 23-52:
File "1897.ml", line 20, characters 21-43:
File "1897.ml", line 22, characters 6-56:
And modified the following location:
File "1897.ml", line 18, characters 33-34:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e
with
    e; [[...]]
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> [[...other program...]]
                              | Cosine e -> (cos (pi *. (eval (e; [[...]]))))
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1897.ml", line 17, characters 14-34:
File "1897.ml", line 19, characters 23-52:
File "1897.ml", line 20, characters 21-43:
File "1897.ml", line 22, characters 6-56:
And modified the following location:
File "1897.ml", line 18, characters 28-32:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval; [[...]]
The actual replacement has type
    expr -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> [[...other program...]]
                              | Cosine e -> (cos (pi *. ((eval; [[...]]) e)))
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
