------------------------------------------------------------------
File "0021.ml", line 25, characters 63-67:
This expression has type 'a * 'b but is here used with type 'c list
Relevant code: args
------------------------------------------------------------------
File "0021.ml", line 25, characters 63-67:
Try replacing
    args
with
    args; [[...]]
of type
    'd list
within context
    let f a x = (match a with 
                 | (carry, result) ->
                   (0,
                         carry ::
                             result)) in let base = 0, [] in
      let args = l1, l2 in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "0021.ml", line 25, characters 15-23:
Try replacing
    l1, l2
with
    l1, l2; [[...]]
of type
    'e
within context
    let add (l1, l2) = let f a x = (match a with 
                                    | (carry, result) ->
                                      (0,
                                            carry ::
                                                result)) in let base = 0, [] in
        let args = l1, l2; [[...]] in
        let (_, res) = (List.fold_left f base  args) in
        res in (removeZero (add (padZero l1 l2)))
==============================
File "0021.ml", line 25, characters 41-55:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('f * 'f list -> 'g -> int * 'f list) -> int * 'h list -> 'i * 'j -> 'k * 'l
within context
    let f a x = (match a with 
                 | (carry, result) ->
                   (0,
                         carry ::
                             result)) in let base = 0, [] in
      let args = l1, l2 in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
