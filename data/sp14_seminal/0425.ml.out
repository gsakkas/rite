------------------------------------------------------------------
File "0425.ml", line 75, characters 8-92:
This expression has type expr but is here used with type expr * expr
Relevant code: (buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1)))))
------------------------------------------------------------------
File "0425.ml", line 74, characters 6-16:
Try replacing
    buildTimes
with
    buildSine
of type
    expr -> expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 3 then (buildX ()) else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               (buildSine (build (rand, depth - 1)))
                                               else
                                               (buildCosine
                                                 (build (rand, depth - 1)))))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (build (rand, depth - 1))))
                                               else
                                               (buildTimes
                                                 ((buildCosine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (build (rand, depth - 1))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildSine
                                         (buildAverage
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
File "0425.ml", line 74, characters 6-16:
Try replacing
    buildTimes
with
    buildCosine
of type
    expr -> expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 3 then (buildX ()) else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               (buildSine (build (rand, depth - 1)))
                                               else
                                               (buildCosine
                                                 (build (rand, depth - 1)))))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (build (rand, depth - 1))))
                                               else
                                               (buildTimes
                                                 ((buildCosine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (build (rand, depth - 1))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildCosine
                                         (buildAverage
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
