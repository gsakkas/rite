------------------------------------------------------------------
File "3157.ml", line 26, characters 40-44:
This expression has type ('a * 'b) list but is here used with type
  (int * int) list list
Relevant code: args
------------------------------------------------------------------
File "3157.ml", line 26, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'c list -> 'd * 'e -> int * 'c list
within context
    let f a x = (match x with 
                 | (d1, d2) :: ds ->
                   (d1 + d2,
                         [])) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "3157.ml", line 26, characters 40-44:
Try replacing
    args
with
    args; [[...]]
of type
    (int * int) list list
within context
    let f a x = (match x with 
                 | (d1, d2) :: ds ->
                   (d1 + d2,
                         [])) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "3157.ml", line 26, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('f -> (int * int) list -> int * 'g list) ->
    int * 'h list -> ('i * 'j) list -> 'k * 'l
within context
    let f a x = (match x with 
                 | (d1, d2) :: ds ->
                   (d1 + d2,
                         [])) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "3157.ml", line 25, characters 15-44:
Try replacing
    (List.rev (List.combine l1 l2))
with
    (List.rev (List.combine l1 l2)); [[...]]
of type
    'm
within context
    let add (l1, l2) = let f a x = (match x with 
                                    | (d1, d2) :: ds ->
                                      (d1 + d2,
                                            [])) in let base = 0, [] in
        let args = (List.rev (List.combine l1 l2)); [[...]] in
        let (_, res) = (List.fold_left f base  args) in
        res in (removeZero (add (padZero l1 l2)))
==============================
File "3157.ml", line 23, characters 10-61:
Try replacing
    fun a x -> (match x with 
                | (d1, d2) :: ds -> (d1 + d2, []))
with
    fun a x -> (match x with 
                | (d1, d2) :: ds -> (d1 + d2, [])); [[...]]
of type
    'n
within context
    fun l1 l2 -> (let add (l1, l2) = let f = fun a x -> (match x with 
                                                         | (d1, d2) :: ds ->
                                                           (d1 + d2,
                                                                 [])); [[...]] in let
              base
              =
              0, []
              in
              let args = (List.rev (List.combine l1 l2)) in
              let (_, res) = (List.fold_left f base  args) in
              res in (removeZero (add (padZero l1 l2))))
==============================
