------------------------------------------------------------------
File "1761.ml", line 23, characters 33-34:
This expression has type int -> int * int -> int * int
but is here used with type int -> int * int -> int
Relevant code: f
------------------------------------------------------------------
File "1761.ml", line 23, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list -> 'b * 'c -> int * 'a list
within context
    let f a x = let (i, j) = x in ((i + j) + a) / 10, (mod ((i + j) + a) 10) in
      let base = 0, [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "1761.ml", line 23, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int -> int * int -> int * int) -> int * 'd list -> ('e * 'f) list -> 'g * 'h
within context
    let f a x = let (i, j) = x in ((i + j) + a) / 10, (mod ((i + j) + a) 10) in
      let base = 0, [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "1761.ml", line 19, characters 10-85:
Try replacing
    fun a x -> (let (i, j) = x in ((i + j) + a) / 10, (mod ((i + j) + a) 10))
with
    fun a x -> (let (i, j) = x in ((i + j) + a) / 10, (mod ((i + j) + a) 10));
    [[...]]
of type
    'i
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f =
              fun a
                x -> (let (i, j) = x in ((i + j) + a) / 10, (mod ((i + j) + a) 10));
              [[...]]
              in
              let base = 0, [] in
              let args = (List.combine (List.rev l1) (List.rev l2)) in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
