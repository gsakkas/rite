------------------------------------------------------------------
File "3128.ml", line 27, characters 18-33:
This expression has type int list * int list but is here used with type
  int list * 'a list list
Relevant code: (padZero l1 l2)
------------------------------------------------------------------
File "3128.ml", line 27, characters 18-33:
Try replacing
    (padZero l1 l2)
with
    (padZero l1 l2); [[...]]
of type
    int list * int list list
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match x with 
                                                  | (c, d :: t) ->
                                                    (c,
                                                          d)) in let base = 0, [] in
              let args = (match l1 with 
                          | h :: t ->
                            [h, l2
                                  ]) in let (_, res) = (List.fold_left f base  args)
              in
              res in (removeZero (add ((padZero l1 l2); [[...]]))))
==============================
File "3128.ml", line 27, characters 14-17:
Try replacing
    add
with
    add; [[...]]
of type
    int list * int list -> int list
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match x with 
                                                  | (c, d :: t) ->
                                                    (c,
                                                          d)) in let base = 0, [] in
              let args = (match l1 with 
                          | h :: t ->
                            [h, l2
                                  ]) in let (_, res) = (List.fold_left f base  args)
              in
              res in (removeZero ((add; [[...]]) (padZero l1 l2))))
==============================
File "3128.ml", line 22, characters 10-202:
Try replacing
    fun (l1, l2) -> (let f a x = (match x with 
                                  | (c, d :: t) ->
                                    (c,
                                          d)) in let base = 0, [] in
          let args = (match l1 with 
                      | h :: t ->
                        [h, l2
                              ]) in let (_, res) = (List.fold_left f base  args) in
          res)
with
    fun (l1, l2) -> (let f a x = (match x with 
                                  | (c, d :: t) ->
                                    (c,
                                          d)) in let base = 0, [] in
          let args = (match l1 with 
                      | h :: t ->
                        [h, l2
                              ]) in let (_, res) = (List.fold_left f base  args) in
          res); [[...]]
of type
    'b
==============================
