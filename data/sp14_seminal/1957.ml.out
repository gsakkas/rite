------------------------------------------------------------------
File "1957.ml", line 9, characters 16-25:
This function is applied to too many arguments,
maybe you forgot a `;'
Relevant code: mulHelper
------------------------------------------------------------------
File "1957.ml", line 9, characters 26-34:
Try replacing
    (mulHelper List.rev 0 :: l)
with
    (mulHelper 0 :: l)
of type
    int * int list
within context
    let rec mulByDigit i l = let rec mulHelper l' = (match l' with 
                                                     | [] -> (0, [])
                                                     | h :: t ->
                                                       (let (carry, rest) =
                                                             (mulHelper t)
                                                             in
                                                             let prod =
                                                             i * h + carry
                                                             in
                                                             prod / 10,
                                                                 (mod prod 10) ::
                                                                     rest)) in let
      (_, ans)
      =
      (mulHelper 0 :: l)
      in
      ans ;; 
==============================
File "1957.ml", line 9, characters 16-34:
Try replacing
    (mulHelper List.rev 0 :: l)
with
    (mulHelper (List.rev 0 :: l))
of type
    int * int list
within context
    let rec mulByDigit i l = let rec mulHelper l' = (match l' with 
                                                     | [] -> (0, [])
                                                     | h :: t ->
                                                       (let (carry, rest) =
                                                             (mulHelper t)
                                                             in
                                                             let prod =
                                                             i * h + carry
                                                             in
                                                             prod / 10,
                                                                 (mod prod 10) ::
                                                                     rest)) in let
      (_, ans)
      =
      (mulHelper (List.rev 0 :: l))
      in
      ans ;; 
==============================
