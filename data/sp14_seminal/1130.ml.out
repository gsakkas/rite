------------------------------------------------------------------
File "1130.ml", line 30, characters 9-33:
This expression is not a function, it cannot be applied
Relevant code: (sqrt (eval (e1, x, x)))
------------------------------------------------------------------
File "1130.ml", line 30, characters 9-33:
Try replacing
    (sqrt (eval (e1, x, x)))
with
    (sqrt (eval (e1, x, x))); [[...]]
of type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | SquareRoot e' -> (sqrt (eval (e', x, y)))
                              | FunckyRoot (e1, e2, e3) ->
                                (sqrt
                                    (((sqrt (eval (e1, x, x))); [[...]])
                                      (sqrt (eval (e2, x, y))) (sqrt (eval (e3, y, y)))))) ;; 
==============================
