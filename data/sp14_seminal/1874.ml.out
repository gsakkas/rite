------------------------------------------------------------------
File "1874.ml", line 31, characters 15-17:
This expression has type expr but is here used with type expr * float * float
Relevant code: e1
------------------------------------------------------------------
Triaged the following locations:
File "1874.ml", line 31, characters 9-30:
File "1874.ml", line 31, characters 49-60:
And modified the following location:
File "1874.ml", line 31, characters 41-43:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e3
with
    e3; [[...]]
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Acossin (e1, e2) ->
                                ((((acos (eval (e1, x, y)))
                                              *. (asin (eval (e2, x, y))))
                                          *. 2.0)
                                      /. (pi *. pi))
                              | Crazy (e1, e2, e3) ->
                                (if [[...other program...]] then
                                    (eval (e3; [[...]]))
                                    else
                                    [[...other program...]])) ;; 
==============================
Triaged the following locations:
File "1874.ml", line 31, characters 9-30:
File "1874.ml", line 31, characters 49-60:
And modified the following location:
File "1874.ml", line 31, characters 36-40:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval; [[...]]
The actual replacement has type
    expr -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Acossin (e1, e2) ->
                                ((((acos (eval (e1, x, y)))
                                              *. (asin (eval (e2, x, y))))
                                          *. 2.0)
                                      /. (pi *. pi))
                              | Crazy (e1, e2, e3) ->
                                (if [[...other program...]] then
                                    ((eval; [[...]]) e3)
                                    else
                                    [[...other program...]])) ;; 
==============================
