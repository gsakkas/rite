------------------------------------------------------------------
File "2591.ml", line 22, characters 42-46:
This expression has type ('a * 'b) list but is here used with type int list
Relevant code: args
------------------------------------------------------------------
File "2591.ml", line 22, characters 35-36:
Try replacing
    f
with
    f; [[...]]
of type
    'c list * 'd list -> 'e * 'f -> 'c list * 'd list
within context
    let f a x = [x + 1], [x + 2] in
      let base = [], [] in
      let args = [l1, l2] in
      let (bar, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "2591.ml", line 22, characters 42-46:
Try replacing
    args
with
    args; [[...]]
of type
    int list
within context
    let f a x = [x + 1], [x + 2] in
      let base = [], [] in
      let args = [l1, l2] in
      let (bar, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "2591.ml", line 21, characters 15-25:
Try replacing
    [l1, l2]
with
    [l1, l2]; [[...]]
of type
    'g
within context
    let add (l1, l2) =
      let f a x = [x + 1], [x + 2] in
        let base = [], [] in
        let args = [l1, l2]; [[...]] in
        let (bar, res) = (List.fold_left f base  args) in res
      in
      (removeZero (add (padZero l1 l2)))
==============================
File "2591.ml", line 22, characters 20-34:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('h -> int -> int list * int list) ->
    'i list * 'j list -> ('k * 'l) list -> 'm * 'n
within context
    let f a x = [x + 1], [x + 2] in
      let base = [], [] in
      let args = [l1, l2] in
      let (bar, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "2591.ml", line 19, characters 10-34:
Try replacing
    fun a x -> ([x + 1], [x + 2])
with
    fun a x -> ([x + 1], [x + 2]); [[...]]
of type
    'o
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f = fun a x -> ([x + 1], [x + 2]); [[...]] in
              let base = [], [] in
              let args = [l1, l2] in
              let (bar, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
