------------------------------------------------------------------
File "0596.ml", line 19, characters 38-46:
This expression has type 'a * 'b but is here used with type 'c list
Relevant code: (l1, l2)
------------------------------------------------------------------
Triaged the following locations:
File "0596.ml", line 20, characters 4-51:
And modified the following location:
File "0596.ml", line 19, characters 38-46:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (List.combine (l1, l2))
with
    (List.combine l1 l2)
The actual replacement has type
    ('d * 'e) list
within context
    let add (l1, l2) =
      let f a x c =
        let (s, t) = x in let sum = (c + s) + t in sum / 10, (mod sum 10) :: a
        in
        let base = 0, [0] in
        let args = (List.rev (List.combine l1 l2)) in [[...other program...]]
      in
      (removeZero (add (padZero l1 l2)))
==============================
Triaged the following locations:
File "0596.ml", line 20, characters 4-51:
And modified the following location:
File "0596.ml", line 19, characters 25-37:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    List.combine
with
    List.combine; [[...]]
The actual replacement has type
    'f * 'g -> 'h list
within context
    let add (l1, l2) =
      let f a x c =
        let (s, t) = x in let sum = (c + s) + t in sum / 10, (mod sum 10) :: a
        in
        let base = 0, [0] in
        let args = (List.rev ((List.combine; [[...]]) (l1, l2))) in
        [[...other program...]]
      in
      (removeZero (add (padZero l1 l2)))
==============================
