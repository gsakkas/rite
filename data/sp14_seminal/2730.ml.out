------------------------------------------------------------------
File "2730.ml", line 49, characters 46-50:
This expression has type int list * int but is here used with type
  int list * int list
Relevant code: base
------------------------------------------------------------------
File "2730.ml", line 49, characters 44-45:
Try replacing
    f
with
    f; [[...]]
of type
    'a list * int -> 'b -> 'a list * int
within context
    let f a x = (match a with 
                 | (b, c) ->
                   (b @ [0],
                         (bigAdd
                           ((mulByDigit x l2) @ b)
                           c))) in let base = [], 0 in
      let args = l1 in let res = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "2730.ml", line 49, characters 46-50:
Try replacing
    base
with
    base; [[...]]
of type
    int list * int list
within context
    let f a x = (match a with 
                 | (b, c) ->
                   (b @ [0],
                         (bigAdd
                           ((mulByDigit x l2) @ b)
                           c))) in let base = [], 0 in
      let args = l1 in let res = (List.fold_left f (base; [[...]])  args) in res
==============================
File "2730.ml", line 48, characters 13-20:
Try replacing
    [], 0
with
    [], 0; [[...]]
of type
    'c
within context
    let bigMul l1 l2 = let f a x = (match a with 
                                    | (b, c) ->
                                      (b @ [0],
                                            (bigAdd
                                              ((mulByDigit x l2) @ b)
                                              c))) in let base = [], 0; [[...]] in
      let args = l1 in let res = (List.fold_left f base  args) in res ;; 
==============================
File "2730.ml", line 49, characters 29-43:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list * int list -> int -> int list * int list) ->
    'd list * int -> 'e -> 'f
within context
    let f a x = (match a with 
                 | (b, c) ->
                   (b @ [0],
                         (bigAdd
                           ((mulByDigit x l2) @ b)
                           c))) in let base = [], 0 in
      let args = l1 in let res = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "2730.ml", line 46, characters 8-89:
Try replacing
    fun a x -> (match a with 
                | (b, c) -> (b @ [0], (bigAdd ((mulByDigit x l2) @ b) c)))
with
    fun a x -> (match a with 
                | (b, c) -> (b @ [0], (bigAdd ((mulByDigit x l2) @ b) c))); [[...]]
of type
    'g
within context
    let bigMul l1 l2 = let f = fun a x -> (match a with 
                                           | (b, c) ->
                                             (b @ [0],
                                                   (bigAdd
                                                     ((mulByDigit x l2) @ b)
                                                     c))); [[...]] in let base =
      [], 0
      in
      let args = l1 in let res = (List.fold_left f base  args) in res ;; 
==============================
