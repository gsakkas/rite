------------------------------------------------------------------
File "2982.ml", line 5, characters 61-71:
This expression has type int list but is here used with type
  'a list -> 'a list
Relevant code: app [n] []
------------------------------------------------------------------
File "2982.ml", line 5, characters 61-71:
Try replacing
    (app [n] [])
with
    (app [n] []); [[...]]
of type
    int list -> int list
within context
    let rec digitsOfInt n =
    (if (n >= 10) then (app (digitsOfInt (n / 10) [(mod n 10)])) else
      ((app [n] []); [[...]]))
    ;; 
==============================
Triaged the following locations:
File "2982.ml", line 5, characters 18-21:
And modified the following location:
File "2982.ml", line 5, characters 23-34:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    app
If you ignore other surrounding code, try replacing
    digitsOfInt
with
    digitsOfInt; [[...]]
The actual replacement has type
    int -> int list -> 'b
within context
    let rec digitsOfInt n =
    (if (n >= 10) then
      ((app; [[...]]) ((digitsOfInt; [[...]]) (n / 10) [(mod n 10)]))
      else
      (app [n] []))
    ;; 
==============================
Triaged the following locations:
File "2982.ml", line 5, characters 18-21:
And modified the following location:
File "2982.ml", line 5, characters 44-54:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    app
If you ignore other surrounding code, try replacing
    (digitsOfInt (n / 10) [(mod n 10)])
with
    (digitsOfInt (n / 10))
The actual replacement has type
    int list
within context
    let rec digitsOfInt n =
    (if (n >= 10) then ((app; [[...]]) (digitsOfInt (n / 10))) else (app [n] []))
    ;; 
==============================
