------------------------------------------------------------------
File "1948.ml", line 7, characters 11-14:
This function is applied to too many arguments,
maybe you forgot a `;'
Relevant code: not
------------------------------------------------------------------
Triaged the following locations:
And modified the following location:
File "1948.ml", line 7, characters 11-14:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    not
with
    not; [[...]]
The actual replacement has type
    ('b -> 'b list -> bool) -> 'c -> 'c list -> bool
within context
    fun l -> (let rec helper (seen, rest) = (match rest with 
                                             | [] -> seen
                                             | h :: t ->
                                               (if ((not; [[...]]) List.mem h  seen)
                                                   then
                                                   (let seen' = h :: seen in
                                                       let rest' = t in
                                                       (helper (seen', rest')))
                                                   else
                                                   [[...]])) in (List.rev
              (helper ([], l))))
==============================
Triaged the following locations:
And modified the following location:
File "1948.ml", line 7, characters 11-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (not List.mem h  seen)
with
    (not (List.mem h seen))
The actual replacement has type
    bool
within context
    fun l -> (let rec helper (seen, rest) = (match rest with 
                                             | [] -> seen
                                             | h :: t ->
                                               (if (not (List.mem h seen)) then
                                                   (let seen' = h :: seen in
                                                       let rest' = t in
                                                       (helper (seen', rest')))
                                                   else
                                                   [[...]])) in (List.rev
              (helper ([], l))))
==============================
