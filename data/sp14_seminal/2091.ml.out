------------------------------------------------------------------
File "2091.ml", line 10, characters 15-20:
This function is applied to too many arguments,
maybe you forgot a `;'
Relevant code: clone
------------------------------------------------------------------
Triaged the following locations:
File "2091.ml", line 10, characters 6-88:
And modified the following location:
File "2091.ml", line 13, characters 15-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    clone
with
    clone; [[...]]
The actual replacement has type
    ('d list -> 'd) -> 'e list -> int -> 'f
within context
    let padZero l1 l2 =
    (if (List.length l1) = (List.length l2) then l1, l2 else
      (if (List.length l1) > (List.length l2) then [[...other program...]] else
        (let z =
            ((clone; [[...]]) List.hd l2  ((List.length l2) - (List.length l1)))
            in
            z, l1)))
    ;; 
==============================
Triaged the following locations:
File "2091.ml", line 10, characters 6-88:
And modified the following location:
File "2091.ml", line 13, characters 29-31:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (clone List.hd l2  ((List.length l2) - (List.length l1)))
with
    (clone List.hd ((List.length l2) - (List.length l1)))
The actual replacement has type
    ('c list -> 'c) list
within context
    let padZero l1 l2 =
    (if (List.length l1) = (List.length l2) then l1, l2 else
      (if (List.length l1) > (List.length l2) then [[...other program...]] else
        (let z = (clone List.hd ((List.length l2) - (List.length l1))) in z, l1)))
    ;; 
==============================
Triaged the following locations:
File "2091.ml", line 13, characters 6-88:
And modified the following location:
File "2091.ml", line 10, characters 29-31:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (clone List.hd l1  ((List.length l1) - (List.length l2)))
with
    (clone List.hd ((List.length l1) - (List.length l2)))
The actual replacement has type
    ('n list -> 'n) list
within context
    let padZero l1 l2 =
    (if (List.length l1) = (List.length l2) then l1, l2 else
      (if (List.length l1) > (List.length l2) then
        (let y = (clone List.hd ((List.length l1) - (List.length l2))) in y, l2)
        else
        [[...other program...]]))
    ;; 
==============================
Triaged the following locations:
File "2091.ml", line 13, characters 6-88:
And modified the following location:
File "2091.ml", line 10, characters 15-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    clone
with
    clone; [[...]]
The actual replacement has type
    ('o list -> 'o) -> 'p list -> int -> 'q
within context
    let padZero l1 l2 =
    (if (List.length l1) = (List.length l2) then l1, l2 else
      (if (List.length l1) > (List.length l2) then
        (let y =
            ((clone; [[...]]) List.hd l1  ((List.length l1) - (List.length l2)))
            in
            y, l2)
        else
        [[...other program...]]))
    ;; 
==============================
