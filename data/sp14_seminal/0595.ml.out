------------------------------------------------------------------
File "0595.ml", line 20, characters 33-34:
This expression has type int list -> int * int -> int -> int * int list
but is here used with type int list -> int * int -> int list
Relevant code: f
------------------------------------------------------------------
Triaged the following locations:
File "0595.ml", line 20, characters 4-51:
And modified the following location:
File "0595.ml", line 19, characters 15-65:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (List.rev (List.hd l1)), (List.rev (List.hd l2))
with
    [[...]]
The actual replacement has type
    'a
within context
    let add (l1, l2) =
      let f a x c =
        let (s, t) = x in let sum = (c + s) + t in sum / 10, (mod sum 10) :: a
        in
        let base = 0, [0] in let args = [[...]] in [[...other program...]]
      in
      (removeZero (add (padZero l1 l2)))
==============================
Triaged the following locations:
File "0595.ml", line 20, characters 4-51:
And modified the following location:
File "0595.ml", line 19, characters 4-120:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let args = (List.rev (List.hd l1)), (List.rev (List.hd l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'b
within context
    let add (l1, l2) =
      let f a x c =
        let (s, t) = x in let sum = (c + s) + t in sum / 10, (mod sum 10) :: a
        in
        let base = 0, [0] in [[...other program...]]
      in
      (removeZero (add (padZero l1 l2)))
==============================
