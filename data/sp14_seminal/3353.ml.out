
------------------------------------------------------------------
File "3353.ml", line 32, characters 2-397:
This expression has type int list but is here used with type int list list
Relevant code: match List.rev l with
  | [] -> []
  | h::t ->
      let rec helper acc v =
        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
      let rec adder x = match x with | [] -> [] | h::t -> bigAdd h (adder t) in
      (match [adder
                ((mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
                   [helper [] (h * i)])]
       with
       | h::t -> h)
------------------------------------------------------------------
File "3353.ml", line 31, characters 19-422:
Try replacing
    fun i l -> (match (List.rev l) with 
                | [] -> []
                | h :: t ->
                  (let rec helper acc v =
                        (if v = 0 then acc else (helper (mod v 10) :: acc (v / 10)))
                        in
                        let rec adder x = (match x with 
                                           | [] -> []
                                           | h :: t ->
                                             (bigAdd
                                                 h
                                                 (adder
                                                   t))) in (match
                                                            [
                                                                (adder
                                                                  ((mulByDigit
                                                                        i
                                                                        (List.rev
                                                                          (List.map
                                                                            (fun x
                                                                                ->
                                                                                x *
                                                                                  10) t)))
                                                                      @
                                                                      [
                                                                          (helper
                                                                            []
                                                                            (h * i))
                                                                          ]))
                                                                ]
                                                            with
                                                            
                                                            | h :: t -> h)))
with
    fun i l -> (match (List.rev l) with 
                | [] -> []
                | h :: t ->
                  (let rec helper acc v =
                        (if v = 0 then acc else (helper (mod v 10) :: acc (v / 10)))
                        in
                        let rec adder x = (match x with 
                                           | [] -> []
                                           | h :: t ->
                                             (bigAdd
                                                 h
                                                 (adder
                                                   t))) in (match
                                                            [
                                                                (adder
                                                                  ((mulByDigit
                                                                        i
                                                                        (List.rev
                                                                          (List.map
                                                                            (fun x
                                                                                ->
                                                                                x *
                                                                                  10) t)))
                                                                      @
                                                                      [
                                                                          (helper
                                                                            []
                                                                            (h * i))
                                                                          ]))
                                                                ]
                                                            with
                                                            
                                                            | h :: t ->
                                                              h))); [[...]]
of type
    int -> int list -> int list list
==============================
