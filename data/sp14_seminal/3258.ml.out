------------------------------------------------------------------
File "3258.ml", line 4, characters 35-36:
This expression has type ('a -> 'b) -> 'a -> 'b but is here used with type
  ('a -> 'b) -> 'a -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "3258.ml", line 3, characters 8-11:
Try replacing
    fun a x -> (let existing = a in let next = x in (existing next))
with
    fun x a -> (let existing = a in let next = x in (existing next))
of type
    'c -> ('c -> 'd) -> 'd
within context
    let pipe fs =
    let f x a = let existing = a in let next = x in (existing next) in
      let base x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "3258.ml", line 4, characters 20-36:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'e -> 'f list -> 'e
within context
    let pipe fs =
    let f a x = let existing = a in let next = x in (existing next) in
      let base x = x in (List.fold_left (f base fs))
    ;; 
==============================
File "3258.ml", line 3, characters 10-63:
Try replacing
    fun x -> (let existing = a in let next = x in (existing next))
with
    fun _ x -> (let existing = a in let next = x in (existing next))
of type
    'g -> 'h -> 'i
within context
    let pipe fs =
    let f a _ x = let existing = a in let next = x in (existing next) in
      let base x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "3258.ml", line 3, characters 10-63:
Try replacing
    fun x -> (let existing = a in let next = x in (existing next))
with
    fun x _ -> (let existing = a in let next = x in (existing next))
of type
    'j -> 'k -> 'l
within context
    let pipe fs =
    let f a x _ = let existing = a in let next = x in (existing next) in
      let base x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "3258.ml", line 4, characters 20-34:
Try replacing
    List.fold_left
with
    f
of type
    (('m -> 'm) -> 'm -> 'm) -> ('m -> 'm) -> 'm -> 'm
within context
    let pipe fs =
    let f a x = let existing = a in let next = x in (existing next) in
      let base x = x in (f f base  fs)
    ;; 
==============================
File "3258.ml", line 4, characters 20-34:
Try replacing
    List.fold_left
with
    base
of type
    (('n -> 'n) -> 'n -> 'n) -> ('n -> 'n) -> 'n -> 'n
within context
    let pipe fs =
    let f a x = let existing = a in let next = x in (existing next) in
      let base x = x in (base f base  fs)
    ;; 
==============================
