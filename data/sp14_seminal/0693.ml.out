------------------------------------------------------------------
File "0693.ml", line 3, characters 62-66:
This expression has type 'a * ('a -> 'b) -> 'a * ('a -> 'b)
but is here used with type 'a * ('a -> 'b) -> 'b
Relevant code: base
------------------------------------------------------------------
File "0693.ml", line 3, characters 15-16:
Try replacing
    a, x
with
    a
of type
    'c
within context
    fun fs ->
      (let f a x (a) = (x a) in let base x = x in (List.fold_left f base  fs))
==============================
File "0693.ml", line 3, characters 36-41:
Try replacing
    fun x -> x
with
    fun _ x -> x
of type
    'd -> 'e -> 'e
within context
    let pipe fs =
    let f a x (a, x) = (x a) in let base _ x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "0693.ml", line 3, characters 12-23:
Try replacing
    fun (a, x) -> (x a)
with
    fun _ (a, x) -> (x a)
of type
    'f -> 'g * ('g -> 'h) -> 'h
within context
    let pipe fs =
    let f a x _ (a, x) = (x a) in let base x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "0693.ml", line 3, characters 45-59:
Try replacing
    List.fold_left
with
    f
of type
    ('i -> 'j -> 'k * ('k -> 'l) -> 'l) -> ('m -> 'm) -> 'n * ('n -> 'o) -> 'o
within context
    let pipe fs = let f a x (a, x) = (x a) in let base x = x in (f f base  fs) ;; 
==============================
File "0693.ml", line 3, characters 45-59:
Try replacing
    List.fold_left
with
    base
of type
    (('p -> 'p) -> 'q -> 'r * ('r -> 's) -> 's) ->
    ('p -> 'p) -> 'q -> 'r * ('r -> 's) -> 's
within context
    let pipe fs = let f a x (a, x) = (x a) in let base x = x in (base f base  fs)
    ;; 
==============================
File "0693.ml", line 3, characters 62-66:
Try replacing
    base
with
    f
of type
    't * ('t -> 'u -> 'v * ('v -> 'w) -> 'w) -> 'u -> 'v * ('v -> 'w) -> 'w
within context
    let pipe fs =
    let f a x (a, x) = (x a) in let base x = x in (List.fold_left f f  fs)
    ;; 
==============================
File "0693.ml", line 3, characters 40-41:
Try replacing
    x
with
    fs
of type
    'x list
within context
    let pipe fs =
    let f a x (a, x) = (x a) in let base x = fs in (List.fold_left f base  fs)
    ;; 
==============================
File "0693.ml", line 3, characters 40-41:
Try replacing
    x
with
    List.fold_left
of type
    ('y -> 'z -> 'y) -> 'y -> 'z list -> 'y
within context
    let pipe fs =
    let f a x (a, x) = (x a) in
      let base x = List.fold_left in (List.fold_left f base  fs)
    ;; 
==============================
File "0693.ml", line 3, characters 40-41:
Try replacing
    x
with
    f
of type
    'a1 -> 'b1 -> 'c1 * ('c1 -> 'd1) -> 'd1
within context
    let pipe fs =
    let f a x (a, x) = (x a) in let base x = f in (List.fold_left f base  fs)
    ;; 
==============================
