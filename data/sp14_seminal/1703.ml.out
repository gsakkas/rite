------------------------------------------------------------------
File "1703.ml", line 34, characters 17-20:
This expression has type float but is here used with type
  expr * float * float
Relevant code: 0.1
------------------------------------------------------------------
Triaged the following locations:
File "1703.ml", line 34, characters 22-24:
And modified the following location:
File "1703.ml", line 34, characters 17-20:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    *.
If you ignore other surrounding code, try replacing
    0.1
with
    0.1; [[...]]
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin ((eval (a, x, y)) *. pi))
                              | Cosine a -> (cos ((eval (a, x, y)) *. pi))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Foo (a, b) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (0.9 *. (eval (a, x, y)))
                                    else
                                    ((eval (0.1; [[...]])) *.; [[...]] a, x, y))
                              | Clamp (a, b, c) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (b, x, y))
                                    else
                                    (if (eval (a, x, y)) > (eval (c, x, y)) then
                                      (eval (c, x, y))
                                      else
                                      (eval (a, x, y))))) ;; 
==============================
Triaged the following locations:
File "1703.ml", line 34, characters 22-24:
And modified the following location:
File "1703.ml", line 34, characters 12-16:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    *.
If you ignore other surrounding code, try replacing
    eval
with
    eval; [[...]]
The actual replacement has type
    float -> 'a
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin ((eval (a, x, y)) *. pi))
                              | Cosine a -> (cos ((eval (a, x, y)) *. pi))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Foo (a, b) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (0.9 *. (eval (a, x, y)))
                                    else
                                    (((eval; [[...]]) 0.1) *.; [[...]] a, x, y))
                              | Clamp (a, b, c) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (b, x, y))
                                    else
                                    (if (eval (a, x, y)) > (eval (c, x, y)) then
                                      (eval (c, x, y))
                                      else
                                      (eval (a, x, y))))) ;; 
==============================
Triaged the following locations:
File "1703.ml", line 34, characters 22-24:
And modified the following location:
File "1703.ml", line 34, characters 12-16:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    *.
If you ignore other surrounding code, try replacing
    eval
with
    >
The actual replacement has type
    float -> float -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin ((eval (a, x, y)) *. pi))
                              | Cosine a -> (cos ((eval (a, x, y)) *. pi))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Foo (a, b) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (0.9 *. (eval (a, x, y)))
                                    else
                                    ((> 0.1) *.; [[...]] a, x, y))
                              | Clamp (a, b, c) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (b, x, y))
                                    else
                                    (if (eval (a, x, y)) > (eval (c, x, y)) then
                                      (eval (c, x, y))
                                      else
                                      (eval (a, x, y))))) ;; 
==============================
Triaged the following locations:
File "1703.ml", line 34, characters 22-24:
And modified the following location:
File "1703.ml", line 34, characters 12-16:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    *.
If you ignore other surrounding code, try replacing
    eval
with
    <
The actual replacement has type
    float -> float -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin ((eval (a, x, y)) *. pi))
                              | Cosine a -> (cos ((eval (a, x, y)) *. pi))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Foo (a, b) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (0.9 *. (eval (a, x, y)))
                                    else
                                    ((< 0.1) *.; [[...]] a, x, y))
                              | Clamp (a, b, c) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (b, x, y))
                                    else
                                    (if (eval (a, x, y)) > (eval (c, x, y)) then
                                      (eval (c, x, y))
                                      else
                                      (eval (a, x, y))))) ;; 
==============================
