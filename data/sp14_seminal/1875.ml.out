------------------------------------------------------------------
File "1875.ml", line 33, characters 13-30:
This expression has type float but is here used with type int
Relevant code: (eval (e3, x, y))
------------------------------------------------------------------
File "1875.ml", line 33, characters 11-12:
Try replacing
    ~-
with
    ~-; [[...]]
of type
    float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Acossin (e1, e2) ->
                                ((((acos (eval (e1, x, y)))
                                              *. (asin (eval (e2, x, y))))
                                          *. 2.0)
                                      /. (pi *. pi))
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~-; [[...]] ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 10-14:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * int * int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e2
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e2, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e3
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e3, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e1
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 20-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 20-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, y, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 16-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1, x, y
with
    e1, x, y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 23-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 23-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, x)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 20-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1, x, y
with
    e1, y, x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, y, x)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 10-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (eval (e1, x, y))
with
    (eval ((e1, x, y)))
The actual replacement has type
    int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval ((e1, x, y))) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 27-28:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    >
with
    >
The actual replacement has type
    int -> int -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) > (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1875.ml", line 19, characters 15-44:
File "1875.ml", line 20, characters 17-46:
File "1875.ml", line 21, characters 23-70:
File "1875.ml", line 22, characters 21-59:
File "1875.ml", line 24, characters 6-100:
File "1875.ml", line 28, characters 6-91:
And modified the following location:
File "1875.ml", line 31, characters 27-28:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    >
with
    <
The actual replacement has type
    int -> int -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | Acossin (e1, e2) -> [[...other program...]]
                              | Crazy (e1, e2, e3) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (( ~- ) (eval (e3, x, y))))) ;; 
==============================
