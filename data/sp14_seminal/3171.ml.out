------------------------------------------------------------------
File "3171.ml", line 2, characters 74-76:
This expression has type int but is here used with type int list
Relevant code: fs
------------------------------------------------------------------
File "3171.ml", line 2, characters 67-68:
Try replacing
    f
with
    f; [[...]]
of type
    'a list -> 'a -> 'a list
within context
    let pipe fs =
    let f a x = a + x in let base = fs in (List.fold_left (f; [[...]]) base  fs)
    ;; 
==============================
File "3171.ml", line 2, characters 46-48:
Try replacing
    fs
with
    fs; [[...]]
of type
    'b
within context
    let pipe fs =
    let f a x = a + x in let base = fs; [[...]] in (List.fold_left f base  fs)
    ;; 
==============================
File "3171.ml", line 2, characters 74-76:
Try replacing
    fs
with
    fs; [[...]]
of type
    int list
within context
    let pipe fs =
    let f a x = a + x in let base = fs in (List.fold_left f base  (fs; [[...]]))
    ;; 
==============================
File "3171.ml", line 2, characters 69-73:
Try replacing
    base
with
    base; [[...]]
of type
    int
within context
    let pipe fs =
    let f a x = a + x in let base = fs in (List.fold_left f (base; [[...]])  fs)
    ;; 
==============================
File "3171.ml", line 2, characters 20-31:
Try replacing
    fun a x -> a + x
with
    fun a x -> a + x; [[...]]
of type
    'c
within context
    let pipe fs =
    let f = fun a x -> a + x; [[...]] in
      let base = fs in (List.fold_left f base  fs)
    ;; 
==============================
File "3171.ml", line 2, characters 52-66:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int -> int -> int) -> 'd -> 'd -> 'e
within context
    let pipe fs =
    let f a x = a + x in let base = fs in ((List.fold_left; [[...]]) f base  fs)
    ;; 
==============================
