------------------------------------------------------------------
File "2690.ml", line 28, characters 42-46:
This expression has type expr * float * float -> float
but is here used with type float
Relevant code: eval
------------------------------------------------------------------
File "2690.ml", line 28, characters 42-46:
Try replacing
    eval
with
    y
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a ->
                                (eval (a, (sin (pi *. x)), (sin (pi *. y))))
                              | Cosine a ->
                                (eval (a, (cos (pi *. x)), (cos (pi *. y))))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Cube a ->
                                (((eval (a, x, y)) *. (eval (a, x, y)))
                                      *. (eval (a, x, y)))
                              | Addition (a, b) -> ((eval (a, x, y)) +. y)) ;; 
==============================
File "2690.ml", line 28, characters 42-46:
Try replacing
    eval
with
    x
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a ->
                                (eval (a, (sin (pi *. x)), (sin (pi *. y))))
                              | Cosine a ->
                                (eval (a, (cos (pi *. x)), (cos (pi *. y))))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Cube a ->
                                (((eval (a, x, y)) *. (eval (a, x, y)))
                                      *. (eval (a, x, y)))
                              | Addition (a, b) -> ((eval (a, x, y)) +. x)) ;; 
==============================
