------------------------------------------------------------------
File "1757.ml", line 22, characters 8-10:
This pattern matches values of type 'a list
but is here used to match values of type 'b * 'c
Relevant code: []
------------------------------------------------------------------
Triaged the following locations:
File "1757.ml", line 23, characters 4-131:
And modified the following location:
File "1757.ml", line 22, characters 8-10:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    []
with
    _
The actual replacement has type
    int * int -> int * int
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match x with 
                                                  | (i, j) ->
                                                    (if i + j > 9 then
                                                        1, (i + j) - 10
                                                        else
                                                        0, i + j)
                                                  | _ ->
                                                    a) in [[...other program...]] in (removeZero
                (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1757.ml", line 23, characters 4-131:
And modified the following location:
File "1757.ml", line 21, characters 8-74:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (match x with 
     | (i, j) -> (if i + j > 9 then 1, (i + j) - 10 else 0, i + j)
     | [] -> a)
with
    (match x with 
     | _ -> [[...]]
     | [] -> a)
The actual replacement has type
    'd
==============================
Triaged the following locations:
File "1757.ml", line 23, characters 4-131:
And modified the following location:
File "1757.ml", line 19, characters 4-260:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x = (match x with 
                 | (i, j) -> (if i + j > 9 then 1, (i + j) - 10 else 0, i + j)
                 | [] ->
                   a) in let base = [] in
      let args = (List.combine (List.rev l1) (List.rev l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'e
==============================
