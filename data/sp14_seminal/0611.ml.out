------------------------------------------------------------------
File "0611.ml", line 19, characters 33-34:
This expression has type
  (int * int) list -> int * int -> int -> (int * int) list
but is here used with type (int * int) list -> int * int -> (int * int) list
Relevant code: f
------------------------------------------------------------------
File "0611.ml", line 19, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list -> 'b * 'c -> int * 'a list
within context
    let f a x c = let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a
      in
      let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0611.ml", line 19, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ((int * int) list -> int * int -> int -> (int * int) list) ->
    int * 'd list -> ('e * 'f) list -> 'g * 'h
within context
    let f a x c = let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a
      in
      let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0611.ml", line 15, characters 10-92:
Try replacing
    fun a x c -> (let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a)
with
    fun a
      x c -> (let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a);
    [[...]]
of type
    'i
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f =
              fun a
                x
                  c ->
                    (let (s, t) = x in
                        ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a);
              [[...]]
              in
              let base = 0, [] in
              let args = (List.rev (List.combine l1 l2)) in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
