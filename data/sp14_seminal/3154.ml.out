------------------------------------------------------------------
File "3154.ml", line 26, characters 33-34:
This expression has type 'a -> (int * int) list -> int * 'a
but is here used with type 'a -> (int * int) list -> 'a
Relevant code: f
------------------------------------------------------------------
File "3154.ml", line 26, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x = (match x with 
                 | (d1, d2) :: ds ->
                   (d1 + d2,
                         a)) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "3154.ml", line 26, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('e -> (int * int) list -> int * 'e) ->
    int * 'f list -> ('g * 'h) list -> 'i * 'j
within context
    let f a x = (match x with 
                 | (d1, d2) :: ds ->
                   (d1 + d2,
                         a)) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "3154.ml", line 23, characters 10-60:
Try replacing
    fun a x -> (match x with 
                | (d1, d2) :: ds -> (d1 + d2, a))
with
    fun a x -> (match x with 
                | (d1, d2) :: ds -> (d1 + d2, a)); [[...]]
of type
    'k
within context
    fun l1 l2 -> (let add (l1, l2) = let f = fun a x -> (match x with 
                                                         | (d1, d2) :: ds ->
                                                           (d1 + d2,
                                                                 a)); [[...]] in let
              base
              =
              0, []
              in
              let args = (List.rev (List.combine l1 l2)) in
              let (_, res) = (List.fold_left f base  args) in
              res in (removeZero (add (padZero l1 l2))))
==============================
