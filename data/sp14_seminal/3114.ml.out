------------------------------------------------------------------
File "3114.ml", line 27, characters 13-34:
This expression has type (int list * int list) list
but is here used with type int list
Relevant code: (add (padZero l1 l2))
------------------------------------------------------------------
File "3114.ml", line 23, characters 10-13:
Try replacing
    fun a x -> x
with
    fun x a -> x
of type
    'a -> 'b -> 'a
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f x a = x in
              let base = 0, [] in
              let args = [0, [l1, l2]] in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
File "3114.ml", line 27, characters 2-12:
Try replacing
    removeZero
with
    <
of type
    (int list * int list) list -> (int list * int list) list -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x = x in
        let base = 0, [] in
        let args = [0, [l1, l2]] in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (< (add (padZero l1 l2)))
    ;; 
==============================
File "3114.ml", line 27, characters 2-12:
Try replacing
    removeZero
with
    clone
of type
    (int list * int list) list -> int -> (int list * int list) list list
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x = x in
        let base = 0, [] in
        let args = [0, [l1, l2]] in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (clone (add (padZero l1 l2)))
    ;; 
==============================
File "3114.ml", line 27, characters 2-12:
Try replacing
    removeZero
with
    =
of type
    (int list * int list) list -> (int list * int list) list -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x = x in
        let base = 0, [] in
        let args = [0, [l1, l2]] in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (= (add (padZero l1 l2)))
    ;; 
==============================
File "3114.ml", line 23, characters 16-17:
Try replacing
    x
with
    a
of type
    'c
within context
    let add (l1, l2) =
      let f a x = a in
        let base = 0, [] in
        let args = [0, [l1, l2]] in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (removeZero (add (padZero l1 l2)))
==============================
