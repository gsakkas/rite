------------------------------------------------------------------
File "3124.ml", line 26, characters 33-34:
This expression has type int list -> int * int list -> int list * 'a
but is here used with type int list -> int * int list -> int list
Relevant code: f
------------------------------------------------------------------
File "3124.ml", line 26, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x = (match x with 
                 | (c, d :: t) ->
                   (c + d :: a,
                         l2)) in let base = 0, [] in let args = (match l1 with 
                                                                 | h :: t ->
                                                                   [h, l2
                                                                         ]) in let
      (_, res)
      =
      (List.fold_left (f; [[...]]) base  args)
      in
      res
==============================
File "3124.ml", line 26, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list -> int * int list -> int list * 'e) ->
    int * 'f list -> ('g * 'e) list -> 'h * 'i
within context
    let f a x = (match x with 
                 | (c, d :: t) ->
                   (c + d :: a,
                         l2)) in let base = 0, [] in let args = (match l1 with 
                                                                 | h :: t ->
                                                                   [h, l2
                                                                         ]) in let
      (_, res)
      =
      ((List.fold_left; [[...]]) f base  args)
      in
      res
==============================
File "3124.ml", line 23, characters 10-63:
Try replacing
    fun a x -> (match x with 
                | (c, d :: t) -> (c + d :: a, l2))
with
    fun a x -> (match x with 
                | (c, d :: t) -> (c + d :: a, l2)); [[...]]
of type
    'j
within context
    fun l1 l2 -> (let add (l1, l2) = let f = fun a x -> (match x with 
                                                         | (c, d :: t) ->
                                                           (c + d :: a,
                                                                 l2)); [[...]] in let
              base
              =
              0, []
              in
              let args = (match l1 with 
                          | h :: t ->
                            [h, l2
                                  ]) in let (_, res) = (List.fold_left f base  args)
              in
              res in (removeZero (add (padZero l1 l2))))
==============================
