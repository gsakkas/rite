------------------------------------------------------------------
File "0923.ml", line 22, characters 40-44:
This expression has type (('a list -> ('b * 'a) list) * 'c) list
but is here used with type (int * int) list list
Relevant code: args
------------------------------------------------------------------
File "0923.ml", line 22, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'd list -> ('e list -> ('f * 'e) list) * 'g -> int * 'd list
within context
    let f a x = (match x with 
                 | [] -> a
                 | h :: t ->
                   (((fst h) + (snd h)) / 10,
                         (mod ((fst h) + (snd h)) 10) ::
                             (snd
                               a))) in let base = 0, [] in
      let args = [(List.combine l1), l2] in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0923.ml", line 22, characters 40-44:
Try replacing
    args
with
    args; [[...]]
of type
    (int * int) list list
within context
    let f a x = (match x with 
                 | [] -> a
                 | h :: t ->
                   (((fst h) + (snd h)) / 10,
                         (mod ((fst h) + (snd h)) 10) ::
                             (snd
                               a))) in let base = 0, [] in
      let args = [(List.combine l1), l2] in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "0923.ml", line 22, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> (int * int) list -> int * int list) ->
    int * 'h list -> (('i list -> ('j * 'i) list) * 'k) list -> 'l * 'm
within context
    let f a x = (match x with 
                 | [] -> a
                 | h :: t ->
                   (((fst h) + (snd h)) / 10,
                         (mod ((fst h) + (snd h)) 10) ::
                             (snd
                               a))) in let base = 0, [] in
      let args = [(List.combine l1), l2] in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0923.ml", line 21, characters 15-40:
Try replacing
    [(List.combine l1), l2]
with
    [(List.combine l1), l2]; [[...]]
of type
    'n
within context
    let add (l1, l2) = let f a x = (match x with 
                                    | [] -> a
                                    | h :: t ->
                                      (((fst h) + (snd h)) / 10,
                                            (mod ((fst h) + (snd h)) 10) ::
                                                (snd
                                                  a))) in let base = 0, [] in
        let args = [(List.combine l1), l2]; [[...]] in
        let (_, res) = (List.fold_left f base  args) in
        res in (removeZero (add (padZero l1 l2)))
==============================
File "0923.ml", line 14, characters 10-160:
Try replacing
    fun a x -> (match x with 
                | [] -> a
                | h :: t ->
                  (((fst h) + (snd h)) / 10,
                        (mod ((fst h) + (snd h)) 10) :: (snd a)))
with
    fun a x -> (match x with 
                | [] -> a
                | h :: t ->
                  (((fst h) + (snd h)) / 10,
                        (mod ((fst h) + (snd h)) 10) :: (snd a))); [[...]]
of type
    'o
==============================
