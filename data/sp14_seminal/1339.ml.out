------------------------------------------------------------------
File "1339.ml", line 2, characters 66-67:
This expression has type 'a -> 'b -> 'c -> 'a but is here used with type
  'a -> 'b -> 'a
Relevant code: f
------------------------------------------------------------------
File "1339.ml", line 2, characters 22-25:
Try replacing
    fun x y -> a
with
    fun (x, y) -> a
of type
    'd * 'e -> 'f
within context
    let pipe fs =
    let f a (x, y) = a in let base x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "1339.ml", line 2, characters 20-23:
Try replacing
    fun a x y -> a
with
    fun x a y -> a
of type
    'g -> 'h -> 'i -> 'h
within context
    let pipe fs = let f x a y = a in let base x = x in (List.fold_left f base  fs)
    ;; 
==============================
File "1339.ml", line 2, characters 51-67:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'j -> 'j list -> 'j
within context
    let pipe fs = let f a x y = a in let base x = x in (List.fold_left (f base fs))
    ;; 
==============================
File "1339.ml", line 2, characters 51-65:
Try replacing
    List.fold_left
with
    f
of type
    ('k -> 'l -> 'm -> 'k) -> ('n -> 'n) -> 'o -> 'k -> 'l -> 'm -> 'k
within context
    let pipe fs = let f a x y = a in let base x = x in (f f base  fs) ;; 
==============================
File "1339.ml", line 2, characters 51-65:
Try replacing
    List.fold_left
with
    base
of type
    (('p -> 'p) -> 'q -> 'r -> 'p -> 'p) -> ('p -> 'p) -> 'q -> 'r -> 'p -> 'p
within context
    let pipe fs = let f a x y = a in let base x = x in (base f base  fs) ;; 
==============================
File "1339.ml", line 2, characters 28-29:
Try replacing
    a
with
    y
of type
    's
within context
    fun fs -> (let f a x y = y in let base x = x in (List.fold_left f base  fs))
==============================
File "1339.ml", line 2, characters 28-29:
Try replacing
    a
with
    x
of type
    't
within context
    fun fs -> (let f a x y = x in let base x = x in (List.fold_left f base  fs))
==============================
File "1339.ml", line 2, characters 28-29:
Try replacing
    a
with
    List.fold_left
of type
    ('u -> 'v -> 'u) -> 'u -> 'v list -> 'u
within context
    fun fs ->
      (let f a x y = List.fold_left in
          let base x = x in (List.fold_left f base  fs))
==============================
File "1339.ml", line 2, characters 28-29:
Try replacing
    a
with
    fs
of type
    'w list
within context
    fun fs -> (let f a x y = fs in let base x = x in (List.fold_left f base  fs))
==============================
