------------------------------------------------------------------
File "3298.ml", line 27, characters 59-65:
This expression has type int * int but is here used with type ('a * 'b) list
Relevant code: (0, 0)
------------------------------------------------------------------
File "3298.ml", line 27, characters 59-65:
Try replacing
    0, 0
with
    0, 0; [[...]]
of type
    (int * int) list
within context
    fun (l1, l2) -> (let f a x = (match x with 
                                  | (v1, v2) -> (match a with 
                                                 | (list1, list2) ->
                                                   (match list1 with 
                                                    | [] ->
                                                      ((v1 + v2) / 10 :: list1,
                                                            (mod (v1 + v2) 10) ::
                                                                list2)
                                                    | h :: t ->
                                                      (((v1 + v2) + h) / 10 :: list1
                                                            ,
                                                            (mod ((v1 + v2) + h) 10)
                                                                ::
                                                                list2)))) in let
          base
          =
          [], []
          in
          let args = (List.append (List.rev (List.combine l1 l2)) (0, 0; [[...]]))
          in
          let (_, res) = (List.fold_left f base  args) in res)
==============================
File "3298.ml", line 27, characters 15-26:
Try replacing
    List.append
with
    List.append; [[...]]
of type
    ('c * 'd) list -> int * int -> 'e
within context
    fun (l1, l2) -> (let f a x = (match x with 
                                  | (v1, v2) -> (match a with 
                                                 | (list1, list2) ->
                                                   (match list1 with 
                                                    | [] ->
                                                      ((v1 + v2) / 10 :: list1,
                                                            (mod (v1 + v2) 10) ::
                                                                list2)
                                                    | h :: t ->
                                                      (((v1 + v2) + h) / 10 :: list1
                                                            ,
                                                            (mod ((v1 + v2) + h) 10)
                                                                ::
                                                                list2)))) in let
          base
          =
          [], []
          in
          let args = ((List.append; [[...]]) (List.rev (List.combine l1 l2)) (0, 0))
          in
          let (_, res) = (List.fold_left f base  args) in res)
==============================
