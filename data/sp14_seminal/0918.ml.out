------------------------------------------------------------------
File "0918.ml", line 17, characters 40-44:
This expression has type ('a list -> ('b * 'a) list) * 'c
but is here used with type 'd list
Relevant code: args
------------------------------------------------------------------
File "0918.ml", line 17, characters 35-44:
Try replacing
    (List.fold_left f base  args)
with
    (List.fold_left f args  base)
of type
    ('e list -> ('f * 'e) list) * 'g
within context
    fun (l1, l2) ->
      (let f a x = (failwith "to be implemented") in
          let base = (failwith "to be implemeneted") in
          let args = (List.combine l1), l2 in
          let (_, res) = (List.fold_left f args  base) in res)
==============================
File "0918.ml", line 17, characters 18-32:
Try replacing
    List.fold_left
with
    base
of type
    ('h -> 'i -> 'j) -> 'k -> ('l list -> ('m * 'l) list) * 'n -> 'o * 'p
within context
    let f a x = (failwith "to be implemented") in
      let base = (failwith "to be implemeneted") in
      let args = (List.combine l1), l2 in let (_, res) = (base f base  args) in res
==============================
File "0918.ml", line 17, characters 18-32:
Try replacing
    List.fold_left
with
    f
of type
    ('q -> 'r -> 's) -> 't -> ('u list -> ('v * 'u) list) * 'w -> 'x * 'y
within context
    let f a x = (failwith "to be implemented") in
      let base = (failwith "to be implemeneted") in
      let args = (List.combine l1), l2 in let (_, res) = (f f base  args) in res
==============================
File "0918.ml", line 17, characters 40-44:
Try replacing
    args
with
    base
of type
    'z list
within context
    let f a x = (failwith "to be implemented") in
      let base = (failwith "to be implemeneted") in
      let args = (List.combine l1), l2 in
      let (_, res) = (List.fold_left f base  base) in res
==============================
