------------------------------------------------------------------
File "3547.ml", line 20, characters 23-41:
This expression has type float but is here used with type int
Relevant code: (eval (ex1, x, y))
------------------------------------------------------------------
File "3547.ml", line 20, characters 42-43:
Try replacing
    *
with
    *; [[...]]
of type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> (sin (pi *. (eval (ex, x, y))))
                              | Cosine ex -> (cos (pi *. (eval (ex, x, y))))
                              | Average (ex1, ex2) ->
                                (((eval (ex1, x, y)) +. (eval (ex2, x, y))) /. 2.)
                              | Times (ex1, ex2) ->
                                ((eval (ex1, x, y)) *; [[...]] (eval (ex2, x, y)))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                (if (eval (ex1, x, y)) < (eval (ex2, x, y)) then
                                    (eval (ex3, x, y))
                                    else
                                    (eval (ex4, x, y)))) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 45-49:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * int * int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 51-57:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    ex2, x, y
with
    ex2, x, y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 56-60:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    ex2, x, y
with
    ex2, y, x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, y, x))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 51-54:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    ex2
with
    ex2
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 59-60:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, x))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 59-60:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 56-57:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 51-54:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    ex2
with
    ex1
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex1, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 51-54:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    ex2
with
    e
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (e, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 45-61:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (eval (ex2, x, y))
with
    (eval ((ex2, x, y)))
The actual replacement has type
    int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval ((ex2, x, y)))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 24-28:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * int * int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 35-39:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    ex1, x, y
with
    ex1, y, x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, y, x)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 30-36:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    ex1, x, y
with
    ex1, x, y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3547.ml", line 17, characters 15-44:
File "3547.ml", line 18, characters 17-46:
File "3547.ml", line 19, characters 25-73:
File "3547.ml", line 22, characters 6-104:
And modified the following location:
File "3547.ml", line 20, characters 38-39:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine ex -> [[...other program...]]
                              | Cosine ex -> [[...other program...]]
                              | Average (ex1, ex2) -> [[...other program...]]
                              | Times (ex1, ex2) ->
                                (eval (ex1, x, y)) * (eval (ex2, x, y))
                              | Thresh (ex1, ex2, ex3, ex4) ->
                                [[...other program...]]) ;; 
==============================
