------------------------------------------------------------------
File "2090.ml", line 8, characters 4-196:
This expression has type 'a list list * 'a list but is here used with type
  'a list * 'a list
Relevant code: if (List.length l1) > (List.length l2)
    then (let y = clone l1 ((List.length l1) - (List.length l2)) in (y, l2))
    else (let z = clone l2 ((List.length l2) - (List.length l1)) in (z, l1))
------------------------------------------------------------------
File "2090.ml", line 6, characters 7-15:
Try replacing
    l1, l2
with
    l1, l2; [[...]]
of type
    'b list list * 'b list
within context
    let padZero l1 l2 =
    (if (List.length l1) = (List.length l2) then (l1, l2; [[...]]) else
      (if (List.length l1) > (List.length l2) then
        (let y = (clone l1 ((List.length l1) - (List.length l2))) in y, l2)
        else
        (let z = (clone l2 ((List.length l2) - (List.length l1))) in z, l1)))
    ;; 
==============================
File "2090.ml", line 8, characters 4-196:
Try replacing
    (if (List.length l1) > (List.length l2) then
      (let y = (clone l1 ((List.length l1) - (List.length l2))) in y, l2)
      else
      (let z = (clone l2 ((List.length l2) - (List.length l1))) in z, l1))
with
    (if (List.length l1) > (List.length l2) then
      (let y = (clone l1 ((List.length l1) - (List.length l2))) in y, l2)
      else
      (let z = (clone l2 ((List.length l2) - (List.length l1))) in z, l1));
    [[...]]
of type
    'c list * 'c list
==============================
