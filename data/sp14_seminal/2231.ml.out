------------------------------------------------------------------
File "2231.ml", line 5, characters 49-50:
This expression has type 'a but is here used with type
  'a * ('b * 'c) list * 'd
Relevant code: d
------------------------------------------------------------------
File "2231.ml", line 5, characters 49-52:
Try replacing
    (assoc d k  ls)
with
    (assoc (d, k, ls))
of type
    'e
within context
    let rec assoc (d, k, l) = (match k with 
                               | [] -> d
                               | (lk, lv) :: ls ->
                                 (if lk = lk then lv else (assoc (d, k, ls)))) ;; 
==============================
File "2231.ml", line 2, characters 14-21:
Try replacing
    fun (d, k, l) -> (match k with 
                      | [] -> d
                      | (lk, lv) :: ls -> (if lk = lk then lv else (assoc d k  ls)))
with
    fun d k l -> (match k with 
                  | [] -> d
                  | (lk, lv) :: ls -> (if lk = lk then lv else (assoc d k  ls)))
of type
    'f -> ('g * 'f) list -> ('g * 'f) list -> 'f
==============================
File "2231.ml", line 5, characters 43-48:
Try replacing
    assoc
with
    l
of type
    'h -> ('i * 'h) list -> ('i * 'h) list -> 'h
within context
    let rec assoc (d, k, l) = (match k with 
                               | [] -> d
                               | (lk, lv) :: ls ->
                                 (if lk = lk then lv else (l d k  ls))) ;; 
==============================
