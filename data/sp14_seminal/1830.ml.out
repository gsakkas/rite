------------------------------------------------------------------
File "1830.ml", line 5, characters 70-71:
This expression is not a function, it cannot be applied
Relevant code: t
------------------------------------------------------------------
Triaged the following locations:
File "1830.ml", line 5, characters 62-68:
And modified the following location:
File "1830.ml", line 5, characters 70-71:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    t
with
    t; [[...]]
The actual replacement has type
    'f list -> 'g
within context
    let rec listReverse l = (match l with 
                             | [] -> []
                             | h :: [] -> l
                             | h :: t ->
                               (listReverse
                                   ((append; [[...]]) ((t; [[...]]) [h])))) ;; 
==============================
Triaged the following locations:
File "1830.ml", line 5, characters 62-68:
And modified the following location:
File "1830.ml", line 5, characters 70-71:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    t
with
    append
The actual replacement has type
    'h list -> 'h list -> 'h list
within context
    let rec listReverse l = (match l with 
                             | [] -> []
                             | h :: [] -> l
                             | h :: t ->
                               (listReverse ((append; [[...]]) (append [h])))) ;; 
==============================
Triaged the following locations:
File "1830.ml", line 5, characters 62-68:
And modified the following location:
File "1830.ml", line 5, characters 70-71:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    t
with
    listReverse
The actual replacement has type
    'i list -> 'i list
within context
    let rec listReverse l = (match l with 
                             | [] -> []
                             | h :: [] -> l
                             | h :: t ->
                               (listReverse
                                   ((append; [[...]]) (listReverse [h])))) ;; 
==============================
Triaged the following locations:
File "1830.ml", line 5, characters 62-68:
And modified the following location:
File "1830.ml", line 5, characters 72-75:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    (t [h])
with
    t
The actual replacement has type
    'j list
within context
    let rec listReverse l = (match l with 
                             | [] -> []
                             | h :: [] -> l
                             | h :: t -> (listReverse ((append; [[...]]) t))) ;; 
==============================
