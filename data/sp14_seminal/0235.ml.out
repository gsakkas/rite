------------------------------------------------------------------
File "0235.ml", line 29, characters 64-65:
This expression has type int but is here used with type float
Relevant code: 1
------------------------------------------------------------------
Triaged the following locations:
File "0235.ml", line 29, characters 57-58:
And modified the following location:
File "0235.ml", line 29, characters 64-65:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    0
If you ignore other surrounding code, try replacing
    1
with
    1; [[...]]
The actual replacement has type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin (pi *. (eval (a, x, y))))
                              | Cosine a -> (cos (pi *. (eval (a, x, y))))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Inverse a ->
                                (let result = (eval (a, x, y)) in
                                      (if result = 0. then (0; [[...]]) else
                                          (1; [[...]] /. result)))
                              | Max (a, b) ->
                                (let aResult = (eval (a, x, y)) in
                                      let bResult = (eval (b, x, y)) in
                                      (if aResult > bResult then aResult else
                                          bResult))
                              | Range (a, b, c) ->
                                (let aResult = (eval (a, x, y)) in
                                      let bResult = (eval (b, x, y)) in
                                      let cResult = (eval (c, x, y)) in
                                      (if aResult < bResult then bResult else
                                          (if aResult < cResult then cResult else
                                            aResult)))) ;; 
==============================
Triaged the following locations:
File "0235.ml", line 29, characters 57-58:
And modified the following location:
File "0235.ml", line 29, characters 66-68:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    0
If you ignore other surrounding code, try replacing
    /.
with
    /.; [[...]]
The actual replacement has type
    int -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin (pi *. (eval (a, x, y))))
                              | Cosine a -> (cos (pi *. (eval (a, x, y))))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Inverse a ->
                                (let result = (eval (a, x, y)) in
                                      (if result = 0. then (0; [[...]]) else
                                          (1 /.; [[...]] result)))
                              | Max (a, b) ->
                                (let aResult = (eval (a, x, y)) in
                                      let bResult = (eval (b, x, y)) in
                                      (if aResult > bResult then aResult else
                                          bResult))
                              | Range (a, b, c) ->
                                (let aResult = (eval (a, x, y)) in
                                      let bResult = (eval (b, x, y)) in
                                      let cResult = (eval (c, x, y)) in
                                      (if aResult < bResult then bResult else
                                          (if aResult < cResult then cResult else
                                            aResult)))) ;; 
==============================
