------------------------------------------------------------------
File "2232.ml", line 3, characters 71-72:
This expression has type 'a but is here used with type
  'a * 'b * ('b * 'c) list
Relevant code: d
------------------------------------------------------------------
File "2232.ml", line 3, characters 71-74:
Try replacing
    (assoc d k  ls)
with
    (assoc (d, k, ls))
of type
    'd
within context
    let rec assoc (d, k, l) = (match l with 
                               | [] -> d
                               | (lk, lv) :: ls ->
                                 (if k = lk then lv else (assoc (d, k, ls)))) ;; 
==============================
File "2232.ml", line 2, characters 14-21:
Try replacing
    fun (d, k, l) -> (match l with 
                      | [] -> d
                      | (lk, lv) :: ls -> (if k = lk then lv else (assoc d k  ls)))
with
    fun d k l -> (match l with 
                  | [] -> d
                  | (lk, lv) :: ls -> (if k = lk then lv else (assoc d k  ls)))
of type
    'e -> 'f -> ('f * 'e) list -> 'e
==============================
