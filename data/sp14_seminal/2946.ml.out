------------------------------------------------------------------
File "2946.ml", line 3, characters 58-59:
This expression has type ('a -> 'b) -> 'a -> 'a -> 'c -> 'b
but is here used with type ('a -> 'b) -> 'a -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "2946.ml", line 3, characters 8-11:
Try replacing
    fun a x b c -> (a x)
with
    fun x a b c -> (a x)
of type
    'd -> ('d -> 'e) -> 'f -> 'g -> 'e
within context
    let pipe fs =
    let f x a b c = (a x) in let base y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2946.ml", line 3, characters 12-15:
Try replacing
    fun b c -> (a x)
with
    fun (b, c) -> (a x)
of type
    'h * 'i -> 'j
within context
    let pipe fs =
    let f a x (b, c) = (a x) in let base y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2946.ml", line 3, characters 43-59:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'k -> 'l list -> 'k
within context
    let pipe fs =
    let f a x b c = (a x) in let base y = y in (List.fold_left (f base fs))
    ;; 
==============================
File "2946.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    f
of type
    (('m -> 'm) -> 'm -> 'n -> 'o -> 'm) ->
    ('m -> 'm) -> 'p -> 'q -> 'm -> 'n -> 'o -> 'm
within context
    let pipe fs = let f a x b c = (a x) in let base y = y in (f f base  fs) ;; 
==============================
File "2946.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    base
of type
    (('r -> 'r) -> 'r -> 's -> 't -> 'r) -> ('r -> 'r) -> 'r -> 's -> 't -> 'r
within context
    let pipe fs = let f a x b c = (a x) in let base y = y in (base f base  fs) ;; 
==============================
File "2946.ml", line 3, characters 18-19:
Try replacing
    a
with
    b
of type
    'u -> 'v
within context
    fun a x b c -> (b x)
==============================
File "2946.ml", line 3, characters 18-19:
Try replacing
    a
with
    c
of type
    'w -> 'x
within context
    fun a x b c -> (c x)
==============================
