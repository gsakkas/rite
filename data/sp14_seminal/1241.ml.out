------------------------------------------------------------------
File "1241.ml", line 21, characters 70-71:
This expression has type (int * int) list but is here used with type int list
Relevant code: t
------------------------------------------------------------------
Triaged the following locations:
File "1241.ml", line 23, characters 4-124:
And modified the following location:
File "1241.ml", line 21, characters 43-72:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (mod ((w + y) + z) 10) :: t
with
    [[...]]
The actual replacement has type
    int * int
within context
    fun l1
      l2 ->
        (let add (l1, l2) = let f a x = let z = (fst x) + (snd x) in (match a with 
                                                                      | (w, y) :: t
                                                                        ->
                                                                        (((w + z)
                                                                                    +
                                                                                    y)
                                                                                / 10
                                                                              ,
                                                                              [[...]])
                                                                      | [] ->
                                                                        (0,
                                                                              0)) in [[...other program...]] in (removeZero
                (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1241.ml", line 23, characters 4-124:
And modified the following location:
File "1241.ml", line 18, characters 4-292:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x = let z = (fst x) + (snd x) in (match a with 
                                              | (w, y) :: t ->
                                                (((w + z) + y) / 10,
                                                      (mod ((w + y) + z) 10) :: t)
                                              | [] ->
                                                (0,
                                                      0)) in let base = 0, 0 in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'a
==============================
