------------------------------------------------------------------
File "2679.ml", line 8, characters 32-46:
This expression has type int list * int but is here used with type
  int list * 'a list
Relevant code: (seen', rest')
------------------------------------------------------------------
File "2679.ml", line 8, characters 40-45:
Try replacing
    rest'
with
    seen'
of type
    int list * int list
within context
    (match rest with 
     | [] -> seen
     | _ ->
       (let seen' = (if (List.mem 0 seen) then seen else 0 :: seen) in
             let rest' = 0 in (helper (seen', seen'))))
==============================
File "2679.ml", line 8, characters 40-45:
Try replacing
    rest'
with
    rest
of type
    int list * 'b list
within context
    (match rest with 
     | [] -> seen
     | _ ->
       (let seen' = (if (List.mem 0 seen) then seen else 0 :: seen) in
             let rest' = 0 in (helper (seen', rest))))
==============================
File "2679.ml", line 8, characters 40-45:
Try replacing
    rest'
with
    l
of type
    int list * 'c list
within context
    (match rest with 
     | [] -> seen
     | _ ->
       (let seen' = (if (List.mem 0 seen) then seen else 0 :: seen) in
             let rest' = 0 in (helper (seen', l))))
==============================
File "2679.ml", line 8, characters 40-45:
Try replacing
    rest'
with
    seen
of type
    int list * int list
within context
    (match rest with 
     | [] -> seen
     | _ ->
       (let seen' = (if (List.mem 0 seen) then seen else 0 :: seen) in
             let rest' = 0 in (helper (seen', seen))))
==============================
File "2679.ml", line 4, characters 10-14:
Try replacing
    rest
with
    seen
of type
    int list
within context
    let removeDuplicates l = let rec helper (seen, rest) = (match seen with 
                                                            | [] -> seen
                                                            | _ ->
                                                              (let seen' =
                                                                    (if
                                                                      (List.mem
                                                                        0 seen)
                                                                      then
                                                                      seen
                                                                      else
                                                                      0 :: seen)
                                                                    in
                                                                    let rest' = 0 in
                                                                    (helper
                                                                        (seen',
                                                                            rest')))) in (List.rev
          (helper ([], l))) ;; 
==============================
