------------------------------------------------------------------
File "1363.ml", line 18, characters 35-39:
This expression has type int * 'a list but is here used with type int
Relevant code: base
------------------------------------------------------------------
File "1363.ml", line 18, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x = (match x with 
                 | (add1, add2) ->
                   (add1 + add2)
                       +
                       a) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "1363.ml", line 18, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int -> int * int -> int) -> int * 'e list -> ('f * 'g) list -> 'h * 'i
within context
    let f a x = (match x with 
                 | (add1, add2) ->
                   (add1 + add2)
                       +
                       a) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "1363.ml", line 15, characters 10-63:
Try replacing
    fun a x -> (match x with 
                | (add1, add2) -> (add1 + add2) + a)
with
    fun a x -> (match x with 
                | (add1, add2) -> (add1 + add2) + a); [[...]]
of type
    'j
within context
    fun l1 l2 -> (let add (l1, l2) = let f = fun a x -> (match x with 
                                                         | (add1, add2) ->
                                                           (add1 + add2)
                                                               +
                                                               a); [[...]] in let
              base
              =
              0, []
              in
              let args = (List.rev (List.combine l1 l2)) in
              let (_, res) = (List.fold_left f base  args) in
              res in (removeZero (add (padZero l1 l2))))
==============================
