------------------------------------------------------------------
File "1057.ml", line 28, characters 47-64:
This expression has type float but is here used with type int
Relevant code: (eval (e2, x, y))
------------------------------------------------------------------
File "1057.ml", line 28, characters 43-46:
Try replacing
    abs
with
    sin
of type
    float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y)))
                                      /. (float_of_int 2))
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Power (e1, e2) ->
                                (eval (e1, x, y)) ** (sin (eval (e2, x, y)))
                              | Comp (e1, e2, e3) ->
                                ((((float_of_int -1) *. (eval (e1, x, y)))
                                          *. (eval (e2, x, y)))
                                      *. (eval (e3, x, y)))) ;; 
==============================
File "1057.ml", line 28, characters 43-46:
Try replacing
    abs
with
    cos
of type
    float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y)))
                                      /. (float_of_int 2))
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Power (e1, e2) ->
                                (eval (e1, x, y)) ** (cos (eval (e2, x, y)))
                              | Comp (e1, e2, e3) ->
                                ((((float_of_int -1) *. (eval (e1, x, y)))
                                          *. (eval (e2, x, y)))
                                      *. (eval (e3, x, y)))) ;; 
==============================
