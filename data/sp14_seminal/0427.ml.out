------------------------------------------------------------------
File "0427.ml", line 34, characters 56-75:
This expression has type (int * int -> int) * int but is here used with type
  expr
Relevant code: (rand, (depth - 1))
------------------------------------------------------------------
Triaged the following locations:
File "0427.ml", line 36, characters 8-116:
And modified the following location:
File "0427.ml", line 34, characters 56-75:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    rand, depth - 1
with
    rand, depth - 1; [[...]]
The actual replacement has type
    expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 7 || num = 2 then (buildX ())
                                               else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               (buildSine
                                                 (buildTimes
                                                   ((build (rand, depth - 1)),
                                                       (buildCosine
                                                         (rand, depth - 1;
                                                           [[...]])))))
                                               else
                                               [[...other program...]]))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth - 1)))))))
                                               else
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth
                                                                     - 1)))))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildTimes
                                         ((buildAverage
                                               ((build (rand, depth - 1)),
                                                   (build (rand, depth - 1))))
                                             ,
                                             (buildSine (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
Triaged the following locations:
File "0427.ml", line 36, characters 8-116:
And modified the following location:
File "0427.ml", line 34, characters 44-55:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildCosine
with
    build
The actual replacement has type
    (int * int -> int) * int -> expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 7 || num = 2 then (buildX ())
                                               else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               (buildSine
                                                 (buildTimes
                                                   ((build (rand, depth - 1)),
                                                       (build (rand, depth - 1)))))
                                               else
                                               [[...other program...]]))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth - 1)))))))
                                               else
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth
                                                                     - 1)))))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildTimes
                                         ((buildAverage
                                               ((build (rand, depth - 1)),
                                                   (build (rand, depth - 1))))
                                             ,
                                             (buildSine (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
Triaged the following locations:
File "0427.ml", line 36, characters 8-116:
And modified the following location:
File "0427.ml", line 34, characters 44-55:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildCosine
with
    buildCosine; [[...]]
The actual replacement has type
    (int * int -> int) * int -> expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 7 || num = 2 then (buildX ())
                                               else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               (buildSine
                                                 (buildTimes
                                                   ((build (rand, depth - 1)),
                                                       ((buildCosine; [[...]])
                                                         (rand, depth - 1)))))
                                               else
                                               [[...other program...]]))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth - 1)))))))
                                               else
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth
                                                                     - 1)))))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildTimes
                                         ((buildAverage
                                               ((build (rand, depth - 1)),
                                                   (build (rand, depth - 1))))
                                             ,
                                             (buildSine (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
Triaged the following locations:
File "0427.ml", line 32, characters 8-118:
And modified the following location:
File "0427.ml", line 38, characters 44-53:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildSine
with
    buildSine; [[...]]
The actual replacement has type
    (int * int -> int) * int -> expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 7 || num = 2 then (buildX ())
                                               else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               [[...other program...]]
                                               else
                                               (buildSine
                                                 (buildTimes
                                                   ((build (rand, depth - 1)),
                                                       ((buildSine; [[...]])
                                                         (rand, depth - 1)))))))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth - 1)))))))
                                               else
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth
                                                                     - 1)))))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildTimes
                                         ((buildAverage
                                               ((build (rand, depth - 1)),
                                                   (build (rand, depth - 1))))
                                             ,
                                             (buildSine (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
Triaged the following locations:
File "0427.ml", line 32, characters 8-118:
And modified the following location:
File "0427.ml", line 38, characters 44-53:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildSine
with
    build
The actual replacement has type
    (int * int -> int) * int -> expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 7 || num = 2 then (buildX ())
                                               else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               [[...other program...]]
                                               else
                                               (buildSine
                                                 (buildTimes
                                                   ((build (rand, depth - 1)),
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth - 1)))))))
                                               else
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth
                                                                     - 1)))))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildTimes
                                         ((buildAverage
                                               ((build (rand, depth - 1)),
                                                   (build (rand, depth - 1))))
                                             ,
                                             (buildSine (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
Triaged the following locations:
File "0427.ml", line 32, characters 8-118:
And modified the following location:
File "0427.ml", line 38, characters 54-73:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    rand, depth - 1
with
    rand, depth - 1; [[...]]
The actual replacement has type
    expr
within context
    let rec build (rand, depth) = (match depth with 
                                   | 0 ->
                                     (let num = (rand (1, 10)) in
                                           (if num > 7 || num = 2 then (buildX ())
                                               else
                                               (buildY ())))
                                   | 1 ->
                                     (let num = (rand (1, 10)) in
                                           (if (mod num 2) = 0 then
                                               [[...other program...]]
                                               else
                                               (buildSine
                                                 (buildTimes
                                                   ((build (rand, depth - 1)),
                                                       (buildSine
                                                         (rand, depth - 1;
                                                           [[...]])))))))
                                   | 2 ->
                                     (let num = (rand (1, 30)) in
                                           (if (mod num 2) == 0 then
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth - 1)))))))
                                               else
                                               (buildTimes
                                                 ((buildSine
                                                       (build (rand, depth - 1)))
                                                     ,
                                                     (buildTimes
                                                       ((build (rand, depth - 1)),
                                                           (buildSine
                                                             (build
                                                               (rand,
                                                                   depth
                                                                     - 1)))))))))
                                   | 3 ->
                                     (let num = (rand (1, 50)) in
                                           (if (mod num 2) = 0 then
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                               else
                                               (buildTimes
                                                 ((buildAverage
                                                       ((build (rand, depth - 1)),
                                                           (build
                                                             (rand, depth - 1))))
                                                     ,
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1)))))))
                                   | 4 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 5 ->
                                     (let num = (rand (1, 10)) in
                                           (if num = 1 then
                                               (buildSine
                                                 (buildSine
                                                   (buildSine
                                                     (build (rand, depth - 1)))))
                                               else
                                               (if num = 2 then
                                                 (buildCosine
                                                   (buildCosine
                                                     (buildCosine
                                                       (build (rand, depth - 1)))))
                                                 else
                                                 (if num = 3 then
                                                   (buildSine
                                                     (buildCosine
                                                       (build (rand, depth - 1))))
                                                   else
                                                   (buildCosine
                                                     (buildSine
                                                       (build
                                                         (rand, depth - 1))))))))
                                   | 6 ->
                                     (buildAverage
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 7 ->
                                     (buildTimes
                                         ((build (rand, depth - 1)),
                                             (build (rand, depth - 1))))
                                   | 8 ->
                                     (buildTimes
                                         ((buildAverage
                                               ((build (rand, depth - 1)),
                                                   (build (rand, depth - 1))))
                                             ,
                                             (buildSine (build (rand, depth - 1)))))
                                   | _ -> (build (rand, depth - 1))) ;; 
==============================
