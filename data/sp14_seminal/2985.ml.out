------------------------------------------------------------------
File "2985.ml", line 5, characters 23-34:
This expression has type int -> 'a but is here used with type 'b list
Relevant code: digitsOfInt
------------------------------------------------------------------
Triaged the following locations:
File "2985.ml", line 5, characters 18-37:
File "2985.ml", line 5, characters 38-39:
And modified the following location:
File "2985.ml", line 5, characters 41-43:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /
If you ignore other surrounding code, try replacing
    10
with
    10; [[...]]
The actual replacement has type
    int list -> 'c
within context
    let rec digitsOfInt n =
    (if (n >= 10) then
      ([[...other program...]] /; [[...]] ((10; [[...]]) [(mod n 10)]))
      else
      (app [3] [8]))
    ;; 
==============================
Triaged the following locations:
File "2985.ml", line 5, characters 18-37:
File "2985.ml", line 5, characters 38-39:
And modified the following location:
File "2985.ml", line 5, characters 44-54:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /
If you ignore other surrounding code, try replacing
    (10 [(mod n 10)])
with
    10
The actual replacement has type
    int
within context
    let rec digitsOfInt n =
    (if (n >= 10) then ([[...other program...]] /; [[...]] 10) else (app [3] [8]))
    ;; 
==============================
Triaged the following locations:
File "2985.ml", line 5, characters 38-39:
File "2985.ml", line 5, characters 40-55:
And modified the following location:
File "2985.ml", line 5, characters 19-22:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /
If you ignore other surrounding code, try replacing
    app
with
    app; [[...]]
The actual replacement has type
    (int -> int list) -> int -> 'd
within context
    let rec digitsOfInt n =
    (if (n >= 10) then
      (((app; [[...]]) digitsOfInt n) /; [[...]] [[...other program...]])
      else
      (app [3] [8]))
    ;; 
==============================
Triaged the following locations:
File "2985.ml", line 5, characters 38-39:
File "2985.ml", line 5, characters 40-55:
And modified the following location:
File "2985.ml", line 5, characters 19-34:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /
If you ignore other surrounding code, try replacing
    (app digitsOfInt n)
with
    (app (digitsOfInt n))
The actual replacement has type
    int list -> int list
within context
    let rec digitsOfInt n =
    (if (n >= 10) then ((app (digitsOfInt n)) /; [[...]] [[...other program...]])
      else
      (app [3] [8]))
    ;; 
==============================
