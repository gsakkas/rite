------------------------------------------------------------------
File "1425.ml", line 5, characters 25-65:
This expression has type 'a list -> 'a list but is here used with type
  'b list
Relevant code: append (digitsOfInt (n / 10) [n mod 10])
------------------------------------------------------------------
Triaged the following locations:
File "1425.ml", line 5, characters 25-31:
And modified the following location:
File "1425.ml", line 5, characters 33-44:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    digitsOfInt
with
    digitsOfInt; [[...]]
The actual replacement has type
    int -> int list -> 'c
within context
    let rec digitsOfInt n =
    (if (n <= 0) then [] else
      ((append; [[...]]) ((digitsOfInt; [[...]]) (n / 10) [(mod n 10)])))
    ;; 
==============================
Triaged the following locations:
File "1425.ml", line 5, characters 25-31:
And modified the following location:
File "1425.ml", line 5, characters 54-64:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    (digitsOfInt (n / 10) [(mod n 10)])
with
    (digitsOfInt (n / 10))
The actual replacement has type
    'd list
within context
    let rec digitsOfInt n =
    (if (n <= 0) then [] else ((append; [[...]]) (digitsOfInt (n / 10))))
    ;; 
==============================
