------------------------------------------------------------------
File "1288.ml", line 31, characters 22-28:
This expression has type unit -> expr but is here used with type expr
Relevant code: buildX
------------------------------------------------------------------
Triaged the following locations:
File "1288.ml", line 32, characters 12-51:
File "1288.ml", line 34, characters 9-91:
File "1288.ml", line 37, characters 9-89:
File "1288.ml", line 40, characters 9-161:
And modified the following location:
File "1288.ml", line 31, characters 12-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildSine
with
    buildSine; [[...]]
The actual replacement has type
    (unit -> expr) -> unit -> expr
within context
    let rec build (rand, depth) =
    (if depth = 0 then (if (rand (0, 2)) < 1 then buildX else buildY) else
      (let x = (rand (0, 5)) in (match x with 
                                 | 0 -> ((buildSine; [[...]]) buildX)
                                 | 1 -> [[...other program...]]
                                 | 2 -> [[...other program...]]
                                 | 3 -> [[...other program...]]
                                 | 4 -> [[...other program...]])))
    ;; 
==============================
Triaged the following locations:
File "1288.ml", line 31, characters 12-28:
File "1288.ml", line 34, characters 9-91:
File "1288.ml", line 37, characters 9-89:
File "1288.ml", line 40, characters 9-161:
And modified the following location:
File "1288.ml", line 32, characters 12-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildCosine
with
    buildCosine; [[...]]
The actual replacement has type
    (unit -> expr) -> unit -> expr
within context
    let rec build (rand, depth) =
    (if depth = 0 then (if (rand (0, 2)) < 1 then buildX else buildY) else
      (let x = (rand (0, 5)) in (match x with 
                                 | 0 -> [[...other program...]]
                                 | 1 ->
                                   ((buildCosine; [[...]])
                                       (build (rand, depth - 1)))
                                 | 2 -> [[...other program...]]
                                 | 3 -> [[...other program...]]
                                 | 4 -> [[...other program...]])))
    ;; 
==============================
Triaged the following locations:
File "1288.ml", line 31, characters 12-28:
File "1288.ml", line 32, characters 12-51:
File "1288.ml", line 37, characters 9-89:
File "1288.ml", line 40, characters 9-161:
And modified the following location:
File "1288.ml", line 34, characters 9-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildAverage
with
    buildAverage; [[...]]
The actual replacement has type
    (unit -> expr) * (unit -> expr) ->
    unit -> expr
within context
    let rec build (rand, depth) =
    (if depth = 0 then (if (rand (0, 2)) < 1 then buildX else buildY) else
      (let x = (rand (0, 5)) in (match x with 
                                 | 0 -> [[...other program...]]
                                 | 1 -> [[...other program...]]
                                 | 2 ->
                                   ((buildAverage; [[...]])
                                       ((build (rand, depth - 1)),
                                           (build (rand, depth - 1))))
                                 | 3 -> [[...other program...]]
                                 | 4 -> [[...other program...]])))
    ;; 
==============================
Triaged the following locations:
File "1288.ml", line 31, characters 12-28:
File "1288.ml", line 32, characters 12-51:
File "1288.ml", line 34, characters 9-91:
File "1288.ml", line 37, characters 9-89:
And modified the following location:
File "1288.ml", line 40, characters 9-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildThresh
with
    buildThresh; [[...]]
The actual replacement has type
    (unit -> expr) * (unit -> expr) *
    (unit -> expr) * (unit -> expr) ->
    unit -> expr
within context
    let rec build (rand, depth) =
    (if depth = 0 then (if (rand (0, 2)) < 1 then buildX else buildY) else
      (let x = (rand (0, 5)) in (match x with 
                                 | 0 -> [[...other program...]]
                                 | 1 -> [[...other program...]]
                                 | 2 -> [[...other program...]]
                                 | 3 -> [[...other program...]]
                                 | 4 ->
                                   ((buildThresh; [[...]])
                                       ((build (rand, depth - 1)),
                                           (build (rand, depth - 1)),
                                           (build (rand, depth - 1)),
                                           (build (rand, depth - 1)))))))
    ;; 
==============================
Triaged the following locations:
File "1288.ml", line 31, characters 12-28:
File "1288.ml", line 32, characters 12-51:
File "1288.ml", line 34, characters 9-91:
File "1288.ml", line 40, characters 9-161:
And modified the following location:
File "1288.ml", line 37, characters 9-19:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildTimes
with
    buildTimes; [[...]]
The actual replacement has type
    (unit -> expr) * (unit -> expr) ->
    unit -> expr
within context
    let rec build (rand, depth) =
    (if depth = 0 then (if (rand (0, 2)) < 1 then buildX else buildY) else
      (let x = (rand (0, 5)) in (match x with 
                                 | 0 -> [[...other program...]]
                                 | 1 -> [[...other program...]]
                                 | 2 -> [[...other program...]]
                                 | 3 ->
                                   ((buildTimes; [[...]])
                                       ((build (rand, depth - 1)),
                                           (build (rand, depth - 1))))
                                 | 4 -> [[...other program...]])))
    ;; 
==============================
