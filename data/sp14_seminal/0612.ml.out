------------------------------------------------------------------
File "0612.ml", line 21, characters 35-39:
This expression has type int * 'a list but is here used with type
  (int * int) list
Relevant code: base
------------------------------------------------------------------
File "0612.ml", line 21, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x = let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a in
      let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0612.ml", line 21, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ((int * int) list -> int * int -> (int * int) list) ->
    int * 'e list -> ('f * 'g) list -> 'h * 'i
within context
    let f a x = let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a in
      let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0612.ml", line 17, characters 10-90:
Try replacing
    fun a x -> (let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a)
with
    fun a x -> (let (s, t) = x in ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a);
    [[...]]
of type
    'j
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f =
              fun a
                x ->
                  (let (s, t) = x in
                      ((c + s) + t) / 10, (mod ((c + s) + t) 10) :: a);
              [[...]]
              in
              let base = 0, [] in
              let args = (List.rev (List.combine l1 l2)) in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
