------------------------------------------------------------------
File "0317.ml", line 17, characters 20-22:
This expression has type float but is here used with type int
Relevant code: pi
------------------------------------------------------------------
Triaged the following locations:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
File "0317.ml", line 22, characters 6-67:
And modified the following location:
File "0317.ml", line 17, characters 23-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *
with
    *; [[...]]
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *; [[...]] (eval (e1, x, y))))
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 20, characters 21-59:
File "0317.ml", line 22, characters 6-67:
And modified the following location:
File "0317.ml", line 19, characters 67-68:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    2
with
    2; [[...]]
The actual replacement has type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e1, x, y)))
                                      /. 2; [[...]])
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
File "0317.ml", line 22, characters 6-67:
And modified the following location:
File "0317.ml", line 18, characters 25-26:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *
with
    *; [[...]]
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> (cos (pi *; [[...]] (eval (e1, x, y))))
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 20, characters 21-59:
File "0317.ml", line 22, characters 6-67:
And modified the following location:
File "0317.ml", line 19, characters 64-66:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    /.
with
    /.; [[...]]
The actual replacement has type
    float -> int -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e1, x, y)))
                                      /.; [[...]] 2)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 10-14:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * unit * unit -> unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e3
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e3, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e4
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e4, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e2
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e2, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e1
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 20-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    y
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, y, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 20-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    x
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 16-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1, x, y
with
    e1, x, y
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 23-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    x
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, x)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
Triaged the following locations:
File "0317.ml", line 17, characters 15-43:
File "0317.ml", line 18, characters 17-45:
File "0317.ml", line 19, characters 23-68:
File "0317.ml", line 20, characters 21-59:
And modified the following location:
File "0317.ml", line 22, characters 23-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    y
The actual replacement has type
    expr * unit * unit
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y)))) ;; 
==============================
