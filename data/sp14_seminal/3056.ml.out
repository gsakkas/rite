------------------------------------------------------------------
File "3056.ml", line 19, characters 75-76:
This expression has type int but is here used with type float
Relevant code: 2
------------------------------------------------------------------
File "3056.ml", line 19, characters 75-76:
Try replacing
    2
with
    2; [[...]]
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine var1 -> (sin (pi *. (eval (var1, x, y))))
                              | Cosine var2 -> (cos (pi *. (eval (var2, x, y))))
                              | Average (var3, var4) ->
                                (((eval (var3, x, y)) +. (eval (var4, x, y)))
                                      /. 2; [[...]])
                              | Times (var5, var6) ->
                                ((eval (var5, x, y)) *. (eval (var6, x, y)))
                              | Thresh (var7, var8, var9, var0) ->
                                (if (eval (var7, x, y)) < (eval (var8, x, y)) then
                                    (eval (var9, x, y))
                                    else
                                    (eval (var0, x, y)))) ;; 
==============================
File "3056.ml", line 19, characters 72-74:
Try replacing
    /.
with
    /.; [[...]]
of type
    float -> int -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine var1 -> (sin (pi *. (eval (var1, x, y))))
                              | Cosine var2 -> (cos (pi *. (eval (var2, x, y))))
                              | Average (var3, var4) ->
                                (((eval (var3, x, y)) +. (eval (var4, x, y)))
                                      /.; [[...]] 2)
                              | Times (var5, var6) ->
                                ((eval (var5, x, y)) *. (eval (var6, x, y)))
                              | Thresh (var7, var8, var9, var0) ->
                                (if (eval (var7, x, y)) < (eval (var8, x, y)) then
                                    (eval (var9, x, y))
                                    else
                                    (eval (var0, x, y)))) ;; 
==============================
