------------------------------------------------------------------
File "0247.ml", line 7, characters 29-30:
This expression has type int but is here used with type 'a list
Relevant code: x
------------------------------------------------------------------
File "0247.ml", line 7, characters 29-30:
Try replacing
    x
with
    x; [[...]]
of type
    int list
within context
    fun n ->
      (if n < 0 then [] else
        (let (x, y) = (mod n 10), n / 10 in
            (if n < 10 then [n] else (x; [[...]]) @ (digitsOfInt y))))
==============================
File "0247.ml", line 7, characters 31-32:
Try replacing
    @
with
    @; [[...]]
of type
    int -> int list -> int list
within context
    fun n ->
      (if n < 0 then [] else
        (let (x, y) = (mod n 10), n / 10 in
            (if n < 10 then [n] else (x @; [[...]] (digitsOfInt y)))))
==============================
File "0247.ml", line 6, characters 17-39:
Try replacing
    (mod n 10), n / 10
with
    (mod n 10), n / 10; [[...]]
of type
    'b * 'c
within context
    let rec digitsOfInt n =
    (if n < 0 then [] else
      (let (x, y) = (mod n 10), n / 10; [[...]] in
          (if n < 10 then [n] else x @ (digitsOfInt y))))
    ;; 
==============================
