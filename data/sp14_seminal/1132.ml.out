------------------------------------------------------------------
File "1132.ml", line 29, characters 15-32:
This expression has type float but is here used with type int
Relevant code: (eval (e1, x, y))
------------------------------------------------------------------
Triaged the following locations:
File "1132.ml", line 29, characters 54-55:
And modified the following location:
File "1132.ml", line 29, characters 33-34:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    -
If you ignore other surrounding code, try replacing
    -
with
    -; [[...]]
The actual replacement has type
    float -> float -> 'a
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | SquareRoot e' -> (sqrt (eval (e', x, y)))
                              | DivideByOne (e1, e2, e3) ->
                                (1.0 /.
                                      (((eval (e1, x, y))
                                              -; [[...]] (eval (e2, x, y)))
                                          -; [[...]] (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1132.ml", line 29, characters 54-55:
And modified the following location:
File "1132.ml", line 29, characters 33-34:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    -
If you ignore other surrounding code, try replacing
    -
with
    <
The actual replacement has type
    float -> float -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | SquareRoot e' -> (sqrt (eval (e', x, y)))
                              | DivideByOne (e1, e2, e3) ->
                                (1.0 /.
                                      ((eval (e1, x, y)) < (eval (e2, x, y))
                                          -; [[...]] (eval (e3, x, y))))) ;; 
==============================
Triaged the following locations:
File "1132.ml", line 19, characters 15-44:
File "1132.ml", line 20, characters 17-46:
File "1132.ml", line 21, characters 23-70:
File "1132.ml", line 22, characters 21-59:
File "1132.ml", line 24, characters 6-100:
File "1132.ml", line 27, characters 21-43:
And modified the following location:
File "1132.ml", line 29, characters 10-12:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    /.
with
    /.; [[...]]
The actual replacement has type
    float -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> [[...other program...]]
                              | Cosine e' -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | SquareRoot e' -> [[...other program...]]
                              | DivideByOne (e1, e2, e3) ->
                                (1.0 /.; [[...]]
                                      ((eval (e1, x, y)) - (eval (e2, x, y)))
                                        - (eval (e3, x, y)))) ;; 
==============================
