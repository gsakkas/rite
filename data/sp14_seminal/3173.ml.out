------------------------------------------------------------------
File "3173.ml", line 2, characters 68-72:
This expression has type int -> int -> int but is here used with type int
Relevant code: base
------------------------------------------------------------------
File "3173.ml", line 2, characters 46-47:
Try replacing
    f
with
    f; [[...]]
of type
    'a
within context
    let pipe fs =
    let f a x = a + x in let base = f; [[...]] in (List.fold_left f base  fs)
    ;; 
==============================
File "3173.ml", line 2, characters 66-67:
Try replacing
    f
with
    f; [[...]]
of type
    (int -> int -> int) -> 'b -> int -> int -> int
within context
    let pipe fs =
    let f a x = a + x in let base = f in (List.fold_left (f; [[...]]) base  fs)
    ;; 
==============================
File "3173.ml", line 2, characters 68-72:
Try replacing
    base
with
    base; [[...]]
of type
    int
within context
    let pipe fs =
    let f a x = a + x in let base = f in (List.fold_left f (base; [[...]])  fs)
    ;; 
==============================
File "3173.ml", line 2, characters 20-31:
Try replacing
    fun a x -> a + x
with
    fun a x -> a + x; [[...]]
of type
    'c
within context
    let pipe fs =
    let f = fun a x -> a + x; [[...]] in let base = f in (List.fold_left f base  fs)
    ;; 
==============================
File "3173.ml", line 2, characters 51-65:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int -> int -> int) -> (int -> int -> int) -> 'd -> 'e
within context
    let pipe fs =
    let f a x = a + x in let base = f in ((List.fold_left; [[...]]) f base  fs)
    ;; 
==============================
