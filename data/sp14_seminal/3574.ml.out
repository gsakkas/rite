------------------------------------------------------------------
File "3574.ml", line 3, characters 58-59:
This expression has type ('a -> 'b) -> 'a -> 'b but is here used with type
  ('a -> 'b) -> 'a -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "3574.ml", line 3, characters 8-11:
Try replacing
    fun a x -> (a x)
with
    fun x a -> (a x)
of type
    'c -> ('c -> 'd) -> 'd
within context
    let pipe fs =
    let f x a = (a x) in let base x y = (x y) in (List.fold_left f base  fs)
    ;; 
==============================
File "3574.ml", line 3, characters 10-17:
Try replacing
    fun x -> (a x)
with
    fun _ x -> (a x)
of type
    'e -> 'f -> 'g
within context
    let pipe fs =
    let f a _ x = (a x) in let base x y = (x y) in (List.fold_left f base  fs)
    ;; 
==============================
File "3574.ml", line 3, characters 10-17:
Try replacing
    fun x -> (a x)
with
    fun x _ -> (a x)
of type
    'h -> 'i -> 'j
within context
    let pipe fs =
    let f a x _ = (a x) in let base x y = (x y) in (List.fold_left f base  fs)
    ;; 
==============================
File "3574.ml", line 3, characters 43-59:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'k -> 'l list -> 'k
within context
    let pipe fs =
    let f a x = (a x) in let base x y = (x y) in (List.fold_left (f base fs))
    ;; 
==============================
File "3574.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    f
of type
    ((('m -> 'n) -> 'm -> 'n) -> ('m -> 'n) -> 'm -> 'n) ->
    (('m -> 'n) -> 'm -> 'n) -> ('m -> 'n) -> 'm -> 'n
within context
    let pipe fs = let f a x = (a x) in let base x y = (x y) in (f f base  fs) ;; 
==============================
File "3574.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    base
of type
    ((('o -> 'p) -> 'o -> 'p) -> ('o -> 'p) -> 'o -> 'p) ->
    (('o -> 'p) -> 'o -> 'p) -> ('o -> 'p) -> 'o -> 'p
within context
    let pipe fs = let f a x = (a x) in let base x y = (x y) in (base f base  fs) ;; 
==============================
