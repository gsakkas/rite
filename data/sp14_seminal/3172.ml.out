------------------------------------------------------------------
File "3172.ml", line 2, characters 70-72:
This expression has type int but is here used with type 'a list
Relevant code: fs
------------------------------------------------------------------
File "3172.ml", line 2, characters 64-64:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left [[...]] f  base  fs)
of type
    'b -> int
within context
    let pipe fs =
    let f a x = 0 in let base = fs in (List.fold_left [[...]] f  base  fs)
    ;; 
==============================
File "3172.ml", line 2, characters 42-44:
Try replacing
    fs
with
    fs; [[...]]
of type
    'c
within context
    let pipe fs =
    let f a x = 0 in let base = fs; [[...]] in (List.fold_left f base  fs)
    ;; 
==============================
File "3172.ml", line 2, characters 70-72:
Try replacing
    fs
with
    fs; [[...]]
of type
    'd list
within context
    let pipe fs =
    let f a x = 0 in let base = fs in (List.fold_left f base  (fs; [[...]]))
    ;; 
==============================
File "3172.ml", line 2, characters 65-69:
Try replacing
    base
with
    base; [[...]]
of type
    int
within context
    let pipe fs =
    let f a x = 0 in let base = fs in (List.fold_left f (base; [[...]])  fs)
    ;; 
==============================
File "3172.ml", line 2, characters 20-27:
Try replacing
    fun a x -> 0
with
    fun a x -> 0; [[...]]
of type
    'e
within context
    let pipe fs =
    let f = fun a x -> 0; [[...]] in let base = fs in (List.fold_left f base  fs)
    ;; 
==============================
File "3172.ml", line 2, characters 48-62:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('f -> 'g -> int) -> 'h -> 'h -> 'i
within context
    let pipe fs =
    let f a x = 0 in let base = fs in ((List.fold_left; [[...]]) f base  fs)
    ;; 
==============================
