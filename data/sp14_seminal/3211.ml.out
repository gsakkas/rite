------------------------------------------------------------------
File "3211.ml", line 34, characters 12-49:
This expression has type expr but is here used with type unit -> expr
Relevant code: buildSine (build (rand, (depth - 1)))
------------------------------------------------------------------
Triaged the following locations:
File "3211.ml", line 32, characters 12-18:
File "3211.ml", line 33, characters 12-18:
File "3211.ml", line 34, characters 12-49:
File "3211.ml", line 35, characters 12-51:
File "3211.ml", line 37, characters 9-91:
File "3211.ml", line 40, characters 9-89:
And modified the following location:
File "3211.ml", line 43, characters 9-20:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    buildY

    buildX
If you ignore other surrounding code, try replacing
    buildThresh
with
    buildThresh; [[...]]
The actual replacement has type
    bool * bool * bool * bool -> bool
within context
    fun (rand, depth) ->
      (let case = 0 in
          (if depth = 0 then case = (rand (0, 1)) else
              (let case = (rand (0, 6)) in (match case with 
                                            | 0 -> (buildX; [[...]])
                                            | 1 -> (buildY; [[...]])
                                            | 2 -> [[...other program...]]
                                            | 3 -> [[...other program...]]
                                            | 4 -> [[...other program...]]
                                            | 5 -> [[...other program...]]
                                            | 6 ->
                                              ((buildThresh; [[...]])
                                                  ((build (rand, depth - 1)),
                                                      (build (rand, depth - 1)),
                                                      (build (rand, depth - 1)),
                                                      (build
                                                        (rand, depth - 1))))))))
==============================
Triaged the following locations:
File "3211.ml", line 32, characters 12-18:
File "3211.ml", line 33, characters 12-18:
File "3211.ml", line 34, characters 12-49:
File "3211.ml", line 35, characters 12-51:
File "3211.ml", line 37, characters 9-91:
File "3211.ml", line 43, characters 9-161:
And modified the following location:
File "3211.ml", line 40, characters 9-19:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    buildY

    buildX
If you ignore other surrounding code, try replacing
    buildTimes
with
    buildTimes; [[...]]
The actual replacement has type
    bool * bool -> bool
within context
    fun (rand, depth) ->
      (let case = 0 in
          (if depth = 0 then case = (rand (0, 1)) else
              (let case = (rand (0, 6)) in (match case with 
                                            | 0 -> (buildX; [[...]])
                                            | 1 -> (buildY; [[...]])
                                            | 2 -> [[...other program...]]
                                            | 3 -> [[...other program...]]
                                            | 4 -> [[...other program...]]
                                            | 5 ->
                                              ((buildTimes; [[...]])
                                                  ((build (rand, depth - 1)),
                                                      (build (rand, depth - 1))))
                                            | 6 -> [[...other program...]]))))
==============================
Triaged the following locations:
File "3211.ml", line 32, characters 12-18:
File "3211.ml", line 33, characters 12-18:
File "3211.ml", line 35, characters 12-51:
File "3211.ml", line 37, characters 9-91:
File "3211.ml", line 40, characters 9-89:
File "3211.ml", line 43, characters 9-161:
And modified the following location:
File "3211.ml", line 34, characters 12-21:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    buildY

    buildX
If you ignore other surrounding code, try replacing
    buildSine
with
    buildSine; [[...]]
The actual replacement has type
    bool -> bool
within context
    fun (rand, depth) ->
      (let case = 0 in
          (if depth = 0 then case = (rand (0, 1)) else
              (let case = (rand (0, 6)) in (match case with 
                                            | 0 -> (buildX; [[...]])
                                            | 1 -> (buildY; [[...]])
                                            | 2 ->
                                              ((buildSine; [[...]])
                                                  (build (rand, depth - 1)))
                                            | 3 -> [[...other program...]]
                                            | 4 -> [[...other program...]]
                                            | 5 -> [[...other program...]]
                                            | 6 -> [[...other program...]]))))
==============================
Triaged the following locations:
File "3211.ml", line 32, characters 12-18:
File "3211.ml", line 33, characters 12-18:
File "3211.ml", line 34, characters 12-49:
File "3211.ml", line 35, characters 12-51:
File "3211.ml", line 40, characters 9-89:
File "3211.ml", line 43, characters 9-161:
And modified the following location:
File "3211.ml", line 37, characters 9-21:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    buildY

    buildX
If you ignore other surrounding code, try replacing
    buildAverage
with
    buildAverage; [[...]]
The actual replacement has type
    bool * bool -> bool
within context
    fun (rand, depth) ->
      (let case = 0 in
          (if depth = 0 then case = (rand (0, 1)) else
              (let case = (rand (0, 6)) in (match case with 
                                            | 0 -> (buildX; [[...]])
                                            | 1 -> (buildY; [[...]])
                                            | 2 -> [[...other program...]]
                                            | 3 -> [[...other program...]]
                                            | 4 ->
                                              ((buildAverage; [[...]])
                                                  ((build (rand, depth - 1)),
                                                      (build (rand, depth - 1))))
                                            | 5 -> [[...other program...]]
                                            | 6 -> [[...other program...]]))))
==============================
Triaged the following locations:
File "3211.ml", line 32, characters 12-18:
File "3211.ml", line 33, characters 12-18:
File "3211.ml", line 34, characters 12-49:
File "3211.ml", line 37, characters 9-91:
File "3211.ml", line 40, characters 9-89:
File "3211.ml", line 43, characters 9-161:
And modified the following location:
File "3211.ml", line 35, characters 12-23:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    buildY

    buildX
If you ignore other surrounding code, try replacing
    buildCosine
with
    buildCosine; [[...]]
The actual replacement has type
    bool -> bool
within context
    fun (rand, depth) ->
      (let case = 0 in
          (if depth = 0 then case = (rand (0, 1)) else
              (let case = (rand (0, 6)) in (match case with 
                                            | 0 -> (buildX; [[...]])
                                            | 1 -> (buildY; [[...]])
                                            | 2 -> [[...other program...]]
                                            | 3 ->
                                              ((buildCosine; [[...]])
                                                  (build (rand, depth - 1)))
                                            | 4 -> [[...other program...]]
                                            | 5 -> [[...other program...]]
                                            | 6 -> [[...other program...]]))))
==============================
