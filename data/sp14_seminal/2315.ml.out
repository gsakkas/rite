------------------------------------------------------------------
File "2315.ml", line 21, characters 50-51:
This expression has type 'a list * 'b list -> 'c -> bool
but is here used with type 'a list * 'b list -> 'c -> 'a list * 'b list
Relevant code: f
------------------------------------------------------------------
File "2315.ml", line 21, characters 50-51:
Try replacing
    f
with
    f; [[...]]
of type
    'd list * 'e list -> 'f -> 'd list * 'e list
within context
    let f a x = let (h :: t, _) = a in a = ([], []) in
      let base = (List.rev l1), [] in
      let args = l2 in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "2315.ml", line 21, characters 35-49:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('g list * 'h list -> 'i -> bool) -> 'j list * 'k list -> 'l -> 'm * 'n
within context
    let f a x = let (h :: t, _) = a in a = ([], []) in
      let base = (List.rev l1), [] in
      let args = l2 in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "2315.ml", line 19, characters 10-48:
Try replacing
    fun a x -> (let (h :: t, _) = a in a = ([], []))
with
    fun a x -> (let (h :: t, _) = a in a = ([], [])); [[...]]
of type
    'o
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f = fun a x -> (let (h :: t, _) = a in a = ([], [])); [[...]] in
              let base = (List.rev l1), [] in
              let args = l2 in let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
