------------------------------------------------------------------
File "2578.ml", line 21, characters 60-64:
This expression has type 'a list * 'b list but is here used with type
  int list
Relevant code: base
------------------------------------------------------------------
File "2578.ml", line 21, characters 58-59:
Try replacing
    f
with
    f; [[...]]
of type
    'c list * 'd list -> 'e * 'f -> 'c list * 'd list
within context
    let f a x = x + x :: a in
      let base = [], [] in
      let args = [l1, l2] in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "2578.ml", line 21, characters 43-57:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list -> int -> int list) ->
    'g list * 'h list -> ('i * 'j) list -> 'k * 'l
within context
    let f a x = x + x :: a in
      let base = [], [] in
      let args = [l1, l2] in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "2578.ml", line 19, characters 10-28:
Try replacing
    fun a x -> x + x :: a
with
    fun a x -> x + x :: a; [[...]]
of type
    'm
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f = fun a x -> x + x :: a; [[...]] in
              let base = [], [] in
              let args = [l1, l2] in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
