------------------------------------------------------------------
File "2302.ml", line 21, characters 50-51:
This expression has type int list * 'a -> int -> int * 'b list
but is here used with type int list * 'a -> int -> int list * 'a
Relevant code: f
------------------------------------------------------------------
File "2302.ml", line 21, characters 50-51:
Try replacing
    f
with
    f; [[...]]
of type
    'c list * 'd list -> 'e -> 'c list * 'd list
within context
    let f a x = let (h :: t, _) = a in x + h, [] in
      let base = (List.rev l1), [] in
      let args = l2 in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "2302.ml", line 21, characters 35-49:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list * 'f -> int -> int * 'g list) -> 'h list * 'i list -> 'j -> 'k * 'l
within context
    let f a x = let (h :: t, _) = a in x + h, [] in
      let base = (List.rev l1), [] in
      let args = l2 in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "2302.ml", line 19, characters 10-49:
Try replacing
    fun a x -> (let (h :: t, _) = a in x + h, [])
with
    fun a x -> (let (h :: t, _) = a in x + h, []); [[...]]
of type
    'm
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f = fun a x -> (let (h :: t, _) = a in x + h, []); [[...]] in
              let base = (List.rev l1), [] in
              let args = l2 in let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
