------------------------------------------------------------------
File "0808.ml", line 30, characters 51-52:
This expression has type int but is here used with type float
Relevant code: 2
------------------------------------------------------------------
File "0808.ml", line 30, characters 51-52:
Try replacing
    2
with
    2; [[...]]
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Sqrt e -> (sqrt (abs_float (eval (e, x, y))))
                              | Quad (e1, e2, e3) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y)))
                                        ** (2; [[...]])
                                      +. (eval (e3, x, y)))
                              | _ ->
                                (failwith
                                    "we are seriously writing a lisp compiler god save us all")) ;; 
==============================
File "0808.ml", line 30, characters 48-50:
Try replacing
    **
with
    **; [[...]]
of type
    float -> int -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Sqrt e -> (sqrt (abs_float (eval (e, x, y))))
                              | Quad (e1, e2, e3) ->
                                ((((eval (e1, x, y)) +. (eval (e2, x, y)))
                                          **; [[...]] 2)
                                      +. (eval (e3, x, y)))
                              | _ ->
                                (failwith
                                    "we are seriously writing a lisp compiler god save us all")) ;; 
==============================
