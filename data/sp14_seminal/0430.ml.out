------------------------------------------------------------------
File "0430.ml", line 78, characters 48-53:
This expression is not a function, it cannot be applied
Relevant code: depth
------------------------------------------------------------------
File "0430.ml", line 78, characters 54-57:
Try replacing
    (depth num)
with
    depth
of type
    (int * int -> int) * int
within context
    fun (rand, depth) -> (match depth with 
                          | 0 ->
                            (let num = (rand (1, 10)) in
                                  (if num > 3 then (buildX ()) else (buildY ())))
                          | 1 ->
                            (let num = (rand (1, 10)) in
                                  (if (mod num 2) = 0 then
                                      (buildSine (build (rand, depth - 1)))
                                      else
                                      (buildCosine (build (rand, depth - 1)))))
                          | 2 ->
                            (let num = (rand (1, 30)) in
                                  (if (mod num 2) == 0 then
                                      (buildTimes
                                        ((buildSine (build (rand, depth - 1))),
                                            (build (rand, depth - 1))))
                                      else
                                      (buildTimes
                                        ((buildCosine (build (rand, depth - 1))),
                                            (build (rand, depth - 1))))))
                          | 3 ->
                            (let num = (rand (1, 50)) in
                                  (if (mod num 2) = 0 then
                                      (buildTimes
                                        ((buildAverage
                                              ((build (rand, depth - 1)),
                                                  (build (rand, depth - 1))))
                                            ,
                                            (buildCosine
                                              (build (rand, depth - 1)))))
                                      else
                                      (buildTimes
                                        ((buildAverage
                                              ((build (rand, depth - 1)),
                                                  (build (rand, depth - 1))))
                                            ,
                                            (buildSine
                                              (build (rand, depth - 1)))))))
                          | 4 ->
                            (buildTimes
                                ((build (rand, depth - 1)),
                                    (build (rand, depth - 1))))
                          | 5 ->
                            (let num = (rand (1, 10)) in
                                  (if num = 1 then
                                      (buildSine
                                        (buildSine
                                          (buildSine (build (rand, depth - 1)))))
                                      else
                                      (if num = 2 then
                                        (buildCosine
                                          (buildCosine
                                            (buildCosine
                                              (build (rand, depth - 1)))))
                                        else
                                        (if num = 3 then
                                          (buildSine
                                            (buildCosine (build (rand, depth - 1))))
                                          else
                                          (buildCosine
                                            (buildSine
                                              (build (rand, depth - 1))))))))
                          | 6 ->
                            (buildAverage
                                ((build (rand, depth - 1)),
                                    (build (rand, depth - 1))))
                          | 7 ->
                            (buildTimes
                                ((build (rand, depth - 1)),
                                    (build (rand, depth - 1))))
                          | 8 ->
                            (buildTimes
                                ((buildAverage
                                      ((build (rand, depth - 1)),
                                          (build (rand, depth - 1))))
                                    ,
                                    (buildSine (build (rand, depth - 1)))))
                          | _ -> (let num = (rand (1, 3)) in (build (rand, depth))))
==============================
