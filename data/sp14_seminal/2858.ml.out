------------------------------------------------------------------
File "2858.ml", line 7, characters 62-76:
This expression has type 'a list * bool but is here used with type
  'a list * 'a list
Relevant code: (seen', rest')
------------------------------------------------------------------
File "2858.ml", line 7, characters 70-75:
Try replacing
    rest'
with
    seen'
of type
    'b list * 'b list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = [h] in let rest' = (List.mem h l) in (helper (seen', seen'))))
==============================
File "2858.ml", line 7, characters 70-75:
Try replacing
    rest'
with
    t
of type
    'c list * 'c list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = [h] in let rest' = (List.mem h l) in (helper (seen', t))))
==============================
File "2858.ml", line 7, characters 70-75:
Try replacing
    rest'
with
    l
of type
    'd list * 'd list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = [h] in let rest' = (List.mem h l) in (helper (seen', l))))
==============================
File "2858.ml", line 7, characters 70-75:
Try replacing
    rest'
with
    seen
of type
    'e list * 'e list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = [h] in let rest' = (List.mem h l) in (helper (seen', seen))))
==============================
File "2858.ml", line 7, characters 70-75:
Try replacing
    rest'
with
    rest
of type
    'f list * 'f list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = [h] in let rest' = (List.mem h l) in (helper (seen', rest))))
==============================
