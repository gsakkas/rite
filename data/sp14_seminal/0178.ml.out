------------------------------------------------------------------
File "0178.ml", line 17, characters 19-21:
This expression has type float but is here used with type int
Relevant code: pi
------------------------------------------------------------------
Triaged the following locations:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
File "0178.ml", line 22, characters 6-96:
And modified the following location:
File "0178.ml", line 17, characters 22-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *
with
    *; [[...]]
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin (pi *; [[...]] (eval (a, x, y))))
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) -> [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
File "0178.ml", line 22, characters 6-96:
And modified the following location:
File "0178.ml", line 18, characters 24-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *
with
    *; [[...]]
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> (cos (pi *; [[...]] (eval (a, x, y))))
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) -> [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 20, characters 19-55:
File "0178.ml", line 22, characters 6-96:
And modified the following location:
File "0178.ml", line 19, characters 39-40:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    +
with
    +; [[...]]
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) ->
                                (((eval (a, x, y)) +; [[...]] (eval (b, x, y)))
                                      /. 2.)
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) -> [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 20, characters 19-55:
File "0178.ml", line 22, characters 6-96:
And modified the following location:
File "0178.ml", line 19, characters 59-61:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    /.
with
    /.; [[...]]
The actual replacement has type
    int -> float -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) ->
                                ((eval (a, x, y)) + (eval (b, x, y)) /.; [[...]] 2.)
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) -> [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 10-14:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * 'a * 'a -> 'a
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 16-17:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    a
with
    e
The actual replacement has type
    expr * 'b * 'b
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (e, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 16-17:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    a
with
    x
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (x, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 16-17:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    a
with
    a
The actual replacement has type
    expr * 'c * 'c
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 16-17:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    a
with
    c
The actual replacement has type
    expr * 'd * 'd
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (c, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 16-17:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    a
with
    d
The actual replacement has type
    expr * 'e * 'e
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (d, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 16-17:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    a
with
    b
The actual replacement has type
    expr * 'f * 'f
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (b, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 19-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    d
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, d, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 19-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    e
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, e, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 19-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    <
The actual replacement has type
    expr * ('g -> 'g -> bool) * ('g -> 'g -> bool)
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, <, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "0178.ml", line 17, characters 14-41:
File "0178.ml", line 18, characters 16-43:
File "0178.ml", line 19, characters 21-64:
File "0178.ml", line 20, characters 19-55:
And modified the following location:
File "0178.ml", line 22, characters 19-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    b
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> [[...other program...]]
                              | Cosine a -> [[...other program...]]
                              | Average (a, b) -> [[...other program...]]
                              | Times (a, b) -> [[...other program...]]
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, b, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
