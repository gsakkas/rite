AppG (fromList [AppG (fromList [EmptyG])])
List.rev (List.tl (List.rev (h1 :: t1)))
List.combine (List.rev l1)
             (List.rev l2)
x (a b)
additivePersistence (sumList (digits n))
digitsOfInt (sumList (digitsOfInt n))
additivePersistence (sumList (digitsOfInt n))
listReverse (digitsOfInt (n / 10))
listReverse (explode w)
List.rev (List.combine l1 l2)
buildSine (build (rand , depth - 1))
int_of_float (float_of_int x ** 2.0)
abs_float (eval (a' , x , y))
abs_float (eval (b' , x , y))
x (a x')
sumList (digits n)
List.rev (helper ([] , l))
buildSine (buildX ())
buildOp1 (build (rand , depth - 1))
float_of_string (exprToString e)
digitalRoot (sumDigits n)
sumList (digitsOfInt n)
sumList (List.tl xs)
List.rev (removeZero (add (padZero l1
                                   l2)))
x (a l)
abs_float (eval (e2 , x , y))
additivePersistence (digitSum (digits n))
abs_float (cos (pi *. eval (e' , x , y)))
abs_float (sin ((cos (pi *. eval (e1 , x , y)) *. cos (pi *. eval (e2 , x , y))) *. cos (pi *. eval (e3 , x , y))))
pair (List.rev l1)
     (List.rev l2)
removeZero (add (padZero l1
                         l2))
not (List.mem h seen)
mulByTen (List.length y)
int_of_float (10.0 ** float_of_int pos)
x (a y)
x (a k)
abs_float (eval (u , x , y))
abs_float (eval (v , x , y))
abs_float (eval (w , x , y))
exprToString x ^ ("*" ^ exprToString y)
listReverse (append t [h])
helper (sumList (digits x))
sumList (digits x)
x (a g)
mulHelper (List.rev (0 :: l))
bigAdd (List.rev (0 :: (List.rev a)))
       (mulByDigit x l2)
removeZero (List.fold_left f
                           base args)
cos (pi ** eval (a , x , y))
sin (eval (a , x , y))
cos (eval (a , x , y))
x (a j)
bigAdd (bigAdd l l)
       (mulByDigit (i - 2) l)
digitalRoot (sumList (digitsOfInt n))
a (x g)
buildSine (build (rand , depth - (depth - 1)))
exprToString e3 ^ ("?" ^ exprToString e4)
additivePersistence (help n)
exprToString var5 ^ (" * " ^ exprToString var6)
listReverse (cat l h)
mulByDigit i
           (List.rev (List.map (fun x ->
                                  x * 10) t)) @ (helper []
                                                        (h * i) @ [])
mulByDigit i
           (List.rev (List.map (fun x ->
                                  x * 10) t)) @ helper []
                                                       (h * i)
bigAdd (mulByDigit i
                   (List.rev (List.map (fun x ->
                                          x * 10) t)))
       (helper [] (h * i))
List.rev (digitsOfInt (n / 10))
