
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper (depth - 1) (depth - 1) expr)
        else buildCosine (buildhelper 0 (depth - 1) (depth - 1) expr)
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 3 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 4 ->
        buildTimes
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr))
    | _ ->
        buildTimes
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr)) in
  buildhelper (rand (1, 4)) depth "";;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper 0 0 expr)
        else buildCosine (buildhelper 0 0 expr)
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 3 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 4 ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr))
    | _ ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr)) in
  buildhelper (rand (1, 4)) depth "";;

*)

(* changed spans
(17,16)-(17,39)
(29,36)-(29,47)
(29,37)-(29,42)
(29,45)-(29,46)
(29,48)-(29,59)
(29,49)-(29,54)
(29,57)-(29,58)
(29,60)-(29,64)
(30,25)-(30,69)
(30,40)-(30,51)
(30,41)-(30,46)
(30,49)-(30,50)
(30,52)-(30,63)
(30,53)-(30,58)
(30,61)-(30,62)
(52,8)-(52,18)
(58,8)-(58,18)
*)

(* type error slice
(15,3)-(15,26)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,3)-(17,41)
(17,16)-(17,39)
(29,13)-(29,22)
(29,13)-(29,65)
(29,23)-(29,65)
(29,24)-(29,35)
(30,25)-(30,69)
(30,26)-(30,37)
(30,52)-(30,63)
(52,8)-(52,18)
(52,8)-(56,55)
(53,10)-(56,55)
(58,8)-(58,18)
(58,8)-(62,55)
(59,10)-(62,55)
(63,2)-(63,13)
(63,2)-(63,36)
(63,34)-(63,36)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,16)-(17,39)
(17,25)-(17,39)
(17,32)-(17,34)
(17,36)-(17,38)
(19,11)-(19,20)
(19,16)-(19,20)
(21,11)-(21,20)
(21,16)-(21,20)
(23,15)-(63,36)
(24,2)-(63,36)
(24,22)-(62,55)
(24,26)-(62,55)
(24,32)-(62,55)
(25,4)-(62,55)
(25,10)-(25,13)
(26,11)-(26,61)
(26,14)-(26,31)
(26,14)-(26,27)
(26,15)-(26,19)
(26,20)-(26,26)
(26,21)-(26,22)
(26,24)-(26,25)
(26,30)-(26,31)
(26,37)-(26,46)
(26,37)-(26,43)
(26,44)-(26,46)
(26,52)-(26,61)
(26,52)-(26,58)
(26,59)-(26,61)
(28,8)-(30,69)
(28,11)-(28,28)
(28,11)-(28,24)
(28,12)-(28,16)
(28,17)-(28,23)
(28,18)-(28,19)
(28,21)-(28,22)
(28,27)-(28,28)
(29,13)-(29,65)
(29,13)-(29,22)
(29,23)-(29,65)
(29,24)-(29,35)
(29,36)-(29,47)
(29,37)-(29,42)
(29,45)-(29,46)
(29,48)-(29,59)
(29,49)-(29,54)
(29,57)-(29,58)
(29,60)-(29,64)
(30,13)-(30,69)
(30,13)-(30,24)
(30,25)-(30,69)
(30,26)-(30,37)
(30,38)-(30,39)
(30,40)-(30,51)
(30,41)-(30,46)
(30,49)-(30,50)
(30,52)-(30,63)
(30,53)-(30,58)
(30,61)-(30,62)
(30,64)-(30,68)
(32,8)-(40,57)
(32,11)-(32,28)
(32,11)-(32,24)
(32,12)-(32,16)
(32,17)-(32,23)
(32,18)-(32,19)
(32,21)-(32,22)
(32,27)-(32,28)
(34,10)-(36,57)
(34,10)-(34,22)
(35,12)-(36,57)
(35,13)-(35,55)
(35,14)-(35,25)
(35,26)-(35,37)
(35,27)-(35,32)
(35,35)-(35,36)
(35,38)-(35,49)
(35,39)-(35,44)
(35,47)-(35,48)
(35,50)-(35,54)
(36,14)-(36,56)
(36,15)-(36,26)
(36,27)-(36,38)
(36,28)-(36,33)
(36,36)-(36,37)
(36,39)-(36,50)
(36,40)-(36,45)
(36,48)-(36,49)
(36,51)-(36,55)
(38,10)-(40,57)
(38,10)-(38,20)
(39,12)-(40,57)
(39,13)-(39,55)
(39,14)-(39,25)
(39,26)-(39,37)
(39,27)-(39,32)
(39,35)-(39,36)
(39,38)-(39,49)
(39,39)-(39,44)
(39,47)-(39,48)
(39,50)-(39,54)
(40,14)-(40,56)
(40,15)-(40,26)
(40,27)-(40,38)
(40,28)-(40,33)
(40,36)-(40,37)
(40,39)-(40,50)
(40,40)-(40,45)
(40,48)-(40,49)
(40,51)-(40,55)
(42,8)-(50,57)
(42,11)-(42,28)
(42,11)-(42,24)
(42,12)-(42,16)
(42,17)-(42,23)
(42,18)-(42,19)
(42,21)-(42,22)
(42,27)-(42,28)
(44,10)-(46,57)
(44,10)-(44,22)
(45,12)-(46,57)
(45,13)-(45,55)
(45,14)-(45,25)
(45,26)-(45,37)
(45,27)-(45,32)
(45,35)-(45,36)
(45,38)-(45,49)
(45,39)-(45,44)
(45,47)-(45,48)
(45,50)-(45,54)
(46,14)-(46,56)
(46,15)-(46,26)
(46,27)-(46,38)
(46,28)-(46,33)
(46,36)-(46,37)
(46,39)-(46,50)
(46,40)-(46,45)
(46,48)-(46,49)
(46,51)-(46,55)
(48,10)-(50,57)
(48,10)-(48,20)
(49,12)-(50,57)
(49,13)-(49,55)
(49,14)-(49,25)
(49,26)-(49,37)
(49,27)-(49,32)
(49,35)-(49,36)
(49,38)-(49,49)
(49,39)-(49,44)
(49,47)-(49,48)
(49,50)-(49,54)
(50,14)-(50,56)
(50,15)-(50,26)
(50,27)-(50,38)
(50,28)-(50,33)
(50,36)-(50,37)
(50,39)-(50,50)
(50,40)-(50,45)
(50,48)-(50,49)
(50,51)-(50,55)
(52,8)-(56,55)
(52,8)-(52,18)
(53,10)-(56,55)
(53,11)-(53,53)
(53,12)-(53,23)
(53,24)-(53,35)
(53,25)-(53,30)
(53,33)-(53,34)
(53,36)-(53,47)
(53,37)-(53,42)
(53,45)-(53,46)
(53,48)-(53,52)
(54,12)-(54,54)
(54,13)-(54,24)
(54,25)-(54,36)
(54,26)-(54,31)
(54,34)-(54,35)
(54,37)-(54,48)
(54,38)-(54,43)
(54,46)-(54,47)
(54,49)-(54,53)
(55,12)-(55,54)
(55,13)-(55,24)
(55,25)-(55,36)
(55,26)-(55,31)
(55,34)-(55,35)
(55,37)-(55,48)
(55,38)-(55,43)
(55,46)-(55,47)
(55,49)-(55,53)
(56,12)-(56,54)
(56,13)-(56,24)
(56,25)-(56,36)
(56,26)-(56,31)
(56,34)-(56,35)
(56,37)-(56,48)
(56,38)-(56,43)
(56,46)-(56,47)
(56,49)-(56,53)
(58,8)-(62,55)
(58,8)-(58,18)
(59,10)-(62,55)
(59,11)-(59,53)
(59,12)-(59,23)
(59,24)-(59,35)
(59,25)-(59,30)
(59,33)-(59,34)
(59,36)-(59,47)
(59,37)-(59,42)
(59,45)-(59,46)
(59,48)-(59,52)
(60,12)-(60,54)
(60,13)-(60,24)
(60,25)-(60,36)
(60,26)-(60,31)
(60,34)-(60,35)
(60,37)-(60,48)
(60,38)-(60,43)
(60,46)-(60,47)
(60,49)-(60,53)
(61,12)-(61,54)
(61,13)-(61,24)
(61,25)-(61,36)
(61,26)-(61,31)
(61,34)-(61,35)
(61,37)-(61,48)
(61,38)-(61,43)
(61,46)-(61,47)
(61,49)-(61,53)
(62,12)-(62,54)
(62,13)-(62,24)
(62,25)-(62,36)
(62,26)-(62,31)
(62,34)-(62,35)
(62,37)-(62,48)
(62,38)-(62,43)
(62,46)-(62,47)
(62,49)-(62,53)
(63,2)-(63,36)
(63,2)-(63,13)
(63,14)-(63,27)
(63,15)-(63,19)
(63,20)-(63,26)
(63,21)-(63,22)
(63,24)-(63,25)
(63,28)-(63,33)
(63,34)-(63,36)
*)
