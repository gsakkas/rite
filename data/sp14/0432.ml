
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Percent of expr
  | Negate of expr
  | SumSquared of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildNegate e = Negate e;;

let buildPercent e = Percent e;;

let buildSine e = Sine e;;

let buildSumSquared (e1,e2,e3) = SumSquared (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let num = rand (1, 10) in (if num > 4 then buildX () else buildY ())
  else
    (let num = rand (1, 10) in
     match num with
     | 1|2 -> buildSine (build (rand, (depth - 1)))
     | 3|4 -> buildCosine (build (rand, (depth - 1)))
     | 5|6 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7|8 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 9 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if (num mod 2) = 0
         then buildPercent (rand, (depth - 1))
         else
           if (num mod 3) = 0
           then buildNegate (rand, (depth - 1))
           else
             buildSumSquared
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1)))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Percent of expr
  | Negate of expr
  | SumSquared of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildNegate e = Negate e;;

let buildPercent e = Percent e;;

let buildSine e = Sine e;;

let buildSumSquared (e1,e2,e3) = SumSquared (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let num = rand (1, 10) in (if num > 4 then buildX () else buildY ())
  else
    (let num = rand (1, 10) in
     match num with
     | 1|2 -> buildSine (build (rand, (depth - 1)))
     | 3|4 -> buildCosine (build (rand, (depth - 1)))
     | 5|6 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 7|8 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 9 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | _ ->
         if (num mod 2) = 0
         then buildPercent (build (rand, (depth - 1)))
         else
           if (num mod 3) = 0
           then buildNegate (build (rand, (depth - 1)))
           else
             buildSumSquared
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1)))));;

*)

(* changed spans
(54,27)-(54,46)
(57,28)-(57,47)
*)

(* type error slice
(18,3)-(18,30)
(18,16)-(18,28)
(18,20)-(18,28)
(18,27)-(18,28)
(20,3)-(20,32)
(20,17)-(20,30)
(20,21)-(20,30)
(20,29)-(20,30)
(54,14)-(54,26)
(54,14)-(54,46)
(54,27)-(54,46)
(57,16)-(57,27)
(57,16)-(57,47)
(57,28)-(57,47)
*)

(* all spans
(14,18)-(14,43)
(14,27)-(14,43)
(14,36)-(14,38)
(14,40)-(14,42)
(16,16)-(16,28)
(16,20)-(16,28)
(16,27)-(16,28)
(18,16)-(18,28)
(18,20)-(18,28)
(18,27)-(18,28)
(20,17)-(20,30)
(20,21)-(20,30)
(20,29)-(20,30)
(22,14)-(22,24)
(22,18)-(22,24)
(22,23)-(22,24)
(24,21)-(24,56)
(24,33)-(24,56)
(24,45)-(24,47)
(24,49)-(24,51)
(24,53)-(24,55)
(26,17)-(26,67)
(26,38)-(26,67)
(26,46)-(26,47)
(26,49)-(26,50)
(26,52)-(26,58)
(26,60)-(26,66)
(28,16)-(28,39)
(28,25)-(28,39)
(28,32)-(28,34)
(28,36)-(28,38)
(30,11)-(30,20)
(30,16)-(30,20)
(32,11)-(32,20)
(32,16)-(32,20)
(34,15)-(61,46)
(35,2)-(61,46)
(35,5)-(35,14)
(35,5)-(35,10)
(35,13)-(35,14)
(36,7)-(36,75)
(36,17)-(36,29)
(36,17)-(36,21)
(36,22)-(36,29)
(36,23)-(36,24)
(36,26)-(36,28)
(36,33)-(36,75)
(36,37)-(36,44)
(36,37)-(36,40)
(36,43)-(36,44)
(36,50)-(36,59)
(36,50)-(36,56)
(36,57)-(36,59)
(36,65)-(36,74)
(36,65)-(36,71)
(36,72)-(36,74)
(38,4)-(61,46)
(38,15)-(38,27)
(38,15)-(38,19)
(38,20)-(38,27)
(38,21)-(38,22)
(38,24)-(38,26)
(39,5)-(61,45)
(39,11)-(39,14)
(40,14)-(40,51)
(40,14)-(40,23)
(40,24)-(40,51)
(40,25)-(40,30)
(40,31)-(40,50)
(40,32)-(40,36)
(40,38)-(40,49)
(40,39)-(40,44)
(40,47)-(40,48)
(41,14)-(41,53)
(41,14)-(41,25)
(41,26)-(41,53)
(41,27)-(41,32)
(41,33)-(41,52)
(41,34)-(41,38)
(41,40)-(41,51)
(41,41)-(41,46)
(41,49)-(41,50)
(43,9)-(44,69)
(43,9)-(43,21)
(44,11)-(44,69)
(44,12)-(44,39)
(44,13)-(44,18)
(44,19)-(44,38)
(44,20)-(44,24)
(44,26)-(44,37)
(44,27)-(44,32)
(44,35)-(44,36)
(44,41)-(44,68)
(44,42)-(44,47)
(44,48)-(44,67)
(44,49)-(44,53)
(44,55)-(44,66)
(44,56)-(44,61)
(44,64)-(44,65)
(46,9)-(47,69)
(46,9)-(46,19)
(47,11)-(47,69)
(47,12)-(47,39)
(47,13)-(47,18)
(47,19)-(47,38)
(47,20)-(47,24)
(47,26)-(47,37)
(47,27)-(47,32)
(47,35)-(47,36)
(47,41)-(47,68)
(47,42)-(47,47)
(47,48)-(47,67)
(47,49)-(47,53)
(47,55)-(47,66)
(47,56)-(47,61)
(47,64)-(47,65)
(49,9)-(51,70)
(49,9)-(49,20)
(50,11)-(51,70)
(50,12)-(50,39)
(50,13)-(50,18)
(50,19)-(50,38)
(50,20)-(50,24)
(50,26)-(50,37)
(50,27)-(50,32)
(50,35)-(50,36)
(50,41)-(50,68)
(50,42)-(50,47)
(50,48)-(50,67)
(50,49)-(50,53)
(50,55)-(50,66)
(50,56)-(50,61)
(50,64)-(50,65)
(51,13)-(51,40)
(51,14)-(51,19)
(51,20)-(51,39)
(51,21)-(51,25)
(51,27)-(51,38)
(51,28)-(51,33)
(51,36)-(51,37)
(51,42)-(51,69)
(51,43)-(51,48)
(51,49)-(51,68)
(51,50)-(51,54)
(51,56)-(51,67)
(51,57)-(51,62)
(51,65)-(51,66)
(53,9)-(61,45)
(53,12)-(53,27)
(53,12)-(53,23)
(53,13)-(53,16)
(53,21)-(53,22)
(53,26)-(53,27)
(54,14)-(54,46)
(54,14)-(54,26)
(54,27)-(54,46)
(54,28)-(54,32)
(54,34)-(54,45)
(54,35)-(54,40)
(54,43)-(54,44)
(56,11)-(61,45)
(56,14)-(56,29)
(56,14)-(56,25)
(56,15)-(56,18)
(56,23)-(56,24)
(56,28)-(56,29)
(57,16)-(57,47)
(57,16)-(57,27)
(57,28)-(57,47)
(57,29)-(57,33)
(57,35)-(57,46)
(57,36)-(57,41)
(57,44)-(57,45)
(59,13)-(61,45)
(59,13)-(59,28)
(60,15)-(61,45)
(60,16)-(60,43)
(60,17)-(60,22)
(60,23)-(60,42)
(60,24)-(60,28)
(60,30)-(60,41)
(60,31)-(60,36)
(60,39)-(60,40)
(60,45)-(60,72)
(60,46)-(60,51)
(60,52)-(60,71)
(60,53)-(60,57)
(60,59)-(60,70)
(60,60)-(60,65)
(60,68)-(60,69)
(61,17)-(61,44)
(61,18)-(61,23)
(61,24)-(61,43)
(61,25)-(61,29)
(61,31)-(61,42)
(61,32)-(61,37)
(61,40)-(61,41)
*)
