
let rec mulByDigit i l =
  match List.rev l with
  | [] -> 0
  | h::t ->
      let rec helper acc v =
        if v = 0 then 0 :: acc else helper ((v mod 10) :: acc) (v / 10) in
      (helper ((mulByDigit i (List.rev t)) * 10)) + (h * i);;


(* fix

let rec mulByDigit i l =
  match l with
  | [] -> []
  | h::t ->
      let rec helper acc v =
        if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
      helper [] h;;

*)

(* changed spans
(3,8)-(3,16)
(3,8)-(3,18)
(4,10)-(4,11)
(7,22)-(7,23)
(7,22)-(7,30)
(8,6)-(8,49)
(8,6)-(8,59)
*)

(* type error slice
(7,36)-(7,42)
(7,36)-(7,71)
(7,43)-(7,62)
(8,6)-(8,49)
(8,7)-(8,13)
(8,14)-(8,48)
*)

(* all spans
(2,19)-(8,59)
(2,21)-(8,59)
(3,2)-(8,59)
(3,8)-(3,18)
(3,8)-(3,16)
(3,17)-(3,18)
(4,10)-(4,11)
(6,6)-(8,59)
(6,21)-(7,71)
(6,25)-(7,71)
(7,8)-(7,71)
(7,11)-(7,16)
(7,11)-(7,12)
(7,15)-(7,16)
(7,22)-(7,30)
(7,22)-(7,23)
(7,27)-(7,30)
(7,36)-(7,71)
(7,36)-(7,42)
(7,43)-(7,62)
(7,44)-(7,54)
(7,45)-(7,46)
(7,51)-(7,53)
(7,58)-(7,61)
(7,63)-(7,71)
(7,64)-(7,65)
(7,68)-(7,70)
(8,6)-(8,59)
(8,6)-(8,49)
(8,7)-(8,13)
(8,14)-(8,48)
(8,15)-(8,42)
(8,16)-(8,26)
(8,27)-(8,28)
(8,29)-(8,41)
(8,30)-(8,38)
(8,39)-(8,40)
(8,45)-(8,47)
(8,52)-(8,59)
(8,53)-(8,54)
(8,57)-(8,58)
*)
