
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | FiboPlus of expr* expr
  | TheThing of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildFiboPlus (e1,e2) = FiboPlus (e1, e2);;

let buildSine e = Sine e;;

let buildTheThing (e1,e2,e3) = TheThing (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 8) with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 7 ->
        buildFiboPlus
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
    | 8 ->
        buildTheThing
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
  else (match rand (0, 1) with | 0 -> buildX () | 1 -> buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | FiboPlus of expr* expr
  | TheThing of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildFiboPlus (e1,e2) = FiboPlus (e1, e2);;

let buildSine e = Sine e;;

let buildTheThing (e1,e2,e3) = TheThing (e1, e2, e3);;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    match rand (0, 8) with
    | 0 -> buildX ()
    | 1 -> buildY ()
    | 2 -> buildSine (build (rand, (depth - 1)))
    | 3 -> buildCosine (build (rand, (depth - 1)))
    | 4 ->
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 5 ->
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 6 ->
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 7 ->
        buildFiboPlus
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
    | 8 ->
        buildTheThing
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
  else (match rand (0, 1) with | 0 -> buildX () | 1 -> buildY ());;

*)

(* changed spans
(50,10)-(52,40)
(50,11)-(50,38)
(50,12)-(50,17)
(50,19)-(50,23)
(50,25)-(50,36)
(50,26)-(50,31)
(50,34)-(50,35)
(51,42)-(51,47)
(51,48)-(51,67)
(51,49)-(51,53)
(51,55)-(51,66)
(51,56)-(51,61)
(51,64)-(51,65)
(52,12)-(52,39)
(52,13)-(52,18)
(52,19)-(52,38)
(52,20)-(52,24)
(52,26)-(52,37)
(52,27)-(52,32)
(52,35)-(52,36)
(54,8)-(56,40)
*)

(* type error slice
(17,3)-(17,47)
(17,19)-(17,45)
(49,8)-(49,21)
(49,8)-(52,40)
(50,10)-(52,40)
*)

(* all spans
(13,18)-(13,43)
(13,27)-(13,43)
(13,36)-(13,38)
(13,40)-(13,42)
(15,16)-(15,28)
(15,20)-(15,28)
(15,27)-(15,28)
(17,19)-(17,45)
(17,28)-(17,45)
(17,38)-(17,40)
(17,42)-(17,44)
(19,14)-(19,24)
(19,18)-(19,24)
(19,23)-(19,24)
(21,19)-(21,52)
(21,31)-(21,52)
(21,41)-(21,43)
(21,45)-(21,47)
(21,49)-(21,51)
(23,17)-(23,67)
(23,38)-(23,67)
(23,46)-(23,47)
(23,49)-(23,50)
(23,52)-(23,58)
(23,60)-(23,66)
(25,16)-(25,39)
(25,25)-(25,39)
(25,32)-(25,34)
(25,36)-(25,38)
(27,11)-(27,20)
(27,16)-(27,20)
(29,11)-(29,20)
(29,16)-(29,20)
(31,15)-(57,65)
(32,2)-(57,65)
(32,5)-(32,14)
(32,5)-(32,10)
(32,13)-(32,14)
(34,4)-(56,40)
(34,10)-(34,21)
(34,10)-(34,14)
(34,15)-(34,21)
(34,16)-(34,17)
(34,19)-(34,20)
(35,11)-(35,20)
(35,11)-(35,17)
(35,18)-(35,20)
(36,11)-(36,20)
(36,11)-(36,17)
(36,18)-(36,20)
(37,11)-(37,48)
(37,11)-(37,20)
(37,21)-(37,48)
(37,22)-(37,27)
(37,28)-(37,47)
(37,29)-(37,33)
(37,35)-(37,46)
(37,36)-(37,41)
(37,44)-(37,45)
(38,11)-(38,50)
(38,11)-(38,22)
(38,23)-(38,50)
(38,24)-(38,29)
(38,30)-(38,49)
(38,31)-(38,35)
(38,37)-(38,48)
(38,38)-(38,43)
(38,46)-(38,47)
(40,8)-(41,68)
(40,8)-(40,20)
(41,10)-(41,68)
(41,11)-(41,38)
(41,12)-(41,17)
(41,18)-(41,37)
(41,19)-(41,23)
(41,25)-(41,36)
(41,26)-(41,31)
(41,34)-(41,35)
(41,40)-(41,67)
(41,41)-(41,46)
(41,47)-(41,66)
(41,48)-(41,52)
(41,54)-(41,65)
(41,55)-(41,60)
(41,63)-(41,64)
(43,8)-(43,77)
(43,8)-(43,18)
(43,19)-(43,77)
(43,20)-(43,47)
(43,21)-(43,26)
(43,27)-(43,46)
(43,28)-(43,32)
(43,34)-(43,45)
(43,35)-(43,40)
(43,43)-(43,44)
(43,49)-(43,76)
(43,50)-(43,55)
(43,56)-(43,75)
(43,57)-(43,61)
(43,63)-(43,74)
(43,64)-(43,69)
(43,72)-(43,73)
(45,8)-(47,69)
(45,8)-(45,19)
(46,10)-(47,69)
(46,11)-(46,38)
(46,12)-(46,17)
(46,18)-(46,37)
(46,19)-(46,23)
(46,25)-(46,36)
(46,26)-(46,31)
(46,34)-(46,35)
(46,40)-(46,67)
(46,41)-(46,46)
(46,47)-(46,66)
(46,48)-(46,52)
(46,54)-(46,65)
(46,55)-(46,60)
(46,63)-(46,64)
(47,12)-(47,39)
(47,13)-(47,18)
(47,19)-(47,38)
(47,20)-(47,24)
(47,26)-(47,37)
(47,27)-(47,32)
(47,35)-(47,36)
(47,41)-(47,68)
(47,42)-(47,47)
(47,48)-(47,67)
(47,49)-(47,53)
(47,55)-(47,66)
(47,56)-(47,61)
(47,64)-(47,65)
(49,8)-(52,40)
(49,8)-(49,21)
(50,10)-(52,40)
(50,11)-(50,38)
(50,12)-(50,17)
(50,18)-(50,37)
(50,19)-(50,23)
(50,25)-(50,36)
(50,26)-(50,31)
(50,34)-(50,35)
(50,40)-(50,67)
(50,41)-(50,46)
(50,47)-(50,66)
(50,48)-(50,52)
(50,54)-(50,65)
(50,55)-(50,60)
(50,63)-(50,64)
(51,12)-(51,39)
(51,13)-(51,18)
(51,19)-(51,38)
(51,20)-(51,24)
(51,26)-(51,37)
(51,27)-(51,32)
(51,35)-(51,36)
(51,41)-(51,68)
(51,42)-(51,47)
(51,48)-(51,67)
(51,49)-(51,53)
(51,55)-(51,66)
(51,56)-(51,61)
(51,64)-(51,65)
(52,12)-(52,39)
(52,13)-(52,18)
(52,19)-(52,38)
(52,20)-(52,24)
(52,26)-(52,37)
(52,27)-(52,32)
(52,35)-(52,36)
(54,8)-(56,40)
(54,8)-(54,21)
(55,10)-(56,40)
(55,11)-(55,38)
(55,12)-(55,17)
(55,18)-(55,37)
(55,19)-(55,23)
(55,25)-(55,36)
(55,26)-(55,31)
(55,34)-(55,35)
(55,40)-(55,67)
(55,41)-(55,46)
(55,47)-(55,66)
(55,48)-(55,52)
(55,54)-(55,65)
(55,55)-(55,60)
(55,63)-(55,64)
(56,12)-(56,39)
(56,13)-(56,18)
(56,19)-(56,38)
(56,20)-(56,24)
(56,26)-(56,37)
(56,27)-(56,32)
(56,35)-(56,36)
(57,7)-(57,65)
(57,14)-(57,25)
(57,14)-(57,18)
(57,19)-(57,25)
(57,20)-(57,21)
(57,23)-(57,24)
(57,38)-(57,47)
(57,38)-(57,44)
(57,45)-(57,47)
(57,55)-(57,64)
(57,55)-(57,61)
(57,62)-(57,64)
*)
