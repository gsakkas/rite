
let rec reverseInt x y =
  if x != 0 then reverseInt (x / 10) ((y * 10) + (10 mod 10)) else y;;

let rec digitsOfInt n =
  if n < 0
  then []
  else
    (let x = (reverseInt n 0) / 10
     and y = (reverseInt n) mod 10 in
     if (x = 0) && (y = 0) then [] else y :: (digitsOfInt x));;


(* fix

let rec reverseInt x y =
  if x != 0 then reverseInt (x / 10) ((y * 10) + (10 mod 10)) else y;;

let rec digitsOfInt n =
  if n < 0
  then []
  else
    (let x = (reverseInt n 0) / 10
     and y = (reverseInt n 0) mod 10 in
     if (x = 0) && (y = 0) then [] else y :: (digitsOfInt x));;

*)

(* changed spans
(10,13)-(10,27)
(10,32)-(10,34)
*)

(* type error slice
(3,17)-(3,27)
(3,17)-(3,61)
(10,13)-(10,27)
(10,13)-(10,34)
(10,14)-(10,24)
*)

(* all spans
(2,19)-(3,68)
(2,21)-(3,68)
(3,2)-(3,68)
(3,5)-(3,11)
(3,5)-(3,6)
(3,10)-(3,11)
(3,17)-(3,61)
(3,17)-(3,27)
(3,28)-(3,36)
(3,29)-(3,30)
(3,33)-(3,35)
(3,37)-(3,61)
(3,38)-(3,46)
(3,39)-(3,40)
(3,43)-(3,45)
(3,49)-(3,60)
(3,50)-(3,52)
(3,57)-(3,59)
(3,67)-(3,68)
(5,20)-(11,61)
(6,2)-(11,61)
(6,5)-(6,10)
(6,5)-(6,6)
(6,9)-(6,10)
(7,7)-(7,9)
(9,4)-(11,61)
(9,13)-(9,34)
(9,13)-(9,29)
(9,14)-(9,24)
(9,25)-(9,26)
(9,27)-(9,28)
(9,32)-(9,34)
(10,13)-(10,34)
(10,13)-(10,27)
(10,14)-(10,24)
(10,25)-(10,26)
(10,32)-(10,34)
(11,5)-(11,60)
(11,8)-(11,26)
(11,8)-(11,15)
(11,9)-(11,10)
(11,13)-(11,14)
(11,19)-(11,26)
(11,20)-(11,21)
(11,24)-(11,25)
(11,32)-(11,34)
(11,40)-(11,60)
(11,40)-(11,41)
(11,45)-(11,60)
(11,46)-(11,57)
(11,58)-(11,59)
*)
