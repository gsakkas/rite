
let rec clone x n =
  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) = (List.length l2) with
  | true  -> (l1, l2)
  | false  ->
      let lendiff = (List.length l1) - (List.length l2) in
      (match lendiff > 0 with
       | true  -> (l1, ((clone 0 lendiff) @ l2))
       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;

let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a (x,y) =
      match a with
      | [] -> (x + y) :: a
      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in
    let base = [] in
    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n > 0 with | false  -> [] | true  -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) = (List.length l2) with
  | true  -> (l1, l2)
  | false  ->
      let lendiff = (List.length l1) - (List.length l2) in
      (match lendiff > 0 with
       | true  -> (l1, ((clone 0 lendiff) @ l2))
       | false  -> (((clone 0 (- lendiff)) @ l1), l2));;

let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a (x,y) =
      match a with
      | [] -> (x + y) :: a
      | h::t -> [(x + y) + (h / 10); h mod 10] @ t in
    let base = [] in
    let args = List.rev ((0, 0) :: (List.combine l1 l2)) in
    let res = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(25,4)-(25,51)
*)

(* type error slice
(19,4)-(25,51)
(19,10)-(22,50)
(21,14)-(21,26)
(21,25)-(21,26)
(25,4)-(25,51)
(25,18)-(25,32)
(25,18)-(25,44)
(25,33)-(25,34)
*)

(* all spans
(2,14)-(3,67)
(2,16)-(3,67)
(3,2)-(3,67)
(3,8)-(3,13)
(3,8)-(3,9)
(3,12)-(3,13)
(3,31)-(3,33)
(3,45)-(3,67)
(3,45)-(3,46)
(3,50)-(3,67)
(3,51)-(3,56)
(3,57)-(3,58)
(3,59)-(3,66)
(3,60)-(3,61)
(3,64)-(3,65)
(5,12)-(12,54)
(5,15)-(12,54)
(6,2)-(12,54)
(6,8)-(6,43)
(6,8)-(6,24)
(6,9)-(6,20)
(6,21)-(6,23)
(6,27)-(6,43)
(6,28)-(6,39)
(6,40)-(6,42)
(7,13)-(7,21)
(7,14)-(7,16)
(7,18)-(7,20)
(9,6)-(12,54)
(9,20)-(9,55)
(9,20)-(9,36)
(9,21)-(9,32)
(9,33)-(9,35)
(9,39)-(9,55)
(9,40)-(9,51)
(9,52)-(9,54)
(10,6)-(12,54)
(10,13)-(10,24)
(10,13)-(10,20)
(10,23)-(10,24)
(11,18)-(11,48)
(11,19)-(11,21)
(11,23)-(11,47)
(11,42)-(11,43)
(11,24)-(11,41)
(11,25)-(11,30)
(11,31)-(11,32)
(11,33)-(11,40)
(11,44)-(11,46)
(12,19)-(12,53)
(12,20)-(12,48)
(12,43)-(12,44)
(12,21)-(12,42)
(12,22)-(12,27)
(12,28)-(12,29)
(12,30)-(12,41)
(12,33)-(12,40)
(12,45)-(12,47)
(12,50)-(12,52)
(14,19)-(15,57)
(15,2)-(15,57)
(15,8)-(15,9)
(15,23)-(15,25)
(15,36)-(15,48)
(15,36)-(15,46)
(15,47)-(15,48)
(15,56)-(15,57)
(17,11)-(26,34)
(17,14)-(26,34)
(18,2)-(26,34)
(18,11)-(25,51)
(19,4)-(25,51)
(19,10)-(22,50)
(19,13)-(22,50)
(20,6)-(22,50)
(20,12)-(20,13)
(21,14)-(21,26)
(21,14)-(21,21)
(21,15)-(21,16)
(21,19)-(21,20)
(21,25)-(21,26)
(22,16)-(22,50)
(22,47)-(22,48)
(22,16)-(22,46)
(22,17)-(22,35)
(22,17)-(22,24)
(22,18)-(22,19)
(22,22)-(22,23)
(22,27)-(22,35)
(22,28)-(22,29)
(22,32)-(22,34)
(22,37)-(22,45)
(22,37)-(22,38)
(22,43)-(22,45)
(22,49)-(22,50)
(23,4)-(25,51)
(23,15)-(23,17)
(24,4)-(25,51)
(24,15)-(24,56)
(24,15)-(24,23)
(24,24)-(24,56)
(24,25)-(24,31)
(24,26)-(24,27)
(24,29)-(24,30)
(24,35)-(24,55)
(24,36)-(24,48)
(24,49)-(24,51)
(24,52)-(24,54)
(25,4)-(25,51)
(25,18)-(25,44)
(25,18)-(25,32)
(25,33)-(25,34)
(25,35)-(25,39)
(25,40)-(25,44)
(25,48)-(25,51)
(26,2)-(26,34)
(26,2)-(26,12)
(26,13)-(26,34)
(26,14)-(26,17)
(26,18)-(26,33)
(26,19)-(26,26)
(26,27)-(26,29)
(26,30)-(26,32)
*)
