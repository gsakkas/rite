
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  (((clone 0 ((List.length l2) - (List.length l1))) @ l1),
    ((clone 0 ((List.length l1) - (List.length l2))) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f (a1,a2) (x1,x2) =
      ((((x1 + x2) + a1) / 10), ((((x1 + x2) + a1) mod 10) :: a2)) in
    let base = (0, []) in
    let args = List.combine ((List.rev 0) :: l1) ((List.rev 0) :: l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  (((clone 0 ((List.length l2) - (List.length l1))) @ l1),
    ((clone 0 ((List.length l1) - (List.length l2))) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f (a1,a2) (x1,x2) =
      ((((x1 + x2) + a1) / 10), ((((x1 + x2) + a1) mod 10) :: a2)) in
    let base = (0, []) in
    let args = List.combine (List.rev (0 :: l1)) (List.rev (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(16,28)-(16,48)
(16,39)-(16,40)
(16,49)-(16,69)
(16,60)-(16,61)
*)

(* type error slice
(16,29)-(16,41)
(16,30)-(16,38)
(16,39)-(16,40)
(16,50)-(16,62)
(16,51)-(16,59)
(16,60)-(16,61)
*)

(* all spans
(2,14)-(2,64)
(2,16)-(2,64)
(2,20)-(2,64)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,56)
(2,34)-(2,35)
(2,39)-(2,56)
(2,40)-(2,45)
(2,46)-(2,47)
(2,48)-(2,55)
(2,49)-(2,50)
(2,53)-(2,54)
(2,62)-(2,64)
(4,12)-(6,59)
(4,15)-(6,59)
(5,2)-(6,59)
(5,3)-(5,57)
(5,52)-(5,53)
(5,4)-(5,51)
(5,5)-(5,10)
(5,11)-(5,12)
(5,13)-(5,50)
(5,14)-(5,30)
(5,15)-(5,26)
(5,27)-(5,29)
(5,33)-(5,49)
(5,34)-(5,45)
(5,46)-(5,48)
(5,54)-(5,56)
(6,4)-(6,58)
(6,53)-(6,54)
(6,5)-(6,52)
(6,6)-(6,11)
(6,12)-(6,13)
(6,14)-(6,51)
(6,15)-(6,31)
(6,16)-(6,27)
(6,28)-(6,30)
(6,34)-(6,50)
(6,35)-(6,46)
(6,47)-(6,49)
(6,55)-(6,57)
(8,19)-(9,69)
(9,2)-(9,69)
(9,8)-(9,9)
(9,23)-(9,25)
(9,36)-(9,69)
(9,39)-(9,44)
(9,39)-(9,40)
(9,43)-(9,44)
(9,50)-(9,62)
(9,50)-(9,60)
(9,61)-(9,62)
(9,68)-(9,69)
(11,11)-(18,34)
(11,14)-(18,34)
(12,2)-(18,34)
(12,11)-(17,51)
(13,4)-(17,51)
(13,11)-(14,66)
(13,19)-(14,66)
(14,6)-(14,66)
(14,7)-(14,30)
(14,8)-(14,24)
(14,9)-(14,18)
(14,10)-(14,12)
(14,15)-(14,17)
(14,21)-(14,23)
(14,27)-(14,29)
(14,32)-(14,65)
(14,33)-(14,58)
(14,34)-(14,50)
(14,35)-(14,44)
(14,36)-(14,38)
(14,41)-(14,43)
(14,47)-(14,49)
(14,55)-(14,57)
(14,62)-(14,64)
(15,4)-(17,51)
(15,15)-(15,22)
(15,16)-(15,17)
(15,19)-(15,21)
(16,4)-(17,51)
(16,15)-(16,69)
(16,15)-(16,27)
(16,28)-(16,48)
(16,29)-(16,41)
(16,30)-(16,38)
(16,39)-(16,40)
(16,45)-(16,47)
(16,49)-(16,69)
(16,50)-(16,62)
(16,51)-(16,59)
(16,60)-(16,61)
(16,66)-(16,68)
(17,4)-(17,51)
(17,18)-(17,44)
(17,18)-(17,32)
(17,33)-(17,34)
(17,35)-(17,39)
(17,40)-(17,44)
(17,48)-(17,51)
(18,2)-(18,34)
(18,2)-(18,12)
(18,13)-(18,34)
(18,14)-(18,17)
(18,18)-(18,33)
(18,19)-(18,26)
(18,27)-(18,29)
(18,30)-(18,32)
*)
