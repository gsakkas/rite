
let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then
    let x = (List.length l1) - (List.length l2) in
    let list_p = clone 0 x in (l1, (list_p @ l2))
  else
    if (List.length l1) < (List.length l2)
    then
      (let x = (List.length l2) - (List.length l1) in
       let list_p = clone 0 x in ((list_p @ l1), l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,listy) = a in
      let (num1,num2) = x in
      let initsum = (num1 + num2) + carry in
      if initsum > 9
      then (1, (listy @ [initsum mod 10]))
      else (0, (listy @ initsum)) in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then
    let x = (List.length l1) - (List.length l2) in
    let list_p = clone 0 x in (l1, (list_p @ l2))
  else
    if (List.length l1) < (List.length l2)
    then
      (let x = (List.length l2) - (List.length l1) in
       let list_p = clone 0 x in ((list_p @ l1), l2))
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h == 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,listy) = a in
      let (num1,num2) = x in
      let initsum = (num1 + num2) + carry in
      if initsum > 9
      then (1, (listy @ [initsum mod 10]))
      else (0, (listy @ [initsum])) in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(27,24)-(27,31)
*)

(* type error slice
(24,6)-(27,33)
(24,20)-(24,41)
(27,15)-(27,32)
(27,22)-(27,23)
(27,24)-(27,31)
*)

(* all spans
(2,14)-(2,64)
(2,16)-(2,64)
(2,20)-(2,64)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,36)
(2,42)-(2,64)
(2,42)-(2,43)
(2,47)-(2,64)
(2,48)-(2,53)
(2,54)-(2,55)
(2,56)-(2,63)
(2,57)-(2,58)
(2,61)-(2,62)
(4,12)-(14,17)
(4,15)-(14,17)
(5,2)-(14,17)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(7,4)-(8,49)
(7,12)-(7,47)
(7,12)-(7,28)
(7,13)-(7,24)
(7,25)-(7,27)
(7,31)-(7,47)
(7,32)-(7,43)
(7,44)-(7,46)
(8,4)-(8,49)
(8,17)-(8,26)
(8,17)-(8,22)
(8,23)-(8,24)
(8,25)-(8,26)
(8,30)-(8,49)
(8,31)-(8,33)
(8,35)-(8,48)
(8,43)-(8,44)
(8,36)-(8,42)
(8,45)-(8,47)
(10,4)-(14,17)
(10,7)-(10,42)
(10,7)-(10,23)
(10,8)-(10,19)
(10,20)-(10,22)
(10,26)-(10,42)
(10,27)-(10,38)
(10,39)-(10,41)
(12,6)-(13,53)
(12,15)-(12,50)
(12,15)-(12,31)
(12,16)-(12,27)
(12,28)-(12,30)
(12,34)-(12,50)
(12,35)-(12,46)
(12,47)-(12,49)
(13,7)-(13,52)
(13,20)-(13,29)
(13,20)-(13,25)
(13,26)-(13,27)
(13,28)-(13,29)
(13,33)-(13,52)
(13,34)-(13,47)
(13,42)-(13,43)
(13,35)-(13,41)
(13,44)-(13,46)
(13,49)-(13,51)
(14,9)-(14,17)
(14,10)-(14,12)
(14,14)-(14,16)
(16,19)-(17,70)
(17,2)-(17,70)
(17,8)-(17,9)
(17,23)-(17,25)
(17,36)-(17,70)
(17,39)-(17,45)
(17,39)-(17,40)
(17,44)-(17,45)
(17,51)-(17,63)
(17,51)-(17,61)
(17,62)-(17,63)
(17,69)-(17,70)
(19,11)-(31,34)
(19,14)-(31,34)
(20,2)-(31,34)
(20,11)-(30,51)
(21,4)-(30,51)
(21,10)-(27,33)
(21,12)-(27,33)
(22,6)-(27,33)
(22,26)-(22,27)
(23,6)-(27,33)
(23,24)-(23,25)
(24,6)-(27,33)
(24,20)-(24,41)
(24,20)-(24,33)
(24,21)-(24,25)
(24,28)-(24,32)
(24,36)-(24,41)
(25,6)-(27,33)
(25,9)-(25,20)
(25,9)-(25,16)
(25,19)-(25,20)
(26,11)-(26,42)
(26,12)-(26,13)
(26,15)-(26,41)
(26,22)-(26,23)
(26,16)-(26,21)
(26,24)-(26,40)
(26,25)-(26,39)
(26,25)-(26,32)
(26,37)-(26,39)
(27,11)-(27,33)
(27,12)-(27,13)
(27,15)-(27,32)
(27,22)-(27,23)
(27,16)-(27,21)
(27,24)-(27,31)
(28,4)-(30,51)
(28,15)-(28,22)
(28,16)-(28,17)
(28,19)-(28,21)
(29,4)-(30,51)
(29,15)-(29,57)
(29,47)-(29,48)
(29,15)-(29,46)
(29,16)-(29,24)
(29,25)-(29,45)
(29,26)-(29,38)
(29,39)-(29,41)
(29,42)-(29,44)
(29,49)-(29,57)
(29,50)-(29,56)
(29,51)-(29,52)
(29,54)-(29,55)
(30,4)-(30,51)
(30,18)-(30,44)
(30,18)-(30,32)
(30,33)-(30,34)
(30,35)-(30,39)
(30,40)-(30,44)
(30,48)-(30,51)
(31,2)-(31,34)
(31,2)-(31,12)
(31,13)-(31,34)
(31,14)-(31,17)
(31,18)-(31,33)
(31,19)-(31,26)
(31,27)-(31,29)
(31,30)-(31,32)
*)
