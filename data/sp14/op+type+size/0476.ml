
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper 0 (depth - 1))
        else buildCosine (buildhelper 0 (depth - 1))
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (num - 1) (depth - 1) expr),
              (buildhelper (num - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (num - 1) (depth - 1) expr),
              (buildhelper (num - 1) (depth - 1) expr))
    | 3 -> buildhelper (num - 1) depth expr
    | 4 ->
        buildThresh
          ((buildhelper (num - 2) (depth - 1) expr),
            (buildhelper (num - 2) (depth - 1) expr),
            (buildhelper (num - 2) (depth - 1) expr),
            (buildhelper (num - 2) (depth - 1) expr)) in
  buildhelper rand (1, 4) depth "";;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let rec buildhelper num depth expr =
    match num with
    | 0 -> if (rand (0, 1)) = 0 then buildX () else buildY ()
    | 1 ->
        if (rand (0, 1)) = 0
        then buildSine (buildhelper 0 0 expr)
        else buildCosine (buildhelper 0 0 expr)
    | 2 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 3 ->
        if (rand (0, 1)) = 0
        then
          buildAverage
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
        else
          buildTimes
            ((buildhelper (depth - 1) (depth - 1) expr),
              (buildhelper (depth - 1) (depth - 1) expr))
    | 4 ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr))
    | _ ->
        buildThresh
          ((buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr),
            (buildhelper (depth - 1) (depth - 1) expr)) in
  buildhelper (rand (1, 4)) depth "";;

*)

(* changed spans
(27,4)-(49,53)
(31,23)-(31,50)
(31,38)-(31,49)
(32,13)-(32,24)
(32,13)-(32,52)
(32,25)-(32,52)
(32,26)-(32,37)
(32,38)-(32,39)
(34,8)-(42,55)
(37,27)-(37,30)
(38,28)-(38,31)
(41,27)-(41,30)
(42,28)-(42,31)
(43,11)-(43,43)
(43,24)-(43,27)
(43,33)-(43,38)
(43,39)-(43,43)
(45,8)-(49,53)
(46,25)-(46,28)
(46,31)-(46,32)
(46,34)-(46,45)
(47,26)-(47,29)
(47,32)-(47,33)
(47,35)-(47,46)
(48,26)-(48,29)
(48,32)-(48,33)
(48,35)-(48,46)
(49,26)-(49,29)
(49,32)-(49,33)
(49,35)-(49,46)
(50,2)-(50,34)
(50,14)-(50,18)
*)

(* type error slice
(15,3)-(15,26)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(26,2)-(50,34)
(26,22)-(49,53)
(26,26)-(49,53)
(26,32)-(49,53)
(28,14)-(28,27)
(28,15)-(28,19)
(31,13)-(31,22)
(31,13)-(31,50)
(31,23)-(31,50)
(31,24)-(31,35)
(31,36)-(31,37)
(37,13)-(37,53)
(37,14)-(37,25)
(38,14)-(38,54)
(38,15)-(38,26)
(41,13)-(41,53)
(41,14)-(41,25)
(42,14)-(42,54)
(42,15)-(42,26)
(43,11)-(43,22)
(43,11)-(43,43)
(46,11)-(46,51)
(46,12)-(46,23)
(47,12)-(47,52)
(47,13)-(47,24)
(48,12)-(48,52)
(48,13)-(48,24)
(49,12)-(49,52)
(49,13)-(49,24)
(50,2)-(50,13)
(50,2)-(50,34)
(50,14)-(50,18)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(50,34)
(26,2)-(50,34)
(26,22)-(49,53)
(26,26)-(49,53)
(26,32)-(49,53)
(27,4)-(49,53)
(27,10)-(27,13)
(28,11)-(28,61)
(28,14)-(28,31)
(28,14)-(28,27)
(28,15)-(28,19)
(28,20)-(28,26)
(28,21)-(28,22)
(28,24)-(28,25)
(28,30)-(28,31)
(28,37)-(28,46)
(28,37)-(28,43)
(28,44)-(28,46)
(28,52)-(28,61)
(28,52)-(28,58)
(28,59)-(28,61)
(30,8)-(32,52)
(30,11)-(30,28)
(30,11)-(30,24)
(30,12)-(30,16)
(30,17)-(30,23)
(30,18)-(30,19)
(30,21)-(30,22)
(30,27)-(30,28)
(31,13)-(31,50)
(31,13)-(31,22)
(31,23)-(31,50)
(31,24)-(31,35)
(31,36)-(31,37)
(31,38)-(31,49)
(31,39)-(31,44)
(31,47)-(31,48)
(32,13)-(32,52)
(32,13)-(32,24)
(32,25)-(32,52)
(32,26)-(32,37)
(32,38)-(32,39)
(32,40)-(32,51)
(32,41)-(32,46)
(32,49)-(32,50)
(34,8)-(42,55)
(34,11)-(34,28)
(34,11)-(34,24)
(34,12)-(34,16)
(34,17)-(34,23)
(34,18)-(34,19)
(34,21)-(34,22)
(34,27)-(34,28)
(36,10)-(38,55)
(36,10)-(36,22)
(37,12)-(38,55)
(37,13)-(37,53)
(37,14)-(37,25)
(37,26)-(37,35)
(37,27)-(37,30)
(37,33)-(37,34)
(37,36)-(37,47)
(37,37)-(37,42)
(37,45)-(37,46)
(37,48)-(37,52)
(38,14)-(38,54)
(38,15)-(38,26)
(38,27)-(38,36)
(38,28)-(38,31)
(38,34)-(38,35)
(38,37)-(38,48)
(38,38)-(38,43)
(38,46)-(38,47)
(38,49)-(38,53)
(40,10)-(42,55)
(40,10)-(40,20)
(41,12)-(42,55)
(41,13)-(41,53)
(41,14)-(41,25)
(41,26)-(41,35)
(41,27)-(41,30)
(41,33)-(41,34)
(41,36)-(41,47)
(41,37)-(41,42)
(41,45)-(41,46)
(41,48)-(41,52)
(42,14)-(42,54)
(42,15)-(42,26)
(42,27)-(42,36)
(42,28)-(42,31)
(42,34)-(42,35)
(42,37)-(42,48)
(42,38)-(42,43)
(42,46)-(42,47)
(42,49)-(42,53)
(43,11)-(43,43)
(43,11)-(43,22)
(43,23)-(43,32)
(43,24)-(43,27)
(43,30)-(43,31)
(43,33)-(43,38)
(43,39)-(43,43)
(45,8)-(49,53)
(45,8)-(45,19)
(46,10)-(49,53)
(46,11)-(46,51)
(46,12)-(46,23)
(46,24)-(46,33)
(46,25)-(46,28)
(46,31)-(46,32)
(46,34)-(46,45)
(46,35)-(46,40)
(46,43)-(46,44)
(46,46)-(46,50)
(47,12)-(47,52)
(47,13)-(47,24)
(47,25)-(47,34)
(47,26)-(47,29)
(47,32)-(47,33)
(47,35)-(47,46)
(47,36)-(47,41)
(47,44)-(47,45)
(47,47)-(47,51)
(48,12)-(48,52)
(48,13)-(48,24)
(48,25)-(48,34)
(48,26)-(48,29)
(48,32)-(48,33)
(48,35)-(48,46)
(48,36)-(48,41)
(48,44)-(48,45)
(48,47)-(48,51)
(49,12)-(49,52)
(49,13)-(49,24)
(49,25)-(49,34)
(49,26)-(49,29)
(49,32)-(49,33)
(49,35)-(49,46)
(49,36)-(49,41)
(49,44)-(49,45)
(49,47)-(49,51)
(50,2)-(50,34)
(50,2)-(50,13)
(50,14)-(50,18)
(50,19)-(50,25)
(50,20)-(50,21)
(50,23)-(50,24)
(50,26)-(50,31)
(50,32)-(50,34)
*)
