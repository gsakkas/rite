
let y f g x = f (g x);;

let rec mulByDigit i l =
  let f a x =
    match a with
    | [] -> (i * x) :: a
    | h::t -> [(x * y) + (h / 10); h mod 10] @ t in
  let base = [] in let args = List.rev (0 :: l) in List.fold_left f base args;;


(* fix

let rec mulByDigit i l =
  let f a x =
    match a with
    | [] -> (i * x) :: a
    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in
  let base = [] in let args = List.rev (0 :: l) in List.fold_left f base args;;

*)

(* changed spans
(2,6)-(2,21)
(2,8)-(2,21)
(2,10)-(2,21)
(2,14)-(2,15)
(2,14)-(2,21)
(2,16)-(2,21)
(2,17)-(2,18)
(2,19)-(2,20)
(8,16)-(8,17)
(8,20)-(8,21)
*)

(* type error slice
(2,3)-(2,23)
(2,6)-(2,21)
(8,15)-(8,22)
(8,20)-(8,21)
*)

(* all spans
(2,6)-(2,21)
(2,8)-(2,21)
(2,10)-(2,21)
(2,14)-(2,21)
(2,14)-(2,15)
(2,16)-(2,21)
(2,17)-(2,18)
(2,19)-(2,20)
(4,19)-(9,77)
(4,21)-(9,77)
(5,2)-(9,77)
(5,8)-(8,48)
(5,10)-(8,48)
(6,4)-(8,48)
(6,10)-(6,11)
(7,12)-(7,24)
(7,12)-(7,19)
(7,13)-(7,14)
(7,17)-(7,18)
(7,23)-(7,24)
(8,14)-(8,48)
(8,45)-(8,46)
(8,14)-(8,44)
(8,15)-(8,33)
(8,15)-(8,22)
(8,16)-(8,17)
(8,20)-(8,21)
(8,25)-(8,33)
(8,26)-(8,27)
(8,30)-(8,32)
(8,35)-(8,43)
(8,35)-(8,36)
(8,41)-(8,43)
(8,47)-(8,48)
(9,2)-(9,77)
(9,13)-(9,15)
(9,19)-(9,77)
(9,30)-(9,47)
(9,30)-(9,38)
(9,39)-(9,47)
(9,40)-(9,41)
(9,45)-(9,46)
(9,51)-(9,77)
(9,51)-(9,65)
(9,66)-(9,67)
(9,68)-(9,72)
(9,73)-(9,77)
*)
