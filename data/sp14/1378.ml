
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let l = (List.length l1) - (List.length l2) in
  if l < 0
  then (((clone 0 ((-1) * l)) @ l1), l2)
  else (l1, ((clone 0 l) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (carry,rest) ->
          (match x with
           | (add1,add2) ->
               if
                 ((List.length rest) = (List.length l1)) or
                   ((List.length rest) = (List.length l2))
               then carry :: rest
               else
                 ((((add1 + add2) + carry) / 10),
                   ((((add1 + add2) + carry) mod 10) :: rest))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let l = (List.length l1) - (List.length l2) in
  if l < 0
  then (((clone 0 ((-1) * l)) @ l1), l2)
  else (l1, ((clone 0 l) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (carry,rest) ->
          (match x with
           | (add1,add2) ->
               if
                 ((List.length rest) = (List.length l1)) or
                   ((List.length rest) = (List.length l2))
               then (0, (carry :: rest))
               else
                 ((((add1 + add2) + carry) / 10),
                   ((((add1 + add2) + carry) mod 10) :: rest))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(23,20)-(23,33)
*)

(* type error slice
(20,15)-(26,62)
(23,20)-(23,33)
(25,17)-(26,62)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(8,31)
(4,15)-(8,31)
(5,2)-(8,31)
(5,10)-(5,45)
(5,10)-(5,26)
(5,11)-(5,22)
(5,23)-(5,25)
(5,29)-(5,45)
(5,30)-(5,41)
(5,42)-(5,44)
(6,2)-(8,31)
(6,5)-(6,10)
(6,5)-(6,6)
(6,9)-(6,10)
(7,7)-(7,40)
(7,8)-(7,35)
(7,30)-(7,31)
(7,9)-(7,29)
(7,10)-(7,15)
(7,16)-(7,17)
(7,18)-(7,28)
(7,19)-(7,23)
(7,26)-(7,27)
(7,32)-(7,34)
(7,37)-(7,39)
(8,7)-(8,31)
(8,8)-(8,10)
(8,12)-(8,30)
(8,25)-(8,26)
(8,13)-(8,24)
(8,14)-(8,19)
(8,20)-(8,21)
(8,22)-(8,23)
(8,27)-(8,29)
(10,19)-(11,74)
(11,2)-(11,74)
(11,8)-(11,9)
(11,23)-(11,25)
(11,36)-(11,74)
(11,39)-(11,44)
(11,39)-(11,40)
(11,43)-(11,44)
(11,50)-(11,62)
(11,50)-(11,60)
(11,61)-(11,62)
(11,68)-(11,74)
(11,68)-(11,69)
(11,73)-(11,74)
(13,11)-(30,34)
(13,14)-(30,34)
(14,2)-(30,34)
(14,11)-(29,51)
(15,4)-(29,51)
(15,10)-(26,63)
(15,12)-(26,63)
(16,6)-(26,63)
(16,12)-(16,13)
(18,10)-(26,63)
(18,17)-(18,18)
(20,15)-(26,62)
(21,17)-(22,58)
(21,17)-(21,56)
(21,18)-(21,36)
(21,19)-(21,30)
(21,31)-(21,35)
(21,39)-(21,55)
(21,40)-(21,51)
(21,52)-(21,54)
(22,19)-(22,58)
(22,20)-(22,38)
(22,21)-(22,32)
(22,33)-(22,37)
(22,41)-(22,57)
(22,42)-(22,53)
(22,54)-(22,56)
(23,20)-(23,33)
(23,20)-(23,25)
(23,29)-(23,33)
(25,17)-(26,62)
(25,18)-(25,48)
(25,19)-(25,42)
(25,20)-(25,33)
(25,21)-(25,25)
(25,28)-(25,32)
(25,36)-(25,41)
(25,45)-(25,47)
(26,19)-(26,61)
(26,20)-(26,52)
(26,21)-(26,44)
(26,22)-(26,35)
(26,23)-(26,27)
(26,30)-(26,34)
(26,38)-(26,43)
(26,49)-(26,51)
(26,56)-(26,60)
(27,4)-(29,51)
(27,15)-(27,22)
(27,16)-(27,17)
(27,19)-(27,21)
(28,4)-(29,51)
(28,15)-(28,44)
(28,15)-(28,23)
(28,24)-(28,44)
(28,25)-(28,37)
(28,38)-(28,40)
(28,41)-(28,43)
(29,4)-(29,51)
(29,18)-(29,44)
(29,18)-(29,32)
(29,33)-(29,34)
(29,35)-(29,39)
(29,40)-(29,44)
(29,48)-(29,51)
(30,2)-(30,34)
(30,2)-(30,12)
(30,13)-(30,34)
(30,14)-(30,17)
(30,18)-(30,33)
(30,19)-(30,26)
(30,27)-(30,29)
(30,30)-(30,32)
*)
