
let rec clone x n =
  match n with | 0 -> [] | _ -> if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  let l1 = List.length l1 in
  let l2 = List.length l2 in
  (((clone 0 (l2 - l1)) @ l1), ((clone 0 (l1 - l2)) @ l2));;


(* fix

let rec clone x n =
  match n with | 0 -> [] | _ -> if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  let ll1 = List.length l1 in
  let ll2 = List.length l2 in
  (((clone 0 (ll2 - ll1)) @ l1), ((clone 0 (ll1 - ll2)) @ l2));;

*)

(* changed spans
(6,2)-(8,58)
(7,2)-(8,58)
(8,14)-(8,16)
(8,19)-(8,21)
(8,26)-(8,28)
(8,42)-(8,44)
(8,47)-(8,49)
(8,54)-(8,56)
*)

(* type error slice
(6,2)-(8,58)
(6,11)-(6,22)
(6,11)-(6,25)
(7,2)-(8,58)
(7,11)-(7,22)
(7,11)-(7,25)
(8,3)-(8,29)
(8,24)-(8,25)
(8,26)-(8,28)
(8,31)-(8,57)
(8,52)-(8,53)
(8,54)-(8,56)
*)

(* all spans
(2,14)-(3,76)
(2,16)-(3,76)
(3,2)-(3,76)
(3,8)-(3,9)
(3,22)-(3,24)
(3,32)-(3,76)
(3,35)-(3,40)
(3,35)-(3,36)
(3,39)-(3,40)
(3,46)-(3,68)
(3,46)-(3,47)
(3,51)-(3,68)
(3,52)-(3,57)
(3,58)-(3,59)
(3,60)-(3,67)
(3,61)-(3,62)
(3,65)-(3,66)
(3,74)-(3,76)
(5,12)-(8,58)
(5,15)-(8,58)
(6,2)-(8,58)
(6,11)-(6,25)
(6,11)-(6,22)
(6,23)-(6,25)
(7,2)-(8,58)
(7,11)-(7,25)
(7,11)-(7,22)
(7,23)-(7,25)
(8,2)-(8,58)
(8,3)-(8,29)
(8,24)-(8,25)
(8,4)-(8,23)
(8,5)-(8,10)
(8,11)-(8,12)
(8,13)-(8,22)
(8,14)-(8,16)
(8,19)-(8,21)
(8,26)-(8,28)
(8,31)-(8,57)
(8,52)-(8,53)
(8,32)-(8,51)
(8,33)-(8,38)
(8,39)-(8,40)
(8,41)-(8,50)
(8,42)-(8,44)
(8,47)-(8,49)
(8,54)-(8,56)
*)
