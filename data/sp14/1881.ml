
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Acossin of expr* expr
  | Crazy of expr* expr* expr;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y)
  | Acossin (e1,e2) ->
      (((acos (eval (e1, x, y))) *. (asin (eval (e2, x, y)))) *. 2.0) /.
        (pi *. pi)
  | Crazy (e1,e2,e3) ->
      let res1 = eval (e1, x, y) in
      let res2 = eval (e2, x, y) in
      let res3 = eval (e3, x, y) in
      if res1 > res2
      then ((res1 +. res2) +. res3) /. 3.0
      else
        if res2 > res3
        then ((res1 *. res2) +. res3) /. 2.0
        else
          if res1 > res3
          then
            ((((atan res1) +. (atan res2)) -. (atan res3)) *. 2.0) /.
              (3.0 *. pi)
          else eval ((-1.0) *. res3);;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Acossin of expr* expr
  | Crazy of expr* expr* expr;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y)
  | Acossin (e1,e2) ->
      (((acos (eval (e1, x, y))) *. (asin (eval (e2, x, y)))) *. 2.0) /.
        (pi *. pi)
  | Crazy (e1,e2,e3) ->
      let res1 = eval (e1, x, y) in
      let res2 = eval (e2, x, y) in
      let res3 = eval (e3, x, y) in
      if res1 > res2
      then ((res1 +. res2) +. res3) /. 3.0
      else
        if res2 > res3
        then ((res1 *. res2) +. res3) /. 2.0
        else
          if res1 > res3
          then
            ((((atan res1) +. (atan res2)) -. (atan res3)) *. 2.0) /.
              (3.0 *. pi)
          else (-1.0) *. res3;;

*)

(* changed spans
(44,15)-(44,19)
(44,15)-(44,36)
*)

(* type error slice
(19,26)-(19,43)
(19,27)-(19,31)
(19,32)-(19,42)
(44,15)-(44,19)
(44,15)-(44,36)
(44,20)-(44,36)
(44,21)-(44,27)
(44,23)-(44,26)
*)

(* all spans
(13,9)-(13,26)
(13,9)-(13,12)
(13,16)-(13,26)
(13,17)-(13,21)
(13,22)-(13,25)
(15,14)-(44,36)
(16,2)-(44,36)
(16,8)-(16,9)
(17,13)-(17,14)
(18,13)-(18,14)
(19,15)-(19,44)
(19,15)-(19,18)
(19,19)-(19,44)
(19,20)-(19,22)
(19,26)-(19,43)
(19,27)-(19,31)
(19,32)-(19,42)
(19,33)-(19,35)
(19,37)-(19,38)
(19,40)-(19,41)
(20,17)-(20,46)
(20,17)-(20,20)
(20,21)-(20,46)
(20,22)-(20,24)
(20,28)-(20,45)
(20,29)-(20,33)
(20,34)-(20,44)
(20,35)-(20,37)
(20,39)-(20,40)
(20,42)-(20,43)
(21,23)-(21,70)
(21,23)-(21,63)
(21,24)-(21,41)
(21,25)-(21,29)
(21,30)-(21,40)
(21,31)-(21,33)
(21,35)-(21,36)
(21,38)-(21,39)
(21,45)-(21,62)
(21,46)-(21,50)
(21,51)-(21,61)
(21,52)-(21,54)
(21,56)-(21,57)
(21,59)-(21,60)
(21,67)-(21,70)
(22,21)-(22,59)
(22,21)-(22,38)
(22,22)-(22,26)
(22,27)-(22,37)
(22,28)-(22,30)
(22,32)-(22,33)
(22,35)-(22,36)
(22,42)-(22,59)
(22,43)-(22,47)
(22,48)-(22,58)
(22,49)-(22,51)
(22,53)-(22,54)
(22,56)-(22,57)
(24,6)-(26,26)
(24,9)-(24,46)
(24,9)-(24,26)
(24,10)-(24,14)
(24,15)-(24,25)
(24,16)-(24,18)
(24,20)-(24,21)
(24,23)-(24,24)
(24,29)-(24,46)
(24,30)-(24,34)
(24,35)-(24,45)
(24,36)-(24,38)
(24,40)-(24,41)
(24,43)-(24,44)
(25,11)-(25,26)
(25,11)-(25,15)
(25,16)-(25,26)
(25,17)-(25,19)
(25,21)-(25,22)
(25,24)-(25,25)
(26,11)-(26,26)
(26,11)-(26,15)
(26,16)-(26,26)
(26,17)-(26,19)
(26,21)-(26,22)
(26,24)-(26,25)
(28,6)-(29,18)
(28,6)-(28,69)
(28,7)-(28,61)
(28,8)-(28,32)
(28,9)-(28,13)
(28,14)-(28,31)
(28,15)-(28,19)
(28,20)-(28,30)
(28,21)-(28,23)
(28,25)-(28,26)
(28,28)-(28,29)
(28,36)-(28,60)
(28,37)-(28,41)
(28,42)-(28,59)
(28,43)-(28,47)
(28,48)-(28,58)
(28,49)-(28,51)
(28,53)-(28,54)
(28,56)-(28,57)
(28,65)-(28,68)
(29,8)-(29,18)
(29,9)-(29,11)
(29,15)-(29,17)
(31,6)-(44,36)
(31,17)-(31,32)
(31,17)-(31,21)
(31,22)-(31,32)
(31,23)-(31,25)
(31,27)-(31,28)
(31,30)-(31,31)
(32,6)-(44,36)
(32,17)-(32,32)
(32,17)-(32,21)
(32,22)-(32,32)
(32,23)-(32,25)
(32,27)-(32,28)
(32,30)-(32,31)
(33,6)-(44,36)
(33,17)-(33,32)
(33,17)-(33,21)
(33,22)-(33,32)
(33,23)-(33,25)
(33,27)-(33,28)
(33,30)-(33,31)
(34,6)-(44,36)
(34,9)-(34,20)
(34,9)-(34,13)
(34,16)-(34,20)
(35,11)-(35,42)
(35,11)-(35,35)
(35,12)-(35,26)
(35,13)-(35,17)
(35,21)-(35,25)
(35,30)-(35,34)
(35,39)-(35,42)
(37,8)-(44,36)
(37,11)-(37,22)
(37,11)-(37,15)
(37,18)-(37,22)
(38,13)-(38,44)
(38,13)-(38,37)
(38,14)-(38,28)
(38,15)-(38,19)
(38,23)-(38,27)
(38,32)-(38,36)
(38,41)-(38,44)
(40,10)-(44,36)
(40,13)-(40,24)
(40,13)-(40,17)
(40,20)-(40,24)
(42,12)-(43,25)
(42,12)-(42,66)
(42,13)-(42,58)
(42,14)-(42,42)
(42,15)-(42,26)
(42,16)-(42,20)
(42,21)-(42,25)
(42,30)-(42,41)
(42,31)-(42,35)
(42,36)-(42,40)
(42,46)-(42,57)
(42,47)-(42,51)
(42,52)-(42,56)
(42,62)-(42,65)
(43,14)-(43,25)
(43,15)-(43,18)
(43,22)-(43,24)
(44,15)-(44,36)
(44,15)-(44,19)
(44,20)-(44,36)
(44,21)-(44,27)
(44,23)-(44,26)
(44,31)-(44,35)
*)
