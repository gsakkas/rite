
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then (if (rand mod 2) = 0 then buildX () else buildY ())
  else
    if (rand mod 5) = 0
    then buildSine (build (rand, (depth - 1)))
    else
      if (rand mod 5) = 1
      then buildCosine (build (rand, (depth - 1)))
      else
        if (rand mod 5) = 2
        then
          buildAverage
            ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
        else
          if (rand mod 5) = 3
          then
            buildTimes
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
          else
            if (rand mod 5) = 4
            then
              buildThresh
                ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                  (build (rand, (depth - 1))), (build (rand, (depth - 1))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth <= 0
  then buildX ()
  else
    (match rand (0, 4) with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 2))), (build (rand, (depth - 2))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 2))), (build (rand, (depth - 2))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 4))), (build (rand, (depth - 4))),
             (build (rand, (depth - 4))), (build (rand, (depth - 4))))
     | _ -> buildY ());;

*)

(* changed spans
(26,5)-(26,14)
(27,7)-(27,58)
(27,11)-(27,23)
(27,11)-(27,27)
(27,12)-(27,16)
(27,21)-(27,22)
(27,26)-(27,27)
(27,48)-(27,54)
(27,48)-(27,57)
(27,55)-(27,57)
(29,4)-(49,75)
(29,7)-(29,19)
(29,7)-(29,23)
(29,17)-(29,18)
(30,9)-(30,46)
(32,6)-(49,75)
(32,9)-(32,21)
(32,9)-(32,25)
(32,10)-(32,14)
(32,19)-(32,20)
(32,24)-(32,25)
(35,8)-(49,75)
(35,11)-(35,23)
(35,11)-(35,27)
(35,12)-(35,16)
(35,21)-(35,22)
(35,26)-(35,27)
(38,36)-(38,37)
(38,65)-(38,66)
(40,10)-(49,75)
(40,13)-(40,25)
(40,13)-(40,29)
(40,14)-(40,18)
(40,23)-(40,24)
(40,28)-(40,29)
(43,38)-(43,39)
(43,67)-(43,68)
(45,12)-(49,75)
(45,15)-(45,27)
(45,15)-(45,31)
(45,16)-(45,20)
(45,25)-(45,26)
(45,30)-(45,31)
(48,40)-(48,41)
(48,69)-(48,70)
(49,41)-(49,42)
(49,70)-(49,71)
*)

(* type error slice
(17,3)-(17,69)
(17,17)-(17,67)
(17,38)-(17,67)
(19,3)-(19,41)
(19,16)-(19,39)
(19,25)-(19,39)
(23,3)-(23,22)
(23,11)-(23,20)
(23,16)-(23,20)
(26,2)-(49,75)
(27,7)-(27,58)
(27,48)-(27,54)
(27,48)-(27,57)
(29,4)-(49,75)
(32,6)-(49,75)
(35,8)-(49,75)
(40,10)-(49,75)
(42,12)-(42,22)
(42,12)-(43,72)
(45,12)-(49,75)
(47,14)-(47,25)
(47,14)-(49,75)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(49,75)
(26,2)-(49,75)
(26,5)-(26,14)
(26,5)-(26,10)
(26,13)-(26,14)
(27,7)-(27,58)
(27,11)-(27,27)
(27,11)-(27,23)
(27,12)-(27,16)
(27,21)-(27,22)
(27,26)-(27,27)
(27,33)-(27,42)
(27,33)-(27,39)
(27,40)-(27,42)
(27,48)-(27,57)
(27,48)-(27,54)
(27,55)-(27,57)
(29,4)-(49,75)
(29,7)-(29,23)
(29,7)-(29,19)
(29,8)-(29,12)
(29,17)-(29,18)
(29,22)-(29,23)
(30,9)-(30,46)
(30,9)-(30,18)
(30,19)-(30,46)
(30,20)-(30,25)
(30,26)-(30,45)
(30,27)-(30,31)
(30,33)-(30,44)
(30,34)-(30,39)
(30,42)-(30,43)
(32,6)-(49,75)
(32,9)-(32,25)
(32,9)-(32,21)
(32,10)-(32,14)
(32,19)-(32,20)
(32,24)-(32,25)
(33,11)-(33,50)
(33,11)-(33,22)
(33,23)-(33,50)
(33,24)-(33,29)
(33,30)-(33,49)
(33,31)-(33,35)
(33,37)-(33,48)
(33,38)-(33,43)
(33,46)-(33,47)
(35,8)-(49,75)
(35,11)-(35,27)
(35,11)-(35,23)
(35,12)-(35,16)
(35,21)-(35,22)
(35,26)-(35,27)
(37,10)-(38,70)
(37,10)-(37,22)
(38,12)-(38,70)
(38,13)-(38,40)
(38,14)-(38,19)
(38,20)-(38,39)
(38,21)-(38,25)
(38,27)-(38,38)
(38,28)-(38,33)
(38,36)-(38,37)
(38,42)-(38,69)
(38,43)-(38,48)
(38,49)-(38,68)
(38,50)-(38,54)
(38,56)-(38,67)
(38,57)-(38,62)
(38,65)-(38,66)
(40,10)-(49,75)
(40,13)-(40,29)
(40,13)-(40,25)
(40,14)-(40,18)
(40,23)-(40,24)
(40,28)-(40,29)
(42,12)-(43,72)
(42,12)-(42,22)
(43,14)-(43,72)
(43,15)-(43,42)
(43,16)-(43,21)
(43,22)-(43,41)
(43,23)-(43,27)
(43,29)-(43,40)
(43,30)-(43,35)
(43,38)-(43,39)
(43,44)-(43,71)
(43,45)-(43,50)
(43,51)-(43,70)
(43,52)-(43,56)
(43,58)-(43,69)
(43,59)-(43,64)
(43,67)-(43,68)
(45,12)-(49,75)
(45,15)-(45,31)
(45,15)-(45,27)
(45,16)-(45,20)
(45,25)-(45,26)
(45,30)-(45,31)
(47,14)-(49,75)
(47,14)-(47,25)
(48,16)-(49,75)
(48,17)-(48,44)
(48,18)-(48,23)
(48,24)-(48,43)
(48,25)-(48,29)
(48,31)-(48,42)
(48,32)-(48,37)
(48,40)-(48,41)
(48,46)-(48,73)
(48,47)-(48,52)
(48,53)-(48,72)
(48,54)-(48,58)
(48,60)-(48,71)
(48,61)-(48,66)
(48,69)-(48,70)
(49,18)-(49,45)
(49,19)-(49,24)
(49,25)-(49,44)
(49,26)-(49,30)
(49,32)-(49,43)
(49,33)-(49,38)
(49,41)-(49,42)
(49,47)-(49,74)
(49,48)-(49,53)
(49,54)-(49,73)
(49,55)-(49,59)
(49,61)-(49,72)
(49,62)-(49,67)
(49,70)-(49,71)
*)
