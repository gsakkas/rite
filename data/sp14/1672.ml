
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Magic of expr
  | Weird of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildMagic e1 = Magic e1;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildWeird (e1,e2,e3,e4) = Weird (e1, e2, e3);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then buildX ()
  else
    (match rand (1, 8) with
     | 1 -> buildSine (build (rand, (depth - 1)))
     | 2 -> buildCosine (build (rand, (depth - 1)))
     | 3 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 -> buildX ()
     | 7 -> buildY ()
     | 8 -> buildMagic (build (rand, (depth - 1)))
     | 9 ->
         buildWeird
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))))
     | _ -> buildX ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Magic of expr
  | Weird of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildMagic e1 = Magic e1;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildWeird (e1,e2,e3) = Weird (e1, e2, e3);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then buildX ()
  else
    (match rand (1, 10) with
     | 1 -> buildSine (build (rand, (depth - 1)))
     | 2 -> buildCosine (build (rand, (depth - 1)))
     | 3 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 4 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 -> buildX ()
     | 7 -> buildY ()
     | 8 -> buildMagic (build (rand, (depth - 1)))
     | 9 ->
         buildWeird
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))))
     | _ -> buildX ());;

*)

(* changed spans
(25,16)-(25,49)
(35,20)-(35,21)
*)

(* type error slice
(25,3)-(25,51)
(25,16)-(25,49)
(52,9)-(52,19)
(52,9)-(54,41)
(53,11)-(54,41)
*)

(* all spans
(13,18)-(13,43)
(13,27)-(13,43)
(13,36)-(13,38)
(13,40)-(13,42)
(15,16)-(15,28)
(15,20)-(15,28)
(15,27)-(15,28)
(17,15)-(17,28)
(17,20)-(17,28)
(17,26)-(17,28)
(19,14)-(19,24)
(19,18)-(19,24)
(19,23)-(19,24)
(21,17)-(21,67)
(21,38)-(21,67)
(21,46)-(21,47)
(21,49)-(21,50)
(21,52)-(21,58)
(21,60)-(21,66)
(23,16)-(23,39)
(23,25)-(23,39)
(23,32)-(23,34)
(23,36)-(23,38)
(25,16)-(25,49)
(25,31)-(25,49)
(25,38)-(25,40)
(25,42)-(25,44)
(25,46)-(25,48)
(27,11)-(27,20)
(27,16)-(27,20)
(29,11)-(29,20)
(29,16)-(29,20)
(31,15)-(55,22)
(32,2)-(55,22)
(32,5)-(32,14)
(32,5)-(32,10)
(32,13)-(32,14)
(33,7)-(33,16)
(33,7)-(33,13)
(33,14)-(33,16)
(35,4)-(55,22)
(35,11)-(35,22)
(35,11)-(35,15)
(35,16)-(35,22)
(35,17)-(35,18)
(35,20)-(35,21)
(36,12)-(36,49)
(36,12)-(36,21)
(36,22)-(36,49)
(36,23)-(36,28)
(36,29)-(36,48)
(36,30)-(36,34)
(36,36)-(36,47)
(36,37)-(36,42)
(36,45)-(36,46)
(37,12)-(37,51)
(37,12)-(37,23)
(37,24)-(37,51)
(37,25)-(37,30)
(37,31)-(37,50)
(37,32)-(37,36)
(37,38)-(37,49)
(37,39)-(37,44)
(37,47)-(37,48)
(39,9)-(40,69)
(39,9)-(39,21)
(40,11)-(40,69)
(40,12)-(40,39)
(40,13)-(40,18)
(40,19)-(40,38)
(40,20)-(40,24)
(40,26)-(40,37)
(40,27)-(40,32)
(40,35)-(40,36)
(40,41)-(40,68)
(40,42)-(40,47)
(40,48)-(40,67)
(40,49)-(40,53)
(40,55)-(40,66)
(40,56)-(40,61)
(40,64)-(40,65)
(42,9)-(43,69)
(42,9)-(42,19)
(43,11)-(43,69)
(43,12)-(43,39)
(43,13)-(43,18)
(43,19)-(43,38)
(43,20)-(43,24)
(43,26)-(43,37)
(43,27)-(43,32)
(43,35)-(43,36)
(43,41)-(43,68)
(43,42)-(43,47)
(43,48)-(43,67)
(43,49)-(43,53)
(43,55)-(43,66)
(43,56)-(43,61)
(43,64)-(43,65)
(45,9)-(47,70)
(45,9)-(45,20)
(46,11)-(47,70)
(46,12)-(46,39)
(46,13)-(46,18)
(46,19)-(46,38)
(46,20)-(46,24)
(46,26)-(46,37)
(46,27)-(46,32)
(46,35)-(46,36)
(46,41)-(46,68)
(46,42)-(46,47)
(46,48)-(46,67)
(46,49)-(46,53)
(46,55)-(46,66)
(46,56)-(46,61)
(46,64)-(46,65)
(47,13)-(47,40)
(47,14)-(47,19)
(47,20)-(47,39)
(47,21)-(47,25)
(47,27)-(47,38)
(47,28)-(47,33)
(47,36)-(47,37)
(47,42)-(47,69)
(47,43)-(47,48)
(47,49)-(47,68)
(47,50)-(47,54)
(47,56)-(47,67)
(47,57)-(47,62)
(47,65)-(47,66)
(48,12)-(48,21)
(48,12)-(48,18)
(48,19)-(48,21)
(49,12)-(49,21)
(49,12)-(49,18)
(49,19)-(49,21)
(50,12)-(50,50)
(50,12)-(50,22)
(50,23)-(50,50)
(50,24)-(50,29)
(50,30)-(50,49)
(50,31)-(50,35)
(50,37)-(50,48)
(50,38)-(50,43)
(50,46)-(50,47)
(52,9)-(54,41)
(52,9)-(52,19)
(53,11)-(54,41)
(53,12)-(53,39)
(53,13)-(53,18)
(53,19)-(53,38)
(53,20)-(53,24)
(53,26)-(53,37)
(53,27)-(53,32)
(53,35)-(53,36)
(53,41)-(53,68)
(53,42)-(53,47)
(53,48)-(53,67)
(53,49)-(53,53)
(53,55)-(53,66)
(53,56)-(53,61)
(53,64)-(53,65)
(54,13)-(54,40)
(54,14)-(54,19)
(54,20)-(54,39)
(54,21)-(54,25)
(54,27)-(54,38)
(54,28)-(54,33)
(54,36)-(54,37)
(55,12)-(55,21)
(55,12)-(55,18)
(55,19)-(55,21)
*)
