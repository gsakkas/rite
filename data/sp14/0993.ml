
let rec clone x n =
  if n < 1
  then []
  else
    (let rec helper acc f x =
       match x with | 0 -> acc | _ -> helper (f :: acc) f (x - 1) in
     helper [] x n);;

let padZero l1 l2 =
  let x = (List.length l1) - (List.length l2) in
  if x
  then
    (if x < 0
     then (((clone 0 (abs x)) @ l1), l2)
     else (l1, ((clone 0 (abs x)) @ l2)))
  else (l1, l2);;


(* fix

let rec clone x n =
  if n < 1
  then []
  else
    (let rec helper acc f x =
       match x with | 0 -> acc | _ -> helper (f :: acc) f (x - 1) in
     helper [] x n);;

let padZero l1 l2 =
  let x = (List.length l1) - (List.length l2) in
  if x != 0
  then
    (if x < 0
     then (((clone 0 (abs x)) @ l1), l2)
     else (l1, ((clone 0 (abs x)) @ l2)))
  else (l1, l2);;

*)

(* changed spans
(12,5)-(12,6)
(14,4)-(16,41)
*)

(* type error slice
(11,2)-(17,15)
(11,10)-(11,45)
(12,2)-(17,15)
(12,5)-(12,6)
*)

(* all spans
(2,14)-(8,19)
(2,16)-(8,19)
(3,2)-(8,19)
(3,5)-(3,10)
(3,5)-(3,6)
(3,9)-(3,10)
(4,7)-(4,9)
(6,4)-(8,19)
(6,20)-(7,65)
(6,24)-(7,65)
(6,26)-(7,65)
(7,7)-(7,65)
(7,13)-(7,14)
(7,27)-(7,30)
(7,38)-(7,65)
(7,38)-(7,44)
(7,45)-(7,55)
(7,46)-(7,47)
(7,51)-(7,54)
(7,56)-(7,57)
(7,58)-(7,65)
(7,59)-(7,60)
(7,63)-(7,64)
(8,5)-(8,18)
(8,5)-(8,11)
(8,12)-(8,14)
(8,15)-(8,16)
(8,17)-(8,18)
(10,12)-(17,15)
(10,15)-(17,15)
(11,2)-(17,15)
(11,10)-(11,45)
(11,10)-(11,26)
(11,11)-(11,22)
(11,23)-(11,25)
(11,29)-(11,45)
(11,30)-(11,41)
(11,42)-(11,44)
(12,2)-(17,15)
(12,5)-(12,6)
(14,4)-(16,41)
(14,8)-(14,13)
(14,8)-(14,9)
(14,12)-(14,13)
(15,10)-(15,40)
(15,11)-(15,35)
(15,30)-(15,31)
(15,12)-(15,29)
(15,13)-(15,18)
(15,19)-(15,20)
(15,21)-(15,28)
(15,22)-(15,25)
(15,26)-(15,27)
(15,32)-(15,34)
(15,37)-(15,39)
(16,10)-(16,40)
(16,11)-(16,13)
(16,15)-(16,39)
(16,34)-(16,35)
(16,16)-(16,33)
(16,17)-(16,22)
(16,23)-(16,24)
(16,25)-(16,32)
(16,26)-(16,29)
(16,30)-(16,31)
(16,36)-(16,38)
(17,7)-(17,15)
(17,8)-(17,10)
(17,12)-(17,14)
*)
