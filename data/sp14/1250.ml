
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let dl = (List.length l1) - (List.length l2) in
  match dl with
  | 0 -> (l1, l2)
  | _ ->
      if dl > 0
      then (l1, ((clone 0 dl) @ l2))
      else (((clone 0 (dl / (-1))) @ l1), l2);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let z = (fst x) + (snd x) in
      match a with | (w,y) -> (((w + z) / 10), (((w + z) mod 10) :: y)) in
    let base = (0, []) in
    let args = List.rev ((List.combine l1 l2) :: (0, 0)) in
    let (_,res) = List.fold_left f base args in res in
  add (padZero l1 l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let dl = (List.length l1) - (List.length l2) in
  match dl with
  | 0 -> (l1, l2)
  | _ ->
      if dl > 0
      then (l1, ((clone 0 dl) @ l2))
      else (((clone 0 (dl / (-1))) @ l1), l2);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let z = (fst x) + (snd x) in
      match a with | (w,y) -> (((w + z) / 10), (((w + z) mod 10) :: y)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  add (padZero l1 l2);;

*)

(* changed spans
(19,24)-(19,56)
(19,49)-(19,55)
(19,50)-(19,51)
(19,53)-(19,54)
*)

(* type error slice
(15,4)-(20,51)
(15,10)-(17,71)
(15,12)-(17,71)
(16,24)-(16,31)
(16,25)-(16,28)
(16,29)-(16,30)
(19,4)-(20,51)
(19,15)-(19,23)
(19,15)-(19,56)
(19,24)-(19,56)
(19,25)-(19,45)
(19,26)-(19,38)
(19,49)-(19,55)
(20,18)-(20,32)
(20,18)-(20,44)
(20,33)-(20,34)
(20,40)-(20,44)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(11,45)
(4,15)-(11,45)
(5,2)-(11,45)
(5,11)-(5,46)
(5,11)-(5,27)
(5,12)-(5,23)
(5,24)-(5,26)
(5,30)-(5,46)
(5,31)-(5,42)
(5,43)-(5,45)
(6,2)-(11,45)
(6,8)-(6,10)
(7,9)-(7,17)
(7,10)-(7,12)
(7,14)-(7,16)
(9,6)-(11,45)
(9,9)-(9,15)
(9,9)-(9,11)
(9,14)-(9,15)
(10,11)-(10,36)
(10,12)-(10,14)
(10,16)-(10,35)
(10,30)-(10,31)
(10,17)-(10,29)
(10,18)-(10,23)
(10,24)-(10,25)
(10,26)-(10,28)
(10,32)-(10,34)
(11,11)-(11,45)
(11,12)-(11,40)
(11,35)-(11,36)
(11,13)-(11,34)
(11,14)-(11,19)
(11,20)-(11,21)
(11,22)-(11,33)
(11,23)-(11,25)
(11,28)-(11,32)
(11,37)-(11,39)
(11,42)-(11,44)
(13,11)-(21,21)
(13,14)-(21,21)
(14,2)-(21,21)
(14,11)-(20,51)
(15,4)-(20,51)
(15,10)-(17,71)
(15,12)-(17,71)
(16,6)-(17,71)
(16,14)-(16,31)
(16,14)-(16,21)
(16,15)-(16,18)
(16,19)-(16,20)
(16,24)-(16,31)
(16,25)-(16,28)
(16,29)-(16,30)
(17,6)-(17,71)
(17,12)-(17,13)
(17,30)-(17,71)
(17,31)-(17,45)
(17,32)-(17,39)
(17,33)-(17,34)
(17,37)-(17,38)
(17,42)-(17,44)
(17,47)-(17,70)
(17,48)-(17,64)
(17,49)-(17,56)
(17,50)-(17,51)
(17,54)-(17,55)
(17,61)-(17,63)
(17,68)-(17,69)
(18,4)-(20,51)
(18,15)-(18,22)
(18,16)-(18,17)
(18,19)-(18,21)
(19,4)-(20,51)
(19,15)-(19,56)
(19,15)-(19,23)
(19,24)-(19,56)
(19,25)-(19,45)
(19,26)-(19,38)
(19,39)-(19,41)
(19,42)-(19,44)
(19,49)-(19,55)
(19,50)-(19,51)
(19,53)-(19,54)
(20,4)-(20,51)
(20,18)-(20,44)
(20,18)-(20,32)
(20,33)-(20,34)
(20,35)-(20,39)
(20,40)-(20,44)
(20,48)-(20,51)
(21,2)-(21,21)
(21,2)-(21,5)
(21,6)-(21,21)
(21,7)-(21,14)
(21,15)-(21,17)
(21,18)-(21,20)
*)
