
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Nom of expr* expr* expr
  | Squa of expr;;

let rec exprToString e =
  match e with
  | VarX  -> "x"
  | VarY  -> "y"
  | Sine expr -> "sin(pi*" ^ ((exprToString expr) ^ ")")
  | Cosine expr -> "cos(pi*" ^ ((exprToString expr) ^ ")")
  | Average (expr,expr1) ->
      "((" ^ ((exprToString expr) ^ ("+" ^ ((exprToString expr1) ^ ")/2)")))
  | Times (expr,expr1) -> (exprToString expr) ^ ("*" ^ (exprToString expr1))
  | Nom (expr1,expr2,expr3) ->
      let (res1,res2,res3) =
        ((exprToString expr1), (exprToString expr2), (exprToString expr3)) in
      "(" ^
        (res1 ^
           ("+" ^
              (res2 ^
                 ("+" ^
                    (res3 ^
                       ((")" / "(abs(") ^
                          (res1 ^
                             (")+abs(" ^ (res2 ^ (")+abs(" ^ (res3 ^ "))")))))))))))
  | Squa expr ->
      let res = exprToString expr in
      "abs(" ^ (res ^ (")/(abs" ^ (res ^ ("+" ^ (res ^ "^2)")))))
  | Thresh (expr,expr1,expr2,expr3) ->
      "(" ^
        ((exprToString expr) ^
           ("<" ^
              ((exprToString expr1) ^
                 ("?" ^ ((exprToString expr2) ^ (":" ^ (exprToString expr3)))))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Nom of expr* expr* expr
  | Squa of expr;;

let rec exprToString e =
  match e with
  | VarX  -> "x"
  | VarY  -> "y"
  | Sine expr -> "sin(pi*" ^ ((exprToString expr) ^ ")")
  | Cosine expr -> "cos(pi*" ^ ((exprToString expr) ^ ")")
  | Average (expr,expr1) ->
      "((" ^ ((exprToString expr) ^ ("+" ^ ((exprToString expr1) ^ ")/2)")))
  | Times (expr,expr1) -> (exprToString expr) ^ ("*" ^ (exprToString expr1))
  | Nom (expr1,expr2,expr3) ->
      let (res1,res2,res3) =
        ((exprToString expr1), (exprToString expr2), (exprToString expr3)) in
      "(" ^
        (res1 ^
           ("+" ^
              (res2 ^
                 ("+" ^
                    (res3 ^
                       (")/(abs(" ^
                          (res1 ^
                             (")+abs(" ^ (res2 ^ (")+abs(" ^ (res3 ^ "))")))))))))))
  | Squa expr ->
      let res = exprToString expr in
      "abs(" ^ (res ^ (")/(abs" ^ (res ^ ("+" ^ (res ^ "^2)")))))
  | Thresh (expr,expr1,expr2,expr3) ->
      "(" ^
        ((exprToString expr) ^
           ("<" ^
              ((exprToString expr1) ^
                 ("?" ^ ((exprToString expr2) ^ (":" ^ (exprToString expr3)))))));;

*)

(* changed spans
(31,24)-(31,39)
(31,25)-(31,28)
(31,31)-(31,38)
*)

(* type error slice
(31,23)-(33,79)
(31,24)-(31,39)
(31,25)-(31,28)
(31,31)-(31,38)
(31,40)-(31,41)
*)

(* all spans
(13,21)-(42,81)
(14,2)-(42,81)
(14,8)-(14,9)
(15,13)-(15,16)
(16,13)-(16,16)
(17,17)-(17,56)
(17,27)-(17,28)
(17,17)-(17,26)
(17,29)-(17,56)
(17,50)-(17,51)
(17,30)-(17,49)
(17,31)-(17,43)
(17,44)-(17,48)
(17,52)-(17,55)
(18,19)-(18,58)
(18,29)-(18,30)
(18,19)-(18,28)
(18,31)-(18,58)
(18,52)-(18,53)
(18,32)-(18,51)
(18,33)-(18,45)
(18,46)-(18,50)
(18,54)-(18,57)
(20,6)-(20,76)
(20,11)-(20,12)
(20,6)-(20,10)
(20,13)-(20,76)
(20,34)-(20,35)
(20,14)-(20,33)
(20,15)-(20,27)
(20,28)-(20,32)
(20,36)-(20,75)
(20,41)-(20,42)
(20,37)-(20,40)
(20,43)-(20,74)
(20,65)-(20,66)
(20,44)-(20,64)
(20,45)-(20,57)
(20,58)-(20,63)
(20,67)-(20,73)
(21,26)-(21,76)
(21,46)-(21,47)
(21,26)-(21,45)
(21,27)-(21,39)
(21,40)-(21,44)
(21,48)-(21,76)
(21,53)-(21,54)
(21,49)-(21,52)
(21,55)-(21,75)
(21,56)-(21,68)
(21,69)-(21,74)
(23,6)-(33,84)
(24,8)-(24,74)
(24,9)-(24,29)
(24,10)-(24,22)
(24,23)-(24,28)
(24,31)-(24,51)
(24,32)-(24,44)
(24,45)-(24,50)
(24,53)-(24,73)
(24,54)-(24,66)
(24,67)-(24,72)
(25,6)-(33,84)
(25,10)-(25,11)
(25,6)-(25,9)
(26,8)-(33,84)
(26,14)-(26,15)
(26,9)-(26,13)
(27,11)-(33,83)
(27,16)-(27,17)
(27,12)-(27,15)
(28,14)-(33,82)
(28,20)-(28,21)
(28,15)-(28,19)
(29,17)-(33,81)
(29,22)-(29,23)
(29,18)-(29,21)
(30,20)-(33,80)
(30,26)-(30,27)
(30,21)-(30,25)
(31,23)-(33,79)
(31,40)-(31,41)
(31,24)-(31,39)
(31,25)-(31,28)
(31,31)-(31,38)
(32,26)-(33,78)
(32,32)-(32,33)
(32,27)-(32,31)
(33,29)-(33,77)
(33,39)-(33,40)
(33,30)-(33,38)
(33,41)-(33,76)
(33,47)-(33,48)
(33,42)-(33,46)
(33,49)-(33,75)
(33,59)-(33,60)
(33,50)-(33,58)
(33,61)-(33,74)
(33,67)-(33,68)
(33,62)-(33,66)
(33,69)-(33,73)
(35,6)-(36,65)
(35,16)-(35,33)
(35,16)-(35,28)
(35,29)-(35,33)
(36,6)-(36,65)
(36,13)-(36,14)
(36,6)-(36,12)
(36,15)-(36,65)
(36,20)-(36,21)
(36,16)-(36,19)
(36,22)-(36,64)
(36,32)-(36,33)
(36,23)-(36,31)
(36,34)-(36,63)
(36,39)-(36,40)
(36,35)-(36,38)
(36,41)-(36,62)
(36,46)-(36,47)
(36,42)-(36,45)
(36,48)-(36,61)
(36,53)-(36,54)
(36,49)-(36,52)
(36,55)-(36,60)
(38,6)-(42,81)
(38,10)-(38,11)
(38,6)-(38,9)
(39,8)-(42,81)
(39,29)-(39,30)
(39,9)-(39,28)
(39,10)-(39,22)
(39,23)-(39,27)
(40,11)-(42,80)
(40,16)-(40,17)
(40,12)-(40,15)
(41,14)-(42,79)
(41,36)-(41,37)
(41,15)-(41,35)
(41,16)-(41,28)
(41,29)-(41,34)
(42,17)-(42,78)
(42,22)-(42,23)
(42,18)-(42,21)
(42,24)-(42,77)
(42,46)-(42,47)
(42,25)-(42,45)
(42,26)-(42,38)
(42,39)-(42,44)
(42,48)-(42,76)
(42,53)-(42,54)
(42,49)-(42,52)
(42,55)-(42,75)
(42,56)-(42,68)
(42,69)-(42,74)
*)
