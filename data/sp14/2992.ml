
let rec digitsOfInt n =
  if n <= 0
  then []
  else
    (let rec loop n a = if n = 0 then a else loop (n / 10) ((n mod 10) :: a) in
     match n with | 0 -> [0] | _ -> loop n []);;

let rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;

let rec additivePersistence n =
  if n < 10 then n else n = (sumList (digitsOfInt n));;


(* fix

let a = int_of_char '3';;

let rec digitsOfInt n =
  if n <= 0
  then []
  else
    (let rec loop n a = if n = 0 then a else loop (n / 10) ((n mod 10) :: a) in
     match n with | 0 -> [0] | _ -> loop n []);;

let rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;

let rec additivePersistence n =
  if n < 10 then a else additivePersistence (sumList (digitsOfInt n));;

*)

(* changed spans
(2,20)-(7,46)
(12,17)-(12,18)
(12,24)-(12,25)
(12,24)-(12,53)
(12,29)-(12,36)
*)

(* type error slice
(12,2)-(12,53)
(12,5)-(12,6)
(12,5)-(12,11)
(12,9)-(12,11)
(12,17)-(12,18)
(12,24)-(12,53)
*)

(* all spans
(2,20)-(7,46)
(3,2)-(7,46)
(3,5)-(3,11)
(3,5)-(3,6)
(3,10)-(3,11)
(4,7)-(4,9)
(6,4)-(7,46)
(6,18)-(6,76)
(6,20)-(6,76)
(6,24)-(6,76)
(6,27)-(6,32)
(6,27)-(6,28)
(6,31)-(6,32)
(6,38)-(6,39)
(6,45)-(6,76)
(6,45)-(6,49)
(6,50)-(6,58)
(6,51)-(6,52)
(6,55)-(6,57)
(6,59)-(6,76)
(6,60)-(6,70)
(6,61)-(6,62)
(6,67)-(6,69)
(6,74)-(6,75)
(7,5)-(7,45)
(7,11)-(7,12)
(7,25)-(7,28)
(7,26)-(7,27)
(7,36)-(7,45)
(7,36)-(7,40)
(7,41)-(7,42)
(7,43)-(7,45)
(9,16)-(9,74)
(9,21)-(9,74)
(9,27)-(9,29)
(9,43)-(9,44)
(9,57)-(9,74)
(9,57)-(9,58)
(9,61)-(9,74)
(9,62)-(9,69)
(9,70)-(9,73)
(11,28)-(12,53)
(12,2)-(12,53)
(12,5)-(12,11)
(12,5)-(12,6)
(12,9)-(12,11)
(12,17)-(12,18)
(12,24)-(12,53)
(12,24)-(12,25)
(12,28)-(12,53)
(12,29)-(12,36)
(12,37)-(12,52)
(12,38)-(12,49)
(12,50)-(12,51)
*)
