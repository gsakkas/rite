
let listReverse l =
  let rec lr l' = function | [] -> l' | h::t -> lr (h :: l') t in lr [] l;;

let rec digitsOfInt n =
  let this = listReverse n in
  match n with
  | 0 -> []
  | n -> if n < 0 then [] else (n mod 10) :: (digitsOfInt (n / 10));;


(* fix

let listReverse l =
  let rec lr l' = function | [] -> l' | h::t -> lr (h :: l') t in lr [] l;;

let rec digitsOfInt n =
  let xxx n =
    match n with
    | 0 -> []
    | n -> if n < 0 then [] else (n mod 10) :: (digitsOfInt (n / 10)) in
  listReverse (xxx n);;

*)

(* changed spans
(6,2)-(9,67)
(6,13)-(6,24)
(6,13)-(6,26)
(6,25)-(6,26)
(7,2)-(9,67)
*)

(* type error slice
(2,3)-(3,75)
(2,16)-(3,73)
(3,18)-(3,62)
(3,48)-(3,50)
(3,48)-(3,62)
(3,61)-(3,62)
(3,66)-(3,68)
(3,66)-(3,73)
(3,72)-(3,73)
(5,3)-(9,69)
(5,20)-(9,67)
(6,13)-(6,24)
(6,13)-(6,26)
(6,25)-(6,26)
(7,2)-(9,67)
(7,8)-(7,9)
(9,12)-(9,13)
(9,12)-(9,17)
(9,16)-(9,17)
(9,45)-(9,67)
(9,46)-(9,57)
(9,58)-(9,66)
*)

(* all spans
(2,16)-(3,73)
(3,2)-(3,73)
(3,13)-(3,62)
(3,18)-(3,62)
(3,35)-(3,37)
(3,48)-(3,62)
(3,48)-(3,50)
(3,51)-(3,60)
(3,52)-(3,53)
(3,57)-(3,59)
(3,61)-(3,62)
(3,66)-(3,73)
(3,66)-(3,68)
(3,69)-(3,71)
(3,72)-(3,73)
(5,20)-(9,67)
(6,2)-(9,67)
(6,13)-(6,26)
(6,13)-(6,24)
(6,25)-(6,26)
(7,2)-(9,67)
(7,8)-(7,9)
(8,9)-(8,11)
(9,9)-(9,67)
(9,12)-(9,17)
(9,12)-(9,13)
(9,16)-(9,17)
(9,23)-(9,25)
(9,31)-(9,67)
(9,31)-(9,41)
(9,32)-(9,33)
(9,38)-(9,40)
(9,45)-(9,67)
(9,46)-(9,57)
(9,58)-(9,66)
(9,59)-(9,60)
(9,63)-(9,65)
*)
