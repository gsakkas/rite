
let rec clone x n =
  let rec helper a x n =
    if n <= 0 then a else (let a' = x :: a in helper a' x (n - 1)) in
  helper [] x n;;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  if length1 > length2
  then (l1, (List.append (clone 0 (length1 - length2)) l2))
  else
    if length2 > length1
    then ((List.append (clone 0 (length2 - length1)) l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (x1,x2) ->
          (match a with
           | (o,z) ->
               if ((o + x1) + x2) > 9
               then (1, ((((o + x1) + x2) mod 10) :: z))
               else (0, (((o + x1) + x2) :: z))) in
    let base = (0, []) in
    let args =
      let rec pair list1 list2 =
        match (list1, list2) with
        | (h1::t1,h2::t2) -> (h1, h2) :: (pair t1 t2)
        | (_,_) -> (0, 0) in
      pair (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let rec helper a x n =
    if n <= 0 then a else (let a' = x :: a in helper a' x (n - 1)) in
  helper [] x n;;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  if length1 > length2
  then (l1, (List.append (clone 0 (length1 - length2)) l2))
  else
    if length2 > length1
    then ((List.append (clone 0 (length2 - length1)) l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (x1,x2) ->
          (match a with
           | (o,z) ->
               if ((o + x1) + x2) > 9
               then (1, ((((o + x1) + x2) mod 10) :: z))
               else (0, (((o + x1) + x2) :: z))) in
    let base = (0, []) in
    let args =
      let rec pair list1 list2 =
        match (list1, list2) with
        | (h1::t1,h2::t2) -> (h1, h2) :: (pair t1 t2)
        | (_,_) -> [(0, 0)] in
      pair (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(35,19)-(35,25)
*)

(* type error slice
(33,8)-(35,25)
(34,29)-(34,53)
(35,19)-(35,25)
*)

(* all spans
(2,14)-(5,15)
(2,16)-(5,15)
(3,2)-(5,15)
(3,17)-(4,66)
(3,19)-(4,66)
(3,21)-(4,66)
(4,4)-(4,66)
(4,7)-(4,13)
(4,7)-(4,8)
(4,12)-(4,13)
(4,19)-(4,20)
(4,26)-(4,66)
(4,36)-(4,42)
(4,36)-(4,37)
(4,41)-(4,42)
(4,46)-(4,65)
(4,46)-(4,52)
(4,53)-(4,55)
(4,56)-(4,57)
(4,58)-(4,65)
(4,59)-(4,60)
(4,63)-(4,64)
(5,2)-(5,15)
(5,2)-(5,8)
(5,9)-(5,11)
(5,12)-(5,13)
(5,14)-(5,15)
(7,12)-(15,17)
(7,15)-(15,17)
(8,2)-(15,17)
(8,16)-(8,30)
(8,16)-(8,27)
(8,28)-(8,30)
(9,2)-(15,17)
(9,16)-(9,30)
(9,16)-(9,27)
(9,28)-(9,30)
(10,2)-(15,17)
(10,5)-(10,22)
(10,5)-(10,12)
(10,15)-(10,22)
(11,7)-(11,59)
(11,8)-(11,10)
(11,12)-(11,58)
(11,13)-(11,24)
(11,25)-(11,54)
(11,26)-(11,31)
(11,32)-(11,33)
(11,34)-(11,53)
(11,35)-(11,42)
(11,45)-(11,52)
(11,55)-(11,57)
(13,4)-(15,17)
(13,7)-(13,24)
(13,7)-(13,14)
(13,17)-(13,24)
(14,9)-(14,61)
(14,10)-(14,56)
(14,11)-(14,22)
(14,23)-(14,52)
(14,24)-(14,29)
(14,30)-(14,31)
(14,32)-(14,51)
(14,33)-(14,40)
(14,43)-(14,50)
(14,53)-(14,55)
(14,58)-(14,60)
(15,9)-(15,17)
(15,10)-(15,12)
(15,14)-(15,16)
(17,19)-(18,69)
(18,2)-(18,69)
(18,8)-(18,9)
(18,23)-(18,25)
(18,36)-(18,69)
(18,39)-(18,44)
(18,39)-(18,40)
(18,43)-(18,44)
(18,50)-(18,62)
(18,50)-(18,60)
(18,61)-(18,62)
(18,68)-(18,69)
(20,11)-(38,34)
(20,14)-(38,34)
(21,2)-(38,34)
(21,11)-(37,51)
(22,4)-(37,51)
(22,10)-(29,48)
(22,12)-(29,48)
(23,6)-(29,48)
(23,12)-(23,13)
(25,10)-(29,48)
(25,17)-(25,18)
(27,15)-(29,47)
(27,18)-(27,37)
(27,18)-(27,33)
(27,19)-(27,27)
(27,20)-(27,21)
(27,24)-(27,26)
(27,30)-(27,32)
(27,36)-(27,37)
(28,20)-(28,56)
(28,21)-(28,22)
(28,24)-(28,55)
(28,25)-(28,49)
(28,26)-(28,41)
(28,27)-(28,35)
(28,28)-(28,29)
(28,32)-(28,34)
(28,38)-(28,40)
(28,46)-(28,48)
(28,53)-(28,54)
(29,20)-(29,47)
(29,21)-(29,22)
(29,24)-(29,46)
(29,25)-(29,40)
(29,26)-(29,34)
(29,27)-(29,28)
(29,31)-(29,33)
(29,37)-(29,39)
(29,44)-(29,45)
(30,4)-(37,51)
(30,15)-(30,22)
(30,16)-(30,17)
(30,19)-(30,21)
(31,4)-(37,51)
(32,6)-(36,38)
(32,19)-(35,25)
(32,25)-(35,25)
(33,8)-(35,25)
(33,14)-(33,28)
(33,15)-(33,20)
(33,22)-(33,27)
(34,29)-(34,53)
(34,29)-(34,37)
(34,30)-(34,32)
(34,34)-(34,36)
(34,41)-(34,53)
(34,42)-(34,46)
(34,47)-(34,49)
(34,50)-(34,52)
(35,19)-(35,25)
(35,20)-(35,21)
(35,23)-(35,24)
(36,6)-(36,38)
(36,6)-(36,10)
(36,11)-(36,24)
(36,12)-(36,20)
(36,21)-(36,23)
(36,25)-(36,38)
(36,26)-(36,34)
(36,35)-(36,37)
(37,4)-(37,51)
(37,18)-(37,44)
(37,18)-(37,32)
(37,33)-(37,34)
(37,35)-(37,39)
(37,40)-(37,44)
(37,48)-(37,51)
(38,2)-(38,34)
(38,2)-(38,12)
(38,13)-(38,34)
(38,14)-(38,17)
(38,18)-(38,33)
(38,19)-(38,26)
(38,27)-(38,29)
(38,30)-(38,32)
*)
