
let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,rh::rt) ->
          (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt)) in
    let base = ((List.rev l1), [0]) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  match i mod 2 with
  | 0 ->
      (match i with
       | 0 -> []
       | 2 -> bigAdd l l
       | _ -> bigAdd (mulByDigit (i / 2) l) (mulByDigit (i / 2) l))
  | _ -> if i = 1 then l else bigAdd l (mulByDigit (i - 1) l);;

let bigMul l1 l2 =
  let f a x =
    match a with
    | (h1::t1,rh::rt) -> (t1, (((mulByDigit h1 rh) :: rt) :: rt)) in
  let base = ((List.rev l1), [0]) in
  let args = List.rev l2 in let (_,res) = List.fold_left f base args in res;;


(* fix

let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,rh::rt) ->
          (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt)) in
    let base = ((List.rev l1), [0]) in
    let args = List.rev l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  match i mod 2 with
  | 0 ->
      (match i with
       | 0 -> []
       | 2 -> bigAdd l l
       | _ -> bigAdd (mulByDigit (i / 2) l) (mulByDigit (i / 2) l))
  | _ -> if i = 1 then l else bigAdd l (mulByDigit (i - 1) l);;

let bigMul l1 l2 =
  let f a x =
    match a with
    | (h1::t1,rh::rt) -> (t1, (bigAdd (mulByDigit h1 (rh :: rt)) rt)) in
  let base = ((List.rev l1), [0]) in
  let args = List.rev l2 in let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(43,30)-(43,64)
(43,31)-(43,57)
(43,33)-(43,43)
(43,47)-(43,49)
*)

(* type error slice
(36,14)-(36,20)
(36,14)-(36,24)
(36,21)-(36,22)
(37,14)-(37,20)
(37,14)-(37,66)
(37,21)-(37,43)
(37,22)-(37,32)
(37,41)-(37,42)
(42,4)-(43,65)
(43,30)-(43,64)
(43,31)-(43,57)
(43,32)-(43,50)
(43,33)-(43,43)
(43,47)-(43,49)
(43,61)-(43,63)
*)

(* all spans
(2,14)-(3,67)
(2,16)-(3,67)
(3,2)-(3,67)
(3,8)-(3,13)
(3,8)-(3,9)
(3,12)-(3,13)
(3,30)-(3,52)
(3,30)-(3,31)
(3,35)-(3,52)
(3,36)-(3,41)
(3,42)-(3,43)
(3,44)-(3,51)
(3,45)-(3,46)
(3,49)-(3,50)
(3,65)-(3,67)
(5,12)-(14,61)
(5,15)-(14,61)
(6,2)-(14,61)
(6,16)-(6,30)
(6,16)-(6,27)
(6,28)-(6,30)
(7,2)-(14,61)
(7,16)-(7,30)
(7,16)-(7,27)
(7,28)-(7,30)
(8,2)-(14,61)
(8,8)-(8,26)
(8,8)-(8,15)
(8,19)-(8,26)
(10,6)-(11,61)
(10,14)-(10,31)
(10,14)-(10,21)
(10,24)-(10,31)
(11,6)-(11,61)
(11,19)-(11,28)
(11,19)-(11,24)
(11,25)-(11,26)
(11,27)-(11,28)
(11,32)-(11,61)
(11,33)-(11,35)
(11,37)-(11,60)
(11,38)-(11,49)
(11,50)-(11,56)
(11,57)-(11,59)
(13,6)-(14,61)
(13,14)-(13,31)
(13,14)-(13,21)
(13,24)-(13,31)
(14,6)-(14,61)
(14,19)-(14,28)
(14,19)-(14,24)
(14,25)-(14,26)
(14,27)-(14,28)
(14,32)-(14,61)
(14,33)-(14,56)
(14,34)-(14,45)
(14,46)-(14,52)
(14,53)-(14,55)
(14,58)-(14,60)
(16,19)-(19,60)
(17,2)-(19,60)
(17,8)-(17,9)
(18,10)-(18,12)
(19,12)-(19,60)
(19,19)-(19,20)
(19,33)-(19,45)
(19,33)-(19,43)
(19,44)-(19,45)
(19,53)-(19,59)
(19,53)-(19,54)
(19,58)-(19,59)
(21,11)-(29,34)
(21,14)-(29,34)
(22,2)-(29,34)
(22,11)-(28,77)
(23,4)-(28,77)
(23,10)-(26,74)
(23,12)-(26,74)
(24,6)-(26,74)
(24,12)-(24,13)
(26,10)-(26,74)
(26,11)-(26,13)
(26,15)-(26,73)
(26,16)-(26,38)
(26,17)-(26,32)
(26,18)-(26,26)
(26,19)-(26,21)
(26,24)-(26,25)
(26,29)-(26,31)
(26,35)-(26,37)
(26,42)-(26,72)
(26,42)-(26,66)
(26,43)-(26,58)
(26,44)-(26,52)
(26,45)-(26,47)
(26,50)-(26,51)
(26,55)-(26,57)
(26,63)-(26,65)
(26,70)-(26,72)
(27,4)-(28,77)
(27,15)-(27,35)
(27,16)-(27,29)
(27,17)-(27,25)
(27,26)-(27,28)
(27,31)-(27,34)
(27,32)-(27,33)
(28,4)-(28,77)
(28,15)-(28,26)
(28,15)-(28,23)
(28,24)-(28,26)
(28,30)-(28,77)
(28,44)-(28,70)
(28,44)-(28,58)
(28,59)-(28,60)
(28,61)-(28,65)
(28,66)-(28,70)
(28,74)-(28,77)
(29,2)-(29,34)
(29,2)-(29,12)
(29,13)-(29,34)
(29,14)-(29,17)
(29,18)-(29,33)
(29,19)-(29,26)
(29,27)-(29,29)
(29,30)-(29,32)
(31,19)-(38,61)
(31,21)-(38,61)
(32,2)-(38,61)
(32,8)-(32,15)
(32,8)-(32,9)
(32,14)-(32,15)
(34,6)-(37,67)
(34,13)-(34,14)
(35,14)-(35,16)
(36,14)-(36,24)
(36,14)-(36,20)
(36,21)-(36,22)
(36,23)-(36,24)
(37,14)-(37,66)
(37,14)-(37,20)
(37,21)-(37,43)
(37,22)-(37,32)
(37,33)-(37,40)
(37,34)-(37,35)
(37,38)-(37,39)
(37,41)-(37,42)
(37,44)-(37,66)
(37,45)-(37,55)
(37,56)-(37,63)
(37,57)-(37,58)
(37,61)-(37,62)
(37,64)-(37,65)
(38,9)-(38,61)
(38,12)-(38,17)
(38,12)-(38,13)
(38,16)-(38,17)
(38,23)-(38,24)
(38,30)-(38,61)
(38,30)-(38,36)
(38,37)-(38,38)
(38,39)-(38,61)
(38,40)-(38,50)
(38,51)-(38,58)
(38,52)-(38,53)
(38,56)-(38,57)
(38,59)-(38,60)
(40,11)-(45,75)
(40,14)-(45,75)
(41,2)-(45,75)
(41,8)-(43,65)
(41,10)-(43,65)
(42,4)-(43,65)
(42,10)-(42,11)
(43,25)-(43,65)
(43,26)-(43,28)
(43,30)-(43,64)
(43,31)-(43,57)
(43,32)-(43,50)
(43,33)-(43,43)
(43,44)-(43,46)
(43,47)-(43,49)
(43,54)-(43,56)
(43,61)-(43,63)
(44,2)-(45,75)
(44,13)-(44,33)
(44,14)-(44,27)
(44,15)-(44,23)
(44,24)-(44,26)
(44,29)-(44,32)
(44,30)-(44,31)
(45,2)-(45,75)
(45,13)-(45,24)
(45,13)-(45,21)
(45,22)-(45,24)
(45,28)-(45,75)
(45,42)-(45,68)
(45,42)-(45,56)
(45,57)-(45,58)
(45,59)-(45,63)
(45,64)-(45,68)
(45,72)-(45,75)
*)
