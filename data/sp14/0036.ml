
let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,[]) ->
          if (h1 + x) > 9
          then (t1, [(h1 + x) / 10; (h1 + x) mod 10])
          else [(h1 + x) mod 10]
      | (h1::t1,rh::rt) ->
          if ((h1 + x) + rh) > 9
          then
            (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt))
          else (((h1 + x) + rh) mod 10) :: rt in
    let base = (l1, []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (h1::t1,[]) ->
          if (h1 + x) > 9
          then (t1, [(h1 + x) / 10; (h1 + x) mod 10])
          else (t1, [(h1 + x) mod 10])
      | (h1::t1,rh::rt) ->
          if ((h1 + x) + rh) > 9
          then
            (t1, ((((h1 + x) + rh) / 10) :: (((h1 + x) + rh) mod 10) :: rt))
          else (t1, ((((h1 + x) + rh) mod 10) :: rt)) in
    let base = (l1, []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(28,15)-(28,32)
(33,15)-(33,45)
*)

(* type error slice
(26,10)-(28,32)
(27,15)-(27,53)
(28,15)-(28,32)
(30,10)-(33,45)
(32,12)-(32,76)
(33,15)-(33,45)
*)

(* all spans
(2,14)-(3,67)
(2,16)-(3,67)
(3,2)-(3,67)
(3,8)-(3,13)
(3,8)-(3,9)
(3,12)-(3,13)
(3,30)-(3,52)
(3,30)-(3,31)
(3,35)-(3,52)
(3,36)-(3,41)
(3,42)-(3,43)
(3,44)-(3,51)
(3,45)-(3,46)
(3,49)-(3,50)
(3,65)-(3,67)
(5,12)-(14,61)
(5,15)-(14,61)
(6,2)-(14,61)
(6,16)-(6,30)
(6,16)-(6,27)
(6,28)-(6,30)
(7,2)-(14,61)
(7,16)-(7,30)
(7,16)-(7,27)
(7,28)-(7,30)
(8,2)-(14,61)
(8,8)-(8,26)
(8,8)-(8,15)
(8,19)-(8,26)
(10,6)-(11,61)
(10,14)-(10,31)
(10,14)-(10,21)
(10,24)-(10,31)
(11,6)-(11,61)
(11,19)-(11,28)
(11,19)-(11,24)
(11,25)-(11,26)
(11,27)-(11,28)
(11,32)-(11,61)
(11,33)-(11,35)
(11,37)-(11,60)
(11,38)-(11,49)
(11,50)-(11,56)
(11,57)-(11,59)
(13,6)-(14,61)
(13,14)-(13,31)
(13,14)-(13,21)
(13,24)-(13,31)
(14,6)-(14,61)
(14,19)-(14,28)
(14,19)-(14,24)
(14,25)-(14,26)
(14,27)-(14,28)
(14,32)-(14,61)
(14,33)-(14,56)
(14,34)-(14,45)
(14,46)-(14,52)
(14,53)-(14,55)
(14,58)-(14,60)
(16,19)-(19,55)
(17,2)-(19,55)
(17,8)-(17,9)
(18,10)-(18,12)
(19,12)-(19,55)
(19,19)-(19,20)
(19,33)-(19,45)
(19,33)-(19,43)
(19,44)-(19,45)
(19,53)-(19,54)
(21,11)-(36,34)
(21,14)-(36,34)
(22,2)-(36,34)
(22,11)-(35,68)
(23,4)-(35,68)
(23,10)-(33,45)
(23,12)-(33,45)
(24,6)-(33,45)
(24,12)-(24,13)
(26,10)-(28,32)
(26,13)-(26,25)
(26,13)-(26,21)
(26,14)-(26,16)
(26,19)-(26,20)
(26,24)-(26,25)
(27,15)-(27,53)
(27,16)-(27,18)
(27,20)-(27,52)
(27,21)-(27,34)
(27,21)-(27,29)
(27,22)-(27,24)
(27,27)-(27,28)
(27,32)-(27,34)
(27,36)-(27,51)
(27,36)-(27,44)
(27,37)-(27,39)
(27,42)-(27,43)
(27,49)-(27,51)
(28,15)-(28,32)
(28,16)-(28,31)
(28,16)-(28,24)
(28,17)-(28,19)
(28,22)-(28,23)
(28,29)-(28,31)
(30,10)-(33,45)
(30,13)-(30,32)
(30,13)-(30,28)
(30,14)-(30,22)
(30,15)-(30,17)
(30,20)-(30,21)
(30,25)-(30,27)
(30,31)-(30,32)
(32,12)-(32,76)
(32,13)-(32,15)
(32,17)-(32,75)
(32,18)-(32,40)
(32,19)-(32,34)
(32,20)-(32,28)
(32,21)-(32,23)
(32,26)-(32,27)
(32,31)-(32,33)
(32,37)-(32,39)
(32,44)-(32,74)
(32,44)-(32,68)
(32,45)-(32,60)
(32,46)-(32,54)
(32,47)-(32,49)
(32,52)-(32,53)
(32,57)-(32,59)
(32,65)-(32,67)
(32,72)-(32,74)
(33,15)-(33,45)
(33,15)-(33,39)
(33,16)-(33,31)
(33,17)-(33,25)
(33,18)-(33,20)
(33,23)-(33,24)
(33,28)-(33,30)
(33,36)-(33,38)
(33,43)-(33,45)
(34,4)-(35,68)
(34,15)-(34,23)
(34,16)-(34,18)
(34,20)-(34,22)
(35,4)-(35,68)
(35,15)-(35,17)
(35,21)-(35,68)
(35,35)-(35,61)
(35,35)-(35,49)
(35,50)-(35,51)
(35,52)-(35,56)
(35,57)-(35,61)
(35,65)-(35,68)
(36,2)-(36,34)
(36,2)-(36,12)
(36,13)-(36,34)
(36,14)-(36,17)
(36,18)-(36,33)
(36,19)-(36,26)
(36,27)-(36,29)
(36,30)-(36,32)
*)
