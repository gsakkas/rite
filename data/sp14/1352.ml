
let rec clone x n =
  if n < 1
  then []
  else
    (let rec helper acc f x =
       match x with | 0 -> acc | _ -> helper (f :: acc) f (x - 1) in
     helper [] x n);;

let padZero l1 l2 =
  let x = (List.length l1) - (List.length l2) in
  if x != 0
  then
    (if x < 0
     then (((clone 0 (abs x)) @ l1), l2)
     else (l1, ((clone 0 (abs x)) @ l2)))
  else (l1, l2);;

let rec removeZero l =
  match l with | x::xs -> if x = 0 then removeZero xs else l | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (d,(b,c)) ->
          let sum = b + c in
          if sum < 10
          then
            (match a with
             | [] -> sum :: a
             | x'::xs' ->
                 if x' = (-1)
                 then
                   (if sum = 9 then (-1) :: 0 :: xs' else (sum + 1) :: xs')
                 else sum :: a)
          else
            (match a with
             | [] -> (-1) :: (sum mod 10) :: a
             | x'::xs' ->
                 if x' = (-1)
                 then (-1) :: (sum mod 10) :: a
                 else (-1) :: (sum mod 10) :: a) in
    let base = ((List.length l1), []) in
    let args =
      List.combine (clone (List.length l1) (List.length l1))
        (List.combine (List.rev l1) (List.rev l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  if n < 1
  then []
  else
    (let rec helper acc f x =
       match x with | 0 -> acc | _ -> helper (f :: acc) f (x - 1) in
     helper [] x n);;

let padZero l1 l2 =
  let x = (List.length l1) - (List.length l2) in
  if x != 0
  then
    (if x < 0
     then (((clone 0 (abs x)) @ l1), l2)
     else (l1, ((clone 0 (abs x)) @ l2)))
  else (l1, l2);;

let rec removeZero l =
  match l with | x::xs -> if x = 0 then removeZero xs else l | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (b,c) ->
          let sum = b + c in
          if sum < 10
          then
            (match a with
             | (len,[]) -> (len, [sum])
             | (len,x'::xs') ->
                 if x' = (-1)
                 then
                   (if sum = 9
                    then (len, ((-1) :: 0 :: xs'))
                    else (len, ((sum + 1) :: xs')))
                 else (len, (sum :: x' :: xs')))
          else
            (match a with
             | (len,[]) -> (len, [(-1); sum mod 10])
             | (len,x'::xs') ->
                 if x' = (-1)
                 then (len, ((-1) :: ((sum mod 10) + 1) :: xs'))
                 else (len, ((-1) :: (sum mod 10) :: x' :: xs'))) in
    let base = ((List.length l1), []) in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(25,6)-(43,48)
(30,12)-(36,31)
(31,21)-(31,24)
(31,21)-(31,29)
(31,28)-(31,29)
(35,36)-(35,52)
(35,58)-(35,74)
(36,22)-(36,30)
(36,29)-(36,30)
(38,12)-(43,48)
(38,19)-(38,20)
(39,21)-(39,25)
(39,29)-(39,46)
(39,45)-(39,46)
(42,22)-(42,47)
(42,30)-(42,42)
(42,46)-(42,47)
(43,22)-(43,47)
(43,46)-(43,47)
(44,4)-(48,51)
(46,19)-(46,60)
(46,20)-(46,25)
(46,27)-(46,38)
(46,39)-(46,41)
(46,43)-(46,59)
(46,44)-(46,55)
(46,56)-(46,58)
(47,8)-(47,50)
(47,9)-(47,21)
(47,22)-(47,35)
*)

(* type error slice
(24,4)-(48,51)
(24,10)-(43,48)
(31,21)-(31,29)
(31,28)-(31,29)
(44,4)-(48,51)
(44,15)-(44,37)
(48,18)-(48,32)
(48,18)-(48,44)
(48,33)-(48,34)
(48,35)-(48,39)
*)

(* all spans
(2,14)-(8,19)
(2,16)-(8,19)
(3,2)-(8,19)
(3,5)-(3,10)
(3,5)-(3,6)
(3,9)-(3,10)
(4,7)-(4,9)
(6,4)-(8,19)
(6,20)-(7,65)
(6,24)-(7,65)
(6,26)-(7,65)
(7,7)-(7,65)
(7,13)-(7,14)
(7,27)-(7,30)
(7,38)-(7,65)
(7,38)-(7,44)
(7,45)-(7,55)
(7,46)-(7,47)
(7,51)-(7,54)
(7,56)-(7,57)
(7,58)-(7,65)
(7,59)-(7,60)
(7,63)-(7,64)
(8,5)-(8,18)
(8,5)-(8,11)
(8,12)-(8,14)
(8,15)-(8,16)
(8,17)-(8,18)
(10,12)-(17,15)
(10,15)-(17,15)
(11,2)-(17,15)
(11,10)-(11,45)
(11,10)-(11,26)
(11,11)-(11,22)
(11,23)-(11,25)
(11,29)-(11,45)
(11,30)-(11,41)
(11,42)-(11,44)
(12,2)-(17,15)
(12,5)-(12,11)
(12,5)-(12,6)
(12,10)-(12,11)
(14,4)-(16,41)
(14,8)-(14,13)
(14,8)-(14,9)
(14,12)-(14,13)
(15,10)-(15,40)
(15,11)-(15,35)
(15,30)-(15,31)
(15,12)-(15,29)
(15,13)-(15,18)
(15,19)-(15,20)
(15,21)-(15,28)
(15,22)-(15,25)
(15,26)-(15,27)
(15,32)-(15,34)
(15,37)-(15,39)
(16,10)-(16,40)
(16,11)-(16,13)
(16,15)-(16,39)
(16,34)-(16,35)
(16,16)-(16,33)
(16,17)-(16,22)
(16,23)-(16,24)
(16,25)-(16,32)
(16,26)-(16,29)
(16,30)-(16,31)
(16,36)-(16,38)
(17,7)-(17,15)
(17,8)-(17,10)
(17,12)-(17,14)
(19,19)-(20,69)
(20,2)-(20,69)
(20,8)-(20,9)
(20,26)-(20,60)
(20,29)-(20,34)
(20,29)-(20,30)
(20,33)-(20,34)
(20,40)-(20,53)
(20,40)-(20,50)
(20,51)-(20,53)
(20,59)-(20,60)
(20,68)-(20,69)
(22,11)-(49,34)
(22,14)-(49,34)
(23,2)-(49,34)
(23,11)-(48,51)
(24,4)-(48,51)
(24,10)-(43,48)
(24,12)-(43,48)
(25,6)-(43,48)
(25,12)-(25,13)
(27,10)-(43,48)
(27,20)-(27,25)
(27,20)-(27,21)
(27,24)-(27,25)
(28,10)-(43,48)
(28,13)-(28,21)
(28,13)-(28,16)
(28,19)-(28,21)
(30,12)-(36,31)
(30,19)-(30,20)
(31,21)-(31,29)
(31,21)-(31,24)
(31,28)-(31,29)
(33,17)-(36,30)
(33,20)-(33,29)
(33,20)-(33,22)
(33,25)-(33,29)
(35,19)-(35,75)
(35,23)-(35,30)
(35,23)-(35,26)
(35,29)-(35,30)
(35,36)-(35,52)
(35,36)-(35,40)
(35,44)-(35,52)
(35,44)-(35,45)
(35,49)-(35,52)
(35,58)-(35,74)
(35,58)-(35,67)
(35,59)-(35,62)
(35,65)-(35,66)
(35,71)-(35,74)
(36,22)-(36,30)
(36,22)-(36,25)
(36,29)-(36,30)
(38,12)-(43,48)
(38,19)-(38,20)
(39,21)-(39,46)
(39,21)-(39,25)
(39,29)-(39,46)
(39,29)-(39,41)
(39,30)-(39,33)
(39,38)-(39,40)
(39,45)-(39,46)
(41,17)-(43,47)
(41,20)-(41,29)
(41,20)-(41,22)
(41,25)-(41,29)
(42,22)-(42,47)
(42,22)-(42,26)
(42,30)-(42,47)
(42,30)-(42,42)
(42,31)-(42,34)
(42,39)-(42,41)
(42,46)-(42,47)
(43,22)-(43,47)
(43,22)-(43,26)
(43,30)-(43,47)
(43,30)-(43,42)
(43,31)-(43,34)
(43,39)-(43,41)
(43,46)-(43,47)
(44,4)-(48,51)
(44,15)-(44,37)
(44,16)-(44,32)
(44,17)-(44,28)
(44,29)-(44,31)
(44,34)-(44,36)
(45,4)-(48,51)
(46,6)-(47,50)
(46,6)-(46,18)
(46,19)-(46,60)
(46,20)-(46,25)
(46,26)-(46,42)
(46,27)-(46,38)
(46,39)-(46,41)
(46,43)-(46,59)
(46,44)-(46,55)
(46,56)-(46,58)
(47,8)-(47,50)
(47,9)-(47,21)
(47,22)-(47,35)
(47,23)-(47,31)
(47,32)-(47,34)
(47,36)-(47,49)
(47,37)-(47,45)
(47,46)-(47,48)
(48,4)-(48,51)
(48,18)-(48,44)
(48,18)-(48,32)
(48,33)-(48,34)
(48,35)-(48,39)
(48,40)-(48,44)
(48,48)-(48,51)
(49,2)-(49,34)
(49,2)-(49,12)
(49,13)-(49,34)
(49,14)-(49,17)
(49,18)-(49,33)
(49,19)-(49,26)
(49,27)-(49,29)
(49,30)-(49,32)
*)
