
let bigMul l1 l2 =
  let f a x =
    match x with
    | (x1,x2) ->
        (match a with
         | (h1,h2::t2) ->
             let mul = ((x1 * x2) * h1) + h2 in ((h1 + 1), (mul / 10)) ::
               (mul mod 10) :: t2
         | (_,_) -> (0, [0])) in
  let base = (1, [0]) in
  let args = List.rev (List.combine l1 l2) in
  let (_,res) = List.fold_left f base args in res;;


(* fix

let bigMul l1 l2 =
  let f a x =
    match x with
    | (x1,x2) ->
        (match a with
         | (h1,h2::t2) ->
             let mul = ((x1 * x2) * h1) + h2 in
             ((h1 + 1), ((mul / 10) :: (mul mod 10) :: t2))
         | (_,_) -> (0, [0])) in
  let base = (1, [0]) in
  let args = List.rev (List.combine l1 l2) in
  let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(8,48)-(9,33)
(8,59)-(8,69)
*)

(* type error slice
(8,48)-(8,70)
(8,48)-(9,33)
(9,15)-(9,27)
(9,15)-(9,33)
*)

(* all spans
(2,11)-(13,49)
(2,14)-(13,49)
(3,2)-(13,49)
(3,8)-(10,29)
(3,10)-(10,29)
(4,4)-(10,29)
(4,10)-(4,11)
(6,8)-(10,29)
(6,15)-(6,16)
(8,13)-(9,33)
(8,23)-(8,44)
(8,23)-(8,39)
(8,24)-(8,33)
(8,25)-(8,27)
(8,30)-(8,32)
(8,36)-(8,38)
(8,42)-(8,44)
(8,48)-(9,33)
(8,48)-(8,70)
(8,49)-(8,57)
(8,50)-(8,52)
(8,55)-(8,56)
(8,59)-(8,69)
(8,60)-(8,63)
(8,66)-(8,68)
(9,15)-(9,33)
(9,15)-(9,27)
(9,16)-(9,19)
(9,24)-(9,26)
(9,31)-(9,33)
(10,20)-(10,28)
(10,21)-(10,22)
(10,24)-(10,27)
(10,25)-(10,26)
(11,2)-(13,49)
(11,13)-(11,21)
(11,14)-(11,15)
(11,17)-(11,20)
(11,18)-(11,19)
(12,2)-(13,49)
(12,13)-(12,42)
(12,13)-(12,21)
(12,22)-(12,42)
(12,23)-(12,35)
(12,36)-(12,38)
(12,39)-(12,41)
(13,2)-(13,49)
(13,16)-(13,42)
(13,16)-(13,30)
(13,31)-(13,32)
(13,33)-(13,37)
(13,38)-(13,42)
(13,46)-(13,49)
*)
