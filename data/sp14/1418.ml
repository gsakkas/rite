
let rec clone x n =
  let rec helper a x n =
    if n <= 0 then a else (let a' = x :: a in helper a' x (n - 1)) in
  helper [] x n;;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  if length1 > length2
  then (l1, (List.append (clone 0 (length1 - length2)) l2))
  else
    if length2 length1
    then ((List.append (clone 0 (length1 - length2)) l1), l2)
    else (l1, l2);;


(* fix

let rec clone x n =
  let rec helper a x n =
    if n <= 0 then a else (let a' = x :: a in helper a' x (n - 1)) in
  helper [] x n;;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  if length1 > length2
  then (l1, (List.append (clone 0 (length1 - length2)) l2))
  else
    if length2 > length1
    then ((List.append (clone 0 (length1 - length2)) l1), l2)
    else (l1, l2);;

*)

(* changed spans
(13,7)-(13,22)
*)

(* type error slice
(9,2)-(15,17)
(9,16)-(9,27)
(9,16)-(9,30)
(13,7)-(13,14)
(13,7)-(13,22)
*)

(* all spans
(2,14)-(5,15)
(2,16)-(5,15)
(3,2)-(5,15)
(3,17)-(4,66)
(3,19)-(4,66)
(3,21)-(4,66)
(4,4)-(4,66)
(4,7)-(4,13)
(4,7)-(4,8)
(4,12)-(4,13)
(4,19)-(4,20)
(4,26)-(4,66)
(4,36)-(4,42)
(4,36)-(4,37)
(4,41)-(4,42)
(4,46)-(4,65)
(4,46)-(4,52)
(4,53)-(4,55)
(4,56)-(4,57)
(4,58)-(4,65)
(4,59)-(4,60)
(4,63)-(4,64)
(5,2)-(5,15)
(5,2)-(5,8)
(5,9)-(5,11)
(5,12)-(5,13)
(5,14)-(5,15)
(7,12)-(15,17)
(7,15)-(15,17)
(8,2)-(15,17)
(8,16)-(8,30)
(8,16)-(8,27)
(8,28)-(8,30)
(9,2)-(15,17)
(9,16)-(9,30)
(9,16)-(9,27)
(9,28)-(9,30)
(10,2)-(15,17)
(10,5)-(10,22)
(10,5)-(10,12)
(10,15)-(10,22)
(11,7)-(11,59)
(11,8)-(11,10)
(11,12)-(11,58)
(11,13)-(11,24)
(11,25)-(11,54)
(11,26)-(11,31)
(11,32)-(11,33)
(11,34)-(11,53)
(11,35)-(11,42)
(11,45)-(11,52)
(11,55)-(11,57)
(13,4)-(15,17)
(13,7)-(13,22)
(13,7)-(13,14)
(13,15)-(13,22)
(14,9)-(14,61)
(14,10)-(14,56)
(14,11)-(14,22)
(14,23)-(14,52)
(14,24)-(14,29)
(14,30)-(14,31)
(14,32)-(14,51)
(14,33)-(14,40)
(14,43)-(14,50)
(14,53)-(14,55)
(14,58)-(14,60)
(15,9)-(15,17)
(15,10)-(15,12)
(15,14)-(15,16)
*)
