
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildX () = VarX;;

let buildY () = VarY;;

let pi = 4.0 *. (atan 1.0);;

let rec build (rand,depth) =
  match depth with
  | 0 -> (match rand (1, 3) with | 1 -> buildX () | _ -> buildY ())
  | _ ->
      (match rand (1, 10) with
       | 1 -> buildSine (pi *. (build (rand, (depth - 1))))
       | 2 -> buildCosine (pi *. (build (rand, (depth - 1))))
       | 3 -> buildSine (pi *. (build (rand, (depth - 1))))
       | 4 -> buildCosine (pi *. (build (rand, (depth - 1))))
       | 5 -> buildSine (pi *. (build (rand, (depth - 1))))
       | 6 -> buildCosine (pi *. (build (rand, (depth - 1))))
       | 7 ->
           buildThresh
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
               (build (rand, (depth - 1))), (build (rand, (depth - 1))))
       | 8 -> buildX ()
       | 9 -> buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 -> (match rand (1, 3) with | 1 -> buildX () | _ -> buildY ())
  | _ ->
      (match rand (1, 13) with
       | 1 -> buildSine (build (rand, (depth - 1)))
       | 2 -> buildCosine (build (rand, (depth - 1)))
       | 3 -> buildSine (build (rand, (depth - 1)))
       | 4 -> buildCosine (build (rand, (depth - 1)))
       | 5 ->
           buildThresh
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
               (build (rand, (depth - 1))), (build (rand, (depth - 1))))
       | 6 -> buildSine (build (rand, (depth - 1)))
       | 7 -> buildCosine (build (rand, (depth - 1)))
       | 8 -> buildSine (build (rand, (depth - 1)))
       | 9 -> buildCosine (build (rand, (depth - 1)))
       | 10 ->
           buildThresh
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
               (build (rand, (depth - 1))), (build (rand, (depth - 1))))
       | 11 -> buildX ()
       | 12 -> buildY ());;

*)

(* changed spans
(21,9)-(21,12)
(21,9)-(21,26)
(21,16)-(21,26)
(21,17)-(21,21)
(21,22)-(21,25)
(27,6)-(39,24)
(27,22)-(27,24)
(28,24)-(28,59)
(28,25)-(28,27)
(29,26)-(29,61)
(29,27)-(29,29)
(30,24)-(30,59)
(30,25)-(30,27)
(31,26)-(31,61)
(31,27)-(31,29)
(32,14)-(32,23)
(32,24)-(32,59)
(32,25)-(32,27)
(33,26)-(33,61)
(33,27)-(33,29)
(35,11)-(35,22)
*)

(* type error slice
(11,3)-(11,30)
(11,16)-(11,28)
(11,20)-(11,28)
(11,27)-(11,28)
(13,3)-(13,26)
(13,14)-(13,24)
(13,18)-(13,24)
(13,23)-(13,24)
(15,3)-(15,69)
(15,17)-(15,67)
(15,38)-(15,67)
(15,60)-(15,66)
(17,3)-(17,22)
(17,11)-(17,20)
(17,16)-(17,20)
(23,3)-(39,26)
(23,15)-(39,24)
(24,2)-(39,24)
(25,9)-(25,67)
(25,40)-(25,46)
(25,40)-(25,49)
(28,14)-(28,23)
(28,14)-(28,59)
(28,24)-(28,59)
(28,31)-(28,58)
(28,32)-(28,37)
(29,14)-(29,25)
(29,14)-(29,61)
(29,26)-(29,61)
(30,14)-(30,23)
(30,14)-(30,59)
(30,24)-(30,59)
(31,14)-(31,25)
(31,14)-(31,61)
(31,26)-(31,61)
(32,14)-(32,23)
(32,14)-(32,59)
(32,24)-(32,59)
(33,14)-(33,25)
(33,14)-(33,61)
(33,26)-(33,61)
(35,11)-(35,22)
(35,11)-(37,72)
(36,13)-(37,72)
(37,44)-(37,71)
(37,45)-(37,50)
*)

(* all spans
(11,16)-(11,28)
(11,20)-(11,28)
(11,27)-(11,28)
(13,14)-(13,24)
(13,18)-(13,24)
(13,23)-(13,24)
(15,17)-(15,67)
(15,38)-(15,67)
(15,46)-(15,47)
(15,49)-(15,50)
(15,52)-(15,58)
(15,60)-(15,66)
(17,11)-(17,20)
(17,16)-(17,20)
(19,11)-(19,20)
(19,16)-(19,20)
(21,9)-(21,26)
(21,9)-(21,12)
(21,16)-(21,26)
(21,17)-(21,21)
(21,22)-(21,25)
(23,15)-(39,24)
(24,2)-(39,24)
(24,8)-(24,13)
(25,9)-(25,67)
(25,16)-(25,27)
(25,16)-(25,20)
(25,21)-(25,27)
(25,22)-(25,23)
(25,25)-(25,26)
(25,40)-(25,49)
(25,40)-(25,46)
(25,47)-(25,49)
(25,57)-(25,66)
(25,57)-(25,63)
(25,64)-(25,66)
(27,6)-(39,24)
(27,13)-(27,25)
(27,13)-(27,17)
(27,18)-(27,25)
(27,19)-(27,20)
(27,22)-(27,24)
(28,14)-(28,59)
(28,14)-(28,23)
(28,24)-(28,59)
(28,25)-(28,27)
(28,31)-(28,58)
(28,32)-(28,37)
(28,38)-(28,57)
(28,39)-(28,43)
(28,45)-(28,56)
(28,46)-(28,51)
(28,54)-(28,55)
(29,14)-(29,61)
(29,14)-(29,25)
(29,26)-(29,61)
(29,27)-(29,29)
(29,33)-(29,60)
(29,34)-(29,39)
(29,40)-(29,59)
(29,41)-(29,45)
(29,47)-(29,58)
(29,48)-(29,53)
(29,56)-(29,57)
(30,14)-(30,59)
(30,14)-(30,23)
(30,24)-(30,59)
(30,25)-(30,27)
(30,31)-(30,58)
(30,32)-(30,37)
(30,38)-(30,57)
(30,39)-(30,43)
(30,45)-(30,56)
(30,46)-(30,51)
(30,54)-(30,55)
(31,14)-(31,61)
(31,14)-(31,25)
(31,26)-(31,61)
(31,27)-(31,29)
(31,33)-(31,60)
(31,34)-(31,39)
(31,40)-(31,59)
(31,41)-(31,45)
(31,47)-(31,58)
(31,48)-(31,53)
(31,56)-(31,57)
(32,14)-(32,59)
(32,14)-(32,23)
(32,24)-(32,59)
(32,25)-(32,27)
(32,31)-(32,58)
(32,32)-(32,37)
(32,38)-(32,57)
(32,39)-(32,43)
(32,45)-(32,56)
(32,46)-(32,51)
(32,54)-(32,55)
(33,14)-(33,61)
(33,14)-(33,25)
(33,26)-(33,61)
(33,27)-(33,29)
(33,33)-(33,60)
(33,34)-(33,39)
(33,40)-(33,59)
(33,41)-(33,45)
(33,47)-(33,58)
(33,48)-(33,53)
(33,56)-(33,57)
(35,11)-(37,72)
(35,11)-(35,22)
(36,13)-(37,72)
(36,14)-(36,41)
(36,15)-(36,20)
(36,21)-(36,40)
(36,22)-(36,26)
(36,28)-(36,39)
(36,29)-(36,34)
(36,37)-(36,38)
(36,43)-(36,70)
(36,44)-(36,49)
(36,50)-(36,69)
(36,51)-(36,55)
(36,57)-(36,68)
(36,58)-(36,63)
(36,66)-(36,67)
(37,15)-(37,42)
(37,16)-(37,21)
(37,22)-(37,41)
(37,23)-(37,27)
(37,29)-(37,40)
(37,30)-(37,35)
(37,38)-(37,39)
(37,44)-(37,71)
(37,45)-(37,50)
(37,51)-(37,70)
(37,52)-(37,56)
(37,58)-(37,69)
(37,59)-(37,64)
(37,67)-(37,68)
(38,14)-(38,23)
(38,14)-(38,20)
(38,21)-(38,23)
(39,14)-(39,23)
(39,14)-(39,20)
(39,21)-(39,23)
*)
