
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  else ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l = match l with | 0::t -> removeZero t | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match (a, x) with
      | ((h::i,j::k),(d::e,f::g)) -> ((f + d) / 10) :: ((h + j) mod 10) in
    let base = ([], []) in
    let args =
      List.rev
        (List.combine (List.map (fun x  -> [x]) l1)
           (List.map (fun x  -> [x]) l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  else ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l = match l with | 0::t -> removeZero t | _ -> l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = match (a, x) with | ((b,c),(d,e)) -> (b, ((d + e) :: c)) in
    let base = ([], []) in
    let args = List.rev (List.combine [0; 0; 9; 9] [1; 0; 0; 2]) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(14,6)-(15,71)
(15,37)-(15,51)
(15,37)-(15,71)
(15,39)-(15,40)
(15,48)-(15,50)
(15,55)-(15,71)
(15,56)-(15,63)
(15,57)-(15,58)
(15,61)-(15,62)
(15,68)-(15,70)
(16,4)-(21,51)
(19,22)-(19,51)
(19,23)-(19,31)
(19,32)-(19,47)
(19,43)-(19,46)
(19,44)-(19,45)
(19,48)-(19,50)
(20,11)-(20,40)
(20,12)-(20,20)
(20,21)-(20,36)
(20,32)-(20,35)
(20,33)-(20,34)
(20,37)-(20,39)
(21,4)-(21,51)
*)

(* type error slice
(13,4)-(21,51)
(13,10)-(15,71)
(13,12)-(15,71)
(14,6)-(15,71)
(14,12)-(14,18)
(14,13)-(14,14)
(15,37)-(15,71)
(15,55)-(15,71)
(21,18)-(21,32)
(21,18)-(21,44)
(21,33)-(21,34)
*)

(* all spans
(2,14)-(2,64)
(2,16)-(2,64)
(2,20)-(2,64)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,56)
(2,34)-(2,35)
(2,39)-(2,56)
(2,40)-(2,45)
(2,46)-(2,47)
(2,48)-(2,55)
(2,49)-(2,50)
(2,53)-(2,54)
(2,62)-(2,64)
(4,12)-(7,77)
(4,15)-(7,77)
(5,2)-(7,77)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,77)
(6,8)-(6,10)
(6,12)-(6,76)
(6,13)-(6,24)
(6,25)-(6,72)
(6,26)-(6,31)
(6,32)-(6,33)
(6,34)-(6,71)
(6,35)-(6,51)
(6,36)-(6,47)
(6,48)-(6,50)
(6,54)-(6,70)
(6,55)-(6,66)
(6,67)-(6,69)
(6,73)-(6,75)
(7,7)-(7,77)
(7,8)-(7,72)
(7,9)-(7,20)
(7,21)-(7,68)
(7,22)-(7,27)
(7,28)-(7,29)
(7,30)-(7,67)
(7,31)-(7,47)
(7,32)-(7,43)
(7,44)-(7,46)
(7,50)-(7,66)
(7,51)-(7,62)
(7,63)-(7,65)
(7,69)-(7,71)
(7,74)-(7,76)
(9,19)-(9,67)
(9,23)-(9,67)
(9,29)-(9,30)
(9,46)-(9,58)
(9,46)-(9,56)
(9,57)-(9,58)
(9,66)-(9,67)
(11,11)-(22,34)
(11,14)-(22,34)
(12,2)-(22,34)
(12,11)-(21,51)
(13,4)-(21,51)
(13,10)-(15,71)
(13,12)-(15,71)
(14,6)-(15,71)
(14,12)-(14,18)
(14,13)-(14,14)
(14,16)-(14,17)
(15,37)-(15,71)
(15,37)-(15,51)
(15,38)-(15,45)
(15,39)-(15,40)
(15,43)-(15,44)
(15,48)-(15,50)
(15,55)-(15,71)
(15,56)-(15,63)
(15,57)-(15,58)
(15,61)-(15,62)
(15,68)-(15,70)
(16,4)-(21,51)
(16,15)-(16,23)
(16,16)-(16,18)
(16,20)-(16,22)
(17,4)-(21,51)
(18,6)-(20,41)
(18,6)-(18,14)
(19,8)-(20,41)
(19,9)-(19,21)
(19,22)-(19,51)
(19,23)-(19,31)
(19,32)-(19,47)
(19,43)-(19,46)
(19,44)-(19,45)
(19,48)-(19,50)
(20,11)-(20,40)
(20,12)-(20,20)
(20,21)-(20,36)
(20,32)-(20,35)
(20,33)-(20,34)
(20,37)-(20,39)
(21,4)-(21,51)
(21,18)-(21,44)
(21,18)-(21,32)
(21,33)-(21,34)
(21,35)-(21,39)
(21,40)-(21,44)
(21,48)-(21,51)
(22,2)-(22,34)
(22,2)-(22,12)
(22,13)-(22,34)
(22,14)-(22,17)
(22,18)-(22,33)
(22,19)-(22,26)
(22,27)-(22,29)
(22,30)-(22,32)
*)
