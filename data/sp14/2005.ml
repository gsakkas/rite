
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  let shorter = if len1 < len2 then l1 else l2 in
  let zeros = if shorter = l1 then len2 - len1 else len1 - len2 in
  if shorter = l1
  then ((List.append (clone 0 zeros) shorter), l2)
  else (l1, (List.append (clone 0 zeros) shorter));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let getTail l = match l with | [] -> [] | h::t -> t in
      let getCarry (c,l) = c in
      let carry = getCarry a in
      let getSum (c,l) = l in
      let sum = if carry = 1 then getTail (getSum a) else getSum a in
      let add (m,n) = m + n in
      let digit = (add x) + carry in
      if digit > 9
      then (1, (1 :: (digit - 10) :: sum))
      else (0, (digit :: sum)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l = if i > 0 then bigAdd (mulByDigit (i - 1) l);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  let shorter = if len1 < len2 then l1 else l2 in
  let zeros = if shorter = l1 then len2 - len1 else len1 - len2 in
  if shorter = l1
  then ((List.append (clone 0 zeros) shorter), l2)
  else (l1, (List.append (clone 0 zeros) shorter));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let getTail l = match l with | [] -> [] | h::t -> t in
      let getCarry (c,l) = c in
      let carry = getCarry a in
      let getSum (c,l) = l in
      let sum = if carry = 1 then getTail (getSum a) else getSum a in
      let add (m,n) = m + n in
      let digit = (add x) + carry in
      if digit > 9
      then (1, (1 :: (digit - 10) :: sum))
      else (0, (digit :: sum)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i = 0 then [0] else bigAdd (mulByDigit (i - 1) l) [0];;

*)

(* changed spans
(34,25)-(34,68)
(34,28)-(34,33)
(34,39)-(34,45)
(34,39)-(34,68)
*)

(* type error slice
(16,3)-(32,36)
(16,11)-(32,34)
(16,14)-(32,34)
(34,25)-(34,68)
(34,39)-(34,45)
(34,39)-(34,68)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(11,50)
(4,15)-(11,50)
(5,2)-(11,50)
(5,13)-(5,27)
(5,13)-(5,24)
(5,25)-(5,27)
(6,2)-(11,50)
(6,13)-(6,27)
(6,13)-(6,24)
(6,25)-(6,27)
(7,2)-(11,50)
(7,16)-(7,46)
(7,19)-(7,30)
(7,19)-(7,23)
(7,26)-(7,30)
(7,36)-(7,38)
(7,44)-(7,46)
(8,2)-(11,50)
(8,14)-(8,63)
(8,17)-(8,29)
(8,17)-(8,24)
(8,27)-(8,29)
(8,35)-(8,46)
(8,35)-(8,39)
(8,42)-(8,46)
(8,52)-(8,63)
(8,52)-(8,56)
(8,59)-(8,63)
(9,2)-(11,50)
(9,5)-(9,17)
(9,5)-(9,12)
(9,15)-(9,17)
(10,7)-(10,50)
(10,8)-(10,45)
(10,9)-(10,20)
(10,21)-(10,36)
(10,22)-(10,27)
(10,28)-(10,29)
(10,30)-(10,35)
(10,37)-(10,44)
(10,47)-(10,49)
(11,7)-(11,50)
(11,8)-(11,10)
(11,12)-(11,49)
(11,13)-(11,24)
(11,25)-(11,40)
(11,26)-(11,31)
(11,32)-(11,33)
(11,34)-(11,39)
(11,41)-(11,48)
(13,19)-(14,69)
(14,2)-(14,69)
(14,8)-(14,9)
(14,23)-(14,25)
(14,36)-(14,69)
(14,39)-(14,44)
(14,39)-(14,40)
(14,43)-(14,44)
(14,50)-(14,62)
(14,50)-(14,60)
(14,61)-(14,62)
(14,68)-(14,69)
(16,11)-(32,34)
(16,14)-(32,34)
(17,2)-(32,34)
(17,11)-(31,51)
(18,4)-(31,51)
(18,10)-(28,30)
(18,12)-(28,30)
(19,6)-(28,30)
(19,18)-(19,57)
(19,22)-(19,57)
(19,28)-(19,29)
(19,43)-(19,45)
(19,56)-(19,57)
(20,6)-(28,30)
(20,20)-(20,28)
(20,27)-(20,28)
(21,6)-(28,30)
(21,18)-(21,28)
(21,18)-(21,26)
(21,27)-(21,28)
(22,6)-(28,30)
(22,18)-(22,26)
(22,25)-(22,26)
(23,6)-(28,30)
(23,16)-(23,66)
(23,19)-(23,28)
(23,19)-(23,24)
(23,27)-(23,28)
(23,34)-(23,52)
(23,34)-(23,41)
(23,42)-(23,52)
(23,43)-(23,49)
(23,50)-(23,51)
(23,58)-(23,66)
(23,58)-(23,64)
(23,65)-(23,66)
(24,6)-(28,30)
(24,15)-(24,27)
(24,22)-(24,27)
(24,22)-(24,23)
(24,26)-(24,27)
(25,6)-(28,30)
(25,18)-(25,33)
(25,18)-(25,25)
(25,19)-(25,22)
(25,23)-(25,24)
(25,28)-(25,33)
(26,6)-(28,30)
(26,9)-(26,18)
(26,9)-(26,14)
(26,17)-(26,18)
(27,11)-(27,42)
(27,12)-(27,13)
(27,15)-(27,41)
(27,16)-(27,17)
(27,21)-(27,40)
(27,21)-(27,33)
(27,22)-(27,27)
(27,30)-(27,32)
(27,37)-(27,40)
(28,11)-(28,30)
(28,12)-(28,13)
(28,15)-(28,29)
(28,16)-(28,21)
(28,25)-(28,28)
(29,4)-(31,51)
(29,15)-(29,22)
(29,16)-(29,17)
(29,19)-(29,21)
(30,4)-(31,51)
(30,15)-(30,44)
(30,15)-(30,23)
(30,24)-(30,44)
(30,25)-(30,37)
(30,38)-(30,40)
(30,41)-(30,43)
(31,4)-(31,51)
(31,18)-(31,44)
(31,18)-(31,32)
(31,33)-(31,34)
(31,35)-(31,39)
(31,40)-(31,44)
(31,48)-(31,51)
(32,2)-(32,34)
(32,2)-(32,12)
(32,13)-(32,34)
(32,14)-(32,17)
(32,18)-(32,33)
(32,19)-(32,26)
(32,27)-(32,29)
(32,30)-(32,32)
(34,19)-(34,68)
(34,21)-(34,68)
(34,25)-(34,68)
(34,28)-(34,33)
(34,28)-(34,29)
(34,32)-(34,33)
(34,39)-(34,68)
(34,39)-(34,45)
(34,46)-(34,68)
(34,47)-(34,57)
(34,58)-(34,65)
(34,59)-(34,60)
(34,63)-(34,64)
(34,66)-(34,67)
*)
