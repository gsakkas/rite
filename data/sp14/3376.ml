
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
               [h * i]
       with
       | [] -> []
       | h::t ->
           let rec helper acc v =
             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
           helper []);;


(* fix

let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t ->
      (match (mulByDigit i (List.rev (List.map (fun x  -> x * 10) t))) @
               [h * i]
       with
       | [] -> []
       | h::t ->
           let rec helper acc v =
             if v = 0 then acc else helper ((v mod 10) :: acc) (v / 10) in
           helper [] h);;

*)

(* changed spans
(13,11)-(13,20)
*)

(* type error slice
(6,6)-(13,21)
(9,15)-(9,17)
(11,11)-(13,20)
(12,36)-(12,42)
(12,36)-(12,71)
(13,11)-(13,17)
(13,11)-(13,20)
*)

(* all spans
(2,19)-(13,21)
(2,21)-(13,21)
(3,2)-(13,21)
(3,8)-(3,18)
(3,8)-(3,16)
(3,17)-(3,18)
(4,10)-(4,12)
(6,6)-(13,21)
(6,13)-(7,22)
(6,71)-(6,72)
(6,13)-(6,70)
(6,14)-(6,24)
(6,25)-(6,26)
(6,27)-(6,69)
(6,28)-(6,36)
(6,37)-(6,68)
(6,38)-(6,46)
(6,47)-(6,65)
(6,58)-(6,64)
(6,58)-(6,59)
(6,62)-(6,64)
(6,66)-(6,67)
(7,15)-(7,22)
(7,16)-(7,21)
(7,16)-(7,17)
(7,20)-(7,21)
(9,15)-(9,17)
(11,11)-(13,20)
(11,26)-(12,71)
(11,30)-(12,71)
(12,13)-(12,71)
(12,16)-(12,21)
(12,16)-(12,17)
(12,20)-(12,21)
(12,27)-(12,30)
(12,36)-(12,71)
(12,36)-(12,42)
(12,43)-(12,62)
(12,44)-(12,54)
(12,45)-(12,46)
(12,51)-(12,53)
(12,58)-(12,61)
(12,63)-(12,71)
(12,64)-(12,65)
(12,68)-(12,70)
(13,11)-(13,20)
(13,11)-(13,17)
(13,18)-(13,20)
*)
