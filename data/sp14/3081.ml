
let clone x n =
  let rec helper x n acc =
    if n <= 0 then acc else helper x (n - 1) (x :: acc) in
  helper x n [];;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;

let rec removeZero l =
  match l with | [] -> [] | x::xs -> if x = 0 then removeZero xs else x :: xs;;

let x x = x;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = a + x in
    let base = [x] in
    let args = [(l1, l2)] in let (_,res) = List.fold_left f base args in res in
  (removeZero (add (padZero l1 l2)) 0 0 9 9) + (1 0 0 2);;


(* fix

let l1 = [0; 0; 9; 9];;

let l2 = [1; 0; 0; 2];;

let x = (3, 3) :: (List.rev (List.combine l1 l2));;

let clone x n =
  let rec helper x n acc =
    if n <= 0 then acc else helper x (n - 1) (x :: acc) in
  helper x n [];;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  else (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;

let rec removeZero l =
  match l with | [] -> [] | x::xs -> if x = 0 then removeZero xs else x :: xs;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = x in
    let base = (0, []) in
    let args = [(0, [])] in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(2,10)-(5,15)
(15,6)-(15,11)
(15,10)-(15,11)
(19,16)-(19,17)
(19,16)-(19,21)
(20,15)-(20,18)
(20,16)-(20,17)
(21,4)-(21,76)
(21,17)-(21,19)
(21,21)-(21,23)
(21,29)-(21,76)
(22,2)-(22,44)
(22,2)-(22,56)
(22,36)-(22,37)
(22,38)-(22,39)
(22,40)-(22,41)
(22,42)-(22,43)
(22,47)-(22,56)
(22,48)-(22,49)
(22,50)-(22,51)
(22,52)-(22,53)
(22,54)-(22,55)
*)

(* type error slice
(13,37)-(13,77)
(13,51)-(13,61)
(13,51)-(13,64)
(13,70)-(13,77)
(19,4)-(21,76)
(19,10)-(19,21)
(19,16)-(19,17)
(19,16)-(19,21)
(20,4)-(21,76)
(20,15)-(20,18)
(21,43)-(21,57)
(21,43)-(21,69)
(21,58)-(21,59)
(21,60)-(21,64)
(22,2)-(22,44)
(22,3)-(22,13)
(22,47)-(22,56)
(22,48)-(22,49)
*)

(* all spans
(2,10)-(5,15)
(2,12)-(5,15)
(3,2)-(5,15)
(3,17)-(4,55)
(3,19)-(4,55)
(3,21)-(4,55)
(4,4)-(4,55)
(4,7)-(4,13)
(4,7)-(4,8)
(4,12)-(4,13)
(4,19)-(4,22)
(4,28)-(4,55)
(4,28)-(4,34)
(4,35)-(4,36)
(4,37)-(4,44)
(4,38)-(4,39)
(4,42)-(4,43)
(4,45)-(4,55)
(4,46)-(4,47)
(4,51)-(4,54)
(5,2)-(5,15)
(5,2)-(5,8)
(5,9)-(5,10)
(5,11)-(5,12)
(5,13)-(5,15)
(7,12)-(10,77)
(7,15)-(10,77)
(8,2)-(10,77)
(8,5)-(8,40)
(8,5)-(8,21)
(8,6)-(8,17)
(8,18)-(8,20)
(8,24)-(8,40)
(8,25)-(8,36)
(8,37)-(8,39)
(9,7)-(9,77)
(9,8)-(9,72)
(9,9)-(9,20)
(9,21)-(9,68)
(9,22)-(9,27)
(9,28)-(9,29)
(9,30)-(9,67)
(9,31)-(9,47)
(9,32)-(9,43)
(9,44)-(9,46)
(9,50)-(9,66)
(9,51)-(9,62)
(9,63)-(9,65)
(9,69)-(9,71)
(9,74)-(9,76)
(10,7)-(10,77)
(10,8)-(10,10)
(10,12)-(10,76)
(10,13)-(10,24)
(10,25)-(10,72)
(10,26)-(10,31)
(10,32)-(10,33)
(10,34)-(10,71)
(10,35)-(10,51)
(10,36)-(10,47)
(10,48)-(10,50)
(10,54)-(10,70)
(10,55)-(10,66)
(10,67)-(10,69)
(10,73)-(10,75)
(12,19)-(13,77)
(13,2)-(13,77)
(13,8)-(13,9)
(13,23)-(13,25)
(13,37)-(13,77)
(13,40)-(13,45)
(13,40)-(13,41)
(13,44)-(13,45)
(13,51)-(13,64)
(13,51)-(13,61)
(13,62)-(13,64)
(13,70)-(13,77)
(13,70)-(13,71)
(13,75)-(13,77)
(15,6)-(15,11)
(15,10)-(15,11)
(17,11)-(22,56)
(17,14)-(22,56)
(18,2)-(22,56)
(18,11)-(21,76)
(19,4)-(21,76)
(19,10)-(19,21)
(19,12)-(19,21)
(19,16)-(19,21)
(19,16)-(19,17)
(19,20)-(19,21)
(20,4)-(21,76)
(20,15)-(20,18)
(20,16)-(20,17)
(21,4)-(21,76)
(21,15)-(21,25)
(21,16)-(21,24)
(21,17)-(21,19)
(21,21)-(21,23)
(21,29)-(21,76)
(21,43)-(21,69)
(21,43)-(21,57)
(21,58)-(21,59)
(21,60)-(21,64)
(21,65)-(21,69)
(21,73)-(21,76)
(22,2)-(22,56)
(22,2)-(22,44)
(22,3)-(22,13)
(22,14)-(22,35)
(22,15)-(22,18)
(22,19)-(22,34)
(22,20)-(22,27)
(22,28)-(22,30)
(22,31)-(22,33)
(22,36)-(22,37)
(22,38)-(22,39)
(22,40)-(22,41)
(22,42)-(22,43)
(22,47)-(22,56)
(22,48)-(22,49)
(22,50)-(22,51)
(22,52)-(22,53)
(22,54)-(22,55)
*)
