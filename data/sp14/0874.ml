
let rec clone x n =
  let rec helper x n acc =
    if n <= 0 then acc else helper x (n - 1) (x :: acc) in
  helper x n [];;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | t -> t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (a1,a2) = a in
      let xx = (x1 + x2) + a1 in
      if xx > 9 then (1, ((xx - 10) :: a2)) else (0, (xx :: a2)) in
    let base = (0, []) in
    let args = (List.combine 0) :: ((List.rev l1) 0) :: (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  let rec helper x n acc =
    if n <= 0 then acc else helper x (n - 1) (x :: acc) in
  helper x n [];;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | t -> t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (a1,a2) = a in
      let xx = (x1 + x2) + a1 in
      if xx > 9 then (1, ((xx - 10) :: a2)) else (0, (xx :: a2)) in
    let base = (0, []) in
    let args = List.combine (0 :: (List.rev l1)) (0 :: (List.rev l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(25,15)-(25,31)
(25,15)-(25,69)
(25,29)-(25,30)
(25,35)-(25,52)
(25,50)-(25,51)
*)

(* type error slice
(25,15)-(25,31)
(25,16)-(25,28)
(25,29)-(25,30)
(25,35)-(25,52)
(25,36)-(25,49)
(25,37)-(25,45)
*)

(* all spans
(2,14)-(5,15)
(2,16)-(5,15)
(3,2)-(5,15)
(3,17)-(4,55)
(3,19)-(4,55)
(3,21)-(4,55)
(4,4)-(4,55)
(4,7)-(4,13)
(4,7)-(4,8)
(4,12)-(4,13)
(4,19)-(4,22)
(4,28)-(4,55)
(4,28)-(4,34)
(4,35)-(4,36)
(4,37)-(4,44)
(4,38)-(4,39)
(4,42)-(4,43)
(4,45)-(4,55)
(4,46)-(4,47)
(4,51)-(4,54)
(5,2)-(5,15)
(5,2)-(5,8)
(5,9)-(5,10)
(5,11)-(5,12)
(5,13)-(5,15)
(7,12)-(12,43)
(7,15)-(12,43)
(8,2)-(12,43)
(8,13)-(8,27)
(8,13)-(8,24)
(8,25)-(8,27)
(9,2)-(12,43)
(9,13)-(9,27)
(9,13)-(9,24)
(9,25)-(9,27)
(10,2)-(12,43)
(10,5)-(10,16)
(10,5)-(10,9)
(10,12)-(10,16)
(11,7)-(11,43)
(11,8)-(11,10)
(11,12)-(11,42)
(11,37)-(11,38)
(11,13)-(11,36)
(11,14)-(11,19)
(11,20)-(11,21)
(11,22)-(11,35)
(11,23)-(11,27)
(11,30)-(11,34)
(11,39)-(11,41)
(12,7)-(12,43)
(12,8)-(12,38)
(12,33)-(12,34)
(12,9)-(12,32)
(12,10)-(12,15)
(12,16)-(12,17)
(12,18)-(12,31)
(12,19)-(12,23)
(12,26)-(12,30)
(12,35)-(12,37)
(12,40)-(12,42)
(14,19)-(15,57)
(15,2)-(15,57)
(15,8)-(15,9)
(15,23)-(15,25)
(15,36)-(15,48)
(15,36)-(15,46)
(15,47)-(15,48)
(15,56)-(15,57)
(17,11)-(27,34)
(17,14)-(27,34)
(18,2)-(27,34)
(18,11)-(26,51)
(19,4)-(26,51)
(19,10)-(23,64)
(19,12)-(23,64)
(20,6)-(23,64)
(20,20)-(20,21)
(21,6)-(23,64)
(21,20)-(21,21)
(22,6)-(23,64)
(22,15)-(22,29)
(22,15)-(22,24)
(22,16)-(22,18)
(22,21)-(22,23)
(22,27)-(22,29)
(23,6)-(23,64)
(23,9)-(23,15)
(23,9)-(23,11)
(23,14)-(23,15)
(23,21)-(23,43)
(23,22)-(23,23)
(23,25)-(23,42)
(23,26)-(23,35)
(23,27)-(23,29)
(23,32)-(23,34)
(23,39)-(23,41)
(23,49)-(23,64)
(23,50)-(23,51)
(23,53)-(23,63)
(23,54)-(23,56)
(23,60)-(23,62)
(24,4)-(26,51)
(24,15)-(24,22)
(24,16)-(24,17)
(24,19)-(24,21)
(25,4)-(26,51)
(25,15)-(25,69)
(25,15)-(25,31)
(25,16)-(25,28)
(25,29)-(25,30)
(25,35)-(25,69)
(25,35)-(25,52)
(25,36)-(25,49)
(25,37)-(25,45)
(25,46)-(25,48)
(25,50)-(25,51)
(25,56)-(25,69)
(25,57)-(25,65)
(25,66)-(25,68)
(26,4)-(26,51)
(26,18)-(26,44)
(26,18)-(26,32)
(26,33)-(26,34)
(26,35)-(26,39)
(26,40)-(26,44)
(26,48)-(26,51)
(27,2)-(27,34)
(27,2)-(27,12)
(27,13)-(27,34)
(27,14)-(27,17)
(27,18)-(27,33)
(27,19)-(27,26)
(27,27)-(27,29)
(27,30)-(27,32)
*)
