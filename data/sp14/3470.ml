
let rec digitsOfInt n =
  if n <= 0
  then []
  else List.rev ((n mod 10) :: (List.rev (digitsOfInt (n / 10))));;

let rec sumList xs =
  match xs with | [] -> 0 | h::t -> h + (sumList t) | _ -> (-1);;

let x = [];;

let rec additivePersistence n =
  if (sumList (digitsOfInt n)) > 9
  then
    (print_string "going into then" print_newline ();
     1
     ::
     x;
     additivePersistence (sumList (digitsOfInt n)))
  else (1 :: x; sumList x);;


(* fix

let rec digitsOfInt n =
  if n <= 0
  then []
  else List.rev ((n mod 10) :: (List.rev (digitsOfInt (n / 10))));;

let rec sumList xs =
  match xs with | [] -> 0 | h::t -> h + (sumList t) | _ -> (-1);;

let x = [];;

let rec additivePersistence n =
  if (sumList (digitsOfInt n)) > 9
  then
    (print_string "going into then";
     1
     ::
     x;
     additivePersistence (sumList (digitsOfInt n)))
  else (1 :: x; sumList x);;

*)

(* changed spans
(15,5)-(15,52)
(15,36)-(15,49)
(15,50)-(15,52)
*)

(* type error slice
(15,5)-(15,17)
(15,5)-(15,52)
(16,5)-(18,6)
(16,5)-(19,50)
(20,7)-(20,26)
(20,8)-(20,14)
*)

(* all spans
(2,20)-(5,65)
(3,2)-(5,65)
(3,5)-(3,11)
(3,5)-(3,6)
(3,10)-(3,11)
(4,7)-(4,9)
(5,7)-(5,65)
(5,7)-(5,15)
(5,16)-(5,65)
(5,17)-(5,27)
(5,18)-(5,19)
(5,24)-(5,26)
(5,31)-(5,64)
(5,32)-(5,40)
(5,41)-(5,63)
(5,42)-(5,53)
(5,54)-(5,62)
(5,55)-(5,56)
(5,59)-(5,61)
(7,16)-(8,63)
(8,2)-(8,63)
(8,8)-(8,10)
(8,24)-(8,25)
(8,36)-(8,51)
(8,36)-(8,37)
(8,40)-(8,51)
(8,41)-(8,48)
(8,49)-(8,50)
(8,59)-(8,63)
(10,8)-(10,10)
(12,28)-(20,26)
(13,2)-(20,26)
(13,5)-(13,34)
(13,5)-(13,30)
(13,6)-(13,13)
(13,14)-(13,29)
(13,15)-(13,26)
(13,27)-(13,28)
(13,33)-(13,34)
(15,4)-(19,51)
(15,5)-(15,52)
(15,5)-(15,17)
(15,18)-(15,35)
(15,36)-(15,49)
(15,50)-(15,52)
(16,5)-(19,50)
(16,5)-(18,6)
(16,5)-(16,6)
(18,5)-(18,6)
(19,5)-(19,50)
(19,5)-(19,24)
(19,25)-(19,50)
(19,26)-(19,33)
(19,34)-(19,49)
(19,35)-(19,46)
(19,47)-(19,48)
(20,7)-(20,26)
(20,8)-(20,14)
(20,8)-(20,9)
(20,13)-(20,14)
(20,16)-(20,25)
(20,16)-(20,23)
(20,24)-(20,25)
*)
