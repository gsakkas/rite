
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Tangent of expr* expr
  | Square2 of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 -> if (rand (0, 1)) = 1 then buildX () else buildY ()
  | _ ->
      let r = rand (3, 100) in
      (match r with
       | r when r < 5 ->
           ((buildAverage (build (rand, (depth - 1)))),
             (build (rand, (depth - 1))))
       | r when (r < 10) && (r > 5) ->
           buildThresh
             ((buildCosine (build (rand, (depth - 1)))),
               (buildCosine (build (rand, (depth - 1)))),
               (build (rand, (depth - 1))), (build (rand, (depth - 1))))
       | r when (r < 25) && (r > 20) -> buildSine (build (rand, (depth - 1)))
       | _ -> buildCosine (build (rand, (depth - 1))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Tangent of expr* expr
  | Square2 of expr* expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 -> if (rand (0, 1)) = 1 then buildX () else buildY ()
  | _ ->
      let r = rand (3, 100) in
      (match r with
       | r when r < 5 ->
           buildAverage
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
       | r when (r < 10) && (r > 5) ->
           buildThresh
             ((buildCosine (build (rand, (depth - 1)))),
               (buildCosine (build (rand, (depth - 1)))),
               (build (rand, (depth - 1))), (build (rand, (depth - 1))))
       | r when (r < 25) && (r > 20) -> buildSine (build (rand, (depth - 1)))
       | _ -> buildCosine (build (rand, (depth - 1))));;

*)

(* changed spans
(32,11)-(33,41)
(34,16)-(34,35)
*)

(* type error slice
(13,3)-(13,45)
(13,18)-(13,43)
(15,3)-(15,30)
(15,16)-(15,28)
(15,20)-(15,28)
(15,27)-(15,28)
(17,3)-(17,26)
(17,14)-(17,24)
(17,18)-(17,24)
(17,23)-(17,24)
(19,3)-(19,69)
(19,17)-(19,67)
(19,38)-(19,67)
(19,60)-(19,66)
(23,3)-(23,22)
(23,11)-(23,20)
(23,16)-(23,20)
(25,3)-(40,56)
(25,15)-(40,54)
(26,2)-(40,54)
(27,9)-(27,59)
(27,50)-(27,56)
(27,50)-(27,59)
(29,6)-(40,54)
(30,6)-(40,54)
(32,11)-(33,41)
(32,12)-(32,54)
(32,13)-(32,25)
(32,26)-(32,53)
(32,27)-(32,32)
(35,11)-(35,22)
(35,11)-(38,72)
(36,13)-(38,72)
(36,14)-(36,55)
(36,15)-(36,26)
(36,27)-(36,54)
(36,28)-(36,33)
(37,15)-(37,56)
(37,16)-(37,27)
(37,28)-(37,55)
(37,29)-(37,34)
(38,44)-(38,71)
(38,45)-(38,50)
(39,40)-(39,49)
(39,40)-(39,77)
(39,50)-(39,77)
(39,51)-(39,56)
(40,14)-(40,25)
(40,14)-(40,53)
(40,26)-(40,53)
(40,27)-(40,32)
*)

(* all spans
(13,18)-(13,43)
(13,27)-(13,43)
(13,36)-(13,38)
(13,40)-(13,42)
(15,16)-(15,28)
(15,20)-(15,28)
(15,27)-(15,28)
(17,14)-(17,24)
(17,18)-(17,24)
(17,23)-(17,24)
(19,17)-(19,67)
(19,38)-(19,67)
(19,46)-(19,47)
(19,49)-(19,50)
(19,52)-(19,58)
(19,60)-(19,66)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(40,54)
(26,2)-(40,54)
(26,8)-(26,13)
(27,9)-(27,59)
(27,12)-(27,29)
(27,12)-(27,25)
(27,13)-(27,17)
(27,18)-(27,24)
(27,19)-(27,20)
(27,22)-(27,23)
(27,28)-(27,29)
(27,35)-(27,44)
(27,35)-(27,41)
(27,42)-(27,44)
(27,50)-(27,59)
(27,50)-(27,56)
(27,57)-(27,59)
(29,6)-(40,54)
(29,14)-(29,27)
(29,14)-(29,18)
(29,19)-(29,27)
(29,20)-(29,21)
(29,23)-(29,26)
(30,6)-(40,54)
(30,13)-(30,14)
(31,16)-(31,21)
(31,16)-(31,17)
(31,20)-(31,21)
(34,16)-(34,35)
(34,16)-(34,24)
(34,17)-(34,18)
(34,21)-(34,23)
(34,28)-(34,35)
(34,29)-(34,30)
(34,33)-(34,34)
(39,16)-(39,36)
(39,16)-(39,24)
(39,17)-(39,18)
(39,21)-(39,23)
(39,28)-(39,36)
(39,29)-(39,30)
(39,33)-(39,35)
(32,11)-(33,41)
(32,12)-(32,54)
(32,13)-(32,25)
(32,26)-(32,53)
(32,27)-(32,32)
(32,33)-(32,52)
(32,34)-(32,38)
(32,40)-(32,51)
(32,41)-(32,46)
(32,49)-(32,50)
(33,13)-(33,40)
(33,14)-(33,19)
(33,20)-(33,39)
(33,21)-(33,25)
(33,27)-(33,38)
(33,28)-(33,33)
(33,36)-(33,37)
(35,11)-(38,72)
(35,11)-(35,22)
(36,13)-(38,72)
(36,14)-(36,55)
(36,15)-(36,26)
(36,27)-(36,54)
(36,28)-(36,33)
(36,34)-(36,53)
(36,35)-(36,39)
(36,41)-(36,52)
(36,42)-(36,47)
(36,50)-(36,51)
(37,15)-(37,56)
(37,16)-(37,27)
(37,28)-(37,55)
(37,29)-(37,34)
(37,35)-(37,54)
(37,36)-(37,40)
(37,42)-(37,53)
(37,43)-(37,48)
(37,51)-(37,52)
(38,15)-(38,42)
(38,16)-(38,21)
(38,22)-(38,41)
(38,23)-(38,27)
(38,29)-(38,40)
(38,30)-(38,35)
(38,38)-(38,39)
(38,44)-(38,71)
(38,45)-(38,50)
(38,51)-(38,70)
(38,52)-(38,56)
(38,58)-(38,69)
(38,59)-(38,64)
(38,67)-(38,68)
(39,40)-(39,77)
(39,40)-(39,49)
(39,50)-(39,77)
(39,51)-(39,56)
(39,57)-(39,76)
(39,58)-(39,62)
(39,64)-(39,75)
(39,65)-(39,70)
(39,73)-(39,74)
(40,14)-(40,53)
(40,14)-(40,25)
(40,26)-(40,53)
(40,27)-(40,32)
(40,33)-(40,52)
(40,34)-(40,38)
(40,40)-(40,51)
(40,41)-(40,46)
(40,49)-(40,50)
*)
