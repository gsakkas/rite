
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      if carry <> []
      then
        let tens = ((x1 + x2) + carry) / 10 in
        let ones = ((x1 + x2) + carry) mod 10 in
        ([tens], (tens :: ones :: res))
      else
        (let tens = (x1 + x2) / 10 in
         let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: res))) in
    let base = ([], []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      if carry <> []
      then
        let ch::_ = carry in
        let tens = ((x1 + x2) + ch) / 10 in
        let ones = ((x1 + x2) + ch) mod 10 in ([tens], (tens :: ones :: res))
      else
        (let tens = (x1 + x2) / 10 in
         let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: res))) in
    let base = ([], []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(24,8)-(26,39)
(24,32)-(24,37)
(25,32)-(25,37)
*)

(* type error slice
(22,9)-(22,14)
(22,9)-(22,20)
(22,18)-(22,20)
(24,19)-(24,38)
(24,32)-(24,37)
(25,19)-(25,38)
(25,32)-(25,37)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(9,39)
(4,15)-(9,39)
(5,2)-(9,39)
(5,11)-(5,25)
(5,11)-(5,22)
(5,23)-(5,25)
(6,2)-(9,39)
(6,11)-(6,25)
(6,11)-(6,22)
(6,23)-(6,25)
(7,2)-(9,39)
(7,5)-(7,12)
(7,5)-(7,7)
(7,10)-(7,12)
(8,7)-(8,39)
(8,8)-(8,34)
(8,29)-(8,30)
(8,9)-(8,28)
(8,10)-(8,15)
(8,16)-(8,17)
(8,18)-(8,27)
(8,19)-(8,21)
(8,24)-(8,26)
(8,31)-(8,33)
(8,36)-(8,38)
(9,7)-(9,39)
(9,8)-(9,10)
(9,12)-(9,38)
(9,33)-(9,34)
(9,13)-(9,32)
(9,14)-(9,19)
(9,20)-(9,21)
(9,22)-(9,31)
(9,23)-(9,25)
(9,28)-(9,30)
(9,35)-(9,37)
(11,19)-(15,46)
(12,2)-(15,46)
(12,8)-(12,9)
(13,10)-(13,12)
(14,13)-(14,37)
(14,16)-(14,22)
(14,16)-(14,17)
(14,21)-(14,22)
(14,28)-(14,29)
(14,35)-(14,37)
(15,12)-(15,46)
(15,15)-(15,21)
(15,15)-(15,16)
(15,20)-(15,21)
(15,27)-(15,28)
(15,34)-(15,46)
(15,34)-(15,44)
(15,45)-(15,46)
(17,11)-(33,34)
(17,14)-(33,34)
(18,2)-(33,34)
(18,11)-(32,51)
(19,4)-(32,51)
(19,10)-(29,72)
(19,12)-(29,72)
(20,6)-(29,72)
(20,20)-(20,21)
(21,6)-(29,72)
(21,24)-(21,25)
(22,6)-(29,72)
(22,9)-(22,20)
(22,9)-(22,14)
(22,18)-(22,20)
(24,8)-(26,39)
(24,19)-(24,43)
(24,19)-(24,38)
(24,20)-(24,29)
(24,21)-(24,23)
(24,26)-(24,28)
(24,32)-(24,37)
(24,41)-(24,43)
(25,8)-(26,39)
(25,19)-(25,45)
(25,19)-(25,38)
(25,20)-(25,29)
(25,21)-(25,23)
(25,26)-(25,28)
(25,32)-(25,37)
(25,43)-(25,45)
(26,8)-(26,39)
(26,9)-(26,15)
(26,10)-(26,14)
(26,17)-(26,38)
(26,18)-(26,22)
(26,26)-(26,37)
(26,26)-(26,30)
(26,34)-(26,37)
(28,8)-(29,72)
(28,20)-(28,34)
(28,20)-(28,29)
(28,21)-(28,23)
(28,26)-(28,28)
(28,32)-(28,34)
(29,9)-(29,71)
(29,20)-(29,36)
(29,20)-(29,29)
(29,21)-(29,23)
(29,26)-(29,28)
(29,34)-(29,36)
(29,40)-(29,71)
(29,41)-(29,47)
(29,42)-(29,46)
(29,49)-(29,70)
(29,50)-(29,54)
(29,58)-(29,69)
(29,58)-(29,62)
(29,66)-(29,69)
(30,4)-(32,51)
(30,15)-(30,23)
(30,16)-(30,18)
(30,20)-(30,22)
(31,4)-(32,51)
(31,15)-(31,44)
(31,15)-(31,23)
(31,24)-(31,44)
(31,25)-(31,37)
(31,38)-(31,40)
(31,41)-(31,43)
(32,4)-(32,51)
(32,18)-(32,44)
(32,18)-(32,32)
(32,33)-(32,34)
(32,35)-(32,39)
(32,40)-(32,44)
(32,48)-(32,51)
(33,2)-(33,34)
(33,2)-(33,12)
(33,13)-(33,34)
(33,14)-(33,17)
(33,18)-(33,33)
(33,19)-(33,26)
(33,27)-(33,29)
(33,30)-(33,32)
*)
