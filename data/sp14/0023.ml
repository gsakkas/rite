
let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (list1,result) -> (match x with | (h1::t1,h2::t2) -> (0, [])) in
    let base = (l1, []) in
    let args = l2 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n > 0 with | true  -> x :: (clone x (n - 1)) | false  -> [];;

let padZero l1 l2 =
  let length1 = List.length l1 in
  let length2 = List.length l2 in
  match length1 >= length2 with
  | true  ->
      let n = length1 - length2 in
      let zeroes = clone 0 n in (l1, (List.append zeroes l2))
  | false  ->
      let n = length2 - length1 in
      let zeroes = clone 0 n in ((List.append zeroes l1), l2);;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> t);;

let bigAdd l1 l2 =
  let add (l1,l2) = [0; 0; 0; 0; 0] in removeZero (add (padZero l1 l2));;

*)

(* changed spans
(23,4)-(27,68)
(23,10)-(25,69)
(23,12)-(25,69)
(24,6)-(25,69)
(24,12)-(24,13)
(25,26)-(25,69)
(25,33)-(25,34)
(25,61)-(25,68)
(25,65)-(25,67)
(26,4)-(27,68)
(26,15)-(26,23)
(26,16)-(26,18)
(26,20)-(26,22)
(27,4)-(27,68)
(27,15)-(27,17)
(27,21)-(27,68)
(27,35)-(27,49)
(27,35)-(27,61)
(27,50)-(27,51)
(27,52)-(27,56)
(27,57)-(27,61)
(27,65)-(27,68)
(28,2)-(28,34)
*)

(* type error slice
(5,3)-(14,63)
(5,12)-(14,61)
(5,15)-(14,61)
(6,2)-(14,61)
(7,2)-(14,61)
(8,2)-(14,61)
(10,6)-(11,61)
(11,6)-(11,61)
(11,32)-(11,61)
(11,33)-(11,35)
(14,33)-(14,56)
(14,34)-(14,45)
(14,53)-(14,55)
(22,2)-(28,34)
(22,11)-(27,68)
(23,4)-(27,68)
(23,10)-(25,69)
(23,12)-(25,69)
(24,6)-(25,69)
(25,26)-(25,69)
(25,61)-(25,68)
(25,62)-(25,63)
(26,4)-(27,68)
(26,15)-(26,23)
(26,16)-(26,18)
(27,35)-(27,49)
(27,35)-(27,61)
(27,50)-(27,51)
(27,52)-(27,56)
(28,13)-(28,34)
(28,14)-(28,17)
(28,18)-(28,33)
(28,19)-(28,26)
*)

(* all spans
(2,14)-(3,67)
(2,16)-(3,67)
(3,2)-(3,67)
(3,8)-(3,13)
(3,8)-(3,9)
(3,12)-(3,13)
(3,30)-(3,52)
(3,30)-(3,31)
(3,35)-(3,52)
(3,36)-(3,41)
(3,42)-(3,43)
(3,44)-(3,51)
(3,45)-(3,46)
(3,49)-(3,50)
(3,65)-(3,67)
(5,12)-(14,61)
(5,15)-(14,61)
(6,2)-(14,61)
(6,16)-(6,30)
(6,16)-(6,27)
(6,28)-(6,30)
(7,2)-(14,61)
(7,16)-(7,30)
(7,16)-(7,27)
(7,28)-(7,30)
(8,2)-(14,61)
(8,8)-(8,26)
(8,8)-(8,15)
(8,19)-(8,26)
(10,6)-(11,61)
(10,14)-(10,31)
(10,14)-(10,21)
(10,24)-(10,31)
(11,6)-(11,61)
(11,19)-(11,28)
(11,19)-(11,24)
(11,25)-(11,26)
(11,27)-(11,28)
(11,32)-(11,61)
(11,33)-(11,35)
(11,37)-(11,60)
(11,38)-(11,49)
(11,50)-(11,56)
(11,57)-(11,59)
(13,6)-(14,61)
(13,14)-(13,31)
(13,14)-(13,21)
(13,24)-(13,31)
(14,6)-(14,61)
(14,19)-(14,28)
(14,19)-(14,24)
(14,25)-(14,26)
(14,27)-(14,28)
(14,32)-(14,61)
(14,33)-(14,56)
(14,34)-(14,45)
(14,46)-(14,52)
(14,53)-(14,55)
(14,58)-(14,60)
(16,19)-(19,55)
(17,2)-(19,55)
(17,8)-(17,9)
(18,10)-(18,12)
(19,12)-(19,55)
(19,19)-(19,20)
(19,33)-(19,45)
(19,33)-(19,43)
(19,44)-(19,45)
(19,53)-(19,54)
(21,11)-(28,34)
(21,14)-(28,34)
(22,2)-(28,34)
(22,11)-(27,68)
(23,4)-(27,68)
(23,10)-(25,69)
(23,12)-(25,69)
(24,6)-(25,69)
(24,12)-(24,13)
(25,26)-(25,69)
(25,33)-(25,34)
(25,61)-(25,68)
(25,62)-(25,63)
(25,65)-(25,67)
(26,4)-(27,68)
(26,15)-(26,23)
(26,16)-(26,18)
(26,20)-(26,22)
(27,4)-(27,68)
(27,15)-(27,17)
(27,21)-(27,68)
(27,35)-(27,61)
(27,35)-(27,49)
(27,50)-(27,51)
(27,52)-(27,56)
(27,57)-(27,61)
(27,65)-(27,68)
(28,2)-(28,34)
(28,2)-(28,12)
(28,13)-(28,34)
(28,14)-(28,17)
(28,18)-(28,33)
(28,19)-(28,26)
(28,27)-(28,29)
(28,30)-(28,32)
*)
