
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  else ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h != 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (list2,res) ->
          (match list2 with
           | [] -> ([], res)
           | h::t ->
               (match res with
                | [] -> (t, ((h + x) :: res))
                | h2::t2 ->
                    if h2 >= 10
                    then
                      (t,
                        ((if t != []
                          then ((h + x) + 1) :: (h2 mod 10) :: t2
                          else
                            if ((h + x) + 1) >= 10
                            then 1 :: (((h + x) + 1) mod 10) :: (h2 mod 10)
                              :: t2
                            else ((h + x) + 1) :: (h2 mod 10) :: t2)))
                    else
                      (t,
                        (if t != []
                         then (h + x) :: res
                         else
                           if (h + x) >= 10
                           then 1 :: ((h + x) mod 10) :: res
                           else (h + x) :: res)))) in
    let base = ((List.rev l2), []) in
    let args = List.rev l1 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i = 0
  then []
  else
    if i = 1
    then l
    else bigAdd (mulByDigit (i - 2) l) ((mulByDigit i) - (2 l));;


(* fix

let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2))
  else ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h != 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (list2,res) ->
          (match list2 with
           | [] -> ([], res)
           | h::t ->
               (match res with
                | [] -> (t, ((h + x) :: res))
                | h2::t2 ->
                    if h2 >= 10
                    then
                      (t,
                        ((if t != []
                          then ((h + x) + 1) :: (h2 mod 10) :: t2
                          else
                            if ((h + x) + 1) >= 10
                            then 1 :: (((h + x) + 1) mod 10) :: (h2 mod 10)
                              :: t2
                            else ((h + x) + 1) :: (h2 mod 10) :: t2)))
                    else
                      (t,
                        (if t != []
                         then (h + x) :: res
                         else
                           if (h + x) >= 10
                           then 1 :: ((h + x) mod 10) :: res
                           else (h + x) :: res)))) in
    let base = ((List.rev l2), []) in
    let args = List.rev l1 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i = 0
  then []
  else
    if i = 1 then l else bigAdd (mulByDigit (i - 2) l) (mulByDigit (i - 2) l);;

*)

(* changed spans
(51,39)-(51,63)
(51,40)-(51,54)
(51,52)-(51,53)
(51,57)-(51,62)
*)

(* type error slice
(4,3)-(7,79)
(4,12)-(7,77)
(4,15)-(7,77)
(6,54)-(6,70)
(6,55)-(6,66)
(6,67)-(6,69)
(12,3)-(43,36)
(12,11)-(43,34)
(12,14)-(43,34)
(43,18)-(43,33)
(43,19)-(43,26)
(43,30)-(43,32)
(51,9)-(51,15)
(51,9)-(51,63)
(51,16)-(51,38)
(51,17)-(51,27)
(51,39)-(51,63)
(51,40)-(51,54)
(51,41)-(51,51)
(51,57)-(51,62)
(51,58)-(51,59)
*)

(* all spans
(2,14)-(2,64)
(2,16)-(2,64)
(2,20)-(2,64)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,56)
(2,34)-(2,35)
(2,39)-(2,56)
(2,40)-(2,45)
(2,46)-(2,47)
(2,48)-(2,55)
(2,49)-(2,50)
(2,53)-(2,54)
(2,62)-(2,64)
(4,12)-(7,77)
(4,15)-(7,77)
(5,2)-(7,77)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,77)
(6,8)-(6,10)
(6,12)-(6,76)
(6,13)-(6,24)
(6,25)-(6,72)
(6,26)-(6,31)
(6,32)-(6,33)
(6,34)-(6,71)
(6,35)-(6,51)
(6,36)-(6,47)
(6,48)-(6,50)
(6,54)-(6,70)
(6,55)-(6,66)
(6,67)-(6,69)
(6,73)-(6,75)
(7,7)-(7,77)
(7,8)-(7,72)
(7,9)-(7,20)
(7,21)-(7,68)
(7,22)-(7,27)
(7,28)-(7,29)
(7,30)-(7,67)
(7,31)-(7,47)
(7,32)-(7,43)
(7,44)-(7,46)
(7,50)-(7,66)
(7,51)-(7,62)
(7,63)-(7,65)
(7,69)-(7,71)
(7,74)-(7,76)
(9,19)-(10,70)
(10,2)-(10,70)
(10,8)-(10,9)
(10,23)-(10,25)
(10,36)-(10,70)
(10,39)-(10,45)
(10,39)-(10,40)
(10,44)-(10,45)
(10,51)-(10,52)
(10,58)-(10,70)
(10,58)-(10,68)
(10,69)-(10,70)
(12,11)-(43,34)
(12,14)-(43,34)
(13,2)-(43,34)
(13,11)-(42,77)
(14,4)-(42,77)
(14,10)-(40,50)
(14,12)-(40,50)
(15,6)-(40,50)
(15,12)-(15,13)
(17,10)-(40,50)
(17,17)-(17,22)
(18,19)-(18,28)
(18,20)-(18,22)
(18,24)-(18,27)
(20,15)-(40,49)
(20,22)-(20,25)
(21,24)-(21,45)
(21,25)-(21,26)
(21,28)-(21,44)
(21,29)-(21,36)
(21,30)-(21,31)
(21,34)-(21,35)
(21,40)-(21,43)
(23,20)-(40,48)
(23,23)-(23,31)
(23,23)-(23,25)
(23,29)-(23,31)
(25,22)-(32,70)
(25,23)-(25,24)
(26,24)-(32,69)
(26,29)-(26,36)
(26,29)-(26,30)
(26,34)-(26,36)
(27,31)-(27,65)
(27,31)-(27,44)
(27,32)-(27,39)
(27,33)-(27,34)
(27,37)-(27,38)
(27,42)-(27,43)
(27,48)-(27,65)
(27,48)-(27,59)
(27,49)-(27,51)
(27,56)-(27,58)
(27,63)-(27,65)
(29,28)-(32,67)
(29,31)-(29,50)
(29,31)-(29,44)
(29,32)-(29,39)
(29,33)-(29,34)
(29,37)-(29,38)
(29,42)-(29,43)
(29,48)-(29,50)
(30,33)-(31,35)
(30,33)-(30,34)
(30,38)-(31,35)
(30,38)-(30,60)
(30,39)-(30,52)
(30,40)-(30,47)
(30,41)-(30,42)
(30,45)-(30,46)
(30,50)-(30,51)
(30,57)-(30,59)
(30,64)-(31,35)
(30,64)-(30,75)
(30,65)-(30,67)
(30,72)-(30,74)
(31,33)-(31,35)
(32,33)-(32,67)
(32,33)-(32,46)
(32,34)-(32,41)
(32,35)-(32,36)
(32,39)-(32,40)
(32,44)-(32,45)
(32,50)-(32,67)
(32,50)-(32,61)
(32,51)-(32,53)
(32,58)-(32,60)
(32,65)-(32,67)
(34,22)-(40,48)
(34,23)-(34,24)
(35,24)-(40,47)
(35,28)-(35,35)
(35,28)-(35,29)
(35,33)-(35,35)
(36,30)-(36,44)
(36,30)-(36,37)
(36,31)-(36,32)
(36,35)-(36,36)
(36,41)-(36,44)
(38,27)-(40,46)
(38,30)-(38,43)
(38,30)-(38,37)
(38,31)-(38,32)
(38,35)-(38,36)
(38,41)-(38,43)
(39,32)-(39,60)
(39,32)-(39,33)
(39,37)-(39,60)
(39,37)-(39,53)
(39,38)-(39,45)
(39,39)-(39,40)
(39,43)-(39,44)
(39,50)-(39,52)
(39,57)-(39,60)
(40,32)-(40,46)
(40,32)-(40,39)
(40,33)-(40,34)
(40,37)-(40,38)
(40,43)-(40,46)
(41,4)-(42,77)
(41,15)-(41,34)
(41,16)-(41,29)
(41,17)-(41,25)
(41,26)-(41,28)
(41,31)-(41,33)
(42,4)-(42,77)
(42,15)-(42,26)
(42,15)-(42,23)
(42,24)-(42,26)
(42,30)-(42,77)
(42,44)-(42,70)
(42,44)-(42,58)
(42,59)-(42,60)
(42,61)-(42,65)
(42,66)-(42,70)
(42,74)-(42,77)
(43,2)-(43,34)
(43,2)-(43,12)
(43,13)-(43,34)
(43,14)-(43,17)
(43,18)-(43,33)
(43,19)-(43,26)
(43,27)-(43,29)
(43,30)-(43,32)
(45,19)-(51,63)
(45,21)-(51,63)
(46,2)-(51,63)
(46,5)-(46,10)
(46,5)-(46,6)
(46,9)-(46,10)
(47,7)-(47,9)
(49,4)-(51,63)
(49,7)-(49,12)
(49,7)-(49,8)
(49,11)-(49,12)
(50,9)-(50,10)
(51,9)-(51,63)
(51,9)-(51,15)
(51,16)-(51,38)
(51,17)-(51,27)
(51,28)-(51,35)
(51,29)-(51,30)
(51,33)-(51,34)
(51,36)-(51,37)
(51,39)-(51,63)
(51,40)-(51,54)
(51,41)-(51,51)
(51,52)-(51,53)
(51,57)-(51,62)
(51,58)-(51,59)
(51,60)-(51,61)
*)
