
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      match res with
      | h::t ->
          (match carry with
           | h1::t1 ->
               let tens = ((x1 + x2) + h1) / 10 in
               let ones = ((x1 + x2) + h1) mod 10 in
               ([tens], (tens :: ones :: t))
           | [] ->
               let tens = (x1 + x2) / 10 in
               let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: t)))
      | [] ->
          (match carry with
           | h1::t1 ->
               let tens = ((x1 + x2) + h1) / 10 in
               let ones = ((x1 + x2) + h1) mod 10 in
               ([tens], (tens :: ones :: res))
           | [] ->
               let tens = (x1 + x2) / 10 in
               let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: res))) in
    let base = ([], []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec helper ans i l =
  if i = 0 then ans else helper (bigAdd ans l) (i - 1) l;;

let rec mulByDigit i l = helper 0 i l;;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      match res with
      | h::t ->
          (match carry with
           | h1::t1 ->
               let tens = ((x1 + x2) + h1) / 10 in
               let ones = ((x1 + x2) + h1) mod 10 in
               ([tens], (tens :: ones :: t))
           | [] ->
               let tens = (x1 + x2) / 10 in
               let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: t)))
      | [] ->
          (match carry with
           | h1::t1 ->
               let tens = ((x1 + x2) + h1) / 10 in
               let ones = ((x1 + x2) + h1) mod 10 in
               ([tens], (tens :: ones :: res))
           | [] ->
               let tens = (x1 + x2) / 10 in
               let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: res))) in
    let base = ([], []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec helper ans i l =
  if i = 0 then ans else helper (bigAdd ans l) (i - 1) l;;

let rec mulByDigit i l = helper [0] i l;;

*)

(* changed spans
(49,32)-(49,33)
*)

(* type error slice
(14,13)-(14,37)
(14,28)-(14,29)
(14,35)-(14,37)
(15,12)-(15,46)
(15,27)-(15,28)
(15,34)-(15,44)
(15,34)-(15,46)
(17,3)-(44,36)
(17,11)-(44,34)
(17,14)-(44,34)
(18,2)-(44,34)
(44,2)-(44,12)
(44,2)-(44,34)
(47,25)-(47,31)
(47,25)-(47,56)
(47,32)-(47,46)
(47,33)-(47,39)
(49,25)-(49,31)
(49,25)-(49,37)
(49,32)-(49,33)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(9,39)
(4,15)-(9,39)
(5,2)-(9,39)
(5,11)-(5,25)
(5,11)-(5,22)
(5,23)-(5,25)
(6,2)-(9,39)
(6,11)-(6,25)
(6,11)-(6,22)
(6,23)-(6,25)
(7,2)-(9,39)
(7,5)-(7,12)
(7,5)-(7,7)
(7,10)-(7,12)
(8,7)-(8,39)
(8,8)-(8,34)
(8,29)-(8,30)
(8,9)-(8,28)
(8,10)-(8,15)
(8,16)-(8,17)
(8,18)-(8,27)
(8,19)-(8,21)
(8,24)-(8,26)
(8,31)-(8,33)
(8,36)-(8,38)
(9,7)-(9,39)
(9,8)-(9,10)
(9,12)-(9,38)
(9,33)-(9,34)
(9,13)-(9,32)
(9,14)-(9,19)
(9,20)-(9,21)
(9,22)-(9,31)
(9,23)-(9,25)
(9,28)-(9,30)
(9,35)-(9,37)
(11,19)-(15,46)
(12,2)-(15,46)
(12,8)-(12,9)
(13,10)-(13,12)
(14,13)-(14,37)
(14,16)-(14,22)
(14,16)-(14,17)
(14,21)-(14,22)
(14,28)-(14,29)
(14,35)-(14,37)
(15,12)-(15,46)
(15,15)-(15,21)
(15,15)-(15,16)
(15,20)-(15,21)
(15,27)-(15,28)
(15,34)-(15,46)
(15,34)-(15,44)
(15,45)-(15,46)
(17,11)-(44,34)
(17,14)-(44,34)
(18,2)-(44,34)
(18,11)-(43,51)
(19,4)-(43,51)
(19,10)-(40,78)
(19,12)-(40,78)
(20,6)-(40,78)
(20,20)-(20,21)
(21,6)-(40,78)
(21,24)-(21,25)
(22,6)-(40,78)
(22,12)-(22,15)
(24,10)-(31,76)
(24,17)-(24,22)
(26,15)-(28,44)
(26,26)-(26,47)
(26,26)-(26,42)
(26,27)-(26,36)
(26,28)-(26,30)
(26,33)-(26,35)
(26,39)-(26,41)
(26,45)-(26,47)
(27,15)-(28,44)
(27,26)-(27,49)
(27,26)-(27,42)
(27,27)-(27,36)
(27,28)-(27,30)
(27,33)-(27,35)
(27,39)-(27,41)
(27,47)-(27,49)
(28,15)-(28,44)
(28,16)-(28,22)
(28,17)-(28,21)
(28,24)-(28,43)
(28,25)-(28,29)
(28,33)-(28,42)
(28,33)-(28,37)
(28,41)-(28,42)
(30,15)-(31,75)
(30,26)-(30,40)
(30,26)-(30,35)
(30,27)-(30,29)
(30,32)-(30,34)
(30,38)-(30,40)
(31,15)-(31,75)
(31,26)-(31,42)
(31,26)-(31,35)
(31,27)-(31,29)
(31,32)-(31,34)
(31,40)-(31,42)
(31,46)-(31,75)
(31,47)-(31,53)
(31,48)-(31,52)
(31,55)-(31,74)
(31,56)-(31,60)
(31,64)-(31,73)
(31,64)-(31,68)
(31,72)-(31,73)
(33,10)-(40,78)
(33,17)-(33,22)
(35,15)-(37,46)
(35,26)-(35,47)
(35,26)-(35,42)
(35,27)-(35,36)
(35,28)-(35,30)
(35,33)-(35,35)
(35,39)-(35,41)
(35,45)-(35,47)
(36,15)-(37,46)
(36,26)-(36,49)
(36,26)-(36,42)
(36,27)-(36,36)
(36,28)-(36,30)
(36,33)-(36,35)
(36,39)-(36,41)
(36,47)-(36,49)
(37,15)-(37,46)
(37,16)-(37,22)
(37,17)-(37,21)
(37,24)-(37,45)
(37,25)-(37,29)
(37,33)-(37,44)
(37,33)-(37,37)
(37,41)-(37,44)
(39,15)-(40,77)
(39,26)-(39,40)
(39,26)-(39,35)
(39,27)-(39,29)
(39,32)-(39,34)
(39,38)-(39,40)
(40,15)-(40,77)
(40,26)-(40,42)
(40,26)-(40,35)
(40,27)-(40,29)
(40,32)-(40,34)
(40,40)-(40,42)
(40,46)-(40,77)
(40,47)-(40,53)
(40,48)-(40,52)
(40,55)-(40,76)
(40,56)-(40,60)
(40,64)-(40,75)
(40,64)-(40,68)
(40,72)-(40,75)
(41,4)-(43,51)
(41,15)-(41,23)
(41,16)-(41,18)
(41,20)-(41,22)
(42,4)-(43,51)
(42,15)-(42,44)
(42,15)-(42,23)
(42,24)-(42,44)
(42,25)-(42,37)
(42,38)-(42,40)
(42,41)-(42,43)
(43,4)-(43,51)
(43,18)-(43,44)
(43,18)-(43,32)
(43,33)-(43,34)
(43,35)-(43,39)
(43,40)-(43,44)
(43,48)-(43,51)
(44,2)-(44,34)
(44,2)-(44,12)
(44,13)-(44,34)
(44,14)-(44,17)
(44,18)-(44,33)
(44,19)-(44,26)
(44,27)-(44,29)
(44,30)-(44,32)
(46,15)-(47,56)
(46,19)-(47,56)
(46,21)-(47,56)
(47,2)-(47,56)
(47,5)-(47,10)
(47,5)-(47,6)
(47,9)-(47,10)
(47,16)-(47,19)
(47,25)-(47,56)
(47,25)-(47,31)
(47,32)-(47,46)
(47,33)-(47,39)
(47,40)-(47,43)
(47,44)-(47,45)
(47,47)-(47,54)
(47,48)-(47,49)
(47,52)-(47,53)
(47,55)-(47,56)
(49,19)-(49,37)
(49,21)-(49,37)
(49,25)-(49,37)
(49,25)-(49,31)
(49,32)-(49,33)
(49,34)-(49,35)
(49,36)-(49,37)
*)
