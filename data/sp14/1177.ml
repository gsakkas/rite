
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let length1 = List.fold_left (fun acc  -> fun x  -> acc + 1) 0 l1 in
  let length2 = List.fold_left (fun acc  -> fun x  -> acc + 1) 0 l2 in
  if length1 = length2
  then (l1, l2)
  else
    if length1 < length2
    then ((List.append (clone 0 (length2 - length1)) l1), l2)
    else (l1, (List.append (clone 0 (length1 - length2)) l2));;

let rec removeZero l =
  match l with | [] -> l | x::l' -> if x = 0 then removeZero l' else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,acc) = a in
      let (x1,x2) = x in
      let sumInit = (x1 + x2) + carry in
      let carry2 = sumInit / 10 in
      let dig = sumInit mod 10 in
      match a with | [] -> (carry2, [dig]) | h::t -> (carry2, (dig :: t)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let length1 = List.fold_left (fun acc  -> fun x  -> acc + 1) 0 l1 in
  let length2 = List.fold_left (fun acc  -> fun x  -> acc + 1) 0 l2 in
  if length1 = length2
  then (l1, l2)
  else
    if length1 < length2
    then ((List.append (clone 0 (length2 - length1)) l1), l2)
    else (l1, (List.append (clone 0 (length1 - length2)) l2));;

let rec removeZero l =
  match l with | [] -> l | x::l' -> if x = 0 then removeZero l' else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,acc) = a in
      let (x1,x2) = x in
      let sumInit = (x1 + x2) + carry in
      let carry2 = sumInit / 10 in
      let dig = sumInit mod 10 in
      match a with | (x,y) -> (carry2, (dig :: y)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(25,6)-(25,73)
(25,36)-(25,41)
(25,37)-(25,40)
(25,53)-(25,73)
(25,54)-(25,60)
(25,70)-(25,71)
*)

(* type error slice
(20,6)-(25,73)
(20,24)-(20,25)
(25,6)-(25,73)
(25,12)-(25,13)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(12,61)
(4,15)-(12,61)
(5,2)-(12,61)
(5,16)-(5,67)
(5,16)-(5,30)
(5,31)-(5,62)
(5,44)-(5,61)
(5,54)-(5,61)
(5,54)-(5,57)
(5,60)-(5,61)
(5,63)-(5,64)
(5,65)-(5,67)
(6,2)-(12,61)
(6,16)-(6,67)
(6,16)-(6,30)
(6,31)-(6,62)
(6,44)-(6,61)
(6,54)-(6,61)
(6,54)-(6,57)
(6,60)-(6,61)
(6,63)-(6,64)
(6,65)-(6,67)
(7,2)-(12,61)
(7,5)-(7,22)
(7,5)-(7,12)
(7,15)-(7,22)
(8,7)-(8,15)
(8,8)-(8,10)
(8,12)-(8,14)
(10,4)-(12,61)
(10,7)-(10,24)
(10,7)-(10,14)
(10,17)-(10,24)
(11,9)-(11,61)
(11,10)-(11,56)
(11,11)-(11,22)
(11,23)-(11,52)
(11,24)-(11,29)
(11,30)-(11,31)
(11,32)-(11,51)
(11,33)-(11,40)
(11,43)-(11,50)
(11,53)-(11,55)
(11,58)-(11,60)
(12,9)-(12,61)
(12,10)-(12,12)
(12,14)-(12,60)
(12,15)-(12,26)
(12,27)-(12,56)
(12,28)-(12,33)
(12,34)-(12,35)
(12,36)-(12,55)
(12,37)-(12,44)
(12,47)-(12,54)
(12,57)-(12,59)
(14,19)-(15,70)
(15,2)-(15,70)
(15,8)-(15,9)
(15,23)-(15,24)
(15,36)-(15,70)
(15,39)-(15,44)
(15,39)-(15,40)
(15,43)-(15,44)
(15,50)-(15,63)
(15,50)-(15,60)
(15,61)-(15,63)
(15,69)-(15,70)
(17,11)-(29,34)
(17,14)-(29,34)
(18,2)-(29,34)
(18,11)-(28,51)
(19,4)-(28,51)
(19,10)-(25,73)
(19,12)-(25,73)
(20,6)-(25,73)
(20,24)-(20,25)
(21,6)-(25,73)
(21,20)-(21,21)
(22,6)-(25,73)
(22,20)-(22,37)
(22,20)-(22,29)
(22,21)-(22,23)
(22,26)-(22,28)
(22,32)-(22,37)
(23,6)-(25,73)
(23,19)-(23,31)
(23,19)-(23,26)
(23,29)-(23,31)
(24,6)-(25,73)
(24,16)-(24,30)
(24,16)-(24,23)
(24,28)-(24,30)
(25,6)-(25,73)
(25,12)-(25,13)
(25,27)-(25,42)
(25,28)-(25,34)
(25,36)-(25,41)
(25,37)-(25,40)
(25,53)-(25,73)
(25,54)-(25,60)
(25,62)-(25,72)
(25,63)-(25,66)
(25,70)-(25,71)
(26,4)-(28,51)
(26,15)-(26,22)
(26,16)-(26,17)
(26,19)-(26,21)
(27,4)-(28,51)
(27,15)-(27,44)
(27,15)-(27,23)
(27,24)-(27,44)
(27,25)-(27,37)
(27,38)-(27,40)
(27,41)-(27,43)
(28,4)-(28,51)
(28,18)-(28,44)
(28,18)-(28,32)
(28,33)-(28,34)
(28,35)-(28,39)
(28,40)-(28,44)
(28,48)-(28,51)
(29,2)-(29,34)
(29,2)-(29,12)
(29,13)-(29,34)
(29,14)-(29,17)
(29,18)-(29,33)
(29,19)-(29,26)
(29,27)-(29,29)
(29,30)-(29,32)
*)
