
let rec addList xs = match xs with | [] -> 0 | h::t -> h + (addList t);;

let rec digitsOfInt n =
  if n < 1 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;

let rec additivePersistence n =
  let count = 0 in
  if (List.length (digitsOfInt n)) = 1
  then count
  else count = (count + (1 additivePersistence (addList (digitsOfInt n))));;


(* fix

let rec addList xs = match xs with | [] -> 0 | h::t -> h + (addList t);;

let rec digitsOfInt n =
  if n < 1 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;

let rec addNum n = if n < 10 then n else addList (digitsOfInt n);;

let rec addHelp (count,n) =
  if n < 10 then count + 1 else addHelp ((count + 1), (addNum n));;

let rec additivePersistence n = addHelp (0, n);;

*)

(* changed spans
(8,2)-(11,74)
(8,14)-(8,15)
(9,5)-(9,34)
(9,5)-(9,38)
(9,6)-(9,17)
(9,37)-(9,38)
(10,7)-(10,12)
(11,7)-(11,12)
(11,7)-(11,74)
(11,15)-(11,74)
(11,24)-(11,73)
(11,27)-(11,46)
(11,48)-(11,55)
(11,56)-(11,71)
(11,57)-(11,68)
(11,69)-(11,70)
*)

(* type error slice
(8,2)-(11,74)
(8,14)-(8,15)
(9,2)-(11,74)
(10,7)-(10,12)
(11,7)-(11,74)
(11,24)-(11,73)
(11,25)-(11,26)
*)

(* all spans
(2,16)-(2,70)
(2,21)-(2,70)
(2,27)-(2,29)
(2,43)-(2,44)
(2,55)-(2,70)
(2,55)-(2,56)
(2,59)-(2,70)
(2,60)-(2,67)
(2,68)-(2,69)
(4,20)-(5,59)
(5,2)-(5,59)
(5,5)-(5,10)
(5,5)-(5,6)
(5,9)-(5,10)
(5,16)-(5,18)
(5,24)-(5,59)
(5,47)-(5,48)
(5,24)-(5,46)
(5,25)-(5,36)
(5,37)-(5,45)
(5,38)-(5,39)
(5,42)-(5,44)
(5,49)-(5,59)
(5,50)-(5,58)
(5,50)-(5,51)
(5,56)-(5,58)
(7,28)-(11,74)
(8,2)-(11,74)
(8,14)-(8,15)
(9,2)-(11,74)
(9,5)-(9,38)
(9,5)-(9,34)
(9,6)-(9,17)
(9,18)-(9,33)
(9,19)-(9,30)
(9,31)-(9,32)
(9,37)-(9,38)
(10,7)-(10,12)
(11,7)-(11,74)
(11,7)-(11,12)
(11,15)-(11,74)
(11,16)-(11,21)
(11,24)-(11,73)
(11,25)-(11,26)
(11,27)-(11,46)
(11,47)-(11,72)
(11,48)-(11,55)
(11,56)-(11,71)
(11,57)-(11,68)
(11,69)-(11,70)
*)
