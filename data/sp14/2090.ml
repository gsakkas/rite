
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) > (List.length l2)
    then (let y = clone l1 ((List.length l1) - (List.length l2)) in (y, l2))
    else (let z = clone l2 ((List.length l2) - (List.length l1)) in (z, l1));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) > (List.length l2)
    then
      (let y = clone (List.hd l1) ((List.length l1) - (List.length l2)) in
       (y, l2))
    else
      (let z = clone (List.hd l2) ((List.length l2) - (List.length l1)) in
       (z, l1));;

*)

(* changed spans
(9,24)-(9,26)
(10,24)-(10,26)
*)

(* type error slice
(2,43)-(2,44)
(2,43)-(2,65)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(5,2)-(10,76)
(6,7)-(6,15)
(6,8)-(6,10)
(8,4)-(10,76)
(9,18)-(9,23)
(9,18)-(9,64)
(9,24)-(9,26)
(10,9)-(10,76)
(10,18)-(10,23)
(10,18)-(10,64)
(10,68)-(10,75)
(10,69)-(10,70)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(10,76)
(4,15)-(10,76)
(5,2)-(10,76)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,15)
(6,8)-(6,10)
(6,12)-(6,14)
(8,4)-(10,76)
(8,7)-(8,42)
(8,7)-(8,23)
(8,8)-(8,19)
(8,20)-(8,22)
(8,26)-(8,42)
(8,27)-(8,38)
(8,39)-(8,41)
(9,9)-(9,76)
(9,18)-(9,64)
(9,18)-(9,23)
(9,24)-(9,26)
(9,27)-(9,64)
(9,28)-(9,44)
(9,29)-(9,40)
(9,41)-(9,43)
(9,47)-(9,63)
(9,48)-(9,59)
(9,60)-(9,62)
(9,68)-(9,75)
(9,69)-(9,70)
(9,72)-(9,74)
(10,9)-(10,76)
(10,18)-(10,64)
(10,18)-(10,23)
(10,24)-(10,26)
(10,27)-(10,64)
(10,28)-(10,44)
(10,29)-(10,40)
(10,41)-(10,43)
(10,47)-(10,63)
(10,48)-(10,59)
(10,60)-(10,62)
(10,68)-(10,75)
(10,69)-(10,70)
(10,72)-(10,74)
*)
