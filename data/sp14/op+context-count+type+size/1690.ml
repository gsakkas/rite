
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      if res <> []
      then
        let lastTens::rest = res in
        (if carry <> []
         then
           let ch::_ = carry in
           let tens = ((x1 + x2) + ch) / 10 in
           let ones = ((x1 + x2) + ch) mod 10 in
           ([tens], (tens :: ones :: rest))
         else
           (let tens = (x1 + x2) / 10 in
            let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: rest))))
      else
        if carry <> []
        then
          (let ch::_ = carry in
           let tens = ((x1 + x2) + ch) / 10 in
           let ones = ((x1 + x2) + ch) mod 10 in
           ([tens], (tens :: ones :: res)))
        else
          (let tens = (x1 + x2) / 10 in
           let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: res))) in
    let base = ([], []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l = if i <> 0 then mulByDigit (i - 1) bigAdd l l else l;;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x1 = List.length l1 in
  let x2 = List.length l2 in
  if x1 < x2
  then (((clone 0 (x2 - x1)) @ l1), l2)
  else (l1, ((clone 0 (x1 - x2)) @ l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::[] -> if h <> 0 then l else []
  | h::t -> if h <> 0 then l else removeZero t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      if res <> []
      then
        let lastTens::rest = res in
        (if carry <> []
         then
           let ch::_ = carry in
           let tens = ((x1 + x2) + ch) / 10 in
           let ones = ((x1 + x2) + ch) mod 10 in
           ([tens], (tens :: ones :: rest))
         else
           (let tens = (x1 + x2) / 10 in
            let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: rest))))
      else
        if carry <> []
        then
          (let ch::_ = carry in
           let tens = ((x1 + x2) + ch) / 10 in
           let ones = ((x1 + x2) + ch) mod 10 in
           ([tens], (tens :: ones :: res)))
        else
          (let tens = (x1 + x2) / 10 in
           let ones = (x1 + x2) mod 10 in ([tens], (tens :: ones :: res))) in
    let base = ([], []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i <> 0 then mulByDigit (i - 1) (bigAdd l l) else l;;

*)

(* changed spans
(49,40)-(49,69)
(49,59)-(49,65)
*)

(* type error slice
(49,3)-(49,78)
(49,19)-(49,76)
(49,21)-(49,76)
(49,25)-(49,76)
(49,40)-(49,50)
(49,40)-(49,69)
(49,68)-(49,69)
(49,75)-(49,76)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(9,39)
(4,15)-(9,39)
(5,2)-(9,39)
(5,11)-(5,25)
(5,11)-(5,22)
(5,23)-(5,25)
(6,2)-(9,39)
(6,11)-(6,25)
(6,11)-(6,22)
(6,23)-(6,25)
(7,2)-(9,39)
(7,5)-(7,12)
(7,5)-(7,7)
(7,10)-(7,12)
(8,7)-(8,39)
(8,8)-(8,34)
(8,29)-(8,30)
(8,9)-(8,28)
(8,10)-(8,15)
(8,16)-(8,17)
(8,18)-(8,27)
(8,19)-(8,21)
(8,24)-(8,26)
(8,31)-(8,33)
(8,36)-(8,38)
(9,7)-(9,39)
(9,8)-(9,10)
(9,12)-(9,38)
(9,33)-(9,34)
(9,13)-(9,32)
(9,14)-(9,19)
(9,20)-(9,21)
(9,22)-(9,31)
(9,23)-(9,25)
(9,28)-(9,30)
(9,35)-(9,37)
(11,19)-(15,46)
(12,2)-(15,46)
(12,8)-(12,9)
(13,10)-(13,12)
(14,13)-(14,37)
(14,16)-(14,22)
(14,16)-(14,17)
(14,21)-(14,22)
(14,28)-(14,29)
(14,35)-(14,37)
(15,12)-(15,46)
(15,15)-(15,21)
(15,15)-(15,16)
(15,20)-(15,21)
(15,27)-(15,28)
(15,34)-(15,46)
(15,34)-(15,44)
(15,45)-(15,46)
(17,11)-(47,34)
(17,14)-(47,34)
(18,2)-(47,34)
(18,11)-(46,51)
(19,4)-(46,51)
(19,10)-(43,74)
(19,12)-(43,74)
(20,6)-(43,74)
(20,20)-(20,21)
(21,6)-(43,74)
(21,24)-(21,25)
(22,6)-(43,74)
(22,9)-(22,18)
(22,9)-(22,12)
(22,16)-(22,18)
(24,8)-(33,77)
(24,29)-(24,32)
(25,8)-(33,77)
(25,12)-(25,23)
(25,12)-(25,17)
(25,21)-(25,23)
(27,11)-(30,43)
(27,23)-(27,28)
(28,11)-(30,43)
(28,22)-(28,43)
(28,22)-(28,38)
(28,23)-(28,32)
(28,24)-(28,26)
(28,29)-(28,31)
(28,35)-(28,37)
(28,41)-(28,43)
(29,11)-(30,43)
(29,22)-(29,45)
(29,22)-(29,38)
(29,23)-(29,32)
(29,24)-(29,26)
(29,29)-(29,31)
(29,35)-(29,37)
(29,43)-(29,45)
(30,11)-(30,43)
(30,12)-(30,18)
(30,13)-(30,17)
(30,20)-(30,42)
(30,21)-(30,25)
(30,29)-(30,41)
(30,29)-(30,33)
(30,37)-(30,41)
(32,11)-(33,76)
(32,23)-(32,37)
(32,23)-(32,32)
(32,24)-(32,26)
(32,29)-(32,31)
(32,35)-(32,37)
(33,12)-(33,75)
(33,23)-(33,39)
(33,23)-(33,32)
(33,24)-(33,26)
(33,29)-(33,31)
(33,37)-(33,39)
(33,43)-(33,75)
(33,44)-(33,50)
(33,45)-(33,49)
(33,52)-(33,74)
(33,53)-(33,57)
(33,61)-(33,73)
(33,61)-(33,65)
(33,69)-(33,73)
(35,8)-(43,74)
(35,11)-(35,22)
(35,11)-(35,16)
(35,20)-(35,22)
(37,10)-(40,43)
(37,23)-(37,28)
(38,11)-(40,42)
(38,22)-(38,43)
(38,22)-(38,38)
(38,23)-(38,32)
(38,24)-(38,26)
(38,29)-(38,31)
(38,35)-(38,37)
(38,41)-(38,43)
(39,11)-(40,42)
(39,22)-(39,45)
(39,22)-(39,38)
(39,23)-(39,32)
(39,24)-(39,26)
(39,29)-(39,31)
(39,35)-(39,37)
(39,43)-(39,45)
(40,11)-(40,42)
(40,12)-(40,18)
(40,13)-(40,17)
(40,20)-(40,41)
(40,21)-(40,25)
(40,29)-(40,40)
(40,29)-(40,33)
(40,37)-(40,40)
(42,10)-(43,74)
(42,22)-(42,36)
(42,22)-(42,31)
(42,23)-(42,25)
(42,28)-(42,30)
(42,34)-(42,36)
(43,11)-(43,73)
(43,22)-(43,38)
(43,22)-(43,31)
(43,23)-(43,25)
(43,28)-(43,30)
(43,36)-(43,38)
(43,42)-(43,73)
(43,43)-(43,49)
(43,44)-(43,48)
(43,51)-(43,72)
(43,52)-(43,56)
(43,60)-(43,71)
(43,60)-(43,64)
(43,68)-(43,71)
(44,4)-(46,51)
(44,15)-(44,23)
(44,16)-(44,18)
(44,20)-(44,22)
(45,4)-(46,51)
(45,15)-(45,44)
(45,15)-(45,23)
(45,24)-(45,44)
(45,25)-(45,37)
(45,38)-(45,40)
(45,41)-(45,43)
(46,4)-(46,51)
(46,18)-(46,44)
(46,18)-(46,32)
(46,33)-(46,34)
(46,35)-(46,39)
(46,40)-(46,44)
(46,48)-(46,51)
(47,2)-(47,34)
(47,2)-(47,12)
(47,13)-(47,34)
(47,14)-(47,17)
(47,18)-(47,33)
(47,19)-(47,26)
(47,27)-(47,29)
(47,30)-(47,32)
(49,19)-(49,76)
(49,21)-(49,76)
(49,25)-(49,76)
(49,28)-(49,34)
(49,28)-(49,29)
(49,33)-(49,34)
(49,40)-(49,69)
(49,40)-(49,50)
(49,51)-(49,58)
(49,52)-(49,53)
(49,56)-(49,57)
(49,59)-(49,65)
(49,66)-(49,67)
(49,68)-(49,69)
(49,75)-(49,76)
*)
