
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then (clone 0 (sec - first)) :: l1
  else
    if first > sec then (l1, ((clone 0 (first - sec)) :: l2)) else (l1, l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let first = List.length l1 in
  let sec = List.length l2 in
  if first < sec
  then ((List.append (clone 0 (sec - first)) l1), l2)
  else
    if first > sec
    then (l1, (List.append (clone 0 (first - sec)) l2))
    else (l1, l2);;

*)

(* changed spans
(8,7)-(8,36)
(8,8)-(8,13)
(10,4)-(10,75)
(10,29)-(10,60)
(10,31)-(10,36)
*)

(* type error slice
(7,2)-(10,75)
(8,7)-(8,36)
(10,4)-(10,75)
(10,67)-(10,75)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(10,75)
(4,15)-(10,75)
(5,2)-(10,75)
(5,14)-(5,28)
(5,14)-(5,25)
(5,26)-(5,28)
(6,2)-(10,75)
(6,12)-(6,26)
(6,12)-(6,23)
(6,24)-(6,26)
(7,2)-(10,75)
(7,5)-(7,16)
(7,5)-(7,10)
(7,13)-(7,16)
(8,7)-(8,36)
(8,7)-(8,30)
(8,8)-(8,13)
(8,14)-(8,15)
(8,16)-(8,29)
(8,17)-(8,20)
(8,23)-(8,28)
(8,34)-(8,36)
(10,4)-(10,75)
(10,7)-(10,18)
(10,7)-(10,12)
(10,15)-(10,18)
(10,24)-(10,61)
(10,25)-(10,27)
(10,29)-(10,60)
(10,30)-(10,53)
(10,31)-(10,36)
(10,37)-(10,38)
(10,39)-(10,52)
(10,40)-(10,45)
(10,48)-(10,51)
(10,57)-(10,59)
(10,67)-(10,75)
(10,68)-(10,70)
(10,72)-(10,74)
*)
