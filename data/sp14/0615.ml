
let rec clone x n =
  match n with | n when n <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let c = 3;;

let rec padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (s,t) = x in ((((c + s) + t) / 10), (((c + s) + t) mod 10)) :: a in
    let base = (0, [0]) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n with | n when n <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let rec padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x',x'') = x in
      let (c,s) = a in
      ((((c + x') + x'') / 10), ((((c + x') + x'') mod 10) :: s)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(5,8)-(5,9)
(18,6)-(18,74)
(18,23)-(18,74)
(18,27)-(18,28)
(18,31)-(18,32)
(18,36)-(18,37)
(18,49)-(18,50)
(18,53)-(18,54)
(18,58)-(18,59)
(18,73)-(18,74)
(19,19)-(19,22)
(19,20)-(19,21)
*)

(* type error slice
(17,4)-(21,51)
(17,10)-(18,74)
(18,23)-(18,74)
(18,73)-(18,74)
(19,4)-(21,51)
(19,15)-(19,23)
(21,18)-(21,32)
(21,18)-(21,44)
(21,33)-(21,34)
(21,35)-(21,39)
*)

(* all spans
(2,14)-(3,66)
(2,16)-(3,66)
(3,2)-(3,66)
(3,8)-(3,9)
(3,24)-(3,30)
(3,24)-(3,25)
(3,29)-(3,30)
(3,34)-(3,36)
(3,44)-(3,66)
(3,44)-(3,45)
(3,49)-(3,66)
(3,50)-(3,55)
(3,56)-(3,57)
(3,58)-(3,65)
(3,59)-(3,60)
(3,63)-(3,64)
(5,8)-(5,9)
(7,16)-(10,67)
(7,19)-(10,67)
(8,2)-(10,67)
(8,5)-(8,40)
(8,5)-(8,21)
(8,6)-(8,17)
(8,18)-(8,20)
(8,24)-(8,40)
(8,25)-(8,36)
(8,37)-(8,39)
(9,7)-(9,67)
(9,8)-(9,10)
(9,12)-(9,66)
(9,61)-(9,62)
(9,13)-(9,60)
(9,14)-(9,19)
(9,20)-(9,21)
(9,22)-(9,59)
(9,23)-(9,39)
(9,24)-(9,35)
(9,36)-(9,38)
(9,42)-(9,58)
(9,43)-(9,54)
(9,55)-(9,57)
(9,63)-(9,65)
(10,7)-(10,67)
(10,8)-(10,62)
(10,57)-(10,58)
(10,9)-(10,56)
(10,10)-(10,15)
(10,16)-(10,17)
(10,18)-(10,55)
(10,19)-(10,35)
(10,20)-(10,31)
(10,32)-(10,34)
(10,38)-(10,54)
(10,39)-(10,50)
(10,51)-(10,53)
(10,59)-(10,61)
(10,64)-(10,66)
(12,19)-(13,69)
(13,2)-(13,69)
(13,8)-(13,9)
(13,23)-(13,25)
(13,36)-(13,69)
(13,39)-(13,44)
(13,39)-(13,40)
(13,43)-(13,44)
(13,50)-(13,62)
(13,50)-(13,60)
(13,61)-(13,62)
(13,68)-(13,69)
(15,11)-(22,34)
(15,14)-(22,34)
(16,2)-(22,34)
(16,11)-(21,51)
(17,4)-(21,51)
(17,10)-(18,74)
(17,12)-(18,74)
(18,6)-(18,74)
(18,18)-(18,19)
(18,23)-(18,74)
(18,23)-(18,69)
(18,24)-(18,44)
(18,25)-(18,38)
(18,26)-(18,33)
(18,27)-(18,28)
(18,31)-(18,32)
(18,36)-(18,37)
(18,41)-(18,43)
(18,46)-(18,68)
(18,47)-(18,60)
(18,48)-(18,55)
(18,49)-(18,50)
(18,53)-(18,54)
(18,58)-(18,59)
(18,65)-(18,67)
(18,73)-(18,74)
(19,4)-(21,51)
(19,15)-(19,23)
(19,16)-(19,17)
(19,19)-(19,22)
(19,20)-(19,21)
(20,4)-(21,51)
(20,15)-(20,44)
(20,15)-(20,23)
(20,24)-(20,44)
(20,25)-(20,37)
(20,38)-(20,40)
(20,41)-(20,43)
(21,4)-(21,51)
(21,18)-(21,44)
(21,18)-(21,32)
(21,33)-(21,34)
(21,35)-(21,39)
(21,40)-(21,44)
(21,48)-(21,51)
(22,2)-(22,34)
(22,2)-(22,12)
(22,13)-(22,34)
(22,14)-(22,17)
(22,18)-(22,33)
(22,19)-(22,26)
(22,27)-(22,29)
(22,30)-(22,32)
*)
