
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let rec build (rand,depth) =
  if depth <= 0
  then buildX ()
  else
    (match rand with
     | 0 -> buildSine (build ((rand (0, 5)), (depth - 1)))
     | 1 -> buildCosine (build ((rand (0, 5)), (depth - 1)))
     | 2 ->
         buildAverage
           ((build ((rand (0, 5)), (depth - 2))),
             (build ((rand (0, 5)), (depth - 2))))
     | 3 ->
         buildTimes
           ((build ((rand (0, 5)), (depth - 2))),
             (build ((rand (0, 5)), (depth - 2))))
     | 4 ->
         buildThresh
           ((build ((rand (0, 5)), (depth - 4))),
             (build ((rand (0, 5)), (depth - 4))),
             (build ((rand (0, 5)), (depth - 4))),
             (build ((rand (0, 5)), (depth - 4)))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth <= 0
  then buildX ()
  else
    (match rand (0, 4) with
     | 0 -> buildSine (build (rand, (depth - 1)))
     | 1 -> buildCosine (build (rand, (depth - 1)))
     | 2 ->
         buildAverage
           ((build (rand, (depth - 2))), (build (rand, (depth - 2))))
     | 3 ->
         buildTimes
           ((build (rand, (depth - 2))), (build (rand, (depth - 2))))
     | 4 ->
         buildThresh
           ((build (rand, (depth - 4))), (build (rand, (depth - 4))),
             (build (rand, (depth - 4))), (build (rand, (depth - 4))))
     | _ -> buildY ());;

*)

(* changed spans
(23,15)-(43,51)
(27,4)-(43,51)
(27,11)-(27,15)
(28,12)-(28,58)
(28,30)-(28,43)
(28,36)-(28,42)
(28,37)-(28,38)
(28,40)-(28,41)
(29,32)-(29,45)
(29,38)-(29,44)
(29,39)-(29,40)
(29,42)-(29,43)
(32,20)-(32,33)
(32,26)-(32,32)
(32,27)-(32,28)
(32,30)-(32,31)
(33,21)-(33,34)
(33,27)-(33,33)
(33,28)-(33,29)
(33,31)-(33,32)
(36,20)-(36,33)
(36,26)-(36,32)
(36,27)-(36,28)
(36,30)-(36,31)
(37,21)-(37,34)
(37,27)-(37,33)
(37,28)-(37,29)
(37,31)-(37,32)
(40,20)-(40,33)
(40,26)-(40,32)
(40,27)-(40,28)
(40,30)-(40,31)
(41,21)-(41,34)
(41,27)-(41,33)
(41,28)-(41,29)
(41,31)-(41,32)
(42,21)-(42,34)
(42,27)-(42,33)
(42,28)-(42,29)
(42,31)-(42,32)
(43,21)-(43,34)
(43,27)-(43,33)
(43,28)-(43,29)
(43,31)-(43,32)
*)

(* type error slice
(23,3)-(43,53)
(23,15)-(43,51)
(27,4)-(43,51)
(27,11)-(27,15)
(28,22)-(28,58)
(28,23)-(28,28)
(28,29)-(28,57)
(28,30)-(28,43)
(28,31)-(28,35)
(43,21)-(43,34)
(43,22)-(43,26)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,15)-(43,51)
(24,2)-(43,51)
(24,5)-(24,15)
(24,5)-(24,10)
(24,14)-(24,15)
(25,7)-(25,16)
(25,7)-(25,13)
(25,14)-(25,16)
(27,4)-(43,51)
(27,11)-(27,15)
(28,12)-(28,58)
(28,12)-(28,21)
(28,22)-(28,58)
(28,23)-(28,28)
(28,29)-(28,57)
(28,30)-(28,43)
(28,31)-(28,35)
(28,36)-(28,42)
(28,37)-(28,38)
(28,40)-(28,41)
(28,45)-(28,56)
(28,46)-(28,51)
(28,54)-(28,55)
(29,12)-(29,60)
(29,12)-(29,23)
(29,24)-(29,60)
(29,25)-(29,30)
(29,31)-(29,59)
(29,32)-(29,45)
(29,33)-(29,37)
(29,38)-(29,44)
(29,39)-(29,40)
(29,42)-(29,43)
(29,47)-(29,58)
(29,48)-(29,53)
(29,56)-(29,57)
(31,9)-(33,50)
(31,9)-(31,21)
(32,11)-(33,50)
(32,12)-(32,48)
(32,13)-(32,18)
(32,19)-(32,47)
(32,20)-(32,33)
(32,21)-(32,25)
(32,26)-(32,32)
(32,27)-(32,28)
(32,30)-(32,31)
(32,35)-(32,46)
(32,36)-(32,41)
(32,44)-(32,45)
(33,13)-(33,49)
(33,14)-(33,19)
(33,20)-(33,48)
(33,21)-(33,34)
(33,22)-(33,26)
(33,27)-(33,33)
(33,28)-(33,29)
(33,31)-(33,32)
(33,36)-(33,47)
(33,37)-(33,42)
(33,45)-(33,46)
(35,9)-(37,50)
(35,9)-(35,19)
(36,11)-(37,50)
(36,12)-(36,48)
(36,13)-(36,18)
(36,19)-(36,47)
(36,20)-(36,33)
(36,21)-(36,25)
(36,26)-(36,32)
(36,27)-(36,28)
(36,30)-(36,31)
(36,35)-(36,46)
(36,36)-(36,41)
(36,44)-(36,45)
(37,13)-(37,49)
(37,14)-(37,19)
(37,20)-(37,48)
(37,21)-(37,34)
(37,22)-(37,26)
(37,27)-(37,33)
(37,28)-(37,29)
(37,31)-(37,32)
(37,36)-(37,47)
(37,37)-(37,42)
(37,45)-(37,46)
(39,9)-(43,50)
(39,9)-(39,20)
(40,11)-(43,50)
(40,12)-(40,48)
(40,13)-(40,18)
(40,19)-(40,47)
(40,20)-(40,33)
(40,21)-(40,25)
(40,26)-(40,32)
(40,27)-(40,28)
(40,30)-(40,31)
(40,35)-(40,46)
(40,36)-(40,41)
(40,44)-(40,45)
(41,13)-(41,49)
(41,14)-(41,19)
(41,20)-(41,48)
(41,21)-(41,34)
(41,22)-(41,26)
(41,27)-(41,33)
(41,28)-(41,29)
(41,31)-(41,32)
(41,36)-(41,47)
(41,37)-(41,42)
(41,45)-(41,46)
(42,13)-(42,49)
(42,14)-(42,19)
(42,20)-(42,48)
(42,21)-(42,34)
(42,22)-(42,26)
(42,27)-(42,33)
(42,28)-(42,29)
(42,31)-(42,32)
(42,36)-(42,47)
(42,37)-(42,42)
(42,45)-(42,46)
(43,13)-(43,49)
(43,14)-(43,19)
(43,20)-(43,48)
(43,21)-(43,34)
(43,22)-(43,26)
(43,27)-(43,33)
(43,28)-(43,29)
(43,31)-(43,32)
(43,36)-(43,47)
(43,37)-(43,42)
(43,45)-(43,46)
*)
