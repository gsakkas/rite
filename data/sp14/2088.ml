
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) > (List.length l2)
    then
      (let y = (clone 0 ((List.length l1) - (List.length l2))) @ l2 in
       (l1, y))
    else
      (let z = (clone 0 ((List.length l2) - (List.length l1))) @ l1 in
       (z, l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (d1,d2) ->
          (match a with
           | (carry,result) ->
               if ((d1 + d2) + carry) > 9
               then (1, ((((d1 + d2) + carry) - 10) :: result))
               else (0, (((d1 + d2) + carry) :: result))) in
    let base = (0, []) in
    let args = [0] @ [List.combine (List.rev l1) (List.rev l2)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) > (List.length l2)
    then
      (let y = (clone 0 ((List.length l1) - (List.length l2))) @ l2 in
       (l1, y))
    else
      (let z = (clone 0 ((List.length l2) - (List.length l1))) @ l1 in
       (z, l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (d1,d2) ->
          (match a with
           | (carry,result) ->
               if ((d1 + d2) + carry) > 9
               then (1, ((((d1 + d2) + carry) - 10) :: result))
               else (0, (((d1 + d2) + carry) :: result))) in
    let base = (0, []) in
    let args = [(0, 0)] @ (List.combine (List.rev l1) (List.rev l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(30,16)-(30,17)
(30,21)-(30,63)
*)

(* type error slice
(30,15)-(30,18)
(30,15)-(30,63)
(30,16)-(30,17)
(30,19)-(30,20)
(30,21)-(30,63)
(30,22)-(30,34)
(30,22)-(30,62)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(14,15)
(4,15)-(14,15)
(5,2)-(14,15)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,15)
(6,8)-(6,10)
(6,12)-(6,14)
(8,4)-(14,15)
(8,7)-(8,42)
(8,7)-(8,23)
(8,8)-(8,19)
(8,20)-(8,22)
(8,26)-(8,42)
(8,27)-(8,38)
(8,39)-(8,41)
(10,6)-(11,15)
(10,15)-(10,67)
(10,63)-(10,64)
(10,15)-(10,62)
(10,16)-(10,21)
(10,22)-(10,23)
(10,24)-(10,61)
(10,25)-(10,41)
(10,26)-(10,37)
(10,38)-(10,40)
(10,44)-(10,60)
(10,45)-(10,56)
(10,57)-(10,59)
(10,65)-(10,67)
(11,7)-(11,14)
(11,8)-(11,10)
(11,12)-(11,13)
(13,6)-(14,15)
(13,15)-(13,67)
(13,63)-(13,64)
(13,15)-(13,62)
(13,16)-(13,21)
(13,22)-(13,23)
(13,24)-(13,61)
(13,25)-(13,41)
(13,26)-(13,37)
(13,38)-(13,40)
(13,44)-(13,60)
(13,45)-(13,56)
(13,57)-(13,59)
(13,65)-(13,67)
(14,7)-(14,14)
(14,8)-(14,9)
(14,11)-(14,13)
(16,19)-(17,69)
(17,2)-(17,69)
(17,8)-(17,9)
(17,23)-(17,25)
(17,36)-(17,69)
(17,39)-(17,44)
(17,39)-(17,40)
(17,43)-(17,44)
(17,50)-(17,62)
(17,50)-(17,60)
(17,61)-(17,62)
(17,68)-(17,69)
(19,11)-(32,34)
(19,14)-(32,34)
(20,2)-(32,34)
(20,11)-(31,51)
(21,4)-(31,51)
(21,10)-(28,57)
(21,12)-(28,57)
(22,6)-(28,57)
(22,12)-(22,13)
(24,10)-(28,57)
(24,17)-(24,18)
(26,15)-(28,56)
(26,18)-(26,41)
(26,18)-(26,37)
(26,19)-(26,28)
(26,20)-(26,22)
(26,25)-(26,27)
(26,31)-(26,36)
(26,40)-(26,41)
(27,20)-(27,63)
(27,21)-(27,22)
(27,24)-(27,62)
(27,25)-(27,51)
(27,26)-(27,45)
(27,27)-(27,36)
(27,28)-(27,30)
(27,33)-(27,35)
(27,39)-(27,44)
(27,48)-(27,50)
(27,55)-(27,61)
(28,20)-(28,56)
(28,21)-(28,22)
(28,24)-(28,55)
(28,25)-(28,44)
(28,26)-(28,35)
(28,27)-(28,29)
(28,32)-(28,34)
(28,38)-(28,43)
(28,48)-(28,54)
(29,4)-(31,51)
(29,15)-(29,22)
(29,16)-(29,17)
(29,19)-(29,21)
(30,4)-(31,51)
(30,15)-(30,63)
(30,19)-(30,20)
(30,15)-(30,18)
(30,16)-(30,17)
(30,21)-(30,63)
(30,22)-(30,62)
(30,22)-(30,34)
(30,35)-(30,48)
(30,36)-(30,44)
(30,45)-(30,47)
(30,49)-(30,62)
(30,50)-(30,58)
(30,59)-(30,61)
(31,4)-(31,51)
(31,18)-(31,44)
(31,18)-(31,32)
(31,33)-(31,34)
(31,35)-(31,39)
(31,40)-(31,44)
(31,48)-(31,51)
(32,2)-(32,34)
(32,2)-(32,12)
(32,13)-(32,34)
(32,14)-(32,17)
(32,18)-(32,33)
(32,19)-(32,26)
(32,27)-(32,29)
(32,30)-(32,32)
*)
