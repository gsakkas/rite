
let rec clone x n =
  let rec helper a b acc = if b > 0 then helper a (b - 1) (a :: acc) else acc in
  helper x n [];;

let padZero l1 l2 =
  let l1_len = List.length l1 in
  let l2_len = List.length l2 in
  let l_diff = l1_len - l2_len in
  if l_diff < 0
  then (((clone 0 (l_diff * (-1))) @ l1), l2)
  else (l1, ((clone 0 l_diff) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (b1,b2) = a in
      match x with
      | (fir,sec) ->
          if ((fir + sec) + b1) < 10
          then
            (if (List.length b2) >= ((List.length l1) - 1)
             then (0, (b1 :: (((fir + sec) + b1) mod 10) :: b2))
             else (0, (((fir + sec) + b1) :: b2)))
          else
            if (List.length b2) >= ((List.length l1) - 1)
            then (0, (b1 :: (((fir + sec) + b1) mod 10) :: b2))
            else
              ((((fir + sec) + b1) / 10), ((((fir + sec) + b1) mod 10) ::
                b2)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (bar,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let rec helper a b acc =
    if a > 0 then helper (a - 1) b (bigAdd b b) else acc in
  helper i l 0;;


(* fix

let rec clone x n =
  let rec helper a b acc = if b > 0 then helper a (b - 1) (a :: acc) else acc in
  helper x n [];;

let padZero l1 l2 =
  let l1_len = List.length l1 in
  let l2_len = List.length l2 in
  let l_diff = l1_len - l2_len in
  if l_diff < 0
  then (((clone 0 (l_diff * (-1))) @ l1), l2)
  else (l1, ((clone 0 l_diff) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (b1,b2) = a in
      match x with
      | (fir,sec) ->
          if ((fir + sec) + b1) < 10
          then
            (if (List.length b2) >= ((List.length l1) - 1)
             then (0, (b1 :: (((fir + sec) + b1) mod 10) :: b2))
             else (0, (((fir + sec) + b1) :: b2)))
          else
            if (List.length b2) >= ((List.length l1) - 1)
            then (0, (b1 :: (((fir + sec) + b1) mod 10) :: b2))
            else
              ((((fir + sec) + b1) / 10), ((((fir + sec) + b1) mod 10) ::
                b2)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (bar,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  let rec helper a b acc =
    if a > 0 then helper (a - 1) b (bigAdd b b) else acc in
  helper i l [];;

*)

(* changed spans
(42,13)-(42,14)
*)

(* type error slice
(15,36)-(15,74)
(15,50)-(15,60)
(15,50)-(15,62)
(15,68)-(15,74)
(17,3)-(37,36)
(17,11)-(37,34)
(17,14)-(37,34)
(18,2)-(37,34)
(37,2)-(37,12)
(37,2)-(37,34)
(41,18)-(41,24)
(41,18)-(41,47)
(41,35)-(41,47)
(41,36)-(41,42)
(42,2)-(42,8)
(42,2)-(42,14)
(42,13)-(42,14)
*)

(* all spans
(2,14)-(4,15)
(2,16)-(4,15)
(3,2)-(4,15)
(3,17)-(3,77)
(3,19)-(3,77)
(3,21)-(3,77)
(3,27)-(3,77)
(3,30)-(3,35)
(3,30)-(3,31)
(3,34)-(3,35)
(3,41)-(3,68)
(3,41)-(3,47)
(3,48)-(3,49)
(3,50)-(3,57)
(3,51)-(3,52)
(3,55)-(3,56)
(3,58)-(3,68)
(3,59)-(3,60)
(3,64)-(3,67)
(3,74)-(3,77)
(4,2)-(4,15)
(4,2)-(4,8)
(4,9)-(4,10)
(4,11)-(4,12)
(4,13)-(4,15)
(6,12)-(12,36)
(6,15)-(12,36)
(7,2)-(12,36)
(7,15)-(7,29)
(7,15)-(7,26)
(7,27)-(7,29)
(8,2)-(12,36)
(8,15)-(8,29)
(8,15)-(8,26)
(8,27)-(8,29)
(9,2)-(12,36)
(9,15)-(9,30)
(9,15)-(9,21)
(9,24)-(9,30)
(10,2)-(12,36)
(10,5)-(10,15)
(10,5)-(10,11)
(10,14)-(10,15)
(11,7)-(11,45)
(11,8)-(11,40)
(11,35)-(11,36)
(11,9)-(11,34)
(11,10)-(11,15)
(11,16)-(11,17)
(11,18)-(11,33)
(11,19)-(11,25)
(11,28)-(11,32)
(11,37)-(11,39)
(11,42)-(11,44)
(12,7)-(12,36)
(12,8)-(12,10)
(12,12)-(12,35)
(12,30)-(12,31)
(12,13)-(12,29)
(12,14)-(12,19)
(12,20)-(12,21)
(12,22)-(12,28)
(12,32)-(12,34)
(14,19)-(15,74)
(15,2)-(15,74)
(15,8)-(15,9)
(15,23)-(15,25)
(15,36)-(15,74)
(15,39)-(15,44)
(15,39)-(15,40)
(15,43)-(15,44)
(15,50)-(15,62)
(15,50)-(15,60)
(15,61)-(15,62)
(15,68)-(15,74)
(15,68)-(15,69)
(15,73)-(15,74)
(17,11)-(37,34)
(17,14)-(37,34)
(18,2)-(37,34)
(18,11)-(36,53)
(19,4)-(36,53)
(19,10)-(33,20)
(19,12)-(33,20)
(20,6)-(33,20)
(20,20)-(20,21)
(21,6)-(33,20)
(21,12)-(21,13)
(23,10)-(33,20)
(23,13)-(23,36)
(23,13)-(23,31)
(23,14)-(23,25)
(23,15)-(23,18)
(23,21)-(23,24)
(23,28)-(23,30)
(23,34)-(23,36)
(25,12)-(27,50)
(25,16)-(25,58)
(25,16)-(25,32)
(25,17)-(25,28)
(25,29)-(25,31)
(25,36)-(25,58)
(25,37)-(25,53)
(25,38)-(25,49)
(25,50)-(25,52)
(25,56)-(25,57)
(26,18)-(26,64)
(26,19)-(26,20)
(26,22)-(26,63)
(26,23)-(26,25)
(26,29)-(26,62)
(26,29)-(26,56)
(26,30)-(26,48)
(26,31)-(26,42)
(26,32)-(26,35)
(26,38)-(26,41)
(26,45)-(26,47)
(26,53)-(26,55)
(26,60)-(26,62)
(27,18)-(27,49)
(27,19)-(27,20)
(27,22)-(27,48)
(27,23)-(27,41)
(27,24)-(27,35)
(27,25)-(27,28)
(27,31)-(27,34)
(27,38)-(27,40)
(27,45)-(27,47)
(29,12)-(33,20)
(29,15)-(29,57)
(29,15)-(29,31)
(29,16)-(29,27)
(29,28)-(29,30)
(29,35)-(29,57)
(29,36)-(29,52)
(29,37)-(29,48)
(29,49)-(29,51)
(29,55)-(29,56)
(30,17)-(30,63)
(30,18)-(30,19)
(30,21)-(30,62)
(30,22)-(30,24)
(30,28)-(30,61)
(30,28)-(30,55)
(30,29)-(30,47)
(30,30)-(30,41)
(30,31)-(30,34)
(30,37)-(30,40)
(30,44)-(30,46)
(30,52)-(30,54)
(30,59)-(30,61)
(32,14)-(33,20)
(32,15)-(32,40)
(32,16)-(32,34)
(32,17)-(32,28)
(32,18)-(32,21)
(32,24)-(32,27)
(32,31)-(32,33)
(32,37)-(32,39)
(32,42)-(33,19)
(32,43)-(32,70)
(32,44)-(32,62)
(32,45)-(32,56)
(32,46)-(32,49)
(32,52)-(32,55)
(32,59)-(32,61)
(32,67)-(32,69)
(33,16)-(33,18)
(34,4)-(36,53)
(34,15)-(34,22)
(34,16)-(34,17)
(34,19)-(34,21)
(35,4)-(36,53)
(35,15)-(35,44)
(35,15)-(35,23)
(35,24)-(35,44)
(35,25)-(35,37)
(35,38)-(35,40)
(35,41)-(35,43)
(36,4)-(36,53)
(36,20)-(36,46)
(36,20)-(36,34)
(36,35)-(36,36)
(36,37)-(36,41)
(36,42)-(36,46)
(36,50)-(36,53)
(37,2)-(37,34)
(37,2)-(37,12)
(37,13)-(37,34)
(37,14)-(37,17)
(37,18)-(37,33)
(37,19)-(37,26)
(37,27)-(37,29)
(37,30)-(37,32)
(39,19)-(42,14)
(39,21)-(42,14)
(40,2)-(42,14)
(40,17)-(41,56)
(40,19)-(41,56)
(40,21)-(41,56)
(41,4)-(41,56)
(41,7)-(41,12)
(41,7)-(41,8)
(41,11)-(41,12)
(41,18)-(41,47)
(41,18)-(41,24)
(41,25)-(41,32)
(41,26)-(41,27)
(41,30)-(41,31)
(41,33)-(41,34)
(41,35)-(41,47)
(41,36)-(41,42)
(41,43)-(41,44)
(41,45)-(41,46)
(41,53)-(41,56)
(42,2)-(42,14)
(42,2)-(42,8)
(42,9)-(42,10)
(42,11)-(42,12)
(42,13)-(42,14)
*)
