
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 ->
      let num = rand (1, 10) in
      if (num > 7) || (num = 2) then buildX () else buildY ()
  | 1 ->
      let num = rand (1, 10) in
      if (num mod 2) = 0
      then
        buildSine
          (buildTimes
             ((build (rand, (depth - 1))),
               (buildCosine (build (rand, (depth - 1))))))
      else
        buildSine
          (buildTimes
             ((build (rand, (depth - 1))), (buildSine (rand, (depth - 1)))))
  | 2 ->
      let num = rand (1, 30) in
      if (num mod 2) == 0
      then
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
      else
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
  | 3 ->
      let num = rand (1, 50) in
      if (num mod 2) = 0
      then
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildCosine (build (rand, (depth - 1)))))
      else
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildSine (build (rand, (depth - 1)))))
  | 4 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      let num = rand (1, 10) in
      if num = 1
      then buildSine (buildSine (buildSine (build (rand, (depth - 1)))))
      else
        if num = 2
        then
          buildCosine (buildCosine (buildCosine (build (rand, (depth - 1)))))
        else
          if num = 3
          then buildSine (buildCosine (build (rand, (depth - 1))))
          else buildCosine (buildSine (build (rand, (depth - 1))))
  | 6 ->
      buildAverage ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 7 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 8 ->
      buildTimes
        ((buildAverage
            ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
          (buildSine (build (rand, (depth - 1)))))
  | _ -> build (rand, (depth - 1));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 ->
      let num = rand (1, 10) in
      if (num > 7) || (num = 2) then buildX () else buildY ()
  | 1 ->
      let num = rand (1, 10) in
      if (num mod 2) = 0
      then
        buildSine
          (buildTimes
             ((build (rand, (depth - 1))),
               (buildCosine (build (rand, (depth - 1))))))
      else
        buildSine
          (buildTimes
             ((build (rand, (depth - 1))),
               (buildSine (build (rand, (depth - 1))))))
  | 2 ->
      let num = rand (1, 30) in
      if (num mod 2) == 0
      then
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
      else
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
  | 3 ->
      let num = rand (1, 50) in
      if (num mod 2) = 0
      then
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildCosine (build (rand, (depth - 1)))))
      else
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildSine (build (rand, (depth - 1)))))
  | 4 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      let num = rand (1, 10) in
      if num = 1
      then buildSine (buildSine (buildSine (build (rand, (depth - 1)))))
      else
        if num = 2
        then
          buildCosine (buildCosine (buildCosine (build (rand, (depth - 1)))))
        else
          if num = 3
          then buildSine (buildCosine (build (rand, (depth - 1))))
          else buildCosine (buildSine (build (rand, (depth - 1))))
  | 6 ->
      buildAverage ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 7 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 8 ->
      buildTimes
        ((buildAverage
            ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
          (buildSine (build (rand, (depth - 1)))))
  | _ -> build (rand, (depth - 1));;

*)

(* changed spans
(39,54)-(39,73)
*)

(* type error slice
(15,3)-(15,26)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(39,43)-(39,74)
(39,44)-(39,53)
(39,54)-(39,73)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,16)-(17,39)
(17,25)-(17,39)
(17,32)-(17,34)
(17,36)-(17,38)
(19,11)-(19,20)
(19,16)-(19,20)
(21,11)-(21,20)
(21,16)-(21,20)
(23,15)-(91,34)
(24,2)-(91,34)
(24,8)-(24,13)
(26,6)-(27,61)
(26,16)-(26,28)
(26,16)-(26,20)
(26,21)-(26,28)
(26,22)-(26,23)
(26,25)-(26,27)
(27,6)-(27,61)
(27,9)-(27,31)
(27,9)-(27,18)
(27,10)-(27,13)
(27,16)-(27,17)
(27,22)-(27,31)
(27,23)-(27,26)
(27,29)-(27,30)
(27,37)-(27,46)
(27,37)-(27,43)
(27,44)-(27,46)
(27,52)-(27,61)
(27,52)-(27,58)
(27,59)-(27,61)
(29,6)-(39,76)
(29,16)-(29,28)
(29,16)-(29,20)
(29,21)-(29,28)
(29,22)-(29,23)
(29,25)-(29,27)
(30,6)-(39,76)
(30,9)-(30,24)
(30,9)-(30,20)
(30,10)-(30,13)
(30,18)-(30,19)
(30,23)-(30,24)
(32,8)-(35,58)
(32,8)-(32,17)
(33,10)-(35,58)
(33,11)-(33,21)
(34,13)-(35,57)
(34,14)-(34,41)
(34,15)-(34,20)
(34,21)-(34,40)
(34,22)-(34,26)
(34,28)-(34,39)
(34,29)-(34,34)
(34,37)-(34,38)
(35,15)-(35,56)
(35,16)-(35,27)
(35,28)-(35,55)
(35,29)-(35,34)
(35,35)-(35,54)
(35,36)-(35,40)
(35,42)-(35,53)
(35,43)-(35,48)
(35,51)-(35,52)
(37,8)-(39,76)
(37,8)-(37,17)
(38,10)-(39,76)
(38,11)-(38,21)
(39,13)-(39,75)
(39,14)-(39,41)
(39,15)-(39,20)
(39,21)-(39,40)
(39,22)-(39,26)
(39,28)-(39,39)
(39,29)-(39,34)
(39,37)-(39,38)
(39,43)-(39,74)
(39,44)-(39,53)
(39,54)-(39,73)
(39,55)-(39,59)
(39,61)-(39,72)
(39,62)-(39,67)
(39,70)-(39,71)
(41,6)-(54,59)
(41,16)-(41,28)
(41,16)-(41,20)
(41,21)-(41,28)
(41,22)-(41,23)
(41,25)-(41,27)
(42,6)-(54,59)
(42,9)-(42,25)
(42,9)-(42,20)
(42,10)-(42,13)
(42,18)-(42,19)
(42,24)-(42,25)
(44,8)-(48,59)
(44,8)-(44,18)
(45,10)-(48,59)
(45,11)-(45,50)
(45,12)-(45,21)
(45,22)-(45,49)
(45,23)-(45,28)
(45,29)-(45,48)
(45,30)-(45,34)
(45,36)-(45,47)
(45,37)-(45,42)
(45,45)-(45,46)
(46,12)-(48,58)
(46,13)-(46,23)
(47,15)-(48,57)
(47,16)-(47,43)
(47,17)-(47,22)
(47,23)-(47,42)
(47,24)-(47,28)
(47,30)-(47,41)
(47,31)-(47,36)
(47,39)-(47,40)
(48,17)-(48,56)
(48,18)-(48,27)
(48,28)-(48,55)
(48,29)-(48,34)
(48,35)-(48,54)
(48,36)-(48,40)
(48,42)-(48,53)
(48,43)-(48,48)
(48,51)-(48,52)
(50,8)-(54,59)
(50,8)-(50,18)
(51,10)-(54,59)
(51,11)-(51,50)
(51,12)-(51,21)
(51,22)-(51,49)
(51,23)-(51,28)
(51,29)-(51,48)
(51,30)-(51,34)
(51,36)-(51,47)
(51,37)-(51,42)
(51,45)-(51,46)
(52,12)-(54,58)
(52,13)-(52,23)
(53,15)-(54,57)
(53,16)-(53,43)
(53,17)-(53,22)
(53,23)-(53,42)
(53,24)-(53,28)
(53,30)-(53,41)
(53,31)-(53,36)
(53,39)-(53,40)
(54,17)-(54,56)
(54,18)-(54,27)
(54,28)-(54,55)
(54,29)-(54,34)
(54,35)-(54,54)
(54,36)-(54,40)
(54,42)-(54,53)
(54,43)-(54,48)
(54,51)-(54,52)
(56,6)-(67,52)
(56,16)-(56,28)
(56,16)-(56,20)
(56,21)-(56,28)
(56,22)-(56,23)
(56,25)-(56,27)
(57,6)-(67,52)
(57,9)-(57,24)
(57,9)-(57,20)
(57,10)-(57,13)
(57,18)-(57,19)
(57,23)-(57,24)
(59,8)-(62,54)
(59,8)-(59,18)
(60,10)-(62,54)
(60,11)-(61,73)
(60,12)-(60,24)
(61,14)-(61,72)
(61,15)-(61,42)
(61,16)-(61,21)
(61,22)-(61,41)
(61,23)-(61,27)
(61,29)-(61,40)
(61,30)-(61,35)
(61,38)-(61,39)
(61,44)-(61,71)
(61,45)-(61,50)
(61,51)-(61,70)
(61,52)-(61,56)
(61,58)-(61,69)
(61,59)-(61,64)
(61,67)-(61,68)
(62,12)-(62,53)
(62,13)-(62,24)
(62,25)-(62,52)
(62,26)-(62,31)
(62,32)-(62,51)
(62,33)-(62,37)
(62,39)-(62,50)
(62,40)-(62,45)
(62,48)-(62,49)
(64,8)-(67,52)
(64,8)-(64,18)
(65,10)-(67,52)
(65,11)-(66,73)
(65,12)-(65,24)
(66,14)-(66,72)
(66,15)-(66,42)
(66,16)-(66,21)
(66,22)-(66,41)
(66,23)-(66,27)
(66,29)-(66,40)
(66,30)-(66,35)
(66,38)-(66,39)
(66,44)-(66,71)
(66,45)-(66,50)
(66,51)-(66,70)
(66,52)-(66,56)
(66,58)-(66,69)
(66,59)-(66,64)
(66,67)-(66,68)
(67,12)-(67,51)
(67,13)-(67,22)
(67,23)-(67,50)
(67,24)-(67,29)
(67,30)-(67,49)
(67,31)-(67,35)
(67,37)-(67,48)
(67,38)-(67,43)
(67,46)-(67,47)
(69,6)-(69,75)
(69,6)-(69,16)
(69,17)-(69,75)
(69,18)-(69,45)
(69,19)-(69,24)
(69,25)-(69,44)
(69,26)-(69,30)
(69,32)-(69,43)
(69,33)-(69,38)
(69,41)-(69,42)
(69,47)-(69,74)
(69,48)-(69,53)
(69,54)-(69,73)
(69,55)-(69,59)
(69,61)-(69,72)
(69,62)-(69,67)
(69,70)-(69,71)
(71,6)-(81,66)
(71,16)-(71,28)
(71,16)-(71,20)
(71,21)-(71,28)
(71,22)-(71,23)
(71,25)-(71,27)
(72,6)-(81,66)
(72,9)-(72,16)
(72,9)-(72,12)
(72,15)-(72,16)
(73,11)-(73,72)
(73,11)-(73,20)
(73,21)-(73,72)
(73,22)-(73,31)
(73,32)-(73,71)
(73,33)-(73,42)
(73,43)-(73,70)
(73,44)-(73,49)
(73,50)-(73,69)
(73,51)-(73,55)
(73,57)-(73,68)
(73,58)-(73,63)
(73,66)-(73,67)
(75,8)-(81,66)
(75,11)-(75,18)
(75,11)-(75,14)
(75,17)-(75,18)
(77,10)-(77,77)
(77,10)-(77,21)
(77,22)-(77,77)
(77,23)-(77,34)
(77,35)-(77,76)
(77,36)-(77,47)
(77,48)-(77,75)
(77,49)-(77,54)
(77,55)-(77,74)
(77,56)-(77,60)
(77,62)-(77,73)
(77,63)-(77,68)
(77,71)-(77,72)
(79,10)-(81,66)
(79,13)-(79,20)
(79,13)-(79,16)
(79,19)-(79,20)
(80,15)-(80,66)
(80,15)-(80,24)
(80,25)-(80,66)
(80,26)-(80,37)
(80,38)-(80,65)
(80,39)-(80,44)
(80,45)-(80,64)
(80,46)-(80,50)
(80,52)-(80,63)
(80,53)-(80,58)
(80,61)-(80,62)
(81,15)-(81,66)
(81,15)-(81,26)
(81,27)-(81,66)
(81,28)-(81,37)
(81,38)-(81,65)
(81,39)-(81,44)
(81,45)-(81,64)
(81,46)-(81,50)
(81,52)-(81,63)
(81,53)-(81,58)
(81,61)-(81,62)
(83,6)-(83,77)
(83,6)-(83,18)
(83,19)-(83,77)
(83,20)-(83,47)
(83,21)-(83,26)
(83,27)-(83,46)
(83,28)-(83,32)
(83,34)-(83,45)
(83,35)-(83,40)
(83,43)-(83,44)
(83,49)-(83,76)
(83,50)-(83,55)
(83,56)-(83,75)
(83,57)-(83,61)
(83,63)-(83,74)
(83,64)-(83,69)
(83,72)-(83,73)
(85,6)-(85,75)
(85,6)-(85,16)
(85,17)-(85,75)
(85,18)-(85,45)
(85,19)-(85,24)
(85,25)-(85,44)
(85,26)-(85,30)
(85,32)-(85,43)
(85,33)-(85,38)
(85,41)-(85,42)
(85,47)-(85,74)
(85,48)-(85,53)
(85,54)-(85,73)
(85,55)-(85,59)
(85,61)-(85,72)
(85,62)-(85,67)
(85,70)-(85,71)
(87,6)-(90,50)
(87,6)-(87,16)
(88,8)-(90,50)
(88,9)-(89,71)
(88,10)-(88,22)
(89,12)-(89,70)
(89,13)-(89,40)
(89,14)-(89,19)
(89,20)-(89,39)
(89,21)-(89,25)
(89,27)-(89,38)
(89,28)-(89,33)
(89,36)-(89,37)
(89,42)-(89,69)
(89,43)-(89,48)
(89,49)-(89,68)
(89,50)-(89,54)
(89,56)-(89,67)
(89,57)-(89,62)
(89,65)-(89,66)
(90,10)-(90,49)
(90,11)-(90,20)
(90,21)-(90,48)
(90,22)-(90,27)
(90,28)-(90,47)
(90,29)-(90,33)
(90,35)-(90,46)
(90,36)-(90,41)
(90,44)-(90,45)
(91,9)-(91,34)
(91,9)-(91,14)
(91,15)-(91,34)
(91,16)-(91,20)
(91,22)-(91,33)
(91,23)-(91,28)
(91,31)-(91,32)
*)
