
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 ->
      let num = rand (1, 10) in
      if (num > 7) || (num = 2) then buildX () else buildY ()
  | 1 ->
      let num = rand (1, 10) in
      if (num mod 2) = 0
      then buildSine (buildCosine (rand, (depth - 1)))
      else
        buildSine
          (buildTimes
             ((build (rand, (depth - 1))), (buildSine (rand, (depth - 1)))))
  | 2 ->
      let num = rand (1, 30) in
      if (num mod 2) == 0
      then
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
      else
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
  | 3 ->
      let num = rand (1, 50) in
      if (num mod 2) = 0
      then
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildCosine (build (rand, (depth - 1)))))
      else
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildSine (build (rand, (depth - 1)))))
  | 4 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      let num = rand (1, 10) in
      if num = 1
      then buildSine (buildSine (buildSine (build (rand, (depth - 1)))))
      else
        if num = 2
        then
          buildCosine (buildCosine (buildCosine (build (rand, (depth - 1)))))
        else
          if num = 3
          then buildSine (buildCosine (build (rand, (depth - 1))))
          else buildCosine (buildSine (build (rand, (depth - 1))))
  | 6 ->
      buildAverage ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 7 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 8 ->
      buildTimes
        ((buildAverage
            ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
          (buildSine (build (rand, (depth - 1)))))
  | _ -> build (rand, (depth - 1));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match depth with
  | 0 ->
      let num = rand (1, 10) in
      if (num > 7) || (num = 2) then buildX () else buildY ()
  | 1 ->
      let num = rand (1, 10) in
      if (num mod 2) = 0
      then
        buildSine
          (buildTimes
             ((build (rand, (depth - 1))),
               (buildCosine (build (rand, (depth - 1))))))
      else
        buildSine
          (buildTimes
             ((build (rand, (depth - 1))),
               (buildSine (build (rand, (depth - 1))))))
  | 2 ->
      let num = rand (1, 30) in
      if (num mod 2) == 0
      then
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
      else
        buildTimes
          ((buildSine (build (rand, (depth - 1)))),
            (buildTimes
               ((build (rand, (depth - 1))),
                 (buildSine (build (rand, (depth - 1)))))))
  | 3 ->
      let num = rand (1, 50) in
      if (num mod 2) = 0
      then
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildCosine (build (rand, (depth - 1)))))
      else
        buildTimes
          ((buildAverage
              ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
            (buildSine (build (rand, (depth - 1)))))
  | 4 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      let num = rand (1, 10) in
      if num = 1
      then buildSine (buildSine (buildSine (build (rand, (depth - 1)))))
      else
        if num = 2
        then
          buildCosine (buildCosine (buildCosine (build (rand, (depth - 1)))))
        else
          if num = 3
          then buildSine (buildCosine (build (rand, (depth - 1))))
          else buildCosine (buildSine (build (rand, (depth - 1))))
  | 6 ->
      buildAverage ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 7 ->
      buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 8 ->
      buildTimes
        ((buildAverage
            ((build (rand, (depth - 1))), (build (rand, (depth - 1))))),
          (buildSine (build (rand, (depth - 1)))))
  | _ -> build (rand, (depth - 1));;

*)

(* changed spans
(31,22)-(31,33)
(31,34)-(31,53)
(35,54)-(35,73)
*)

(* type error slice
(13,3)-(13,30)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,3)-(15,26)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(31,21)-(31,54)
(31,22)-(31,33)
(31,34)-(31,53)
(35,43)-(35,74)
(35,44)-(35,53)
(35,54)-(35,73)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,16)-(17,39)
(17,25)-(17,39)
(17,32)-(17,34)
(17,36)-(17,38)
(19,11)-(19,20)
(19,16)-(19,20)
(21,11)-(21,20)
(21,16)-(21,20)
(23,15)-(87,34)
(24,2)-(87,34)
(24,8)-(24,13)
(26,6)-(27,61)
(26,16)-(26,28)
(26,16)-(26,20)
(26,21)-(26,28)
(26,22)-(26,23)
(26,25)-(26,27)
(27,6)-(27,61)
(27,9)-(27,31)
(27,9)-(27,18)
(27,10)-(27,13)
(27,16)-(27,17)
(27,22)-(27,31)
(27,23)-(27,26)
(27,29)-(27,30)
(27,37)-(27,46)
(27,37)-(27,43)
(27,44)-(27,46)
(27,52)-(27,61)
(27,52)-(27,58)
(27,59)-(27,61)
(29,6)-(35,76)
(29,16)-(29,28)
(29,16)-(29,20)
(29,21)-(29,28)
(29,22)-(29,23)
(29,25)-(29,27)
(30,6)-(35,76)
(30,9)-(30,24)
(30,9)-(30,20)
(30,10)-(30,13)
(30,18)-(30,19)
(30,23)-(30,24)
(31,11)-(31,54)
(31,11)-(31,20)
(31,21)-(31,54)
(31,22)-(31,33)
(31,34)-(31,53)
(31,35)-(31,39)
(31,41)-(31,52)
(31,42)-(31,47)
(31,50)-(31,51)
(33,8)-(35,76)
(33,8)-(33,17)
(34,10)-(35,76)
(34,11)-(34,21)
(35,13)-(35,75)
(35,14)-(35,41)
(35,15)-(35,20)
(35,21)-(35,40)
(35,22)-(35,26)
(35,28)-(35,39)
(35,29)-(35,34)
(35,37)-(35,38)
(35,43)-(35,74)
(35,44)-(35,53)
(35,54)-(35,73)
(35,55)-(35,59)
(35,61)-(35,72)
(35,62)-(35,67)
(35,70)-(35,71)
(37,6)-(50,59)
(37,16)-(37,28)
(37,16)-(37,20)
(37,21)-(37,28)
(37,22)-(37,23)
(37,25)-(37,27)
(38,6)-(50,59)
(38,9)-(38,25)
(38,9)-(38,20)
(38,10)-(38,13)
(38,18)-(38,19)
(38,24)-(38,25)
(40,8)-(44,59)
(40,8)-(40,18)
(41,10)-(44,59)
(41,11)-(41,50)
(41,12)-(41,21)
(41,22)-(41,49)
(41,23)-(41,28)
(41,29)-(41,48)
(41,30)-(41,34)
(41,36)-(41,47)
(41,37)-(41,42)
(41,45)-(41,46)
(42,12)-(44,58)
(42,13)-(42,23)
(43,15)-(44,57)
(43,16)-(43,43)
(43,17)-(43,22)
(43,23)-(43,42)
(43,24)-(43,28)
(43,30)-(43,41)
(43,31)-(43,36)
(43,39)-(43,40)
(44,17)-(44,56)
(44,18)-(44,27)
(44,28)-(44,55)
(44,29)-(44,34)
(44,35)-(44,54)
(44,36)-(44,40)
(44,42)-(44,53)
(44,43)-(44,48)
(44,51)-(44,52)
(46,8)-(50,59)
(46,8)-(46,18)
(47,10)-(50,59)
(47,11)-(47,50)
(47,12)-(47,21)
(47,22)-(47,49)
(47,23)-(47,28)
(47,29)-(47,48)
(47,30)-(47,34)
(47,36)-(47,47)
(47,37)-(47,42)
(47,45)-(47,46)
(48,12)-(50,58)
(48,13)-(48,23)
(49,15)-(50,57)
(49,16)-(49,43)
(49,17)-(49,22)
(49,23)-(49,42)
(49,24)-(49,28)
(49,30)-(49,41)
(49,31)-(49,36)
(49,39)-(49,40)
(50,17)-(50,56)
(50,18)-(50,27)
(50,28)-(50,55)
(50,29)-(50,34)
(50,35)-(50,54)
(50,36)-(50,40)
(50,42)-(50,53)
(50,43)-(50,48)
(50,51)-(50,52)
(52,6)-(63,52)
(52,16)-(52,28)
(52,16)-(52,20)
(52,21)-(52,28)
(52,22)-(52,23)
(52,25)-(52,27)
(53,6)-(63,52)
(53,9)-(53,24)
(53,9)-(53,20)
(53,10)-(53,13)
(53,18)-(53,19)
(53,23)-(53,24)
(55,8)-(58,54)
(55,8)-(55,18)
(56,10)-(58,54)
(56,11)-(57,73)
(56,12)-(56,24)
(57,14)-(57,72)
(57,15)-(57,42)
(57,16)-(57,21)
(57,22)-(57,41)
(57,23)-(57,27)
(57,29)-(57,40)
(57,30)-(57,35)
(57,38)-(57,39)
(57,44)-(57,71)
(57,45)-(57,50)
(57,51)-(57,70)
(57,52)-(57,56)
(57,58)-(57,69)
(57,59)-(57,64)
(57,67)-(57,68)
(58,12)-(58,53)
(58,13)-(58,24)
(58,25)-(58,52)
(58,26)-(58,31)
(58,32)-(58,51)
(58,33)-(58,37)
(58,39)-(58,50)
(58,40)-(58,45)
(58,48)-(58,49)
(60,8)-(63,52)
(60,8)-(60,18)
(61,10)-(63,52)
(61,11)-(62,73)
(61,12)-(61,24)
(62,14)-(62,72)
(62,15)-(62,42)
(62,16)-(62,21)
(62,22)-(62,41)
(62,23)-(62,27)
(62,29)-(62,40)
(62,30)-(62,35)
(62,38)-(62,39)
(62,44)-(62,71)
(62,45)-(62,50)
(62,51)-(62,70)
(62,52)-(62,56)
(62,58)-(62,69)
(62,59)-(62,64)
(62,67)-(62,68)
(63,12)-(63,51)
(63,13)-(63,22)
(63,23)-(63,50)
(63,24)-(63,29)
(63,30)-(63,49)
(63,31)-(63,35)
(63,37)-(63,48)
(63,38)-(63,43)
(63,46)-(63,47)
(65,6)-(65,75)
(65,6)-(65,16)
(65,17)-(65,75)
(65,18)-(65,45)
(65,19)-(65,24)
(65,25)-(65,44)
(65,26)-(65,30)
(65,32)-(65,43)
(65,33)-(65,38)
(65,41)-(65,42)
(65,47)-(65,74)
(65,48)-(65,53)
(65,54)-(65,73)
(65,55)-(65,59)
(65,61)-(65,72)
(65,62)-(65,67)
(65,70)-(65,71)
(67,6)-(77,66)
(67,16)-(67,28)
(67,16)-(67,20)
(67,21)-(67,28)
(67,22)-(67,23)
(67,25)-(67,27)
(68,6)-(77,66)
(68,9)-(68,16)
(68,9)-(68,12)
(68,15)-(68,16)
(69,11)-(69,72)
(69,11)-(69,20)
(69,21)-(69,72)
(69,22)-(69,31)
(69,32)-(69,71)
(69,33)-(69,42)
(69,43)-(69,70)
(69,44)-(69,49)
(69,50)-(69,69)
(69,51)-(69,55)
(69,57)-(69,68)
(69,58)-(69,63)
(69,66)-(69,67)
(71,8)-(77,66)
(71,11)-(71,18)
(71,11)-(71,14)
(71,17)-(71,18)
(73,10)-(73,77)
(73,10)-(73,21)
(73,22)-(73,77)
(73,23)-(73,34)
(73,35)-(73,76)
(73,36)-(73,47)
(73,48)-(73,75)
(73,49)-(73,54)
(73,55)-(73,74)
(73,56)-(73,60)
(73,62)-(73,73)
(73,63)-(73,68)
(73,71)-(73,72)
(75,10)-(77,66)
(75,13)-(75,20)
(75,13)-(75,16)
(75,19)-(75,20)
(76,15)-(76,66)
(76,15)-(76,24)
(76,25)-(76,66)
(76,26)-(76,37)
(76,38)-(76,65)
(76,39)-(76,44)
(76,45)-(76,64)
(76,46)-(76,50)
(76,52)-(76,63)
(76,53)-(76,58)
(76,61)-(76,62)
(77,15)-(77,66)
(77,15)-(77,26)
(77,27)-(77,66)
(77,28)-(77,37)
(77,38)-(77,65)
(77,39)-(77,44)
(77,45)-(77,64)
(77,46)-(77,50)
(77,52)-(77,63)
(77,53)-(77,58)
(77,61)-(77,62)
(79,6)-(79,77)
(79,6)-(79,18)
(79,19)-(79,77)
(79,20)-(79,47)
(79,21)-(79,26)
(79,27)-(79,46)
(79,28)-(79,32)
(79,34)-(79,45)
(79,35)-(79,40)
(79,43)-(79,44)
(79,49)-(79,76)
(79,50)-(79,55)
(79,56)-(79,75)
(79,57)-(79,61)
(79,63)-(79,74)
(79,64)-(79,69)
(79,72)-(79,73)
(81,6)-(81,75)
(81,6)-(81,16)
(81,17)-(81,75)
(81,18)-(81,45)
(81,19)-(81,24)
(81,25)-(81,44)
(81,26)-(81,30)
(81,32)-(81,43)
(81,33)-(81,38)
(81,41)-(81,42)
(81,47)-(81,74)
(81,48)-(81,53)
(81,54)-(81,73)
(81,55)-(81,59)
(81,61)-(81,72)
(81,62)-(81,67)
(81,70)-(81,71)
(83,6)-(86,50)
(83,6)-(83,16)
(84,8)-(86,50)
(84,9)-(85,71)
(84,10)-(84,22)
(85,12)-(85,70)
(85,13)-(85,40)
(85,14)-(85,19)
(85,20)-(85,39)
(85,21)-(85,25)
(85,27)-(85,38)
(85,28)-(85,33)
(85,36)-(85,37)
(85,42)-(85,69)
(85,43)-(85,48)
(85,49)-(85,68)
(85,50)-(85,54)
(85,56)-(85,67)
(85,57)-(85,62)
(85,65)-(85,66)
(86,10)-(86,49)
(86,11)-(86,20)
(86,21)-(86,48)
(86,22)-(86,27)
(86,28)-(86,47)
(86,29)-(86,33)
(86,35)-(86,46)
(86,36)-(86,41)
(86,44)-(86,45)
(87,9)-(87,34)
(87,9)-(87,14)
(87,15)-(87,34)
(87,16)-(87,20)
(87,22)-(87,33)
(87,23)-(87,28)
(87,31)-(87,32)
*)
