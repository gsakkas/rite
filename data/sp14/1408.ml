
let rec digitsOfInt n =
  if n < 0
  then []
  else
    (match n with
     | 0 -> [0]
     | _ ->
         if (n / 10) != 0
         then (digitsOfInt (n / 10)) @ [n mod 10]
         else [n mod 10]);;

let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;

let rec additivePersistence n =
  if (sumList (digitsOfInt n)) < 9
  then 0
  else 1 + (additivePersistence sumList n);;


(* fix

let rec digitsOfInt n =
  if n < 0
  then []
  else
    (match n with
     | 0 -> [0]
     | _ ->
         if (n / 10) != 0
         then (digitsOfInt (n / 10)) @ [n mod 10]
         else [n mod 10]);;

let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;

let rec additivePersistence n =
  if (sumList (digitsOfInt n)) < 9
  then 0
  else 1 + (additivePersistence (sumList (digitsOfInt n)));;

*)

(* changed spans
(18,11)-(18,42)
(18,32)-(18,39)
(18,40)-(18,41)
*)

(* type error slice
(15,3)-(18,44)
(15,28)-(18,42)
(16,2)-(18,42)
(18,7)-(18,42)
(18,11)-(18,42)
(18,12)-(18,31)
*)

(* all spans
(2,20)-(11,25)
(3,2)-(11,25)
(3,5)-(3,10)
(3,5)-(3,6)
(3,9)-(3,10)
(4,7)-(4,9)
(6,4)-(11,25)
(6,11)-(6,12)
(7,12)-(7,15)
(7,13)-(7,14)
(9,9)-(11,24)
(9,12)-(9,25)
(9,12)-(9,20)
(9,13)-(9,14)
(9,17)-(9,19)
(9,24)-(9,25)
(10,14)-(10,49)
(10,37)-(10,38)
(10,14)-(10,36)
(10,15)-(10,26)
(10,27)-(10,35)
(10,28)-(10,29)
(10,32)-(10,34)
(10,39)-(10,49)
(10,40)-(10,48)
(10,40)-(10,41)
(10,46)-(10,48)
(11,14)-(11,24)
(11,15)-(11,23)
(11,15)-(11,16)
(11,21)-(11,23)
(13,16)-(13,70)
(13,21)-(13,70)
(13,27)-(13,29)
(13,43)-(13,44)
(13,55)-(13,70)
(13,55)-(13,56)
(13,59)-(13,70)
(13,60)-(13,67)
(13,68)-(13,69)
(15,28)-(18,42)
(16,2)-(18,42)
(16,5)-(16,34)
(16,5)-(16,30)
(16,6)-(16,13)
(16,14)-(16,29)
(16,15)-(16,26)
(16,27)-(16,28)
(16,33)-(16,34)
(17,7)-(17,8)
(18,7)-(18,42)
(18,7)-(18,8)
(18,11)-(18,42)
(18,12)-(18,31)
(18,32)-(18,39)
(18,40)-(18,41)
*)
