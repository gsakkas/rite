
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand 0 100 in
    (if (rnd mod 5) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 5) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 5) = 2
         then buildAverage ((buildX ()), (buildY ()))
         else
           if (rnd mod 5) = 3
           then buildTimes ((buildX ()), (buildY ()))
           else
             buildThresh
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1))), (build (rand, (depth - 1)))))
  else
    (let rnd = rand 0 100 in
     if (rand mod 2) = 0
     then buildAverage ((buildX ()), (buildY ()))
     else buildTimes ((buildX ()), (buildY ())));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let rnd = rand (0, 100) in
    (if (rnd mod 5) = 0
     then buildSine (build (rand, (depth - 1)))
     else
       if (rnd mod 5) = 1
       then buildCosine (build (rand, (depth - 1)))
       else
         if (rnd mod 5) = 2
         then buildAverage ((buildX ()), (buildY ()))
         else
           if (rnd mod 5) = 3
           then buildTimes ((buildX ()), (buildY ()))
           else
             buildThresh
               ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
                 (build (rand, (depth - 1))), (build (rand, (depth - 1)))))
  else
    (let rnd = rand (0, 100) in
     if (rnd mod 2) = 0
     then buildAverage ((buildX ()), (buildY ()))
     else buildTimes ((buildX ()), (buildY ())));;

*)

(* changed spans
(28,14)-(28,24)
(28,19)-(28,20)
(45,15)-(45,25)
(45,20)-(45,21)
(46,9)-(46,13)
*)

(* type error slice
(28,14)-(28,18)
(28,14)-(28,24)
(46,8)-(46,20)
(46,9)-(46,13)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(48,48)
(26,2)-(48,48)
(26,5)-(26,14)
(26,5)-(26,10)
(26,13)-(26,14)
(28,4)-(43,75)
(28,14)-(28,24)
(28,14)-(28,18)
(28,19)-(28,20)
(28,21)-(28,24)
(29,4)-(43,75)
(29,8)-(29,23)
(29,8)-(29,19)
(29,9)-(29,12)
(29,17)-(29,18)
(29,22)-(29,23)
(30,10)-(30,47)
(30,10)-(30,19)
(30,20)-(30,47)
(30,21)-(30,26)
(30,27)-(30,46)
(30,28)-(30,32)
(30,34)-(30,45)
(30,35)-(30,40)
(30,43)-(30,44)
(32,7)-(43,74)
(32,10)-(32,25)
(32,10)-(32,21)
(32,11)-(32,14)
(32,19)-(32,20)
(32,24)-(32,25)
(33,12)-(33,51)
(33,12)-(33,23)
(33,24)-(33,51)
(33,25)-(33,30)
(33,31)-(33,50)
(33,32)-(33,36)
(33,38)-(33,49)
(33,39)-(33,44)
(33,47)-(33,48)
(35,9)-(43,74)
(35,12)-(35,27)
(35,12)-(35,23)
(35,13)-(35,16)
(35,21)-(35,22)
(35,26)-(35,27)
(36,14)-(36,53)
(36,14)-(36,26)
(36,27)-(36,53)
(36,28)-(36,39)
(36,29)-(36,35)
(36,36)-(36,38)
(36,41)-(36,52)
(36,42)-(36,48)
(36,49)-(36,51)
(38,11)-(43,74)
(38,14)-(38,29)
(38,14)-(38,25)
(38,15)-(38,18)
(38,23)-(38,24)
(38,28)-(38,29)
(39,16)-(39,53)
(39,16)-(39,26)
(39,27)-(39,53)
(39,28)-(39,39)
(39,29)-(39,35)
(39,36)-(39,38)
(39,41)-(39,52)
(39,42)-(39,48)
(39,49)-(39,51)
(41,13)-(43,74)
(41,13)-(41,24)
(42,15)-(43,74)
(42,16)-(42,43)
(42,17)-(42,22)
(42,23)-(42,42)
(42,24)-(42,28)
(42,30)-(42,41)
(42,31)-(42,36)
(42,39)-(42,40)
(42,45)-(42,72)
(42,46)-(42,51)
(42,52)-(42,71)
(42,53)-(42,57)
(42,59)-(42,70)
(42,60)-(42,65)
(42,68)-(42,69)
(43,17)-(43,44)
(43,18)-(43,23)
(43,24)-(43,43)
(43,25)-(43,29)
(43,31)-(43,42)
(43,32)-(43,37)
(43,40)-(43,41)
(43,46)-(43,73)
(43,47)-(43,52)
(43,53)-(43,72)
(43,54)-(43,58)
(43,60)-(43,71)
(43,61)-(43,66)
(43,69)-(43,70)
(45,4)-(48,48)
(45,15)-(45,25)
(45,15)-(45,19)
(45,20)-(45,21)
(45,22)-(45,25)
(46,5)-(48,47)
(46,8)-(46,24)
(46,8)-(46,20)
(46,9)-(46,13)
(46,18)-(46,19)
(46,23)-(46,24)
(47,10)-(47,49)
(47,10)-(47,22)
(47,23)-(47,49)
(47,24)-(47,35)
(47,25)-(47,31)
(47,32)-(47,34)
(47,37)-(47,48)
(47,38)-(47,44)
(47,45)-(47,47)
(48,10)-(48,47)
(48,10)-(48,20)
(48,21)-(48,47)
(48,22)-(48,33)
(48,23)-(48,29)
(48,30)-(48,32)
(48,35)-(48,46)
(48,36)-(48,42)
(48,43)-(48,45)
*)
