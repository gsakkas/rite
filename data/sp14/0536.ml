
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | ECosSin of expr* expr
  | SinLog of expr* expr* expr;;

let max = ref 0;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine i -> sin (pi *. (eval (i, x, y)))
  | Cosine i -> cos (pi *. (eval (i, x, y)))
  | Average (i1,i2) -> ((eval (i1, x, y)) +. (eval (i2, x, y))) /. 2.0
  | Times (i1,i2) -> (eval (i1, x, y)) *. (eval (i2, x, y))
  | Thresh (i1,i2,i3,i4) ->
      if (eval (i1, x, y)) < (eval (i2, x, y))
      then eval (i3, x, y)
      else eval (i4, x, y)
  | ECosSin (a,b) ->
      (2.71 **
         (((sin (pi *. (eval (a, x, y)))) +. (cos (pi *. (eval (b, x, y)))))
            -. 1.0))
        -. 1.0
  | SinLog (a',b',c) ->
      let a = abs_float (eval (a', x, y)) in
      let b = abs_float (eval (b', x, y)) in
      let max' a b = if a > b then a else b in
      let my_log l' = let l = max 0.1 l' in (log l) /. (log 10.0) in
      if (eval (c, x, y)) < 0.0
      then ((my_log (a *. 100.0)) ** (sin ((pi *. b) *. 100.0))) -. 1.0
      else
        (-1.0) *.
          (((my_log (b *. 100.0)) ** (pi *. (sin (a *. 100.0)))) -. 1.0);;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | ECosSin of expr* expr
  | SinLog of expr* expr* expr;;

let pi = 4.0 *. (atan 1.0);;

let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine i -> sin (pi *. (eval (i, x, y)))
  | Cosine i -> cos (pi *. (eval (i, x, y)))
  | Average (i1,i2) -> ((eval (i1, x, y)) +. (eval (i2, x, y))) /. 2.0
  | Times (i1,i2) -> (eval (i1, x, y)) *. (eval (i2, x, y))
  | Thresh (i1,i2,i3,i4) ->
      if (eval (i1, x, y)) < (eval (i2, x, y))
      then eval (i3, x, y)
      else eval (i4, x, y)
  | ECosSin (a,b) ->
      (2.71 **
         (((sin (pi *. (eval (a, x, y)))) +. (cos (pi *. (eval (b, x, y)))))
            -. 1.0))
        -. 1.0
  | SinLog (a',b',c) ->
      let a = abs_float (eval (a', x, y)) in
      let b = abs_float (eval (b', x, y)) in
      let max' a b = if a > b then a else b in
      let my_log l' = let l = max' 0.1 l' in (log l) /. (log 10.0) in
      if (eval (c, x, y)) < 0.0
      then ((my_log (a *. 100.0)) ** (sin ((pi *. b) *. 100.0))) -. 1.0
      else
        (-1.0) *.
          (((my_log (b *. 100.0)) ** (pi *. (sin (a *. 100.0)))) -. 1.0);;

*)

(* changed spans
(13,10)-(13,13)
(13,10)-(13,15)
(13,14)-(13,15)
(38,30)-(38,33)
*)

(* type error slice
(13,3)-(13,17)
(13,10)-(13,13)
(13,10)-(13,15)
(38,30)-(38,33)
(38,30)-(38,40)
(42,8)-(42,14)
(42,8)-(43,72)
(42,10)-(42,13)
*)

(* all spans
(13,10)-(13,15)
(13,10)-(13,13)
(13,14)-(13,15)
(15,9)-(15,26)
(15,9)-(15,12)
(15,16)-(15,26)
(15,17)-(15,21)
(15,22)-(15,25)
(17,14)-(43,72)
(18,2)-(43,72)
(18,8)-(18,9)
(19,13)-(19,14)
(20,13)-(20,14)
(21,14)-(21,42)
(21,14)-(21,17)
(21,18)-(21,42)
(21,19)-(21,21)
(21,25)-(21,41)
(21,26)-(21,30)
(21,31)-(21,40)
(21,32)-(21,33)
(21,35)-(21,36)
(21,38)-(21,39)
(22,16)-(22,44)
(22,16)-(22,19)
(22,20)-(22,44)
(22,21)-(22,23)
(22,27)-(22,43)
(22,28)-(22,32)
(22,33)-(22,42)
(22,34)-(22,35)
(22,37)-(22,38)
(22,40)-(22,41)
(23,23)-(23,70)
(23,23)-(23,63)
(23,24)-(23,41)
(23,25)-(23,29)
(23,30)-(23,40)
(23,31)-(23,33)
(23,35)-(23,36)
(23,38)-(23,39)
(23,45)-(23,62)
(23,46)-(23,50)
(23,51)-(23,61)
(23,52)-(23,54)
(23,56)-(23,57)
(23,59)-(23,60)
(23,67)-(23,70)
(24,21)-(24,59)
(24,21)-(24,38)
(24,22)-(24,26)
(24,27)-(24,37)
(24,28)-(24,30)
(24,32)-(24,33)
(24,35)-(24,36)
(24,42)-(24,59)
(24,43)-(24,47)
(24,48)-(24,58)
(24,49)-(24,51)
(24,53)-(24,54)
(24,56)-(24,57)
(26,6)-(28,26)
(26,9)-(26,46)
(26,9)-(26,26)
(26,10)-(26,14)
(26,15)-(26,25)
(26,16)-(26,18)
(26,20)-(26,21)
(26,23)-(26,24)
(26,29)-(26,46)
(26,30)-(26,34)
(26,35)-(26,45)
(26,36)-(26,38)
(26,40)-(26,41)
(26,43)-(26,44)
(27,11)-(27,26)
(27,11)-(27,15)
(27,16)-(27,26)
(27,17)-(27,19)
(27,21)-(27,22)
(27,24)-(27,25)
(28,11)-(28,26)
(28,11)-(28,15)
(28,16)-(28,26)
(28,17)-(28,19)
(28,21)-(28,22)
(28,24)-(28,25)
(30,6)-(33,14)
(30,6)-(32,20)
(30,12)-(30,14)
(30,7)-(30,11)
(31,9)-(32,19)
(31,10)-(31,76)
(31,11)-(31,41)
(31,12)-(31,15)
(31,16)-(31,40)
(31,17)-(31,19)
(31,23)-(31,39)
(31,24)-(31,28)
(31,29)-(31,38)
(31,30)-(31,31)
(31,33)-(31,34)
(31,36)-(31,37)
(31,45)-(31,75)
(31,46)-(31,49)
(31,50)-(31,74)
(31,51)-(31,53)
(31,57)-(31,73)
(31,58)-(31,62)
(31,63)-(31,72)
(31,64)-(31,65)
(31,67)-(31,68)
(31,70)-(31,71)
(32,15)-(32,18)
(33,11)-(33,14)
(35,6)-(43,72)
(35,14)-(35,41)
(35,14)-(35,23)
(35,24)-(35,41)
(35,25)-(35,29)
(35,30)-(35,40)
(35,31)-(35,33)
(35,35)-(35,36)
(35,38)-(35,39)
(36,6)-(43,72)
(36,14)-(36,41)
(36,14)-(36,23)
(36,24)-(36,41)
(36,25)-(36,29)
(36,30)-(36,40)
(36,31)-(36,33)
(36,35)-(36,36)
(36,38)-(36,39)
(37,6)-(43,72)
(37,15)-(37,43)
(37,17)-(37,43)
(37,21)-(37,43)
(37,24)-(37,29)
(37,24)-(37,25)
(37,28)-(37,29)
(37,35)-(37,36)
(37,42)-(37,43)
(38,6)-(43,72)
(38,17)-(38,65)
(38,22)-(38,65)
(38,30)-(38,40)
(38,30)-(38,33)
(38,34)-(38,37)
(38,38)-(38,40)
(38,44)-(38,65)
(38,44)-(38,51)
(38,45)-(38,48)
(38,49)-(38,50)
(38,55)-(38,65)
(38,56)-(38,59)
(38,60)-(38,64)
(39,6)-(43,72)
(39,9)-(39,31)
(39,9)-(39,25)
(39,10)-(39,14)
(39,15)-(39,24)
(39,16)-(39,17)
(39,19)-(39,20)
(39,22)-(39,23)
(39,28)-(39,31)
(40,11)-(40,71)
(40,11)-(40,64)
(40,34)-(40,36)
(40,12)-(40,33)
(40,13)-(40,19)
(40,20)-(40,32)
(40,21)-(40,22)
(40,26)-(40,31)
(40,37)-(40,63)
(40,38)-(40,41)
(40,42)-(40,62)
(40,43)-(40,52)
(40,44)-(40,46)
(40,50)-(40,51)
(40,56)-(40,61)
(40,68)-(40,71)
(42,8)-(43,72)
(42,8)-(42,14)
(42,10)-(42,13)
(43,10)-(43,72)
(43,11)-(43,64)
(43,34)-(43,36)
(43,12)-(43,33)
(43,13)-(43,19)
(43,20)-(43,32)
(43,21)-(43,22)
(43,26)-(43,31)
(43,37)-(43,63)
(43,38)-(43,40)
(43,44)-(43,62)
(43,45)-(43,48)
(43,49)-(43,61)
(43,50)-(43,51)
(43,55)-(43,60)
(43,68)-(43,71)
*)
