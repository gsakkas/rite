
let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  ((List.append (clone 0 (len2 - len1)) l1),
    (List.append (clone 0 (len1 - len2)) l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (i,l) ->
          (match x with
           | (x1,x2) ->
               ((((x1 + x2) + i) / 10), ((((x1 + x2) + i) mod 10) :: l))) in
    let base = (0, []) in
    let args = List.rev (List.combine (0 :: l1) (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l = if i > 0 then bigAdd l (mulByDigit (i - 1) l);;


(* fix

let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  ((List.append (clone 0 (len2 - len1)) l1),
    (List.append (clone 0 (len1 - len2)) l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (i,l) ->
          (match x with
           | (x1,x2) ->
               ((((x1 + x2) + i) / 10), ((((x1 + x2) + i) mod 10) :: l))) in
    let base = (0, []) in
    let args = List.rev (List.combine (0 :: l1) (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  match i with | 0 -> l | _ -> bigAdd l (mulByDigit (i - 1) l);;

*)

(* changed spans
(26,25)-(26,70)
(26,28)-(26,33)
(26,32)-(26,33)
*)

(* type error slice
(11,36)-(11,74)
(11,50)-(11,60)
(11,50)-(11,62)
(11,68)-(11,74)
(13,3)-(24,36)
(13,11)-(24,34)
(13,14)-(24,34)
(14,2)-(24,34)
(24,2)-(24,12)
(24,2)-(24,34)
(26,25)-(26,70)
(26,39)-(26,45)
(26,39)-(26,70)
*)

(* all spans
(2,14)-(2,64)
(2,16)-(2,64)
(2,20)-(2,64)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,36)
(2,42)-(2,64)
(2,42)-(2,43)
(2,47)-(2,64)
(2,48)-(2,53)
(2,54)-(2,55)
(2,56)-(2,63)
(2,57)-(2,58)
(2,61)-(2,62)
(4,12)-(8,45)
(4,15)-(8,45)
(5,2)-(8,45)
(5,13)-(5,27)
(5,13)-(5,24)
(5,25)-(5,27)
(6,2)-(8,45)
(6,13)-(6,27)
(6,13)-(6,24)
(6,25)-(6,27)
(7,2)-(8,45)
(7,3)-(7,43)
(7,4)-(7,15)
(7,16)-(7,39)
(7,17)-(7,22)
(7,23)-(7,24)
(7,25)-(7,38)
(7,26)-(7,30)
(7,33)-(7,37)
(7,40)-(7,42)
(8,4)-(8,44)
(8,5)-(8,16)
(8,17)-(8,40)
(8,18)-(8,23)
(8,24)-(8,25)
(8,26)-(8,39)
(8,27)-(8,31)
(8,34)-(8,38)
(8,41)-(8,43)
(10,19)-(11,74)
(11,2)-(11,74)
(11,8)-(11,9)
(11,23)-(11,25)
(11,36)-(11,74)
(11,39)-(11,44)
(11,39)-(11,40)
(11,43)-(11,44)
(11,50)-(11,62)
(11,50)-(11,60)
(11,61)-(11,62)
(11,68)-(11,74)
(11,68)-(11,69)
(11,73)-(11,74)
(13,11)-(24,34)
(13,14)-(24,34)
(14,2)-(24,34)
(14,11)-(23,51)
(15,4)-(23,51)
(15,10)-(20,73)
(15,12)-(20,73)
(16,6)-(20,73)
(16,12)-(16,13)
(18,10)-(20,73)
(18,17)-(18,18)
(20,15)-(20,72)
(20,16)-(20,38)
(20,17)-(20,32)
(20,18)-(20,27)
(20,19)-(20,21)
(20,24)-(20,26)
(20,30)-(20,31)
(20,35)-(20,37)
(20,40)-(20,71)
(20,41)-(20,65)
(20,42)-(20,57)
(20,43)-(20,52)
(20,44)-(20,46)
(20,49)-(20,51)
(20,55)-(20,56)
(20,62)-(20,64)
(20,69)-(20,70)
(21,4)-(23,51)
(21,15)-(21,22)
(21,16)-(21,17)
(21,19)-(21,21)
(22,4)-(23,51)
(22,15)-(22,58)
(22,15)-(22,23)
(22,24)-(22,58)
(22,25)-(22,37)
(22,38)-(22,47)
(22,39)-(22,40)
(22,44)-(22,46)
(22,48)-(22,57)
(22,49)-(22,50)
(22,54)-(22,56)
(23,4)-(23,51)
(23,18)-(23,44)
(23,18)-(23,32)
(23,33)-(23,34)
(23,35)-(23,39)
(23,40)-(23,44)
(23,48)-(23,51)
(24,2)-(24,34)
(24,2)-(24,12)
(24,13)-(24,34)
(24,14)-(24,17)
(24,18)-(24,33)
(24,19)-(24,26)
(24,27)-(24,29)
(24,30)-(24,32)
(26,19)-(26,70)
(26,21)-(26,70)
(26,25)-(26,70)
(26,28)-(26,33)
(26,28)-(26,29)
(26,32)-(26,33)
(26,39)-(26,70)
(26,39)-(26,45)
(26,46)-(26,47)
(26,48)-(26,70)
(26,49)-(26,59)
(26,60)-(26,67)
(26,61)-(26,62)
(26,65)-(26,66)
(26,68)-(26,69)
*)
