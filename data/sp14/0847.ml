
let rec digitsOfInt n =
  let ns = [] in
  match n with
  | 0 -> ns
  | n -> if n < 0 then [] else (n mod 10) :: (digitsOfInt (n / 10));;

let rec digitalRoot n = if n < 10 then n else digitsOfInt n;;


(* fix

let rec digitsOfInt n =
  let ns = [] in
  match n with
  | 0 -> ns
  | n -> if n < 0 then [] else (n mod 10) :: (digitsOfInt (n / 10));;

let rec sumList xs =
  match xs with | [] -> 0 | xs -> (List.hd xs) + (sumList (List.tl xs));;

let rec digitalRoot n = sumList (digitsOfInt n);;

*)

(* changed spans
(8,20)-(8,59)
(8,24)-(8,59)
(8,27)-(8,28)
(8,27)-(8,33)
(8,31)-(8,33)
(8,39)-(8,40)
(8,46)-(8,57)
*)

(* type error slice
(6,31)-(6,67)
(6,45)-(6,67)
(6,46)-(6,57)
(8,24)-(8,59)
(8,27)-(8,28)
(8,27)-(8,33)
(8,31)-(8,33)
(8,39)-(8,40)
(8,46)-(8,57)
(8,46)-(8,59)
*)

(* all spans
(2,20)-(6,67)
(3,2)-(6,67)
(3,11)-(3,13)
(4,2)-(6,67)
(4,8)-(4,9)
(5,9)-(5,11)
(6,9)-(6,67)
(6,12)-(6,17)
(6,12)-(6,13)
(6,16)-(6,17)
(6,23)-(6,25)
(6,31)-(6,67)
(6,31)-(6,41)
(6,32)-(6,33)
(6,38)-(6,40)
(6,45)-(6,67)
(6,46)-(6,57)
(6,58)-(6,66)
(6,59)-(6,60)
(6,63)-(6,65)
(8,20)-(8,59)
(8,24)-(8,59)
(8,27)-(8,33)
(8,27)-(8,28)
(8,31)-(8,33)
(8,39)-(8,40)
(8,46)-(8,59)
(8,46)-(8,57)
(8,58)-(8,59)
*)
