
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = if (List.length sl) > 1 then a ^ (sep ^ x) else a ^ x in
      let base = if (List.length sl) > 1 then h else h in
      let l = t in List.fold_left f base l;;

let stringOfList f l = List.map (fun a  -> a l) sepConcat;;


(* fix

let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = if (List.length sl) > 1 then a ^ (sep ^ x) else a ^ x in
      let base = h in let l = t in List.fold_left f base l;;

let stringOfList f l = sepConcat ";" (List.map f l);;

*)

(* changed spans
(7,17)-(7,54)
(7,20)-(7,36)
(7,20)-(7,40)
(7,21)-(7,32)
(7,33)-(7,35)
(7,39)-(7,40)
(7,53)-(7,54)
(10,23)-(10,31)
(10,32)-(10,47)
(10,43)-(10,44)
(10,43)-(10,46)
(10,48)-(10,57)
*)

(* type error slice
(2,3)-(8,44)
(2,18)-(8,42)
(10,23)-(10,31)
(10,23)-(10,57)
(10,48)-(10,57)
*)

(* all spans
(2,18)-(8,42)
(2,22)-(8,42)
(3,2)-(8,42)
(3,8)-(3,10)
(4,10)-(4,12)
(6,6)-(8,42)
(6,12)-(6,71)
(6,14)-(6,71)
(6,18)-(6,71)
(6,21)-(6,41)
(6,21)-(6,37)
(6,22)-(6,33)
(6,34)-(6,36)
(6,40)-(6,41)
(6,47)-(6,60)
(6,49)-(6,50)
(6,47)-(6,48)
(6,51)-(6,60)
(6,56)-(6,57)
(6,52)-(6,55)
(6,58)-(6,59)
(6,66)-(6,71)
(6,68)-(6,69)
(6,66)-(6,67)
(6,70)-(6,71)
(7,6)-(8,42)
(7,17)-(7,54)
(7,20)-(7,40)
(7,20)-(7,36)
(7,21)-(7,32)
(7,33)-(7,35)
(7,39)-(7,40)
(7,46)-(7,47)
(7,53)-(7,54)
(8,6)-(8,42)
(8,14)-(8,15)
(8,19)-(8,42)
(8,19)-(8,33)
(8,34)-(8,35)
(8,36)-(8,40)
(8,41)-(8,42)
(10,17)-(10,57)
(10,19)-(10,57)
(10,23)-(10,57)
(10,23)-(10,31)
(10,32)-(10,47)
(10,43)-(10,46)
(10,43)-(10,44)
(10,45)-(10,46)
(10,48)-(10,57)
*)
