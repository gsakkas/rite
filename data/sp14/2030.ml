
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;

let rec mulByDigit i l =
  let f a x =
    match a with
    | [] -> (i * x) :: a
    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in
  let base = [] in
  let args = List.rev (0 :: l) in removeZero List.fold_left f base args;;


(* fix

let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;

let rec mulByDigit i l =
  let f a x =
    match a with
    | [] -> (i * x) :: a
    | h::t -> [(i * x) + (h / 10); h mod 10] @ t in
  let base = [] in
  let args = List.rev (0 :: l) in removeZero (List.fold_left f base args);;

*)

(* changed spans
(11,34)-(11,71)
(11,45)-(11,59)
*)

(* type error slice
(3,2)-(3,57)
(3,8)-(3,9)
(3,36)-(3,46)
(3,36)-(3,48)
(3,56)-(3,57)
(11,34)-(11,44)
(11,34)-(11,71)
*)

(* all spans
(2,19)-(3,57)
(3,2)-(3,57)
(3,8)-(3,9)
(3,23)-(3,25)
(3,36)-(3,48)
(3,36)-(3,46)
(3,47)-(3,48)
(3,56)-(3,57)
(5,19)-(11,71)
(5,21)-(11,71)
(6,2)-(11,71)
(6,8)-(9,48)
(6,10)-(9,48)
(7,4)-(9,48)
(7,10)-(7,11)
(8,12)-(8,24)
(8,12)-(8,19)
(8,13)-(8,14)
(8,17)-(8,18)
(8,23)-(8,24)
(9,14)-(9,48)
(9,45)-(9,46)
(9,14)-(9,44)
(9,15)-(9,33)
(9,15)-(9,22)
(9,16)-(9,17)
(9,20)-(9,21)
(9,25)-(9,33)
(9,26)-(9,27)
(9,30)-(9,32)
(9,35)-(9,43)
(9,35)-(9,36)
(9,41)-(9,43)
(9,47)-(9,48)
(10,2)-(11,71)
(10,13)-(10,15)
(11,2)-(11,71)
(11,13)-(11,30)
(11,13)-(11,21)
(11,22)-(11,30)
(11,23)-(11,24)
(11,28)-(11,29)
(11,34)-(11,71)
(11,34)-(11,44)
(11,45)-(11,59)
(11,60)-(11,61)
(11,62)-(11,66)
(11,67)-(11,71)
*)
