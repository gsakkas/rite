
let listReverse l =
  let rec lr l' = function | [] -> l' | h::t -> lr (h :: l') t in lr [] l;;

let rec digitsOfInt n =
  let ns = [] in
  match n with
  | h::t -> listReverse ns
  | 0 -> ns
  | n -> if n < 0 then [] else (n mod 10) :: (digitsOfInt (n / 10));;


(* fix

let listReverse l =
  let rec lr l' = function | [] -> l' | h::t -> lr (h :: l') t in lr [] l;;

let rec digitsOfInt n =
  let ns = [] in
  match n with
  | _ -> listReverse ns
  | 0 -> ns
  | n -> if n < 0 then [] else (n mod 10) :: (digitsOfInt (n / 10));;

*)

(* changed spans
(7,2)-(10,67)
*)

(* type error slice
(5,3)-(10,69)
(5,20)-(10,67)
(7,2)-(10,67)
(7,8)-(7,9)
(10,12)-(10,13)
(10,12)-(10,17)
(10,16)-(10,17)
(10,45)-(10,67)
(10,46)-(10,57)
(10,58)-(10,66)
*)

(* all spans
(2,16)-(3,73)
(3,2)-(3,73)
(3,13)-(3,62)
(3,18)-(3,62)
(3,35)-(3,37)
(3,48)-(3,62)
(3,48)-(3,50)
(3,51)-(3,60)
(3,52)-(3,53)
(3,57)-(3,59)
(3,61)-(3,62)
(3,66)-(3,73)
(3,66)-(3,68)
(3,69)-(3,71)
(3,72)-(3,73)
(5,20)-(10,67)
(6,2)-(10,67)
(6,11)-(6,13)
(7,2)-(10,67)
(7,8)-(7,9)
(8,12)-(8,26)
(8,12)-(8,23)
(8,24)-(8,26)
(9,9)-(9,11)
(10,9)-(10,67)
(10,12)-(10,17)
(10,12)-(10,13)
(10,16)-(10,17)
(10,23)-(10,25)
(10,31)-(10,67)
(10,31)-(10,41)
(10,32)-(10,33)
(10,38)-(10,40)
(10,45)-(10,67)
(10,46)-(10,57)
(10,58)-(10,66)
(10,59)-(10,60)
(10,63)-(10,65)
*)
