------------------------------------------------------------------
File "2085.ml", line 28, characters 29-42:
This expression is not a function, it cannot be applied
Relevant code: (List.rev l1)
------------------------------------------------------------------
Triaged the following locations:
File "2085.ml", line 28, characters 15-27:
And modified the following location:
File "2085.ml", line 28, characters 30-38:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    List.combine
If you ignore other surrounding code, try replacing
    List.rev
with
    List.combine
The actual replacement has type
    'l list -> 'm list -> ('l * 'm) list
within context
    fun (l1, l2) ->
      (let f a x =
          let (val1, val2) = x in
            let (lastCarry, lastTupleSum) = a in
            let tupleSum = (val1 + val2) + lastCarry in
            let newCarry = tupleSum / 10 in
            let nextDigit = (mod tupleSum 10) in newCarry, nextDigit :: lastTupleSum
          in
          let base = 0, [] in
          let args = ((List.combine; [[...]]) ((List.combine l1) (List.rev l2))) in
          let (_, res) = (List.fold_left f base  args) in res)
==============================
Triaged the following locations:
File "2085.ml", line 28, characters 15-27:
And modified the following location:
File "2085.ml", line 28, characters 29-42:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    List.combine
If you ignore other surrounding code, try replacing
    (List.rev l1)
with
    (List.rev l1); [[...]]
The actual replacement has type
    'd list -> 'e
within context
    fun (l1, l2) ->
      (let f a x =
          let (val1, val2) = x in
            let (lastCarry, lastTupleSum) = a in
            let tupleSum = (val1 + val2) + lastCarry in
            let newCarry = tupleSum / 10 in
            let nextDigit = (mod tupleSum 10) in newCarry, nextDigit :: lastTupleSum
          in
          let base = 0, [] in
          let args =
          ((List.combine; [[...]]) (((List.rev l1); [[...]]) (List.rev l2)))
          in
          let (_, res) = (List.fold_left f base  args) in res)
==============================
Triaged the following locations:
File "2085.ml", line 28, characters 15-27:
And modified the following location:
File "2085.ml", line 28, characters 43-56:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    List.combine
If you ignore other surrounding code, try replacing
    ((List.rev l1) (List.rev l2))
with
    (List.rev l1)
The actual replacement has type
    'o list
within context
    fun (l1, l2) ->
      (let f a x =
          let (val1, val2) = x in
            let (lastCarry, lastTupleSum) = a in
            let tupleSum = (val1 + val2) + lastCarry in
            let newCarry = tupleSum / 10 in
            let nextDigit = (mod tupleSum 10) in newCarry, nextDigit :: lastTupleSum
          in
          let base = 0, [] in
          let args = ((List.combine; [[...]]) (List.rev l1)) in
          let (_, res) = (List.fold_left f base  args) in res)
==============================
