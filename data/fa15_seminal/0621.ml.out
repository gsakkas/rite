------------------------------------------------------------------
File "0621.ml", line 24, characters 33-34:
This expression has type (int * 'a) list -> (int * int) list -> int * int
but is here used with type
  (int * 'a) list -> (int * int) list -> (int * 'a) list
Relevant code: f
------------------------------------------------------------------
File "0621.ml", line 24, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ((int * 'b) list -> (int * int) list -> int * int) ->
    'c list -> ('d * 'e) list -> 'f * 'g
within context
    let f a x = let (a1, a2) :: t' = a in (match x with 
                                           | [] -> (if a1 = 0 then 0, 0 else 0, a1)
                                           | (x1, x2) :: t ->
                                             (let value = (a1 + x1) + x2 in
                                                   (if value > 9 then 1, value - 10
                                                       else
                                                       0,
                                                         value))) in let base = []
      in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
