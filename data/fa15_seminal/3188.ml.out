------------------------------------------------------------------
File "3188.ml", line 28, characters 33-34:
This expression has type int * int list -> int * int -> int list * int list
but is here used with type int * int list -> int * int -> int * int list
Relevant code: f
------------------------------------------------------------------
File "3188.ml", line 28, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    'a list * 'b list -> 'c * 'd -> 'a list * 'b list
within context
    let f a x =
      let (x1, x2) = x in
        let (a1, a2) = a in
        [((x1 + x2) + a1) / 10], a2 @ [(mod ((x1 + x2) + a1) 10)]
      in
      let base = [], [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "3188.ml", line 28, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int * int -> int list * int list) ->
    'e list * 'f list -> ('g * 'h) list -> 'i * 'j
within context
    let f a x =
      let (x1, x2) = x in
        let (a1, a2) = a in
        [((x1 + x2) + a1) / 10], a2 @ [(mod ((x1 + x2) + a1) 10)]
      in
      let base = [], [] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "3188.ml", line 22, characters 10-131:
Try replacing
    fun a
      x ->
        (let (x1, x2) = x in
            let (a1, a2) = a in
            [((x1 + x2) + a1) / 10], a2 @ [(mod ((x1 + x2) + a1) 10)])
with
    fun a
      x ->
        (let (x1, x2) = x in
            let (a1, a2) = a in
            [((x1 + x2) + a1) / 10], a2 @ [(mod ((x1 + x2) + a1) 10)]);
    [[...]]
of type
    'k
==============================
