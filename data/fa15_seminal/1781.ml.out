------------------------------------------------------------------
File "1781.ml", line 19, characters 24-41:
This expression has type float but is here used with type int
Relevant code: (eval (e1, x, y))
------------------------------------------------------------------
Triaged the following locations:
File "1781.ml", line 19, characters 63-65:
And modified the following location:
File "1781.ml", line 19, characters 42-43:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /.
If you ignore other surrounding code, try replacing
    +
with
    +; [[...]]
The actual replacement has type
    float -> float -> 'a
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +; [[...]] (eval (e2, x, y)))
                                      /.; [[...]] 2)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))) ;; 
==============================
Triaged the following locations:
File "1781.ml", line 19, characters 63-65:
And modified the following location:
File "1781.ml", line 19, characters 42-43:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /.
If you ignore other surrounding code, try replacing
    +
with
    <
The actual replacement has type
    float -> float -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                ((eval (e1, x, y)) < (eval (e2, x, y))
                                      /.; [[...]] 2)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))) ;; 
==============================
Triaged the following locations:
File "1781.ml", line 17, characters 15-44:
File "1781.ml", line 18, characters 17-46:
File "1781.ml", line 20, characters 21-59:
File "1781.ml", line 22, characters 6-100:
And modified the following location:
File "1781.ml", line 19, characters 63-65:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    /.
with
    /.; [[...]]
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) ->
                                ((eval (e1, x, y)) + (eval (e2, x, y))
                                      /.; [[...]] 2)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1781.ml", line 17, characters 15-44:
File "1781.ml", line 18, characters 17-46:
File "1781.ml", line 20, characters 21-59:
File "1781.ml", line 22, characters 6-100:
And modified the following location:
File "1781.ml", line 19, characters 63-65:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    /.
with
    +
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) ->
                                ((eval (e1, x, y)) + (eval (e2, x, y))) + 2
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
