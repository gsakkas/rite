------------------------------------------------------------------
File "0737.ml", line 27, characters 75-76:
This expression has type int but is here used with type float
Relevant code: 1
------------------------------------------------------------------
File "0737.ml", line 27, characters 75-76:
Try replacing
    1
with
    1; [[...]]
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Golden e' ->
                                (cos
                                    (((eval (e', x, y)) ** 2.0 -. (eval (e', x, y)))
                                        -. (1; [[...]])))
                              | MeanPi (e1, e2, e3) ->
                                (cos
                                    ((((eval (e1, x, y)) +. (eval (e2, x, y)))
                                            +. (eval (e3, x, y)))
                                        /. pi))) ;; 
==============================
File "0737.ml", line 27, characters 72-74:
Try replacing
    -.
with
    -.; [[...]]
of type
    float -> int -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | Golden e' ->
                                (cos
                                    ((eval (e', x, y)) ** 2.0 -. (eval (e', x, y))
                                        -.; [[...]] 1))
                              | MeanPi (e1, e2, e3) ->
                                (cos
                                    ((((eval (e1, x, y)) +. (eval (e2, x, y)))
                                            +. (eval (e3, x, y)))
                                        /. pi))) ;; 
==============================
