------------------------------------------------------------------
File "2262.ml", line 14, characters 14-18:
This function is applied to too many arguments,
maybe you forgot a `;'
Relevant code: mult
------------------------------------------------------------------
File "2262.ml", line 14, characters 21-22:
Try replacing
    (mult i l)
with
    (mult i)
of type
    int list
within context
    let rec mulByDigit i l = let mult (i, l) = let f a x = (match a with 
                                                            | (o, l) ->
                                                              (let prod = x + o in
                                                                    (if prod < 10
                                                                        then
                                                                        0, prod :: l
                                                                        else
                                                                        1,
                                                                          prod - 10
                                                                              ::
                                                                              l))) in let
        base
        =
        0, []
        in
        let args = l in
        let (_, res) = (List.fold_left f base  args) in
        res in (removeZero (mult i)) ;; 
==============================
File "2262.ml", line 14, characters 19-20:
Try replacing
    (mult i l)
with
    (mult (i, l))
of type
    int list
within context
    let rec mulByDigit i l = let mult (i, l) = let f a x = (match a with 
                                                            | (o, l) ->
                                                              (let prod = x + o in
                                                                    (if prod < 10
                                                                        then
                                                                        0, prod :: l
                                                                        else
                                                                        1,
                                                                          prod - 10
                                                                              ::
                                                                              l))) in let
        base
        =
        0, []
        in
        let args = l in
        let (_, res) = (List.fold_left f base  args) in
        res in (removeZero (mult (i, l))) ;; 
==============================
File "2262.ml", line 6, characters 11-16:
Try replacing
    fun (i, l) -> (let f a x = (match a with 
                                | (o, l) ->
                                  (let prod = x + o in
                                        (if prod < 10 then 0, prod :: l else
                                            1,
                                              prod - 10 ::
                                                  l))) in let base = 0, [] in
          let args = l in let (_, res) = (List.fold_left f base  args) in res)
with
    fun i l -> (let f a x = (match a with 
                             | (o, l) ->
                               (let prod = x + o in
                                     (if prod < 10 then 0, prod :: l else
                                         1,
                                           prod - 10 ::
                                               l))) in let base = 0, [] in
            let args = l in let (_, res) = (List.fold_left f base  args) in res)
of type
    'd -> int list -> int list
==============================
File "2262.ml", line 13, characters 34-48:
Try replacing
    List.fold_left
with
    i
of type
    (int * int list -> int -> int * int list) ->
    int * 'b1 list -> 'c1 -> 'd1 * 'e1
within context
    let f a x = (match a with 
                 | (o, l) ->
                   (let prod = x + o in
                         (if prod < 10 then 0, prod :: l else
                             1,
                               prod - 10 ::
                                   l))) in let base = 0, [] in
      let args = l in let (_, res) = (i f base  args) in res
==============================
