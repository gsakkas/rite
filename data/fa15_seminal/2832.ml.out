------------------------------------------------------------------
File "2832.ml", line 2, characters 70-74:
This expression has type 'a -> 'a but is here used with type 'a -> 'b -> 'a
Relevant code: base
------------------------------------------------------------------
File "2832.ml", line 2, characters 24-27:
Try replacing
    fun x a x -> a
with
    fun x x a -> a
of type
    'c -> 'd -> 'e -> 'e
within context
    let pipe fs = let f a x x a = a in let base f = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 22-25:
Try replacing
    fun x a x -> a
with
    fun a x x -> a
of type
    'f -> 'g -> 'h -> 'f
within context
    let pipe fs = let f a a x x = a in let base f = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 24-27:
Try replacing
    fun a x -> a
with
    fun x a -> a
of type
    'i -> 'j -> 'j
within context
    let pipe fs = let f a x x a = a in let base f = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 22-25:
Try replacing
    fun a x a x -> a
with
    fun a a x x -> a
of type
    'k -> 'l -> 'm -> 'n -> 'l
within context
    let pipe fs = let f a a x x = a in let base f = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 24-27:
Try replacing
    fun a x a x -> a
with
    fun a x x a -> a
of type
    'o -> 'p -> 'q -> 'r -> 'r
within context
    let pipe fs = let f a x x a = a in let base f = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 44-49:
Try replacing
    fun f -> f
with
    fun _ f -> f
of type
    's -> 't -> 't
within context
    let pipe fs =
    let f a x a x = a in let base _ f = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 44-49:
Try replacing
    fun f -> f
with
    fun f _ -> f
of type
    'u -> 'v -> 'u
within context
    let pipe fs =
    let f a x a x = a in let base f _ = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 53-69:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'w -> 'x list -> 'w
within context
    let pipe fs =
    let f a x a x = a in let base f = f in (List.fold_left (f base fs))
    ;; 
==============================
File "2832.ml", line 2, characters 53-67:
Try replacing
    List.fold_left
with
    f
of type
    ('y -> 'z -> 'a1 -> 'b1 -> 'a1) -> ('c1 -> 'c1) -> 'd1 -> 'e1 -> 'd1
within context
    let pipe fs = let f a x a x = a in let base f = f in (f f base  fs) ;; 
==============================
File "2832.ml", line 2, characters 53-67:
Try replacing
    List.fold_left
with
    base
of type
    (('f1 -> 'f1) -> 'g1 -> 'h1 -> 'i1 -> 'h1) ->
    ('f1 -> 'f1) -> 'g1 -> 'h1 -> 'i1 -> 'h1
within context
    let pipe fs = let f a x a x = a in let base f = f in (base f base  fs) ;; 
==============================
File "2832.ml", line 2, characters 70-74:
Try replacing
    base
with
    f
of type
    ('j1 -> 'k1 -> 'j1) -> 'l1 -> 'j1 -> 'k1 -> 'j1
within context
    let pipe fs = let f a x a x = a in let base f = f in (List.fold_left f f  fs)
    ;; 
==============================
File "2832.ml", line 2, characters 30-31:
Try replacing
    a
with
    fs
of type
    'm1 list
within context
    let f a x a x = fs in let base f = f in (List.fold_left f base  fs)
==============================
File "2832.ml", line 2, characters 30-31:
Try replacing
    a
with
    x
of type
    'n1
within context
    let f a x a x = x in let base f = f in (List.fold_left f base  fs)
==============================
File "2832.ml", line 2, characters 30-31:
Try replacing
    a
with
    List.fold_left
of type
    ('o1 -> 'p1 -> 'o1) -> 'o1 -> 'p1 list -> 'o1
within context
    let f a x a x = List.fold_left in let base f = f in (List.fold_left f base  fs)
==============================
File "2832.ml", line 2, characters 48-49:
Try replacing
    f
with
    List.fold_left
of type
    ('q1 -> 'r1 -> 'q1) -> 'q1 -> 'r1 list -> 'q1
within context
    let pipe fs =
    let f a x a x = a in let base f = List.fold_left in (List.fold_left f base  fs)
    ;; 
==============================
