------------------------------------------------------------------
File "2339.ml", line 5, characters 56-57:
This expression has type 'a but is here used with type
  'a * 'b * ('b * 'c) list
Relevant code: d
------------------------------------------------------------------
File "2339.ml", line 5, characters 56-59:
Try replacing
    (assoc d k  t)
with
    (assoc (d, k, t))
of type
    'd
within context
    let rec assoc (d, k, l) = (match l with 
                               | [] -> d
                               | h :: t ->
                                 (let (f, s) = h in
                                       (if k = f then s else
                                           (assoc (d, k, t))))) ;; 
==============================
File "2339.ml", line 2, characters 14-21:
Try replacing
    fun (d, k, l) -> (match l with 
                      | [] -> d
                      | h :: t ->
                        (let (f, s) = h in (if k = f then s else (assoc d k  t))))
with
    fun d k l -> (match l with 
                  | [] -> d
                  | h :: t ->
                    (let (f, s) = h in (if k = f then s else (assoc d k  t))))
of type
    'e -> 'f -> ('f * 'e) list -> 'e
==============================
