------------------------------------------------------------------
File "3146.ml", line 24, characters 41-59:
This expression has type int * int but is here used with type 'a list
Relevant code: ((b + c), (b + c))
------------------------------------------------------------------
Triaged the following locations:
File "3146.ml", line 25, characters 4-110:
And modified the following location:
File "3146.ml", line 24, characters 60-61:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    @
with
    @; [[...]]
The actual replacement has type
    int * int -> 'b -> 'c
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x = let (b :: b', c :: c') = x in (b + c, b + c @; [[...]] a) in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "3146.ml", line 25, characters 4-110:
And modified the following location:
File "3146.ml", line 24, characters 60-61:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    @
with
    <
The actual replacement has type
    int * int -> int * int -> bool
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x = let (b :: b', c :: c') = x in (b + c, b + c) < a in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "3146.ml", line 25, characters 4-110:
And modified the following location:
File "3146.ml", line 24, characters 60-61:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    @
with
    =
The actual replacement has type
    int * int -> int * int -> bool
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x = let (b :: b', c :: c') = x in (b + c, b + c) = a in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "3146.ml", line 25, characters 4-110:
And modified the following location:
File "3146.ml", line 24, characters 60-61:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    @
with
    >
The actual replacement has type
    int * int -> int * int -> bool
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x = let (b :: b', c :: c') = x in (b + c, b + c) > a in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "3146.ml", line 25, characters 4-110:
And modified the following location:
File "3146.ml", line 24, characters 41-59:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    b + c, b + c
with
    b + c, b + c; [[...]]
The actual replacement has type
    'd list
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x = let (b :: b', c :: c') = x in (b + c, b + c; [[...]]) @ a in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "3146.ml", line 25, characters 4-110:
And modified the following location:
File "3146.ml", line 24, characters 4-177:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x = let (b :: b', c :: c') = x in (b + c, b + c) @ a in
      let base = [], [] in
      let args = (padZero l1 l2) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'e
==============================
