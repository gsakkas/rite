------------------------------------------------------------------
File "1035.ml", line 10, characters 38-42:
This expression has type
  ((int * int * int * int) list * (int * int * int * int) list) list
but is here used with type (int * int) list
Relevant code: args
------------------------------------------------------------------
File "1035.ml", line 10, characters 31-32:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list ->
    (int * int * int * int) list * (int * int * int * int) list -> int * 'a list
within context
    let f a x =
      let (m, n) = a in
        let (c, d) = x in let z = c * d + m in z / 10, (mod z 10) :: n
      in
      let base = 0, [] in
      let args =
      (List.combine (List.rev [0, 0, 0, 0] :: l1) (List.rev [0, 0, 0, 0] :: l2))
      in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "1035.ml", line 10, characters 38-42:
Try replacing
    args
with
    args; [[...]]
of type
    (int * int) list
within context
    let f a x =
      let (m, n) = a in
        let (c, d) = x in let z = c * d + m in z / 10, (mod z 10) :: n
      in
      let base = 0, [] in
      let args =
      (List.combine (List.rev [0, 0, 0, 0] :: l1) (List.rev [0, 0, 0, 0] :: l2))
      in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "1035.ml", line 10, characters 16-30:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int * int -> int * int list) ->
    int * 'b list ->
    ((int * int * int * int) list * (int * int * int * int) list) list -> 'c * 'd
within context
    let f a x =
      let (m, n) = a in
        let (c, d) = x in let z = c * d + m in z / 10, (mod z 10) :: n
      in
      let base = 0, [] in
      let args =
      (List.combine (List.rev [0, 0, 0, 0] :: l1) (List.rev [0, 0, 0, 0] :: l2))
      in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "1035.ml", line 8, characters 4-90:
Try replacing
    (List.combine (List.rev [0, 0, 0, 0] :: l1) (List.rev [0, 0, 0, 0] :: l2))
with
    (List.combine (List.rev [0, 0, 0, 0] :: l1) (List.rev [0, 0, 0, 0] :: l2));
    [[...]]
of type
    'e
within context
    fun l1
      l2 ->
        (let f a x =
            let (m, n) = a in
              let (c, d) = x in let z = c * d + m in z / 10, (mod z 10) :: n
            in
            let base = 0, [] in
            let args =
            (List.combine
              (List.rev [0, 0, 0, 0] :: l1) (List.rev [0, 0, 0, 0] :: l2));
            [[...]]
            in
            let (_, res) = (List.fold_left f base  args) in res)
==============================
File "1035.ml", line 3, characters 8-108:
Try replacing
    fun a
      x ->
        (let (m, n) = a in
            let (c, d) = x in let z = c * d + m in z / 10, (mod z 10) :: n)
with
    fun a
      x ->
        (let (m, n) = a in
            let (c, d) = x in let z = c * d + m in z / 10, (mod z 10) :: n);
    [[...]]
of type
    'f
==============================
