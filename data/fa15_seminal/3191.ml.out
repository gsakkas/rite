------------------------------------------------------------------
File "3191.ml", line 31, characters 47-71:
This expression has type int but is here used with type 'a list
Relevant code: (((x1 + x2) + c) mod 10)
------------------------------------------------------------------
Triaged the following locations:
File "3191.ml", line 28, characters 11-52:
And modified the following location:
File "3191.ml", line 31, characters 45-46:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    [(x1 + x2) / 10 ; 0], (mod (x1 + x2) 10)
If you ignore other surrounding code, try replacing
    @
with
    @; [[...]]
The actual replacement has type
    'b -> int -> 'c
within context
    fun a
      x ->
        (let (x1, x2) = x in
            let (a1, a2) = a in
            (if (List.length a1) = 0 then
                ([(x1 + x2) / 10 ; 0], (mod (x1 + x2) 10); [[...]])
                else
                (let c :: c' = a1 in
                    a1 @ [((x1 + x2) + c) / 10],
                        (a2 @; [[...]] (mod ((x1 + x2) + c) 10)))))
==============================
Triaged the following locations:
File "3191.ml", line 28, characters 11-52:
And modified the following location:
File "3191.ml", line 31, characters 47-71:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    [(x1 + x2) / 10 ; 0], (mod (x1 + x2) 10)
If you ignore other surrounding code, try replacing
    (mod ((x1 + x2) + c) 10)
with
    (mod ((x1 + x2) + c) 10); [[...]]
The actual replacement has type
    'd list
within context
    fun a
      x ->
        (let (x1, x2) = x in
            let (a1, a2) = a in
            (if (List.length a1) = 0 then
                ([(x1 + x2) / 10 ; 0], (mod (x1 + x2) 10); [[...]])
                else
                (let c :: c' = a1 in
                    a1 @ [((x1 + x2) + c) / 10],
                        a2 @ ((mod ((x1 + x2) + c) 10); [[...]]))))
==============================
