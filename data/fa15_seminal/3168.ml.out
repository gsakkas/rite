------------------------------------------------------------------
File "3168.ml", line 26, characters 35-39:
This expression has type ('a list * 'b list) list but is here used with type
  int list * int list
Relevant code: base
------------------------------------------------------------------
File "3168.ml", line 26, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int list * int list
within context
    let f a x = let (x1, x2) = x in let (a1, a2) = a in a1 @ [x1 + x2], a2 @ [x1] in
      let base = [[], []] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "3168.ml", line 24, characters 15-25:
Try replacing
    [[], []]
with
    [[], []]; [[...]]
of type
    'c
within context
    fun l2 ->
      (let add (l1, l2) =
          let f a x =
            let (x1, x2) = x in let (a1, a2) = a in a1 @ [x1 + x2], a2 @ [x1]
            in
            let base = [[], []]; [[...]] in
            let args = (List.combine l1 l2) in
            let (_, res) = (List.fold_left f base  args) in res
          in
          (removeZero (add (padZero l1 l2))))
==============================
File "3168.ml", line 26, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list * int list -> int * int -> int list * int list) ->
    ('d list * 'e list) list -> ('f * 'g) list -> 'h * 'i
within context
    let f a x = let (x1, x2) = x in let (a1, a2) = a in a1 @ [x1 + x2], a2 @ [x1] in
      let base = [[], []] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
