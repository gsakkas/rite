------------------------------------------------------------------
File "1165.ml", line 5, characters 44-53:
This expression has type 'a * 'b * ('b * 'a) list but is here used with type
  'a * 'b * ('b * 'a)
Relevant code: (d, k, t)
------------------------------------------------------------------
File "1165.ml", line 5, characters 38-53:
Try replacing
    (if (k, d) = l then d else (assoc (d, k, t)))
with
    (if (k, d) = l then d)
of type
    unit
within context
    let rec assoc (d, k, l) = (match [k, d] with 
                               | [] -> d
                               | h :: t -> (if (k, d) = l then d)) ;; 
==============================
File "1165.ml", line 5, characters 51-52:
Try replacing
    t
with
    l
of type
    'c * 'd * ('d * 'c)
within context
    fun (d, k, l) -> (match [k, d] with 
                      | [] -> d
                      | h :: t -> (if (k, d) = l then d else (assoc (d, k, l))))
==============================
File "1165.ml", line 5, characters 51-52:
Try replacing
    t
with
    h
of type
    'e * 'f * ('f * 'e)
within context
    fun (d, k, l) -> (match [k, d] with 
                      | [] -> d
                      | h :: t -> (if (k, d) = l then d else (assoc (d, k, h))))
==============================
File "1165.ml", line 5, characters 24-25:
Try replacing
    l
with
    h
of type
    'g * 'h
within context
    let rec assoc (d, k, l) = (match [k, d] with 
                               | [] -> d
                               | h :: t ->
                                 (if (k, d) = h then d else (assoc (d, k, t)))) ;; 
==============================
