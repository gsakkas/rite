------------------------------------------------------------------
File "1172.ml", line 63, characters 22-49:
This expression has type expr but is here used with type expr * expr * expr
Relevant code: (build (rand, (depth - 1)))
------------------------------------------------------------------
File "1172.ml", line 63, characters 11-21:
Try replacing
    buildFunny
with
    buildFunny1
of type
    expr -> expr
within context
    let rec build (rand, depth) = (match (rand (0, 8)) with 
                                   | 0 ->
                                     (if (rand (0, 2)) = 0 then (buildX ()) else
                                         (buildY ()))
                                   | 1 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildSine (build (rand, depth - 1))))
                                   | 2 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildCosine (build (rand, depth - 1))))
                                   | 3 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildAverage
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 4 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildTimes
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 5 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildThresh
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 6 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildFunny1 (build (rand, depth - 1))))
                                   | 7 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildFunny1
                                           (build (rand, depth - 1))))) ;; 
==============================
File "1172.ml", line 63, characters 11-21:
Try replacing
    buildFunny
with
    buildCosine
of type
    expr -> expr
within context
    let rec build (rand, depth) = (match (rand (0, 8)) with 
                                   | 0 ->
                                     (if (rand (0, 2)) = 0 then (buildX ()) else
                                         (buildY ()))
                                   | 1 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildSine (build (rand, depth - 1))))
                                   | 2 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildCosine (build (rand, depth - 1))))
                                   | 3 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildAverage
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 4 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildTimes
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 5 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildThresh
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 6 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildCosine (build (rand, depth - 1))))
                                   | 7 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildFunny1
                                           (build (rand, depth - 1))))) ;; 
==============================
File "1172.ml", line 63, characters 11-21:
Try replacing
    buildFunny
with
    buildSine
of type
    expr -> expr
within context
    let rec build (rand, depth) = (match (rand (0, 8)) with 
                                   | 0 ->
                                     (if (rand (0, 2)) = 0 then (buildX ()) else
                                         (buildY ()))
                                   | 1 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildSine (build (rand, depth - 1))))
                                   | 2 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildCosine (build (rand, depth - 1))))
                                   | 3 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildAverage
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 4 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildTimes
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 5 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildThresh
                                           ((build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)),
                                               (build (rand, depth - 1)))))
                                   | 6 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildSine (build (rand, depth - 1))))
                                   | 7 ->
                                     (if depth = 0 then
                                         (if (rand (0, 2)) = 0 then (buildX ()) else
                                           (buildY ()))
                                         else
                                         (buildFunny1
                                           (build (rand, depth - 1))))) ;; 
==============================
