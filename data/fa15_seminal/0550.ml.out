------------------------------------------------------------------
File "0550.ml", line 3, characters 57-58:
This expression has type ('a -> 'b) -> 'c -> 'b but is here used with type
  ('a -> 'b) -> 'c -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "0550.ml", line 3, characters 10-18:
Try replacing
    fun x -> (a fs)
with
    fun x _ -> (a fs)
of type
    'd -> 'e -> 'f
within context
    let pipe fs =
    let f a x _ = (a fs) in let base fs = fs in (List.fold_left f base  fs)
    ;; 
==============================
File "0550.ml", line 3, characters 10-18:
Try replacing
    fun x -> (a fs)
with
    fun _ x -> (a fs)
of type
    'g -> 'h -> 'i
within context
    let pipe fs =
    let f a _ x = (a fs) in let base fs = fs in (List.fold_left f base  fs)
    ;; 
==============================
File "0550.ml", line 3, characters 42-58:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'j -> 'k list -> 'j
within context
    let pipe fs =
    let f a x = (a fs) in let base fs = fs in (List.fold_left (f base fs))
    ;; 
==============================
File "0550.ml", line 3, characters 42-56:
Try replacing
    List.fold_left
with
    base
of type
    (('l -> 'l) -> 'l -> 'l) -> ('l -> 'l) -> 'l -> 'l
within context
    let pipe fs = let f a x = (a fs) in let base fs = fs in (base f base  fs) ;; 
==============================
