------------------------------------------------------------------
File "2416.ml", line 21, characters 24-36:
This expression has type 'a list -> 'b list -> ('a * 'b) list
but is here used with type string
Relevant code: List.combine
------------------------------------------------------------------
Triaged the following locations:
File "2416.ml", line 22, characters 4-51:
And modified the following location:
File "2416.ml", line 21, characters 36-36:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (failwith List.combine (l1, l2))
with
    (failwith [[...]] List.combine  (l1, l2))
The actual replacement has type
    'c
within context
    let add (l1, l2) =
      let f a x = (x [0]) + (x [1]) :: a in
        let base = [] in
        let args = (failwith [[...]] List.combine  (l1, l2)) in
        [[...other program...]]
      in
      (removeZero (add (padZero l1 l2)))
==============================
Triaged the following locations:
File "2416.ml", line 22, characters 4-51:
And modified the following location:
File "2416.ml", line 21, characters 15-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    failwith
with
    failwith; [[...]]
The actual replacement has type
    ('d list -> 'e list -> ('d * 'e) list) -> 'f * 'g -> 'h
within context
    let add (l1, l2) =
      let f a x = (x [0]) + (x [1]) :: a in
        let base = [] in
        let args = ((failwith; [[...]]) List.combine (l1, l2)) in
        [[...other program...]]
      in
      (removeZero (add (padZero l1 l2)))
==============================
Triaged the following locations:
File "2416.ml", line 22, characters 4-51:
And modified the following location:
File "2416.ml", line 21, characters 4-100:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let args = (failwith List.combine (l1, l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'i
within context
    let add (l1, l2) =
      let f a x = (x [0]) + (x [1]) :: a in let base = [] in [[...other program...]]
      in
      (removeZero (add (padZero l1 l2)))
==============================
