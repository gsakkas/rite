------------------------------------------------------------------
File "2861.ml", line 4, characters 38-42:
This expression has type 'a list list but is here used with type 'a
Relevant code: base
------------------------------------------------------------------
File "2861.ml", line 4, characters 21-37:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'b -> 'c list -> 'b
within context
    let pipe fs = let f a x = (match fs with 
                               | x :: y ->
                                 x) in let base = [fs] in
      (List.fold_left (f base fs)) ;; 
==============================
File "2861.ml", line 3, characters 38-39:
Try replacing
    x
with
    a
of type
    'd
within context
    fun fs -> (let f a x = (match fs with 
                            | x :: y ->
                              a) in let base = [fs] in (List.fold_left f base  fs))
==============================
