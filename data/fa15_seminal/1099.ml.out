------------------------------------------------------------------
File "1099.ml", line 16, characters 63-75:
This expression has type int but is here used with type int list
Relevant code: (sum mod 10)
------------------------------------------------------------------
Triaged the following locations:
File "1099.ml", line 17, characters 4-120:
And modified the following location:
File "1099.ml", line 16, characters 63-75:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (mod sum 10)
with
    (mod sum 10); [[...]]
The actual replacement has type
    int list
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x =
              let sum = ((fst x) + (snd x)) + (fst a) in
                sum / 10 :: (mod sum 10); [[...]]
              in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1099.ml", line 17, characters 4-120:
And modified the following location:
File "1099.ml", line 16, characters 49-75:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    sum / 10 :: (mod sum 10)
with
    sum / 10, (mod sum 10)
The actual replacement has type
    int * int
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f a x =
              let sum = ((fst x) + (snd x)) + (fst a) in sum / 10, (mod sum 10)
              in
              [[...other program...]]
            in
            (removeZero (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1099.ml", line 17, characters 4-120:
And modified the following location:
File "1099.ml", line 15, characters 4-215:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x = let sum = ((fst x) + (snd x)) + (fst a) in sum / 10 :: (mod sum 10)
      in
      let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'a
==============================
