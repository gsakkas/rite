------------------------------------------------------------------
File "3084.ml", line 17, characters 20-22:
This expression has type float but is here used with type int
Relevant code: pi
------------------------------------------------------------------
Triaged the following locations:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
File "3084.ml", line 22, characters 6-100:
And modified the following location:
File "3084.ml", line 17, characters 23-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *
with
    *; [[...]]
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> (sin (pi *; [[...]] (eval (x1, x, y))))
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 20, characters 21-58:
File "3084.ml", line 22, characters 6-100:
And modified the following location:
File "3084.ml", line 19, characters 42-44:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    +.
with
    /
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) ->
                                ((eval (x3, x, y)) / (eval (x4, x, y))) / 2
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
File "3084.ml", line 22, characters 6-100:
And modified the following location:
File "3084.ml", line 18, characters 25-26:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *
with
    *; [[...]]
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> (cos (pi *; [[...]] (eval (x2, x, y))))
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 20, characters 21-58:
File "3084.ml", line 22, characters 6-100:
And modified the following location:
File "3084.ml", line 19, characters 42-44:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    +.
with
    +.; [[...]]
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) ->
                                ((eval (x3, x, y)) +.; [[...]] (eval (x4, x, y)))
                                    / 2
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 20, characters 21-58:
File "3084.ml", line 22, characters 6-100:
And modified the following location:
File "3084.ml", line 19, characters 42-44:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    +.
with
    *
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) ->
                                ((eval (x3, x, y)) * (eval (x4, x, y))) / 2
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 20, characters 21-58:
File "3084.ml", line 22, characters 6-100:
And modified the following location:
File "3084.ml", line 19, characters 64-65:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    /
with
    /; [[...]]
The actual replacement has type
    float -> int -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) ->
                                (((eval (x3, x, y)) +. (eval (x4, x, y)))
                                      /; [[...]] 2)
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 10-14:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * 'a * 'a -> 'a
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x7, x, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x7
with
    x7
The actual replacement has type
    expr * 'b * 'b
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x7, x, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x7
with
    x0
The actual replacement has type
    expr * 'c * 'c
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x0, x, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 16-18:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x7
with
    x
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x, x, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 20-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    x0
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x7, x0, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 20-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    x7
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x7, x7, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 20-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    x
The actual replacement has type
    expr * 'd * 'd
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x7, x, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 16-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x7, x, y
with
    x, x7, y
The actual replacement has type
    expr * expr * expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x, x7, y)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
Triaged the following locations:
File "3084.ml", line 17, characters 15-43:
File "3084.ml", line 18, characters 17-45:
File "3084.ml", line 19, characters 23-67:
File "3084.ml", line 20, characters 21-58:
And modified the following location:
File "3084.ml", line 22, characters 23-24:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    pi
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                (if (eval (x7, x, pi)) < (eval (x8, x, y)) then
                                    (eval (x9, x, y))
                                    else
                                    (eval (x0, x, y)))) ;; 
==============================
