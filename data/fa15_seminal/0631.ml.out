------------------------------------------------------------------
File "0631.ml", line 12, characters 38-42:
This expression has type int list but is here used with type int list list
Relevant code: args
------------------------------------------------------------------
File "0631.ml", line 12, characters 31-32:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list -> int -> int * 'a list
within context
    let f a xs =
      let (a1, a2) = a in
        let h :: t = xs in
        let val1 = h * i + a1 in
        (if val1 > 9 then val1 / 10, (mod val1 10) :: a2 else 0, val1 :: a2)
      in
      let base = 0, [] in
      let args = (List.rev 0 :: l) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0631.ml", line 12, characters 38-42:
Try replacing
    args
with
    args; [[...]]
of type
    int list list
within context
    let f a xs =
      let (a1, a2) = a in
        let h :: t = xs in
        let val1 = h * i + a1 in
        (if val1 > 9 then val1 / 10, (mod val1 10) :: a2 else 0, val1 :: a2)
      in
      let base = 0, [] in
      let args = (List.rev 0 :: l) in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "0631.ml", line 12, characters 16-30:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int list -> int * int list) ->
    int * 'b list -> int list -> 'c * 'd
within context
    let f a xs =
      let (a1, a2) = a in
        let h :: t = xs in
        let val1 = h * i + a1 in
        (if val1 > 9 then val1 / 10, (mod val1 10) :: a2 else 0, val1 :: a2)
      in
      let base = 0, [] in
      let args = (List.rev 0 :: l) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0631.ml", line 11, characters 13-30:
Try replacing
    (List.rev 0 :: l)
with
    (List.rev 0 :: l); [[...]]
of type
    'e
within context
    fun i
      l ->
        (let f a xs =
            let (a1, a2) = a in
              let h :: t = xs in
              let val1 = h * i + a1 in
              (if val1 > 9 then val1 / 10, (mod val1 10) :: a2 else 0, val1 :: a2)
            in
            let base = 0, [] in
            let args = (List.rev 0 :: l); [[...]] in
            let (_, res) = (List.fold_left f base  args) in res)
==============================
File "0631.ml", line 3, characters 8-178:
Try replacing
    fun a
      xs ->
        (let (a1, a2) = a in
            let h :: t = xs in
            let val1 = h * i + a1 in
            (if val1 > 9 then val1 / 10, (mod val1 10) :: a2 else 0, val1 :: a2))
with
    fun a
      xs ->
        (let (a1, a2) = a in
            let h :: t = xs in
            let val1 = h * i + a1 in
            (if val1 > 9 then val1 / 10, (mod val1 10) :: a2 else 0, val1 :: a2));
    [[...]]
of type
    'f
==============================
