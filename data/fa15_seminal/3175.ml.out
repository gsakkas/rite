------------------------------------------------------------------
File "3175.ml", line 25, characters 35-39:
This expression has type 'a list but is here used with type int * int list
Relevant code: base
------------------------------------------------------------------
File "3175.ml", line 23, characters 15-17:
Try replacing
    []
with
    []; [[...]]
of type
    'b
within context
    fun l2 ->
      (let add (l1, l2) =
          let f a x = let (x1, x2) = x in (mod (x1 + x2) 10), [(x1 + x2) / 10] in
            let base = []; [[...]] in
            let args = (List.combine l1 l2) in
            let (_, res) = (List.fold_left f base  args) in res
          in
          (removeZero (add (padZero l1 l2))))
==============================
File "3175.ml", line 25, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int * int list
within context
    let f a x = let (x1, x2) = x in (mod (x1 + x2) 10), [(x1 + x2) / 10] in
      let base = [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "3175.ml", line 25, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('c -> int * int -> int * int list) -> 'd list -> ('e * 'f) list -> 'g * 'h
within context
    let f a x = let (x1, x2) = x in (mod (x1 + x2) 10), [(x1 + x2) / 10] in
      let base = [] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
