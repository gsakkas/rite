------------------------------------------------------------------
File "2635.ml", line 19, characters 37-41:
This expression has type int * 'a list but is here used with type
  int list list
Relevant code: base
------------------------------------------------------------------
File "2635.ml", line 19, characters 35-36:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c -> int * 'b list
within context
    let f a x = (mulByDigit x l1) @ (clone 0 (List.length a)) :: a in
      let base = 0, [] in
      let args = (List.rev l2) in
      let (carry, res) = (List.fold_left (f; [[...]]) base  args) in carry :: res
==============================
File "2635.ml", line 19, characters 20-34:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list list -> int -> int list list) ->
    int * 'd list -> 'e list -> 'f * 'g
within context
    let f a x = (mulByDigit x l1) @ (clone 0 (List.length a)) :: a in
      let base = 0, [] in
      let args = (List.rev l2) in
      let (carry, res) = ((List.fold_left; [[...]]) f base  args) in carry :: res
==============================
File "2635.ml", line 16, characters 8-66:
Try replacing
    fun a x -> (mulByDigit x l1) @ (clone 0 (List.length a)) :: a
with
    fun a x -> (mulByDigit x l1) @ (clone 0 (List.length a)) :: a; [[...]]
of type
    'h
within context
    let bigMul l1 l2 =
    let f = fun a x -> (mulByDigit x l1) @ (clone 0 (List.length a)) :: a; [[...]]
      in
      let base = 0, [] in
      let args = (List.rev l2) in
      let (carry, res) = (List.fold_left f base  args) in carry :: res
    ;; 
==============================
