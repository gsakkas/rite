------------------------------------------------------------------
File "0789.ml", line 5, characters 24-64:
This expression has type 'a list -> 'a list but is here used with type int
Relevant code: append (digitsOfInt (n / 10) [n mod 10])
------------------------------------------------------------------
File "0789.ml", line 5, characters 17-18:
Try replacing
    n
with
    n; [[...]]
of type
    int list -> int list
within context
    let rec digitsOfInt n =
    (if (n <= 0) then (n; [[...]]) else
      (append (digitsOfInt (n / 10) [(mod n 10)])))
    ;; 
==============================
Triaged the following locations:
File "0789.ml", line 5, characters 24-30:
And modified the following location:
File "0789.ml", line 5, characters 32-43:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    digitsOfInt
with
    digitsOfInt; [[...]]
The actual replacement has type
    int -> int list -> 'b
within context
    let rec digitsOfInt n =
    (if (n <= 0) then n else
      ((append; [[...]]) ((digitsOfInt; [[...]]) (n / 10) [(mod n 10)])))
    ;; 
==============================
Triaged the following locations:
File "0789.ml", line 5, characters 24-30:
And modified the following location:
File "0789.ml", line 5, characters 53-63:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    append
If you ignore other surrounding code, try replacing
    (digitsOfInt (n / 10) [(mod n 10)])
with
    (digitsOfInt (n / 10))
The actual replacement has type
    int
within context
    let rec digitsOfInt n =
    (if (n <= 0) then n else ((append; [[...]]) (digitsOfInt (n / 10))))
    ;; 
==============================
