------------------------------------------------------------------
File "2047.ml", line 5, characters 59-60:
This expression has type ('a -> 'b) -> 'a -> 'b but is here used with type
  ('a -> 'b) -> 'a -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "2047.ml", line 5, characters 8-11:
Try replacing
    fun a x -> (a x)
with
    fun x a -> (a x)
of type
    'c -> ('c -> 'd) -> 'd
within context
    let pipe fs =
    let f x a = (a x) in let base = identity in (List.fold_left f base  fs)
    ;; 
==============================
File "2047.ml", line 5, characters 10-17:
Try replacing
    fun x -> (a x)
with
    fun x _ -> (a x)
of type
    'e -> 'f -> 'g
within context
    let pipe fs =
    let f a x _ = (a x) in let base = identity in (List.fold_left f base  fs)
    ;; 
==============================
File "2047.ml", line 5, characters 10-17:
Try replacing
    fun x -> (a x)
with
    fun _ x -> (a x)
of type
    'h -> 'i -> 'j
within context
    let pipe fs =
    let f a _ x = (a x) in let base = identity in (List.fold_left f base  fs)
    ;; 
==============================
File "2047.ml", line 5, characters 44-60:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'k -> 'l list -> 'k
within context
    let pipe fs =
    let f a x = (a x) in let base = identity in (List.fold_left (f base fs))
    ;; 
==============================
File "2047.ml", line 5, characters 44-58:
Try replacing
    List.fold_left
with
    base
of type
    (('m -> 'm) -> 'm -> 'm) -> ('m -> 'm) -> 'm -> 'm
within context
    let pipe fs = let f a x = (a x) in let base = identity in (base f base  fs) ;; 
==============================
File "2047.ml", line 5, characters 44-58:
Try replacing
    List.fold_left
with
    f
of type
    (('n -> 'n) -> 'n -> 'n) -> ('n -> 'n) -> 'n -> 'n
within context
    let pipe fs = let f a x = (a x) in let base = identity in (f f base  fs) ;; 
==============================
File "2047.ml", line 5, characters 44-58:
Try replacing
    List.fold_left
with
    identity
of type
    (('o -> 'o) -> 'o -> 'o) -> ('o -> 'o) -> 'o -> 'o
within context
    let pipe fs = let f a x = (a x) in let base = identity in (identity f base  fs)
    ;; 
==============================
File "2047.ml", line 5, characters 14-15:
Try replacing
    a
with
    identity
of type
    'p -> 'p
within context
    fun fs ->
      (let f a x = (identity x) in
          let base = identity in (List.fold_left f base  fs))
==============================
