------------------------------------------------------------------
File "1527.ml", line 34, characters 32-34:
This expression has type expr but is here used with type expr * 'a * 'a
Relevant code: e1
------------------------------------------------------------------
Triaged the following locations:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
File "1527.ml", line 39, characters 6-100:
And modified the following location:
File "1527.ml", line 34, characters 32-34:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e1; [[...]]
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1; [[...]]))))
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
File "1527.ml", line 39, characters 6-100:
And modified the following location:
File "1527.ml", line 34, characters 27-31:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval; [[...]]
The actual replacement has type
    expr -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. ((eval; [[...]]) e1)))
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
File "1527.ml", line 39, characters 6-100:
And modified the following location:
File "1527.ml", line 35, characters 34-36:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e1; [[...]]
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> (cos (pi *. (eval (e1; [[...]]))))
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
File "1527.ml", line 39, characters 6-100:
And modified the following location:
File "1527.ml", line 35, characters 29-33:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval; [[...]]
The actual replacement has type
    expr -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> (cos (pi *. ((eval; [[...]]) e1)))
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 37, characters 21-59:
File "1527.ml", line 39, characters 6-100:
And modified the following location:
File "1527.ml", line 36, characters 27-29:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    +.
with
    +.; [[...]]
The actual replacement has type
    expr -> expr -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> ((e1 +.; [[...]] e2) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 10-22:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    exprToString
with
    exprToString
The actual replacement has type
    expr -> string
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e1) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 10-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (exprToString e1)
with
    (exprToString (e1))
The actual replacement has type
    string
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString (e1)) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 23-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e2
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e2) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 23-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e1
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e1) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 23-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 23-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e4
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e4) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 23-25:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e3
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e3) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 27-28:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    <
with
    <
The actual replacement has type
    string -> string -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e1) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 30-42:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    exprToString
with
    exprToString
The actual replacement has type
    expr -> string
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e1) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
Triaged the following locations:
File "1527.ml", line 34, characters 15-36:
File "1527.ml", line 35, characters 17-38:
File "1527.ml", line 36, characters 23-40:
File "1527.ml", line 37, characters 21-59:
And modified the following location:
File "1527.ml", line 39, characters 43-45:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e2
with
    e2
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) ->
                                (if (exprToString e1) < (exprToString e2) then
                                    (exprToString e3)
                                    else
                                    (exprToString e4))) ;; 
==============================
