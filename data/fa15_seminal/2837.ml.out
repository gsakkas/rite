------------------------------------------------------------------
File "2837.ml", line 2, characters 74-76:
This expression has type 'a -> 'b but is here used with type ('a -> 'b) list
Relevant code: fs
------------------------------------------------------------------
File "2837.ml", line 2, characters 52-68:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'c -> 'd list -> 'c
within context
    let pipe fs =
    let f a x a = (x a) in let base = fs in (List.fold_left (f base fs))
    ;; 
==============================
File "2837.ml", line 2, characters 69-73:
Try replacing
    base
with
    List.fold_left
of type
    ('e -> 'f -> 'e) -> 'e -> 'f list -> 'e
within context
    let pipe fs =
    let f a x a = (x a) in let base = fs in (List.fold_left f List.fold_left  fs)
    ;; 
==============================
File "2837.ml", line 2, characters 69-73:
Try replacing
    base
with
    f
of type
    'g -> ('h -> 'i) -> 'h -> 'i
within context
    let pipe fs = let f a x a = (x a) in let base = fs in (List.fold_left f f  fs)
    ;; 
==============================
File "2837.ml", line 2, characters 46-48:
Try replacing
    fs
with
    List.fold_left
of type
    ('j -> 'k -> 'j) -> 'j -> 'k list -> 'j
within context
    let pipe fs =
    let f a x a = (x a) in let base = List.fold_left in (List.fold_left f base  fs)
    ;; 
==============================
File "2837.ml", line 2, characters 46-48:
Try replacing
    fs
with
    f
of type
    'l -> ('m -> 'n) -> 'm -> 'n
within context
    let pipe fs = let f a x a = (x a) in let base = f in (List.fold_left f base  fs)
    ;; 
==============================
