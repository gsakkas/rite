------------------------------------------------------------------
File "0313.ml", line 6, characters 23-25:
This expression has type 'a list but is here used with type string
Relevant code: sl
------------------------------------------------------------------
File "0313.ml", line 6, characters 23-25:
Try replacing
    sl
with
    x
of type
    string
within context
    let f a x = a ^ (x ^ x) in
      let base = h in let l = t in (List.fold_left f base  l)
==============================
File "0313.ml", line 6, characters 23-25:
Try replacing
    sl
with
    h
of type
    string
within context
    let f a x = a ^ (h ^ x) in
      let base = h in let l = t in (List.fold_left f base  l)
==============================
File "0313.ml", line 6, characters 23-25:
Try replacing
    sl
with
    a
of type
    string
within context
    let f a x = a ^ (a ^ x) in
      let base = h in let l = t in (List.fold_left f base  l)
==============================
File "0313.ml", line 6, characters 23-25:
Try replacing
    sl
with
    sep
of type
    string
within context
    let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in (List.fold_left f base  l)
==============================
File "0313.ml", line 3, characters 8-10:
Try replacing
    sl
with
    sep
of type
    string list
within context
    let rec sepConcat sep sl = (match sep with 
                                | [] -> ""
                                | h :: t ->
                                  (let f a x = a ^ (sl ^ x) in
                                        let base = h in
                                        let l = t in
                                        (List.fold_left f base  l))) ;; 
==============================
