------------------------------------------------------------------
File "2751.ml", line 2, characters 41-42:
This expression has type 'a list but is here used with type 'a
Relevant code: x
------------------------------------------------------------------
File "2751.ml", line 2, characters 41-63:
Try replacing
    (if n = 0 then x else x :: (clone x (n - 1)))
with
    (if n = 0 then x)
of type
    unit
within context
    let rec clone x n = (if n = 0 then x) ;; 
==============================
File "2751.ml", line 2, characters 41-42:
Try replacing
    x
with
    n
of type
    int
within context
    let rec clone x n = (if n = 0 then x else n :: (clone x (n - 1))) ;; 
==============================
File "2751.ml", line 2, characters 41-42:
Try replacing
    x
with
    -
of type
    int -> int -> int
within context
    let rec clone x n = (if n = 0 then x else - :: (clone x (n - 1))) ;; 
==============================
File "2751.ml", line 2, characters 41-42:
Try replacing
    x
with
    =
of type
    'b -> 'b -> bool
within context
    let rec clone x n = (if n = 0 then x else = :: (clone x (n - 1))) ;; 
==============================
