------------------------------------------------------------------
File "2934.ml", line 19, characters 8-13:
This pattern matches values of type 'a * 'b
but is here used to match values of type 'c list
Relevant code: (r,s)
------------------------------------------------------------------
Triaged the following locations:
File "2934.ml", line 20, characters 4-120:
And modified the following location:
File "2934.ml", line 19, characters 8-58:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (match x with 
     | [] -> a
     | (r, s) -> (mod ((List.hd r) + (List.hd s)) 10) :: a)
with
    (match x with 
     | [] -> a
     | _ -> [[...]])
The actual replacement has type
    'd
==============================
Triaged the following locations:
File "2934.ml", line 20, characters 4-120:
And modified the following location:
File "2934.ml", line 18, characters 8-10:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    []
with
    _
The actual replacement has type
    int list * int list -> int list
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match x with 
                                                  | _ -> a
                                                  | (r, s) ->
                                                    (mod
                                                            ((List.hd r)
                                                                + (List.hd s)) 10)
                                                          ::
                                                          a) in [[...other program...]] in (removeZero
                (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "2934.ml", line 20, characters 4-120:
And modified the following location:
File "2934.ml", line 16, characters 4-233:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x = (match x with 
                 | [] -> a
                 | (r, s) ->
                   (mod ((List.hd r) + (List.hd s)) 10) ::
                         a) in let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'e
==============================
