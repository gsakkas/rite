------------------------------------------------------------------
File "0855.ml", line 31, characters 13-34:
This expression has type (int * int) list but is here used with type int list
Relevant code: (add (padZero l1 l2))
------------------------------------------------------------------
File "0855.ml", line 31, characters 2-12:
Try replacing
    removeZero
with
    =
of type
    (int * int) list -> (int * int) list -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let (fst, sec) = x in
          let (fst', sec') =
          (if fst + sec > 9 then (fst + sec) - 10, 1 else fst + sec, 0)
          in
          let (carry, digits) = a in
          let (carry', digits') =
          (if sec' = 1 then 1, digits @ [fst', sec'] else 0, digits @ [fst', sec'])
          in
          carry', digits'
        in
        let base = 0, [] in
        let args = (List.rev (List.combine l1 l2)) @ [0, 0] in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (= (add (padZero l1 l2)))
    ;; 
==============================
File "0855.ml", line 31, characters 2-12:
Try replacing
    removeZero
with
    <
of type
    (int * int) list -> (int * int) list -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let (fst, sec) = x in
          let (fst', sec') =
          (if fst + sec > 9 then (fst + sec) - 10, 1 else fst + sec, 0)
          in
          let (carry, digits) = a in
          let (carry', digits') =
          (if sec' = 1 then 1, digits @ [fst', sec'] else 0, digits @ [fst', sec'])
          in
          carry', digits'
        in
        let base = 0, [] in
        let args = (List.rev (List.combine l1 l2)) @ [0, 0] in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (< (add (padZero l1 l2)))
    ;; 
==============================
File "0855.ml", line 31, characters 2-12:
Try replacing
    removeZero
with
    >
of type
    (int * int) list -> (int * int) list -> bool
within context
    let bigAdd l1 l2 =
    let add (l1, l2) =
      let f a x =
        let (fst, sec) = x in
          let (fst', sec') =
          (if fst + sec > 9 then (fst + sec) - 10, 1 else fst + sec, 0)
          in
          let (carry, digits) = a in
          let (carry', digits') =
          (if sec' = 1 then 1, digits @ [fst', sec'] else 0, digits @ [fst', sec'])
          in
          carry', digits'
        in
        let base = 0, [] in
        let args = (List.rev (List.combine l1 l2)) @ [0, 0] in
        let (_, res) = (List.fold_left f base  args) in res
      in
      (> (add (padZero l1 l2)))
    ;; 
==============================
