------------------------------------------------------------------
File "1972.ml", line 8, characters 4-123:
This expression has type int list but is here used with type
  (int list * int list) list
Relevant code: if (List.length l1) < (List.length l2)
    then (clone 0 ((List.length l2) - (List.length l1))) @ (l1 @ l2)
    else []
------------------------------------------------------------------
File "1972.ml", line 6, characters 7-69:
Try replacing
    [l1, (clone 0 ((List.length l1) - (List.length l2))) @ l2]
with
    [l1, (clone 0 ((List.length l1) - (List.length l2))) @ l2]; [[...]]
of type
    int list
within context
    let padZero l1 l2 =
    (if (List.length l1) > (List.length l2) then
      ([l1, (clone 0 ((List.length l1) - (List.length l2))) @ l2]; [[...]])
      else
      (if (List.length l1) < (List.length l2) then
        (clone 0 ((List.length l2) - (List.length l1))) @ (l1 @ l2)
        else
        []))
    ;; 
==============================
File "1972.ml", line 8, characters 4-123:
Try replacing
    (if (List.length l1) < (List.length l2) then
      (clone 0 ((List.length l2) - (List.length l1))) @ (l1 @ l2)
      else
      [])
with
    (if (List.length l1) < (List.length l2) then
      (clone 0 ((List.length l2) - (List.length l1))) @ (l1 @ l2)
      else
      []);
    [[...]]
of type
    (int list * int list) list
==============================
