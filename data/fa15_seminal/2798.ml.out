------------------------------------------------------------------
File "2798.ml", line 2, characters 66-67:
This expression has type 'a -> 'b -> 'c -> 'a but is here used with type
  'a -> 'b -> 'a
Relevant code: f
------------------------------------------------------------------
File "2798.ml", line 2, characters 20-23:
Try replacing
    fun a x x -> a
with
    fun x a x -> a
of type
    'd -> 'e -> 'f -> 'e
within context
    let pipe fs = let f x a x = a in let base f = f in (List.fold_left f base  fs)
    ;; 
==============================
File "2798.ml", line 2, characters 51-67:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'g -> 'g list -> 'g
within context
    let pipe fs = let f a x x = a in let base f = f in (List.fold_left (f base fs))
    ;; 
==============================
File "2798.ml", line 2, characters 51-65:
Try replacing
    List.fold_left
with
    f
of type
    ('h -> 'i -> 'j -> 'h) -> ('k -> 'k) -> 'l -> 'h -> 'i -> 'j -> 'h
within context
    let pipe fs = let f a x x = a in let base f = f in (f f base  fs) ;; 
==============================
File "2798.ml", line 2, characters 51-65:
Try replacing
    List.fold_left
with
    base
of type
    (('m -> 'm) -> 'n -> 'o -> 'm -> 'm) -> ('m -> 'm) -> 'n -> 'o -> 'm -> 'm
within context
    let pipe fs = let f a x x = a in let base f = f in (base f base  fs) ;; 
==============================
File "2798.ml", line 2, characters 28-29:
Try replacing
    a
with
    fs
of type
    'p list
within context
    fun fs -> (let f a x x = fs in let base f = f in (List.fold_left f base  fs))
==============================
File "2798.ml", line 2, characters 28-29:
Try replacing
    a
with
    List.fold_left
of type
    ('q -> 'r -> 'q) -> 'q -> 'r list -> 'q
within context
    fun fs ->
      (let f a x x = List.fold_left in
          let base f = f in (List.fold_left f base  fs))
==============================
File "2798.ml", line 2, characters 28-29:
Try replacing
    a
with
    x
of type
    's
within context
    fun fs -> (let f a x x = x in let base f = f in (List.fold_left f base  fs))
==============================
