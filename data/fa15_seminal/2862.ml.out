------------------------------------------------------------------
File "2862.ml", line 4, characters 35-39:
This expression has type 'a -> 'b -> 'c but is here used with type 'c
Relevant code: base
------------------------------------------------------------------
File "2862.ml", line 4, characters 18-34:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'd -> 'e list -> 'd
within context
    let pipe fs = let f a x = (match fs with 
                               | x :: y ->
                                 x) in let base = f in
      (List.fold_left (f base fs)) ;; 
==============================
File "2862.ml", line 4, characters 35-39:
Try replacing
    base
with
    List.fold_left
of type
    ('f -> 'g -> 'f) -> 'f -> 'g list -> 'f
within context
    let pipe fs = let f a x = (match fs with 
                               | x :: y ->
                                 x) in let base = f in
      (List.fold_left f List.fold_left  fs) ;; 
==============================
File "2862.ml", line 3, characters 20-22:
Try replacing
    fs
with
    x
of type
    'h list
within context
    fun fs -> (let f a x = (match x with 
                            | x :: y ->
                              x) in let base = f in (List.fold_left f base  fs))
==============================
File "2862.ml", line 3, characters 38-39:
Try replacing
    x
with
    a
of type
    'i
within context
    fun fs -> (let f a x = (match fs with 
                            | x :: y ->
                              a) in let base = f in (List.fold_left f base  fs))
==============================
File "2862.ml", line 4, characters 13-14:
Try replacing
    f
with
    List.fold_left
of type
    ('j -> 'k -> 'j) -> 'j -> 'k list -> 'j
within context
    let pipe fs = let f a x = (match fs with 
                               | x :: y ->
                                 x) in let base = List.fold_left in
      (List.fold_left f base  fs) ;; 
==============================
