------------------------------------------------------------------
File "3195.ml", line 31, characters 35-39:
This expression has type int * int list but is here used with type
  int list * int list
Relevant code: base
------------------------------------------------------------------
File "3195.ml", line 31, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * int list -> 'a * 'b -> int * int list
within context
    let f a x =
      let (x1, x2) = x in
        let (a1, a2) = a in
        let c :: c' = a2 in [((x1 + x2) + c) / 10], a2 @ [(mod ((x1 + x2) + c) 10)]
      in
      let base = 0, [0] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "3195.ml", line 31, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int list * int list
within context
    let f a x =
      let (x1, x2) = x in
        let (a1, a2) = a in
        let c :: c' = a2 in [((x1 + x2) + c) / 10], a2 @ [(mod ((x1 + x2) + c) 10)]
      in
      let base = 0, [0] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "3195.ml", line 29, characters 15-23:
Try replacing
    0, [0]
with
    0, [0]; [[...]]
of type
    'c
within context
    fun l2 ->
      (let add (l1, l2) =
          let f a x =
            let (x1, x2) = x in
              let (a1, a2) = a in
              let c :: c' = a2 in
              [((x1 + x2) + c) / 10], a2 @ [(mod ((x1 + x2) + c) 10)]
            in
            let base = 0, [0]; [[...]] in
            let args = (List.combine l1 l2) in
            let (_, res) = (List.fold_left f base  args) in res
          in
          (removeZero (add (padZero l1 l2))))
==============================
File "3195.ml", line 31, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('d * int list -> int * int -> int list * int list) ->
    int * int list -> ('e * 'f) list -> 'g * 'h
within context
    let f a x =
      let (x1, x2) = x in
        let (a1, a2) = a in
        let c :: c' = a2 in [((x1 + x2) + c) / 10], a2 @ [(mod ((x1 + x2) + c) 10)]
      in
      let base = 0, [0] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "3195.ml", line 24, characters 10-153:
Try replacing
    fun a
      x ->
        (let (x1, x2) = x in
            let (a1, a2) = a in
            let c :: c' = a2 in
            [((x1 + x2) + c) / 10], a2 @ [(mod ((x1 + x2) + c) 10)])
with
    fun a
      x ->
        (let (x1, x2) = x in
            let (a1, a2) = a in
            let c :: c' = a2 in
            [((x1 + x2) + c) / 10], a2 @ [(mod ((x1 + x2) + c) 10)]);
    [[...]]
of type
    'i
==============================
