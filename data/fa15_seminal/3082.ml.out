------------------------------------------------------------------
File "3082.ml", line 23, characters 4-10:
The constructor VarX expects 0 argument(s),
but is here applied to 1 argument(s)
Relevant code: VarX _
------------------------------------------------------------------
Triaged the following locations:
File "3082.ml", line 23, characters 14-15:
File "3082.ml", line 24, characters 4-10:
File "3082.ml", line 24, characters 14-15:
File "3082.ml", line 25, characters 15-42:
File "3082.ml", line 26, characters 17-46:
File "3082.ml", line 27, characters 23-59:
File "3082.ml", line 28, characters 21-55:
File "3082.ml", line 29, characters 28-63:
And modified the following location:
File "3082.ml", line 23, characters 4-10:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    VarX _
with
    _
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              | _ -> [[...other program...]]
                              |[[...other pattern...]]->[[...other program...]]
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3082.ml", line 23, characters 4-10:
File "3082.ml", line 23, characters 14-15:
File "3082.ml", line 24, characters 14-15:
File "3082.ml", line 25, characters 15-42:
File "3082.ml", line 26, characters 17-46:
File "3082.ml", line 27, characters 23-59:
File "3082.ml", line 28, characters 21-55:
File "3082.ml", line 29, characters 28-63:
And modified the following location:
File "3082.ml", line 24, characters 4-10:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    VarY _
with
    _
The actual replacement has type
    expr
within context
    let rec eval (e, x, y) = (match e with 
                              |[[...other pattern...]]->[[...other program...]]
                              | _ -> [[...other program...]]
                              | Sine x1 -> [[...other program...]]
                              | Cosine x2 -> [[...other program...]]
                              | Average (x3, x4) -> [[...other program...]]
                              | Times (x5, x6) -> [[...other program...]]
                              | Thresh (x7, x8, x9, x0) ->
                                [[...other program...]]) ;; 
==============================
