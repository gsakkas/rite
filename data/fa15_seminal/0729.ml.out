------------------------------------------------------------------
File "0729.ml", line 31, characters 11-22:
This function is applied to too many arguments,
maybe you forgot a `;'
Relevant code: buildCosine
------------------------------------------------------------------
Triaged the following locations:
File "0729.ml", line 31, characters 11-48:
File "0729.ml", line 32, characters 11-59:
File "0729.ml", line 33, characters 11-61:
File "0729.ml", line 35, characters 8-116:
And modified the following location:
File "0729.ml", line 30, characters 11-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildSine
with
    buildSine; [[...]]
The actual replacement has type
    (unit -> expr) -> unit -> expr
within context
    let rec build (rand, depth) =
    (if depth > 0 then (let rand' = (rand (1, 5)) in (match rand' with 
                                                      | 1 ->
                                                        ((buildSine; [[...]])
                                                            (build
                                                              (rand, depth - 1)))
                                                      | 2 -> [[...other program...]]
                                                      | 3 -> [[...other program...]]
                                                      | 4 -> [[...other program...]]
                                                      | 5 ->
                                                        [[...other program...]])) else buildX)
    ;; 
==============================
Triaged the following locations:
File "0729.ml", line 30, characters 11-48:
File "0729.ml", line 32, characters 11-59:
File "0729.ml", line 33, characters 11-61:
File "0729.ml", line 35, characters 8-116:
And modified the following location:
File "0729.ml", line 31, characters 11-22:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildCosine
with
    buildCosine; [[...]]
The actual replacement has type
    ((int * int -> int) * int -> unit -> expr) ->
    (int * int -> int) * int -> unit -> expr
within context
    let rec build (rand, depth) =
    (if depth > 0 then (let rand' = (rand (1, 5)) in (match rand' with 
                                                      | 1 -> [[...other program...]]
                                                      | 2 ->
                                                        ((buildCosine; [[...]])
                                                            build (rand, depth - 1))
                                                      | 3 -> [[...other program...]]
                                                      | 4 -> [[...other program...]]
                                                      | 5 ->
                                                        [[...other program...]])) else buildX)
    ;; 
==============================
Triaged the following locations:
File "0729.ml", line 30, characters 11-48:
File "0729.ml", line 31, characters 11-48:
File "0729.ml", line 33, characters 11-61:
File "0729.ml", line 35, characters 8-116:
And modified the following location:
File "0729.ml", line 32, characters 11-21:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildTimes
with
    buildTimes; [[...]]
The actual replacement has type
    (unit -> expr) * (unit -> expr) ->
    unit -> expr
within context
    let rec build (rand, depth) =
    (if depth > 0 then (let rand' = (rand (1, 5)) in (match rand' with 
                                                      | 1 -> [[...other program...]]
                                                      | 2 -> [[...other program...]]
                                                      | 3 ->
                                                        ((buildTimes; [[...]])
                                                            ((build
                                                                  (rand, depth - 1))
                                                                ,
                                                                buildY))
                                                      | 4 -> [[...other program...]]
                                                      | 5 ->
                                                        [[...other program...]])) else buildX)
    ;; 
==============================
Triaged the following locations:
File "0729.ml", line 30, characters 11-48:
File "0729.ml", line 31, characters 11-48:
File "0729.ml", line 32, characters 11-59:
File "0729.ml", line 33, characters 11-61:
And modified the following location:
File "0729.ml", line 35, characters 8-19:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildThresh
with
    buildThresh; [[...]]
The actual replacement has type
    (unit -> expr) * (unit -> expr) *
    (unit -> expr) * (unit -> expr) ->
    unit -> expr
within context
    let rec build (rand, depth) =
    (if depth > 0 then (let rand' = (rand (1, 5)) in (match rand' with 
                                                      | 1 -> [[...other program...]]
                                                      | 2 -> [[...other program...]]
                                                      | 3 -> [[...other program...]]
                                                      | 4 -> [[...other program...]]
                                                      | 5 ->
                                                        ((buildThresh; [[...]])
                                                            (buildX,
                                                                buildY,
                                                                (build
                                                                  (rand, depth - 1))
                                                                ,
                                                                (build
                                                                  (rand,
                                                                      depth
                                                                        -
                                                                        1)))))) else buildX)
    ;; 
==============================
Triaged the following locations:
File "0729.ml", line 30, characters 11-48:
File "0729.ml", line 31, characters 11-48:
File "0729.ml", line 32, characters 11-59:
File "0729.ml", line 35, characters 8-116:
And modified the following location:
File "0729.ml", line 33, characters 11-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    buildAverage
with
    buildAverage; [[...]]
The actual replacement has type
    (unit -> expr) * (unit -> expr) ->
    unit -> expr
within context
    let rec build (rand, depth) =
    (if depth > 0 then (let rand' = (rand (1, 5)) in (match rand' with 
                                                      | 1 -> [[...other program...]]
                                                      | 2 -> [[...other program...]]
                                                      | 3 -> [[...other program...]]
                                                      | 4 ->
                                                        ((buildAverage; [[...]])
                                                            ((build
                                                                  (rand, depth - 1))
                                                                ,
                                                                buildY))
                                                      | 5 ->
                                                        [[...other program...]])) else buildX)
    ;; 
==============================
