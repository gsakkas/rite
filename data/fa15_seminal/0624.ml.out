------------------------------------------------------------------
File "0624.ml", line 22, characters 35-39:
This expression has type 'a list but is here used with type int * int list
Relevant code: base
------------------------------------------------------------------
File "0624.ml", line 20, characters 15-17:
Try replacing
    []
with
    []; [[...]]
of type
    'b
within context
    fun l2 ->
      (let add (l1, l2) =
          let f a x =
            let (a1, a2) = a in
              let (x1, x2) = x in
              let val1 = (a1 + x1) + x2 in
              let val2 = (x1 + x2) / 10 in val2, val1 :: a2
            in
            let base = []; [[...]] in
            let args = (List.rev (List.combine l1 l2)) in
            let (_, res) = (List.fold_left f base  args) in res
          in
          (removeZero (add (padZero l1 l2))))
==============================
File "0624.ml", line 22, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int * int list
within context
    let f a x =
      let (a1, a2) = a in
        let (x1, x2) = x in
        let val1 = (a1 + x1) + x2 in let val2 = (x1 + x2) / 10 in val2, val1 :: a2
      in
      let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "0624.ml", line 22, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int * int -> int * int list) ->
    'c list -> ('d * 'e) list -> 'f * 'g
within context
    let f a x =
      let (a1, a2) = a in
        let (x1, x2) = x in
        let val1 = (a1 + x1) + x2 in let val2 = (x1 + x2) / 10 in val2, val1 :: a2
      in
      let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
