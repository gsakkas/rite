------------------------------------------------------------------
File "2787.ml", line 4, characters 64-65:
This expression has type ('a -> 'b) -> 'a -> 'b but is here used with type
  ('a -> 'b) -> 'a -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "2787.ml", line 4, characters 20-23:
Try replacing
    fun a x -> (a x)
with
    fun x a -> (a x)
of type
    'c -> ('c -> 'd) -> 'd
within context
    let pipe fs = let f x a = (a x) in let base = x in (List.fold_left f base  fs)
    ;; 
==============================
File "2787.ml", line 4, characters 22-29:
Try replacing
    fun x -> (a x)
with
    fun x _ -> (a x)
of type
    'e -> 'f -> 'g
within context
    let pipe fs = let f a x _ = (a x) in let base = x in (List.fold_left f base  fs)
    ;; 
==============================
File "2787.ml", line 4, characters 22-29:
Try replacing
    fun x -> (a x)
with
    fun _ x -> (a x)
of type
    'h -> 'i -> 'j
within context
    let pipe fs = let f a _ x = (a x) in let base = x in (List.fold_left f base  fs)
    ;; 
==============================
File "2787.ml", line 4, characters 49-63:
Try replacing
    List.fold_left
with
    f
of type
    (('k -> int list -> string list) -> 'k -> int list -> string list) ->
    ('k -> int list -> string list) -> 'k -> int list -> string list
within context
    let pipe fs = let f a x = (a x) in let base = x in (f f base  fs) ;; 
==============================
