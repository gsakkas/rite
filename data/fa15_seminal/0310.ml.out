------------------------------------------------------------------
File "0310.ml", line 3, characters 58-59:
This expression has type ('a -> 'b) -> 'c -> 'a -> 'd -> 'b
but is here used with type ('a -> 'b) -> 'c -> 'a -> 'b
Relevant code: f
------------------------------------------------------------------
File "0310.ml", line 3, characters 8-11:
Try replacing
    fun a x n x -> (a n)
with
    fun x a n x -> (a n)
of type
    'e -> ('f -> 'g) -> 'f -> 'h -> 'g
within context
    let pipe fs =
    let f x a n x = (a n) in let base n = n in (List.fold_left f base  fs)
    ;; 
==============================
File "0310.ml", line 3, characters 43-59:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'i -> 'j list -> 'i
within context
    let pipe fs =
    let f a x n x = (a n) in let base n = n in (List.fold_left (f base fs))
    ;; 
==============================
File "0310.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    f
of type
    (('k -> 'l) -> 'm -> 'k -> 'n -> 'l) ->
    ('o -> 'o) -> ('k -> 'l) -> 'p -> 'm -> 'k -> 'n -> 'l
within context
    let pipe fs = let f a x n x = (a n) in let base n = n in (f f base  fs) ;; 
==============================
File "0310.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    base
of type
    (('q -> 'q) -> 'r -> 'q -> 's -> 'q) -> ('q -> 'q) -> 'r -> 'q -> 's -> 'q
within context
    let pipe fs = let f a x n x = (a n) in let base n = n in (base f base  fs) ;; 
==============================
