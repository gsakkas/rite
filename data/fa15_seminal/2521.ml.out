------------------------------------------------------------------
File "2521.ml", line 7, characters 59-60:
This expression has type 'a but is here used with type 'a list
Relevant code: h
------------------------------------------------------------------
File "2521.ml", line 7, characters 34-38:
Try replacing
    seen
with
    l
of type
    'b list list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' = (if (List.mem h l) then [] else seen @ h) in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "2521.ml", line 7, characters 34-38:
Try replacing
    seen
with
    t
of type
    'c list list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' = (if (List.mem h t) then [] else seen @ h) in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "2521.ml", line 7, characters 32-33:
Try replacing
    h
with
    @
of type
    'd list -> 'd list -> 'd list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' = (if (List.mem @ seen) then [] else seen @ h)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "2521.ml", line 7, characters 59-60:
Try replacing
    h
with
    l
of type
    'e list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' = (if (List.mem h seen) then [] else seen @ l)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "2521.ml", line 7, characters 59-60:
Try replacing
    h
with
    rest
of type
    'f list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' =
                                 (if (List.mem h seen) then [] else seen @ rest)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "2521.ml", line 7, characters 59-60:
Try replacing
    h
with
    seen
of type
    'g list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' =
                                 (if (List.mem h seen) then [] else seen @ seen)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "2521.ml", line 7, characters 59-60:
Try replacing
    h
with
    t
of type
    'h list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' = (if (List.mem h seen) then [] else seen @ t)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
