------------------------------------------------------------------
File "0208.ml", line 31, characters 17-18:
This expression has type int but is here used with type float
Relevant code: 1
------------------------------------------------------------------
File "0208.ml", line 31, characters 17-18:
Try replacing
    1
with
    1; [[...]]
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | NewOp1 (e1, e2, e3) ->
                                (((1.0 /. (sin (pi *. (eval (e1, x, y)))))
                                          *. (cos (pi *. (eval (e1, x, y)))))
                                      *. (sin (pi *. (eval (e1, x, y)))))
                              | NewOp2 e1 ->
                                (1; [[...]] /. (sin (pi *. (eval (e1, x, y)))))) ;; 
==============================
File "0208.ml", line 31, characters 19-21:
Try replacing
    /.
with
    /.; [[...]]
of type
    int -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> (sin (pi *. (eval (e1, x, y))))
                              | Cosine e1 -> (cos (pi *. (eval (e1, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) ->
                                (if (eval (e1, x, y)) < (eval (e2, x, y)) then
                                    (eval (e3, x, y))
                                    else
                                    (eval (e4, x, y)))
                              | NewOp1 (e1, e2, e3) ->
                                (((1.0 /. (sin (pi *. (eval (e1, x, y)))))
                                          *. (cos (pi *. (eval (e1, x, y)))))
                                      *. (sin (pi *. (eval (e1, x, y)))))
                              | NewOp2 e1 ->
                                (1 /.; [[...]] (sin (pi *. (eval (e1, x, y)))))) ;; 
==============================
