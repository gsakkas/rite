------------------------------------------------------------------
File "2675.ml", line 3, characters 64-68:
This expression has type 'a -> 'a but is here used with type 'a -> 'a -> 'b
Relevant code: base
------------------------------------------------------------------
File "2675.ml", line 3, characters 12-15:
Try replacing
    fun x y c -> (x (a c))
with
    fun x c y -> (x (a c))
of type
    ('c -> 'd) -> 'e -> 'f -> 'd
within context
    let pipe fs =
    let f a x c y = (x (a c)) in let base y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 12-15:
Try replacing
    fun y c -> (x (a c))
with
    fun c y -> (x (a c))
of type
    'g -> 'h -> 'i
within context
    let pipe fs =
    let f a x c y = (x (a c)) in let base y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 12-15:
Try replacing
    fun a x y c -> (x (a c))
with
    fun a x c y -> (x (a c))
of type
    ('j -> 'k) -> ('k -> 'l) -> 'j -> 'm -> 'l
within context
    let pipe fs =
    let f a x c y = (x (a c)) in let base y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 38-43:
Try replacing
    fun y -> y
with
    fun y _ -> y
of type
    'n -> 'o -> 'n
within context
    let pipe fs =
    let f a x y c = (x (a c)) in let base y _ = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 38-43:
Try replacing
    fun y -> y
with
    fun _ y -> y
of type
    'p -> 'q -> 'q
within context
    let pipe fs =
    let f a x y c = (x (a c)) in let base _ y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 8-13:
Try replacing
    fun a x y c -> (x (a c))
with
    fun y x a c -> (x (a c))
of type
    'r -> ('s -> 't) -> ('u -> 's) -> 'u -> 't
within context
    let pipe fs =
    let f y x a c = (x (a c)) in let base y = y in (List.fold_left f base  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 47-63:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'v -> 'w list -> 'v
within context
    let pipe fs =
    let f a x y c = (x (a c)) in let base y = y in (List.fold_left (f base fs))
    ;; 
==============================
File "2675.ml", line 3, characters 47-61:
Try replacing
    List.fold_left
with
    base
of type
    (('x -> 'x) -> ('x -> 'y) -> 'z -> 'x -> 'y) ->
    ('x -> 'x) -> ('x -> 'y) -> 'z -> 'x -> 'y
within context
    let pipe fs = let f a x y c = (x (a c)) in let base y = y in (base f base  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 47-61:
Try replacing
    List.fold_left
with
    f
of type
    (('a1 -> 'b1) -> ('b1 -> 'c1) -> 'd1 -> 'a1 -> 'c1) ->
    ((('b1 -> 'c1) -> 'd1 -> 'a1 -> 'c1) -> ('b1 -> 'c1) -> 'd1 -> 'a1 -> 'c1) ->
    'e1 -> ('a1 -> 'b1) -> ('b1 -> 'c1) -> 'd1 -> 'a1 -> 'c1
within context
    let pipe fs = let f a x y c = (x (a c)) in let base y = y in (f f base  fs) ;; 
==============================
File "2675.ml", line 3, characters 64-68:
Try replacing
    base
with
    f
of type
    ('f1 -> 'f1) -> ('f1 -> 'f1) -> 'g1 -> 'f1 -> 'f1
within context
    let pipe fs =
    let f a x y c = (x (a c)) in let base y = y in (List.fold_left f f  fs)
    ;; 
==============================
File "2675.ml", line 3, characters 21-22:
Try replacing
    a
with
    x
of type
    'h1 -> 'h1
within context
    fun x y c -> (x (x c))
==============================
File "2675.ml", line 3, characters 21-22:
Try replacing
    a
with
    List.fold_left
of type
    ('i1 -> 'j1 -> 'i1) -> 'i1 -> 'j1 list -> 'i1
within context
    fun x y c -> (x (List.fold_left c))
==============================
File "2675.ml", line 3, characters 21-22:
Try replacing
    a
with
    y
of type
    'k1 -> 'l1
within context
    fun x y c -> (x (y c))
==============================
File "2675.ml", line 3, characters 23-24:
Try replacing
    c
with
    y
of type
    'm1
within context
    fun x y c -> (x (a y))
==============================
File "2675.ml", line 3, characters 23-24:
Try replacing
    c
with
    List.fold_left
of type
    ('n1 -> 'o1 -> 'n1) -> 'n1 -> 'o1 list -> 'n1
within context
    fun x y c -> (x (a List.fold_left))
==============================
