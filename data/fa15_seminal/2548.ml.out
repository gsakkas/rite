------------------------------------------------------------------
File "2548.ml", line 28, characters 58-59:
This expression has type int -> int list -> int list
but is here used with type int -> int list -> int
Relevant code: f
------------------------------------------------------------------
File "2548.ml", line 28, characters 43-57:
Try replacing
    List.fold_left
with
    i
of type
    (int -> int list -> int list) -> int -> 'a list -> 'b
within context
    fun l ->
      (let f a x = (bigAdd [a] x) in
          let base = 0 in let args = (List.rev l) in (i f base  args))
==============================
File "2548.ml", line 27, characters 14-20:
Try replacing
    bigAdd
with
    i
of type
    int list -> 'c -> int
within context
    fun l ->
      (let f a x = (i [a] x) in
          let base = 0 in let args = (List.rev l) in (List.fold_left f base  args))
==============================
File "2548.ml", line 28, characters 58-59:
Try replacing
    f
with
    -
of type
    int -> int -> int
within context
    fun l ->
      (let f a x = (bigAdd [a] x) in
          let base = 0 in let args = (List.rev l) in (List.fold_left - base  args))
==============================
File "2548.ml", line 28, characters 58-59:
Try replacing
    f
with
    +
of type
    int -> int -> int
within context
    fun l ->
      (let f a x = (bigAdd [a] x) in
          let base = 0 in let args = (List.rev l) in (List.fold_left + base  args))
==============================
File "2548.ml", line 28, characters 58-59:
Try replacing
    f
with
    i
of type
    int -> 'd -> int
within context
    fun l ->
      (let f a x = (bigAdd [a] x) in
          let base = 0 in let args = (List.rev l) in (List.fold_left i base  args))
==============================
