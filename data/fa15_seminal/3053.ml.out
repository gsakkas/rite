------------------------------------------------------------------
File "3053.ml", line 28, characters 51-52:
This expression has type int -> int -> int list but is here used with type
  int -> int -> int
Relevant code: f
------------------------------------------------------------------
File "3053.ml", line 28, characters 51-62:
Try replacing
    (List.fold_left f base  args)
with
    (List.fold_left args f  base)
of type
    int -> int -> int list
within context
    fun l1
      l2 ->
        (let f a x = let afactor = [a ; 0] in (bigAdd afactor (mulByDigit x l1)) in
            let base = [] in let args = l2 in (List.fold_left args f  base))
==============================
File "3053.ml", line 28, characters 51-52:
Try replacing
    f
with
    @
of type
    'a list -> 'a list -> 'a list
within context
    fun l2 ->
      (let f a x = let afactor = [a ; 0] in (bigAdd afactor (mulByDigit x l1)) in
          let base = [] in let args = l2 in (List.fold_left @ base  args))
==============================
