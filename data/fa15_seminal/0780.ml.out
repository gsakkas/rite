------------------------------------------------------------------
File "0780.ml", line 3, characters 65-69:
This expression has type 'a -> 'a but is here used with type 'a -> 'a -> 'b
Relevant code: base
------------------------------------------------------------------
File "0780.ml", line 3, characters 12-16:
Try replacing
    fun x f' d -> (x (a d))
with
    fun x d f' -> (x (a d))
of type
    ('c -> 'd) -> 'e -> 'f -> 'd
within context
    let pipe fs =
    let f a x d f' = (x (a d)) in let base c = c in (List.fold_left f base  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 12-16:
Try replacing
    fun f' d -> (x (a d))
with
    fun d f' -> (x (a d))
of type
    'g -> 'h -> 'i
within context
    let pipe fs =
    let f a x d f' = (x (a d)) in let base c = c in (List.fold_left f base  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 12-16:
Try replacing
    fun a x f' d -> (x (a d))
with
    fun a x d f' -> (x (a d))
of type
    ('j -> 'k) -> ('k -> 'l) -> 'j -> 'm -> 'l
within context
    let pipe fs =
    let f a x d f' = (x (a d)) in let base c = c in (List.fold_left f base  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 39-44:
Try replacing
    fun c -> c
with
    fun c _ -> c
of type
    'n -> 'o -> 'n
within context
    let pipe fs =
    let f a x f' d = (x (a d)) in let base c _ = c in (List.fold_left f base  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 39-44:
Try replacing
    fun c -> c
with
    fun _ c -> c
of type
    'p -> 'q -> 'q
within context
    let pipe fs =
    let f a x f' d = (x (a d)) in let base _ c = c in (List.fold_left f base  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 8-14:
Try replacing
    fun a x f' d -> (x (a d))
with
    fun f' x a d -> (x (a d))
of type
    'r -> ('s -> 't) -> ('u -> 's) -> 'u -> 't
within context
    let pipe fs =
    let f f' x a d = (x (a d)) in let base c = c in (List.fold_left f base  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 48-64:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'v -> 'w list -> 'v
within context
    let pipe fs =
    let f a x f' d = (x (a d)) in let base c = c in (List.fold_left (f base fs))
    ;; 
==============================
File "0780.ml", line 3, characters 48-62:
Try replacing
    List.fold_left
with
    f
of type
    (('x -> 'y) -> ('y -> 'z) -> 'a1 -> 'x -> 'z) ->
    ((('y -> 'z) -> 'a1 -> 'x -> 'z) -> ('y -> 'z) -> 'a1 -> 'x -> 'z) ->
    'b1 -> ('x -> 'y) -> ('y -> 'z) -> 'a1 -> 'x -> 'z
within context
    let pipe fs = let f a x f' d = (x (a d)) in let base c = c in (f f base  fs) ;; 
==============================
File "0780.ml", line 3, characters 48-62:
Try replacing
    List.fold_left
with
    base
of type
    (('c1 -> 'c1) -> ('c1 -> 'd1) -> 'e1 -> 'c1 -> 'd1) ->
    ('c1 -> 'c1) -> ('c1 -> 'd1) -> 'e1 -> 'c1 -> 'd1
within context
    let pipe fs = let f a x f' d = (x (a d)) in let base c = c in (base f base  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 65-69:
Try replacing
    base
with
    f
of type
    ('f1 -> 'f1) -> ('f1 -> 'f1) -> 'g1 -> 'f1 -> 'f1
within context
    let pipe fs =
    let f a x f' d = (x (a d)) in let base c = c in (List.fold_left f f  fs)
    ;; 
==============================
File "0780.ml", line 3, characters 22-23:
Try replacing
    a
with
    f'
of type
    'h1 -> 'i1
within context
    fun x f' d -> (x (f' d))
==============================
File "0780.ml", line 3, characters 22-23:
Try replacing
    a
with
    x
of type
    'j1 -> 'j1
within context
    fun x f' d -> (x (x d))
==============================
File "0780.ml", line 3, characters 24-25:
Try replacing
    d
with
    f'
of type
    'k1
within context
    fun x f' d -> (x (a f'))
==============================
File "0780.ml", line 3, characters 43-44:
Try replacing
    c
with
    f
of type
    ('l1 -> 'm1) -> ('m1 -> 'n1) -> 'o1 -> 'l1 -> 'n1
within context
    let pipe fs =
    let f a x f' d = (x (a d)) in let base c = f in (List.fold_left f base  fs)
    ;; 
==============================
