------------------------------------------------------------------
File "1704.ml", line 19, characters 24-41:
This expression has type float but is here used with type int
Relevant code: (eval (e1, x, y))
------------------------------------------------------------------
Triaged the following locations:
File "1704.ml", line 19, characters 63-64:
And modified the following location:
File "1704.ml", line 19, characters 42-43:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /
If you ignore other surrounding code, try replacing
    +
with
    +; [[...]]
The actual replacement has type
    float -> float -> 'a
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> (1.0 *. x)
                              | VarY -> (1.0 *. y)
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +; [[...]] (eval (e2, x, y)))
                                      /; [[...]] 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
Triaged the following locations:
File "1704.ml", line 19, characters 63-64:
And modified the following location:
File "1704.ml", line 19, characters 42-43:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    /
If you ignore other surrounding code, try replacing
    +
with
    <
The actual replacement has type
    float -> float -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> (1.0 *. x)
                              | VarY -> (1.0 *. y)
                              | Sine e' -> (sin (pi *. (eval (e', x, y))))
                              | Cosine e' -> (cos (pi *. (eval (e', x, y))))
                              | Average (e1, e2) ->
                                ((eval (e1, x, y)) < (eval (e2, x, y))
                                      /; [[...]] 2.0)
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *. (eval (e2, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))) ;; 
==============================
