------------------------------------------------------------------
File "1179.ml", line 28, characters 70-72:
This expression has type int but is here used with type float
Relevant code: 10
------------------------------------------------------------------
File "1179.ml", line 28, characters 70-72:
Try replacing
    10
with
    10; [[...]]
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin (pi *. (eval (a, x, y))))
                              | Cosine b -> (cos (pi *. (eval (b, x, y))))
                              | Average (c, d) ->
                                (((eval (c, x, y)) +. (eval (d, x, y))) /. 2.0)
                              | Times (e, f) ->
                                ((eval (e, x, y)) *. (eval (f, x, y)))
                              | Thresh (g, h, i, j) ->
                                (if (eval (g, x, y)) < (eval (h, x, y)) then
                                    (eval (i, x, y))
                                    else
                                    (eval (j, x, y)))
                              | Funny (k, l, m) ->
                                ((((eval (k, x, y)) +. (eval (l, x, y)))
                                          +. (eval (m, x, y)))
                                      /. 10; [[...]])
                              | Funny1 n ->
                                ((sqrt (abs_float (eval (n, x, y)))) /. 1000.0)) ;; 
==============================
File "1179.ml", line 28, characters 67-69:
Try replacing
    /.
with
    /.; [[...]]
of type
    float -> int -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine a -> (sin (pi *. (eval (a, x, y))))
                              | Cosine b -> (cos (pi *. (eval (b, x, y))))
                              | Average (c, d) ->
                                (((eval (c, x, y)) +. (eval (d, x, y))) /. 2.0)
                              | Times (e, f) ->
                                ((eval (e, x, y)) *. (eval (f, x, y)))
                              | Thresh (g, h, i, j) ->
                                (if (eval (g, x, y)) < (eval (h, x, y)) then
                                    (eval (i, x, y))
                                    else
                                    (eval (j, x, y)))
                              | Funny (k, l, m) ->
                                ((((eval (k, x, y)) +. (eval (l, x, y)))
                                          +. (eval (m, x, y)))
                                      /.; [[...]] 10)
                              | Funny1 n ->
                                ((sqrt (abs_float (eval (n, x, y)))) /. 1000.0)) ;; 
==============================
