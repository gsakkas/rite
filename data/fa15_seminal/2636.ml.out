------------------------------------------------------------------
File "2636.ml", line 18, characters 57-58:
This expression has type int list list -> int -> int * int list list
but is here used with type int list list -> int -> int list list
Relevant code: f
------------------------------------------------------------------
File "2636.ml", line 18, characters 57-58:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list -> 'b -> int * 'a list
within context
    let f a x = 0, (mulByDigit x l1) @ (clone 0 (List.length a)) :: a in
      let base = 0, [] in
      let args = (List.rev l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "2636.ml", line 18, characters 42-56:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list list -> int -> int * int list list) ->
    int * 'c list -> 'd list -> 'e * 'f
within context
    let f a x = 0, (mulByDigit x l1) @ (clone 0 (List.length a)) :: a in
      let base = 0, [] in
      let args = (List.rev l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "2636.ml", line 16, characters 8-73:
Try replacing
    fun a x -> (0, (mulByDigit x l1) @ (clone 0 (List.length a)) :: a)
with
    fun a x -> (0, (mulByDigit x l1) @ (clone 0 (List.length a)) :: a); [[...]]
of type
    'g
within context
    let bigMul l1 l2 =
    let f =
      fun a x -> (0, (mulByDigit x l1) @ (clone 0 (List.length a)) :: a); [[...]]
      in
      let base = 0, [] in
      let args = (List.rev l2) in
      let (_, res) = (List.fold_left f base  args) in res
    ;; 
==============================
