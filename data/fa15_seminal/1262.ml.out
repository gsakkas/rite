------------------------------------------------------------------
File "1262.ml", line 3, characters 64-68:
This expression has type 'a -> 'a but is here used with type
  'a -> ('b -> 'a -> 'c) -> 'b -> 'c
Relevant code: base
------------------------------------------------------------------
File "1262.ml", line 3, characters 12-15:
Try replacing
    fun x b x a -> (x a b)
with
    fun x x b a -> (x a b)
of type
    'd -> ('e -> 'f -> 'g) -> 'f -> 'e -> 'g
within context
    let pipe fs =
    let f a x x b a = (x a b) in let base i = i in (List.fold_left f base  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 10-13:
Try replacing
    fun x b x a -> (x a b)
with
    fun b x x a -> (x a b)
of type
    'h -> 'i -> ('j -> 'h -> 'k) -> 'j -> 'k
within context
    let pipe fs =
    let f a b x x a = (x a b) in let base i = i in (List.fold_left f base  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 12-15:
Try replacing
    fun b x a -> (x a b)
with
    fun x b a -> (x a b)
of type
    ('l -> 'm -> 'n) -> 'm -> 'l -> 'n
within context
    let pipe fs =
    let f a x x b a = (x a b) in let base i = i in (List.fold_left f base  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 10-13:
Try replacing
    fun a x b x a -> (x a b)
with
    fun a b x x a -> (x a b)
of type
    'o -> 'p -> 'q -> ('r -> 'p -> 's) -> 'r -> 's
within context
    let pipe fs =
    let f a b x x a = (x a b) in let base i = i in (List.fold_left f base  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 12-15:
Try replacing
    fun a x b x a -> (x a b)
with
    fun a x x b a -> (x a b)
of type
    't -> 'u -> ('v -> 'w -> 'x) -> 'w -> 'v -> 'x
within context
    let pipe fs =
    let f a x x b a = (x a b) in let base i = i in (List.fold_left f base  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 38-43:
Try replacing
    fun i -> i
with
    fun i _ -> i
of type
    'y -> 'z -> 'y
within context
    let pipe fs =
    let f a x b x a = (x a b) in let base i _ = i in (List.fold_left f base  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 47-63:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    ('a1 -> 'b1) -> ('a1 -> ('a1 -> 'b1) -> 'b1) list -> 'a1 -> 'b1
within context
    let pipe fs =
    let f a x b x a = (x a b) in let base i = i in (List.fold_left (f base fs))
    ;; 
==============================
File "1262.ml", line 3, characters 47-61:
Try replacing
    List.fold_left
with
    base
of type
    (('c1 -> 'c1) -> 'd1 -> 'e1 -> ('f1 -> 'e1 -> 'g1) -> 'f1 -> 'g1) ->
    ('c1 -> 'c1) -> 'd1 -> 'e1 -> ('f1 -> 'e1 -> 'g1) -> 'f1 -> 'g1
within context
    let pipe fs = let f a x b x a = (x a b) in let base i = i in (base f base  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 47-61:
Try replacing
    List.fold_left
with
    f
of type
    ('h1 -> 'i1 -> 'j1 -> ('k1 -> 'j1 -> 'l1) -> 'k1 -> 'l1) ->
    ('m1 -> 'm1) -> 'n1 -> ('o1 -> 'n1 -> 'p1) -> 'o1 -> 'p1
within context
    let pipe fs = let f a x b x a = (x a b) in let base i = i in (f f base  fs) ;; 
==============================
File "1262.ml", line 3, characters 64-68:
Try replacing
    base
with
    f
of type
    'q1 ->
    ('r1 -> 'q1 -> ('s1 -> 'r1 -> 't1) -> 's1 -> 't1) ->
    'r1 -> ('s1 -> 'r1 -> 't1) -> 's1 -> 't1
within context
    let pipe fs =
    let f a x b x a = (x a b) in let base i = i in (List.fold_left f f  fs)
    ;; 
==============================
File "1262.ml", line 3, characters 24-25:
Try replacing
    b
with
    List.fold_left
of type
    ('u1 -> 'v1 -> 'u1) -> 'u1 -> 'v1 list -> 'u1
within context
    fun x b x a -> (x a List.fold_left)
==============================
File "1262.ml", line 3, characters 24-25:
Try replacing
    b
with
    a
of type
    'w1
within context
    fun x b x a -> (x a a)
==============================
File "1262.ml", line 3, characters 24-25:
Try replacing
    b
with
    fs
of type
    'x1 list
within context
    fun x b x a -> (x a fs)
==============================
File "1262.ml", line 3, characters 42-43:
Try replacing
    i
with
    f
of type
    'y1 -> 'z1 -> 'a2 -> ('b2 -> 'a2 -> 'c2) -> 'b2 -> 'c2
within context
    let pipe fs =
    let f a x b x a = (x a b) in let base i = f in (List.fold_left f base  fs)
    ;; 
==============================
