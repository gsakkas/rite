------------------------------------------------------------------
File "0457.ml", line 11, characters 9-16:
This expression has type ((int -> int) -> int) * 'a
but is here used with type
  ((int -> int) -> (int -> int) * bool) * (int -> int)
Relevant code: (gs, b)
------------------------------------------------------------------
File "0457.ml", line 11, characters 10-15:
Try replacing
    gs, b
with
    b, gs
of type
    (((int -> int) -> int) -> ((int -> int) -> int) * bool) *
    ((int -> int) -> int)
within context
    let fixpoint (f, b) =
    let gs x =
      let isFPoint x = (f x) - x < 0 in
        let iterate (t, y) = (t y) in
        let rec go r = (if (isFPoint r) then r else (go (iterate (x, r)))) in 8
      in
      (wwhile (b, gs))
    ;; 
==============================
File "0457.ml", line 11, characters 2-8:
Try replacing
    wwhile
with
    <
of type
    ((int -> int) -> int) * 'b -> ((int -> int) -> int) * 'b -> bool
within context
    let fixpoint (f, b) =
    let gs x =
      let isFPoint x = (f x) - x < 0 in
        let iterate (t, y) = (t y) in
        let rec go r = (if (isFPoint r) then r else (go (iterate (x, r)))) in 8
      in
      (< (gs, b))
    ;; 
==============================
File "0457.ml", line 11, characters 2-8:
Try replacing
    wwhile
with
    =
of type
    ((int -> int) -> int) * 'c -> ((int -> int) -> int) * 'c -> bool
within context
    let fixpoint (f, b) =
    let gs x =
      let isFPoint x = (f x) - x < 0 in
        let iterate (t, y) = (t y) in
        let rec go r = (if (isFPoint r) then r else (go (iterate (x, r)))) in 8
      in
      (= (gs, b))
    ;; 
==============================
