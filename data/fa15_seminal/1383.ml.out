------------------------------------------------------------------
File "1383.ml", line 29, characters 17-21:
This expression has type int but is here used with type float
Relevant code: (-1)
------------------------------------------------------------------
File "1383.ml", line 29, characters 17-21:
Try replacing
    -1
with
    -1; [[...]]
of type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine sine -> (sin (pi *. (eval (sine, x, y))))
                              | Cosine cosine -> (cos (pi *. (eval (cosine, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (t1, t2) ->
                                ((eval (t1, x, y)) *. (eval (t2, x, y)))
                              | Thresh (th1, th2, th3, th4) ->
                                (if (eval (th1, x, y)) < (eval (th2, x, y)) then
                                    (eval (th3, x, y))
                                    else
                                    (eval (th4, x, y)))
                              | Circ (circ1, circ2) ->
                                (sqrt
                                    ((eval (circ1, x, y)) ** 2.0
                                        +. (eval (circ2, x, y)) ** 2.0))
                              | NatLog m4 -> (-1; [[...]] *. (eval (m4, x, y)))) ;; 
==============================
File "1383.ml", line 29, characters 22-24:
Try replacing
    *.
with
    *.; [[...]]
of type
    int -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine sine -> (sin (pi *. (eval (sine, x, y))))
                              | Cosine cosine -> (cos (pi *. (eval (cosine, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (t1, t2) ->
                                ((eval (t1, x, y)) *. (eval (t2, x, y)))
                              | Thresh (th1, th2, th3, th4) ->
                                (if (eval (th1, x, y)) < (eval (th2, x, y)) then
                                    (eval (th3, x, y))
                                    else
                                    (eval (th4, x, y)))
                              | Circ (circ1, circ2) ->
                                (sqrt
                                    ((eval (circ1, x, y)) ** 2.0
                                        +. (eval (circ2, x, y)) ** 2.0))
                              | NatLog m4 -> (-1 *.; [[...]] (eval (m4, x, y)))) ;; 
==============================
