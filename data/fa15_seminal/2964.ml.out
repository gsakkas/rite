------------------------------------------------------------------
File "2964.ml", line 4, characters 35-39:
This expression has type int but is here used with type 'a list
Relevant code: base
------------------------------------------------------------------
File "2964.ml", line 4, characters 13-14:
Try replacing
    0
with
    0; [[...]]
of type
    'b
within context
    let pipe fs = let f a x = (match x with 
                               | [] -> []
                               | h :: t ->
                                 h) in let base = 0; [[...]] in
      (List.fold_left f base  fs) ;; 
==============================
File "2964.ml", line 4, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int -> 'c -> int
within context
    let pipe fs = let f a x = (match x with 
                               | [] -> []
                               | h :: t ->
                                 h) in let base = 0 in
      (List.fold_left (f; [[...]]) base  fs) ;; 
==============================
File "2964.ml", line 4, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    'd list
within context
    let pipe fs = let f a x = (match x with 
                               | [] -> []
                               | h :: t ->
                                 h) in let base = 0 in
      (List.fold_left f (base; [[...]])  fs) ;; 
==============================
File "2964.ml", line 4, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('e -> 'f list list -> 'f list) -> int -> 'g -> 'h
within context
    let pipe fs = let f a x = (match x with 
                               | [] -> []
                               | h :: t ->
                                 h) in let base = 0 in
      ((List.fold_left; [[...]]) f base  fs) ;; 
==============================
File "2964.ml", line 3, characters 8-49:
Try replacing
    fun a x -> (match x with 
                | [] -> []
                | h :: t -> h)
with
    fun a x -> (match x with 
                | [] -> []
                | h :: t -> h); [[...]]
of type
    'i
==============================
