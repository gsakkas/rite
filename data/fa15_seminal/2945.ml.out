------------------------------------------------------------------
File "2945.ml", line 19, characters 35-39:
This expression has type 'a list but is here used with type
  int list * int list
Relevant code: base
------------------------------------------------------------------
File "2945.ml", line 17, characters 15-17:
Try replacing
    []
with
    []; [[...]]
of type
    'b
within context
    fun l2 -> (let add (l1, l2) = let f a x = (match x with 
                                               | (first, second) ->
                                                 ([2],
                                                       [1
                                                           ])) in let base =
            []; [[...]]
            in
            let args = (List.rev (List.combine l1 l2)) in
            let (_, res) = (List.fold_left f base  args) in
            res in (removeZero (add (padZero l1 l2))))
==============================
File "2945.ml", line 19, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int list * int list
within context
    let f a x = (match x with 
                 | (first, second) ->
                   ([2],
                         [1
                             ])) in let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "2945.ml", line 19, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('c -> 'd * 'e -> int list * int list) ->
    'f list -> ('g * 'h) list -> 'i * 'j
within context
    let f a x = (match x with 
                 | (first, second) ->
                   ([2],
                         [1
                             ])) in let base = [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
