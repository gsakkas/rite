------------------------------------------------------------------
File "0496.ml", line 22, characters 35-39:
This expression has type int * 'a list but is here used with type int * int
Relevant code: base
------------------------------------------------------------------
File "0496.ml", line 22, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x =
      let (carry, acc) = a in
        let (x1, x2) = x in let sum = (x1 + x2) + carry in sum / 10, (mod sum 10)
      in
      let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0496.ml", line 22, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * 'e -> int * int -> int * int) ->
    int * 'f list -> ('g * 'h) list -> 'i * 'j
within context
    let f a x =
      let (carry, acc) = a in
        let (x1, x2) = x in let sum = (x1 + x2) + carry in sum / 10, (mod sum 10)
      in
      let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0496.ml", line 16, characters 10-133:
Try replacing
    fun a
      x ->
        (let (carry, acc) = a in
            let (x1, x2) = x in
            let sum = (x1 + x2) + carry in sum / 10, (mod sum 10))
with
    fun a
      x ->
        (let (carry, acc) = a in
            let (x1, x2) = x in
            let sum = (x1 + x2) + carry in sum / 10, (mod sum 10));
    [[...]]
of type
    'k
==============================
