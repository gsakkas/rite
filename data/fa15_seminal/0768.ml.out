------------------------------------------------------------------
File "0768.ml", line 20, characters 35-39:
This expression has type (int * int) list but is here used with type
  int * int list
Relevant code: base
------------------------------------------------------------------
File "0768.ml", line 20, characters 35-39:
Try replacing
    base
with
    base; [[...]]
of type
    int * int list
within context
    let f a x =
      let (x1, x2) = x in
        let (a1, a2) = a in
        (if ((a1 + x1) + x2 >= 10) then 1 else 0), (a1 + x1) + x2 :: a2
      in
      let base = [0, 0] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left f (base; [[...]])  args) in res
==============================
File "0768.ml", line 18, characters 15-23:
Try replacing
    [0, 0]
with
    [0, 0]; [[...]]
of type
    'a
within context
    fun l2 ->
      (let add (l1, l2) =
          let f a x =
            let (x1, x2) = x in
              let (a1, a2) = a in
              (if ((a1 + x1) + x2 >= 10) then 1 else 0), (a1 + x1) + x2 :: a2
            in
            let base = [0, 0]; [[...]] in
            let args = (List.combine l1 l2) in
            let (_, res) = (List.fold_left f base  args) in res
          in
          (removeZero (add (padZero l1 l2))))
==============================
File "0768.ml", line 20, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int * int -> int * int list) ->
    (int * int) list -> ('b * 'c) list -> 'd * 'e
within context
    let f a x =
      let (x1, x2) = x in
        let (a1, a2) = a in
        (if ((a1 + x1) + x2 >= 10) then 1 else 0), (a1 + x1) + x2 :: a2
      in
      let base = [0, 0] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
