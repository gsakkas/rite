------------------------------------------------------------------
File "2017.ml", line 6, characters 9-69:
This expression has type ('a -> 'a * bool) * ('a -> 'a * bool)
but is here used with type ('a -> 'a * bool) * 'a
Relevant code: ((let g x = if (f x) = b then f x else f (x + 1) in g 0), b)
------------------------------------------------------------------
File "2017.ml", line 6, characters 2-8:
Try replacing
    wwhile
with
    =
of type
    'b * 'b -> 'b * 'b -> bool
within context
    let fixpoint (f, b) =
    (= ((let g x = (if (f x) = b then (f x) else (f (x + 1))) in (g 0)), b))
    ;; 
==============================
File "2017.ml", line 6, characters 67-68:
Try replacing
    b
with
    +
of type
    ((int -> int -> int) -> (int -> int -> int) * bool) * (int -> int -> int)
within context
    let fixpoint (f, b) =
    (wwhile ((let g x = (if (f x) = b then (f x) else (f (x + 1))) in (g 0)), +))
    ;; 
==============================
File "2017.ml", line 6, characters 67-68:
Try replacing
    b
with
    =
of type
    (('c -> 'c -> bool) -> ('c -> 'c -> bool) * bool) * ('c -> 'c -> bool)
within context
    let fixpoint (f, b) =
    (wwhile ((let g x = (if (f x) = b then (f x) else (f (x + 1))) in (g 0)), =))
    ;; 
==============================
File "2017.ml", line 6, characters 25-26:
Try replacing
    f
with
    +
of type
    int -> int -> int
within context
    let g x = (if (+ x) = b then (f x) else (f (x + 1))) in (g 0)
==============================
File "2017.ml", line 6, characters 25-26:
Try replacing
    f
with
    =
of type
    int -> int -> bool
within context
    let g x = (if (= x) = b then (f x) else (f (x + 1))) in (g 0)
==============================
