------------------------------------------------------------------
File "0151.ml", line 19, characters 28-65:
This expression has type bool but is here used with type int
Relevant code: (exprToString e1) < (exprToString e2)
------------------------------------------------------------------
File "0151.ml", line 19, characters 46-47:
Try replacing
    <
with
    *
of type
    int -> int -> int
within context
    let rec exprToString e = (match e with 
                              | VarX -> 0
                              | VarY -> 1
                              | Sine e1 -> (exprToString e1)
                              | Cosine e1 -> (exprToString e1)
                              | Average (e1, e2) ->
                                ((exprToString e1) + (exprToString e2)) / 2
                              | Times (e1, e2) ->
                                (exprToString e1) * (exprToString e2)
                              | Thresh (e1, e2, e3, e4) ->
                                (exprToString e1) * (exprToString e2)) ;; 
==============================
File "0151.ml", line 19, characters 46-47:
Try replacing
    <
with
    /
of type
    int -> int -> int
within context
    let rec exprToString e = (match e with 
                              | VarX -> 0
                              | VarY -> 1
                              | Sine e1 -> (exprToString e1)
                              | Cosine e1 -> (exprToString e1)
                              | Average (e1, e2) ->
                                ((exprToString e1) + (exprToString e2)) / 2
                              | Times (e1, e2) ->
                                (exprToString e1) * (exprToString e2)
                              | Thresh (e1, e2, e3, e4) ->
                                (exprToString e1) / (exprToString e2)) ;; 
==============================
File "0151.ml", line 19, characters 46-47:
Try replacing
    <
with
    +
of type
    int -> int -> int
within context
    let rec exprToString e = (match e with 
                              | VarX -> 0
                              | VarY -> 1
                              | Sine e1 -> (exprToString e1)
                              | Cosine e1 -> (exprToString e1)
                              | Average (e1, e2) ->
                                ((exprToString e1) + (exprToString e2)) / 2
                              | Times (e1, e2) ->
                                (exprToString e1) * (exprToString e2)
                              | Thresh (e1, e2, e3, e4) ->
                                (exprToString e1) + (exprToString e2)) ;; 
==============================
