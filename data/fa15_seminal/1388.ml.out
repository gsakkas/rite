------------------------------------------------------------------
File "1388.ml", line 15, characters 16-54:
This expression has type string but is here used with type expr
Relevant code: "sin(pi*" ^ ((exprToString sin) ^ ")")
------------------------------------------------------------------
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 15-27:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    exprToString
with
    exprToString
The actual replacement has type
    expr -> string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 15-30:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    (exprToString e1)
with
    (exprToString (e1))
The actual replacement has type
    string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString (e1)) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 32-33:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    ^
with
    ^
The actual replacement has type
    string -> string -> string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 28-30:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    e1
with
    e
The actual replacement has type
    expr
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 28-30:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    e1
with
    e1
The actual replacement has type
    expr
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 28-30:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    e1
with
    e2
The actual replacement has type
    expr
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e2) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 60-61:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    ^
with
    ^
The actual replacement has type
    string -> string -> string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 43-58:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    (exprToString e2)
with
    (exprToString (e2))
The actual replacement has type
    string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString (e2)) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 56-58:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    e2
with
    e1
The actual replacement has type
    expr
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e1) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 56-58:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    e2
with
    e2
The actual replacement has type
    expr
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 56-58:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    e2
with
    e
The actual replacement has type
    expr
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 43-55:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    exprToString
with
    exprToString
The actual replacement has type
    expr -> string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 39-40:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    ^
with
    ^
The actual replacement has type
    string -> string -> string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 19, characters 21-66:
File "1388.ml", line 21, characters 6-202:
And modified the following location:
File "1388.ml", line 18, characters 11-12:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    ^
with
    ^
The actual replacement has type
    string -> string -> string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) ->
                                "((" ^
                                    ((exprToString e1) ^
                                        ("+" ^ ((exprToString e2) ^ ")/2)")))
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "1388.ml", line 13, characters 13-14:
File "1388.ml", line 14, characters 13-14:
File "1388.ml", line 18, characters 6-71:
File "1388.ml", line 19, characters 21-66:
And modified the following location:
File "1388.ml", line 22, characters 10-22:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    e

    e
If you ignore other surrounding code, try replacing
    exprToString
with
    exprToString
The actual replacement has type
    expr -> string
within context
    let rec exprToString e = (match e with 
                              | VarX -> (e; [[...]])
                              | VarY -> (e; [[...]])
                              | Sine sin -> "sin(pi*" ^ ((exprToString sin) ^ ")")
                              | Cosine cos -> "cos(pi*" ^ ((exprToString cos) ^ ")")
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (t1, t2) -> [[...other program...]]
                              | Thresh (th1, th2, th3, th4) ->
                                "(" ^
                                    ((exprToString th1) ^
                                        ("<*" ^
                                            ((exprToString th2) ^
                                                ("?" ^
                                                    ((exprToString th3) ^
                                                        (":" ^
                                                            ((exprToString th4)
                                                                ^ ")")))))))) ;; 
==============================
