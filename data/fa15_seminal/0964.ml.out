------------------------------------------------------------------
File "0964.ml", line 21, characters 14-42:
This expression has type float but is here used with type expr
Relevant code: sin (pi *. (eval (e, x, y)))
------------------------------------------------------------------
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 31-33:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    e1
with
    e2
The actual replacement has type
    expr * 'a * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e2, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 25-40:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    (eval (e1, x, y))
with
    (eval ((e1, x, y)))
The actual replacement has type
    float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval ((e1, x, y))) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 42-44:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    +.
with
    x
The actual replacement has type
    float -> float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) x (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 31-33:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    e1
with
    x
The actual replacement has type
    expr * expr * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (x, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 31-33:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    e1
with
    e1
The actual replacement has type
    expr * 'b * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 31-33:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    e1
with
    e
The actual replacement has type
    expr * 'c * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 35-36:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    x
with
    e
The actual replacement has type
    expr * expr * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, e, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 35-36:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    x
with
    y
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, y, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 35-36:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    x
with
    x
The actual replacement has type
    expr * 'd * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 38-39:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    y
with
    x
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, x)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 38-39:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    y
with
    y
The actual replacement has type
    expr * 'e * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 31-36:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    e1, x, y
with
    x, e1, y
The actual replacement has type
    expr * expr * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (x, e1, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 52-54:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    e2
with
    e
The actual replacement has type
    expr * 'f * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 35-39:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    e1, x, y
with
    e1, y, x
The actual replacement has type
    expr * float * float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, y, x)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "0964.ml", line 19, characters 13-22:
File "0964.ml", line 24, characters 21-59:
File "0964.ml", line 25, characters 34-68:
And modified the following location:
File "0964.ml", line 23, characters 25-29:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    (buildX ())
If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * 'g * float -> float
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> ((buildX ()); [[...]])
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (e1, e2) ->
                                (((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0)
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (a, b, a_less, b_less) ->
                                [[...other program...]]) ;; 
==============================
