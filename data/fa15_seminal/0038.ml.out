------------------------------------------------------------------
File "0038.ml", line 19, characters 35-39:
This expression has type int * 'a list but is here used with type string
Relevant code: base
------------------------------------------------------------------
File "0038.ml", line 19, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x = "" in
      let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0038.ml", line 16, characters 10-18:
Try replacing
    fun a x -> ""
with
    fun a x -> ""; [[...]]
of type
    'e
within context
    fun l1
      l2 ->
        (let add (l1, l2) =
            let f = fun a x -> ""; [[...]] in
              let base = 0, [] in
              let args = (List.combine l1 l2) in
              let (_, res) = (List.fold_left f base  args) in res
            in
            (removeZero (add (padZero l1 l2))))
==============================
File "0038.ml", line 19, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    ('f -> 'g -> string) -> int * 'h list -> ('i * 'j) list -> 'k * 'l
within context
    let f a x = "" in
      let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
