------------------------------------------------------------------
File "0489.ml", line 18, characters 15-27:
This function is applied to too many arguments,
maybe you forgot a `;'
Relevant code: List.combine
------------------------------------------------------------------
Triaged the following locations:
File "0489.ml", line 19, characters 4-51:
And modified the following location:
File "0489.ml", line 18, characters 28-35:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (List.combine padZero l1  l2)
with
    (List.combine l1 l2)
The actual replacement has type
    ('b * 'c) list
within context
    let add (l1, l2) = let f a x = (match x with 
                                    | (x1, x2) ->
                                      x1 + x2 ::
                                            a) in let base = [], [] in
        let args = (List.combine l1 l2) in
        [[...other program...]] in (removeZero (add (padZero l1 l2)))
==============================
Triaged the following locations:
File "0489.ml", line 19, characters 4-51:
And modified the following location:
File "0489.ml", line 18, characters 15-27:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    List.combine
with
    List.combine; [[...]]
The actual replacement has type
    (int list -> int list -> int list * int list) -> 'd -> 'e -> 'f
within context
    let add (l1, l2) = let f a x = (match x with 
                                    | (x1, x2) ->
                                      x1 + x2 ::
                                            a) in let base = [], [] in
        let args = ((List.combine; [[...]]) padZero l1  l2) in
        [[...other program...]] in (removeZero (add (padZero l1 l2)))
==============================
Triaged the following locations:
File "0489.ml", line 19, characters 4-51:
And modified the following location:
File "0489.ml", line 18, characters 4-96:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let args = (List.combine padZero l1  l2) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'l
within context
    let add (l1, l2) = let f a x = (match x with 
                                    | (x1, x2) ->
                                      x1 + x2 ::
                                            a) in let base = [], [] in
        [[...other program...]] in (removeZero (add (padZero l1 l2)))
==============================
