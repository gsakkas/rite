------------------------------------------------------------------
File "2991.ml", line 22, characters 15-27:
This function is applied to too many arguments,
maybe you forgot a `;'
Relevant code: List.combine
------------------------------------------------------------------
Triaged the following locations:
File "2991.ml", line 23, characters 4-51:
And modified the following location:
File "2991.ml", line 22, characters 15-27:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    List.combine
with
    List.combine; [[...]]
The actual replacement has type
    ('b list -> 'b list) -> 'c -> ('d list -> 'd list) -> 'e -> 'f
within context
    let add (l1, l2) = let f a x = (match a with 
                                    | [] -> []
                                    | h :: t ->
                                      (let (j, k) = x in
                                            (if j + k > 9 then
                                                1 :: ((h + j) + k) - 10 :: t
                                                else
                                                0 ::
                                                    (h + j) + k ::
                                                    t))) in let base = [0] in
        let args = ((List.combine; [[...]]) List.rev l1  List.rev  l2) in
        [[...other program...]] in (removeZero (add (padZero l1 l2)))
==============================
Triaged the following locations:
File "2991.ml", line 23, characters 4-51:
And modified the following location:
File "2991.ml", line 22, characters 4-106:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let args = (List.combine List.rev l1  List.rev  l2) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'n
within context
    let add (l1, l2) = let f a x = (match a with 
                                    | [] -> []
                                    | h :: t ->
                                      (let (j, k) = x in
                                            (if j + k > 9 then
                                                1 :: ((h + j) + k) - 10 :: t
                                                else
                                                0 ::
                                                    (h + j) + k ::
                                                    t))) in let base = [0] in
        [[...other program...]] in (removeZero (add (padZero l1 l2)))
==============================
