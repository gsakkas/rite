------------------------------------------------------------------
File "2042.ml", line 3, characters 60-64:
This expression has type 'a -> 'a but is here used with type
  'a -> ('a -> 'b) -> 'b
Relevant code: base
------------------------------------------------------------------
File "2042.ml", line 3, characters 12-15:
Try replacing
    fun x x a -> (a x)
with
    fun x a x -> (a x)
of type
    'c -> ('d -> 'e) -> 'd -> 'e
within context
    let pipe fs =
    let f a x a x = (a x) in let base n = n in (List.fold_left f base  fs)
    ;; 
==============================
File "2042.ml", line 3, characters 12-15:
Try replacing
    fun x a -> (a x)
with
    fun a x -> (a x)
of type
    ('f -> 'g) -> 'f -> 'g
within context
    let pipe fs =
    let f a x a x = (a x) in let base n = n in (List.fold_left f base  fs)
    ;; 
==============================
File "2042.ml", line 3, characters 12-15:
Try replacing
    fun a x x a -> (a x)
with
    fun a x a x -> (a x)
of type
    'h -> 'i -> ('j -> 'k) -> 'j -> 'k
within context
    let pipe fs =
    let f a x a x = (a x) in let base n = n in (List.fold_left f base  fs)
    ;; 
==============================
File "2042.ml", line 3, characters 34-39:
Try replacing
    fun n -> n
with
    fun n _ -> n
of type
    'l -> 'm -> 'l
within context
    let pipe fs =
    let f a x x a = (a x) in let base n _ = n in (List.fold_left f base  fs)
    ;; 
==============================
File "2042.ml", line 3, characters 8-13:
Try replacing
    fun a x x a -> (a x)
with
    fun x x a a -> (a x)
of type
    'n -> 'o -> 'p -> ('o -> 'q) -> 'q
within context
    let pipe fs =
    let f x x a a = (a x) in let base n = n in (List.fold_left f base  fs)
    ;; 
==============================
File "2042.ml", line 3, characters 43-59:
Try replacing
    (List.fold_left f base  fs)
with
    (List.fold_left (f base fs))
of type
    'r -> ('r -> 'r) list -> 'r
within context
    let pipe fs =
    let f a x x a = (a x) in let base n = n in (List.fold_left (f base fs))
    ;; 
==============================
File "2042.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    base
of type
    (('s -> 's) -> 't -> 'u -> ('u -> 'v) -> 'v) ->
    ('s -> 's) -> 't -> 'u -> ('u -> 'v) -> 'v
within context
    let pipe fs = let f a x x a = (a x) in let base n = n in (base f base  fs) ;; 
==============================
File "2042.ml", line 3, characters 43-57:
Try replacing
    List.fold_left
with
    f
of type
    ('w -> 'x -> 'y -> ('y -> 'z) -> 'z) ->
    ('a1 -> 'a1) -> 'b1 -> ('b1 -> 'c1) -> 'c1
within context
    let pipe fs = let f a x x a = (a x) in let base n = n in (f f base  fs) ;; 
==============================
File "2042.ml", line 3, characters 60-64:
Try replacing
    base
with
    f
of type
    'd1 -> ('d1 -> 'e1 -> ('e1 -> 'f1) -> 'f1) -> 'e1 -> ('e1 -> 'f1) -> 'f1
within context
    let pipe fs =
    let f a x x a = (a x) in let base n = n in (List.fold_left f f  fs)
    ;; 
==============================
File "2042.ml", line 3, characters 20-21:
Try replacing
    x
with
    List.fold_left
of type
    ('g1 -> 'h1 -> 'g1) -> 'g1 -> 'h1 list -> 'g1
within context
    fun a x x a -> (a List.fold_left)
==============================
File "2042.ml", line 3, characters 20-21:
Try replacing
    x
with
    fs
of type
    'i1 list
within context
    fun a x x a -> (a fs)
==============================
File "2042.ml", line 3, characters 38-39:
Try replacing
    n
with
    f
of type
    'j1 -> 'k1 -> 'l1 -> ('l1 -> 'm1) -> 'm1
within context
    let pipe fs =
    let f a x x a = (a x) in let base n = f in (List.fold_left f base  fs)
    ;; 
==============================
