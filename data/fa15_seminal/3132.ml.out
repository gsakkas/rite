------------------------------------------------------------------
File "3132.ml", line 27, characters 39-40:
This expression has type int but is here used with type float
Relevant code: 1
------------------------------------------------------------------
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 24, characters 6-100:
File "3132.ml", line 29, characters 6-171:
And modified the following location:
File "3132.ml", line 22, characters 39-41:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *.
with
    /
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) ->
                                (eval (e1, x, y)) / (eval (e2, x, y))
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 24, characters 6-100:
File "3132.ml", line 29, characters 6-171:
And modified the following location:
File "3132.ml", line 22, characters 39-41:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *.
with
    *.; [[...]]
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) ->
                                ((eval (e1, x, y)) *.; [[...]] (eval (e2, x, y)))
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 24, characters 6-100:
File "3132.ml", line 29, characters 6-171:
And modified the following location:
File "3132.ml", line 22, characters 39-41:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    *.
with
    +
The actual replacement has type
    int -> int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) ->
                                (eval (e1, x, y)) + (eval (e2, x, y))
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                [[...other program...]]) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 12-16:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    eval
with
    eval
The actual replacement has type
    expr * int * int -> int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 18-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 18-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e3
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e3, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 18-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e2
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e2, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 18-20:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1
with
    e1
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 18-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1, x, y
with
    e1, x, y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 22-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, y, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 22-23:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    x
with
    x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 25-26:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, x, x)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 25-26:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    y
with
    y
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, x, y)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 22-26:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    e1, x, y
with
    e1, y, x
The actual replacement has type
    expr * int * int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval (e1, y, x)) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
Triaged the following locations:
File "3132.ml", line 19, characters 15-44:
File "3132.ml", line 20, characters 17-46:
File "3132.ml", line 21, characters 23-70:
File "3132.ml", line 22, characters 21-59:
File "3132.ml", line 24, characters 6-100:
And modified the following location:
File "3132.ml", line 29, characters 12-27:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (eval (e1, x, y))
with
    (eval ((e1, x, y)))
The actual replacement has type
    int
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e1 -> [[...other program...]]
                              | Cosine e1 -> [[...other program...]]
                              | Average (e1, e2) -> [[...other program...]]
                              | Times (e1, e2) -> [[...other program...]]
                              | Thresh (e1, e2, e3, e4) -> [[...other program...]]
                              | OneOver e ->
                                (if (eval (e, x, y)) > 1 then 1 / (eval (e, x, y))
                                    else
                                    1 / 3)
                              | OneOverAvg (e1, e2, e3) ->
                                (if
                                    ((eval ((e1, x, y))) + (eval (e2, x, y)))
                                        + (eval (e3, x, y))
                                      > 1
                                    then
                                    1 /
                                      (((eval (e1, x, y)) + (eval (e2, x, y)))
                                          + (eval (e3, x, y)))
                                    else
                                    -1 / 3)) ;; 
==============================
