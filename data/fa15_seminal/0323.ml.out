------------------------------------------------------------------
File "0323.ml", line 39, characters 38-42:
This expression has type int list but is here used with type int list list
Relevant code: args
------------------------------------------------------------------
File "0323.ml", line 39, characters 31-32:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list -> int -> int * 'a list
within context
    let f' a x = (List.append a (mulByDigit x l1)) in
      let base' = [] in
      let args = (List.fold_left f' base'  l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "0323.ml", line 39, characters 38-42:
Try replacing
    args
with
    args; [[...]]
of type
    int list list
within context
    let f' a x = (List.append a (mulByDigit x l1)) in
      let base' = [] in
      let args = (List.fold_left f' base'  l2) in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "0323.ml", line 39, characters 16-30:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int list -> int * int list) ->
    int * 'b list -> int list -> 'c * 'd
within context
    let f' a x = (List.append a (mulByDigit x l1)) in
      let base' = [] in
      let args = (List.fold_left f' base'  l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "0323.ml", line 38, characters 13-39:
Try replacing
    (List.fold_left f' base'  l2)
with
    (List.fold_left f' base'  l2); [[...]]
of type
    'e
within context
    let f a x =
      let (bit, l) = a in
        let movedList = (List.append l [0]) in bit + 1, (bigAdd movedList x)
      in
      let base = 0, [] in
      let f' a x = (List.append a (mulByDigit x l1)) in
      let base' = [] in
      let args = (List.fold_left f' base'  l2); [[...]] in
      let (_, res) = (List.fold_left f base  args) in res
==============================
File "0323.ml", line 36, characters 9-46:
Try replacing
    fun a x -> (List.append a (mulByDigit x l1))
with
    fun a x -> (List.append a (mulByDigit x l1)); [[...]]
of type
    'f
within context
    fun l1
      l2 ->
        (let f a x =
            let (bit, l) = a in
              let movedList = (List.append l [0]) in bit + 1, (bigAdd movedList x)
            in
            let base = 0, [] in
            let f' = fun a x -> (List.append a (mulByDigit x l1)); [[...]] in
            let base' = [] in
            let args = (List.fold_left f' base'  l2) in
            let (_, res) = (List.fold_left f base  args) in res)
==============================
File "0323.ml", line 32, characters 8-111:
Try replacing
    fun a
      x ->
        (let (bit, l) = a in
            let movedList = (List.append l [0]) in bit + 1, (bigAdd movedList x))
with
    fun a
      x ->
        (let (bit, l) = a in
            let movedList = (List.append l [0]) in bit + 1, (bigAdd movedList x));
    [[...]]
of type
    'g
==============================
