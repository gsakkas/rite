------------------------------------------------------------------
File "0187.ml", line 7, characters 70-71:
This expression has type 'a but is here used with type 'a list
Relevant code: h
------------------------------------------------------------------
File "0187.ml", line 7, characters 24-32:
Try replacing
    List.mem
with
    =
of type
    'b list -> 'b list -> bool
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = (if (= h seen) = true then seen else seen @ h) in
             let rest' = t in (helper (seen', rest'))))
==============================
File "0187.ml", line 7, characters 35-39:
Try replacing
    seen
with
    t
of type
    'c list list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = (if (List.mem h t) = true then seen else seen @ h) in
             let rest' = t in (helper (seen', rest'))))
==============================
File "0187.ml", line 7, characters 35-39:
Try replacing
    seen
with
    l
of type
    'd list list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = (if (List.mem h l) = true then seen else seen @ h) in
             let rest' = t in (helper (seen', rest'))))
==============================
File "0187.ml", line 7, characters 33-34:
Try replacing
    h
with
    @
of type
    'e list -> 'e list -> 'e list
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = (if (List.mem @ seen) = true then seen else seen @ h) in
             let rest' = t in (helper (seen', rest'))))
==============================
File "0187.ml", line 7, characters 33-34:
Try replacing
    h
with
    =
of type
    'f -> 'f -> bool
within context
    (match rest with 
     | [] -> seen
     | h :: t ->
       (let seen' = (if (List.mem = seen) = true then seen else seen @ h) in
             let rest' = t in (helper (seen', rest'))))
==============================
File "0187.ml", line 7, characters 70-71:
Try replacing
    h
with
    t
of type
    'g list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' =
                                 (if (List.mem h seen) = true then seen else
                                   seen @ t)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "0187.ml", line 7, characters 70-71:
Try replacing
    h
with
    rest
of type
    'h list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' =
                                 (if (List.mem h seen) = true then seen else
                                   seen @ rest)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
File "0187.ml", line 7, characters 70-71:
Try replacing
    h
with
    l
of type
    'i list
within context
    fun (seen, rest) -> (match rest with 
                         | [] -> seen
                         | h :: t ->
                           (let seen' =
                                 (if (List.mem h seen) = true then seen else
                                   seen @ l)
                                 in
                                 let rest' = t in (helper (seen', rest'))))
==============================
