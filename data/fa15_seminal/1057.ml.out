------------------------------------------------------------------
File "1057.ml", line 2, characters 72-74:
This expression has type 'a but is here used with type ('a -> 'a) list
Relevant code: fs
------------------------------------------------------------------
File "1057.ml", line 2, characters 67-71:
Try replacing
    base
with
    f
of type
    'b -> ('b -> 'c) -> 'c
within context
    let pipe fs = let f a x = (x a) in let base = fs in (List.fold_left f f  fs) ;; 
==============================
File "1057.ml", line 2, characters 67-71:
Try replacing
    base
with
    List.fold_left
of type
    ('d -> 'e -> 'd) -> 'd -> 'e list -> 'd
within context
    let pipe fs =
    let f a x = (x a) in let base = fs in (List.fold_left f List.fold_left  fs)
    ;; 
==============================
File "1057.ml", line 2, characters 44-46:
Try replacing
    fs
with
    List.fold_left
of type
    ('f -> 'g -> 'f) -> 'f -> 'g list -> 'f
within context
    let pipe fs =
    let f a x = (x a) in let base = List.fold_left in (List.fold_left f base  fs)
    ;; 
==============================
File "1057.ml", line 2, characters 44-46:
Try replacing
    fs
with
    f
of type
    'h -> ('h -> 'i) -> 'i
within context
    let pipe fs = let f a x = (x a) in let base = f in (List.fold_left f base  fs)
    ;; 
==============================
