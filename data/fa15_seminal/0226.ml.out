------------------------------------------------------------------
File "0226.ml", line 7, characters 55-61:
This expression has type (('a -> 'a) -> ('a -> 'a) * bool) * 'a
but is here used with type (('a -> 'a) -> ('a -> 'a) * bool) * ('a -> 'a)
Relevant code: (g, b)
------------------------------------------------------------------
File "0226.ml", line 7, characters 2-8:
Try replacing
    wwhile
with
    =
of type
    ('b -> ('c -> 'c) * bool) * 'c -> ('b -> ('c -> 'c) * bool) * 'c -> bool
within context
    let fixpoint (f, b) = (= (let g x = let xx = f in xx, b = (f b) in g, b)) ;; 
==============================
File "0226.ml", line 7, characters 35-37:
Try replacing
    xx
with
    b
of type
    'd * bool
within context
    (wwhile (let g x = let xx = f in b, b = (f b) in g, b))
==============================
File "0226.ml", line 7, characters 35-37:
Try replacing
    xx
with
    x
of type
    'e * bool
within context
    (wwhile (let g x = let xx = f in x, b = (f b) in g, b))
==============================
File "0226.ml", line 7, characters 35-37:
Try replacing
    xx
with
    =
of type
    ('f -> 'f -> bool) * bool
within context
    (wwhile (let g x = let xx = f in =, b = (f b) in g, b))
==============================
File "0226.ml", line 7, characters 59-60:
Try replacing
    b
with
    f
of type
    (('g -> 'g) -> ('g -> 'g) * bool) * ('g -> 'g)
within context
    let fixpoint (f, b) = (wwhile (let g x = let xx = f in xx, b = (f b) in g, f))
    ;; 
==============================
File "0226.ml", line 7, characters 29-30:
Try replacing
    f
with
    b
of type
    'h
within context
    fun (f, b) -> (wwhile (let g x = let xx = b in xx, b = (f b) in g, b))
==============================
File "0226.ml", line 7, characters 29-30:
Try replacing
    f
with
    x
of type
    'i
within context
    fun (f, b) -> (wwhile (let g x = let xx = x in xx, b = (f b) in g, b))
==============================
File "0226.ml", line 7, characters 29-30:
Try replacing
    f
with
    =
of type
    'j -> 'j -> bool
within context
    fun (f, b) -> (wwhile (let g x = let xx = = in xx, b = (f b) in g, b))
==============================
