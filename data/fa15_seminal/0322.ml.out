------------------------------------------------------------------
File "0322.ml", line 37, characters 38-42:
This expression has type int list list -> int list list
but is here used with type int list list
Relevant code: args
------------------------------------------------------------------
File "0322.ml", line 36, characters 37-37:
Try replacing
    (List.map (mulByDigit l1))
with
    (List.map (mulByDigit l1) [[...]])
of type
    int list list
within context
    fun l1
      l2 ->
        (let f a x =
            let (bit, l) = a in
              let movedList = (List.append l [0]) in bit + 1, (bigAdd movedList x)
            in
            let base = 0, [] in
            let args = (List.map (mulByDigit l1) [[...]]) in
            let (_, res) = (List.fold_left f base  args) in res)
==============================
File "0322.ml", line 37, characters 38-42:
Try replacing
    args
with
    args; [[...]]
of type
    int list list
within context
    let f a x =
      let (bit, l) = a in
        let movedList = (List.append l [0]) in bit + 1, (bigAdd movedList x)
      in
      let base = 0, [] in
      let args = (List.map (mulByDigit l1)) in
      let (_, res) = (List.fold_left f base  (args; [[...]])) in res
==============================
File "0322.ml", line 37, characters 16-30:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int * int list -> int list -> int * int list) ->
    int * 'a list -> (int list list -> int list list) -> 'b * 'c
within context
    let f a x =
      let (bit, l) = a in
        let movedList = (List.append l [0]) in bit + 1, (bigAdd movedList x)
      in
      let base = 0, [] in
      let args = (List.map (mulByDigit l1)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
