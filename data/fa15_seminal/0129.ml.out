------------------------------------------------------------------
File "0129.ml", line 26, characters 11-16:
This expression has type bool but is here used with type expr
Relevant code: false
------------------------------------------------------------------
Triaged the following locations:
File "0129.ml", line 22, characters 11-50:
File "0129.ml", line 24, characters 8-89:
File "0129.ml", line 26, characters 11-16:
And modified the following location:
File "0129.ml", line 21, characters 11-20:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    false
If you ignore other surrounding code, try replacing
    buildSine
with
    buildSine; [[...]]
The actual replacement has type
    unit -> unit
within context
    let rec build (rand, depth) = (if depth > 0 then (match rand with 
                                                      | 0 ->
                                                        ((buildSine; [[...]])
                                                            (build
                                                              (rand, depth - 1)))
                                                      | 1 -> [[...other program...]]
                                                      | 2 -> [[...other program...]]
                                                      | _ -> (false; [[...]]))) ;; 
==============================
Triaged the following locations:
File "0129.ml", line 21, characters 11-48:
File "0129.ml", line 24, characters 8-89:
File "0129.ml", line 26, characters 11-16:
And modified the following location:
File "0129.ml", line 22, characters 11-22:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    false
If you ignore other surrounding code, try replacing
    buildCosine
with
    buildCosine; [[...]]
The actual replacement has type
    unit -> unit
within context
    let rec build (rand, depth) = (if depth > 0 then (match rand with 
                                                      | 0 -> [[...other program...]]
                                                      | 1 ->
                                                        ((buildCosine; [[...]])
                                                            (build
                                                              (rand, depth - 1)))
                                                      | 2 -> [[...other program...]]
                                                      | _ -> (false; [[...]]))) ;; 
==============================
Triaged the following locations:
File "0129.ml", line 21, characters 11-48:
File "0129.ml", line 22, characters 11-50:
File "0129.ml", line 26, characters 11-16:
And modified the following location:
File "0129.ml", line 24, characters 8-20:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    false
If you ignore other surrounding code, try replacing
    buildAverage
with
    buildAverage; [[...]]
The actual replacement has type
    unit * unit -> unit
within context
    let rec build (rand, depth) = (if depth > 0 then (match rand with 
                                                      | 0 -> [[...other program...]]
                                                      | 1 -> [[...other program...]]
                                                      | 2 ->
                                                        ((buildAverage; [[...]])
                                                            ((build
                                                                  (rand, depth - 1))
                                                                ,
                                                                (build
                                                                  (rand,
                                                                      depth - 1))))
                                                      | _ -> (false; [[...]]))) ;; 
==============================
