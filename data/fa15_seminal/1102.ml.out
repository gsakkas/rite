------------------------------------------------------------------
File "1102.ml", line 19, characters 28-29:
This expression has type (int * 'a) list but is here used with type int list
Relevant code: t
------------------------------------------------------------------
Triaged the following locations:
File "1102.ml", line 20, characters 4-122:
And modified the following location:
File "1102.ml", line 19, characters 28-29:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    t
with
    t; [[...]]
The actual replacement has type
    int list
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match a with 
                                                  | h :: t ->
                                                    (let sum =
                                                          ((fst x) + (snd x))
                                                            + (fst h)
                                                          in
                                                          sum / 10 ::
                                                                (mod sum 10) ::
                                                                t;
                                                                [[...]])) in [[...other program...]] in (removeZero
                (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1102.ml", line 20, characters 4-122:
And modified the following location:
File "1102.ml", line 18, characters 48-48:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    (fst h)
with
    (fst [[...]] h)
The actual replacement has type
    int
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match a with 
                                                  | h :: t ->
                                                    (let sum =
                                                          ((fst x) + (snd x))
                                                            + (fst [[...]] h)
                                                          in
                                                          sum / 10 ::
                                                                (mod sum 10) ::
                                                                t)) in [[...other program...]] in (removeZero
                (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1102.ml", line 20, characters 4-122:
And modified the following location:
File "1102.ml", line 18, characters 43-46:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    fst
with
    fst; [[...]]
The actual replacement has type
    int -> int
within context
    fun l1 l2 -> (let add (l1, l2) = let f a x = (match a with 
                                                  | h :: t ->
                                                    (let sum =
                                                          ((fst x) + (snd x))
                                                            + ((fst; [[...]]) h)
                                                          in
                                                          sum / 10 ::
                                                                (mod sum 10) ::
                                                                t)) in [[...other program...]] in (removeZero
                (add (padZero l1 l2))))
==============================
Triaged the following locations:
File "1102.ml", line 20, characters 4-122:
And modified the following location:
File "1102.ml", line 15, characters 4-273:
Your code has several type errors.  If you ignore other surrounding code, try replacing
    let f a x = (match a with 
                 | h :: t ->
                   (let sum = ((fst x) + (snd x)) + (fst h) in
                         sum / 10 ::
                               (mod sum 10) ::
                               t)) in let base = [()] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left f base  args) in res
with
    [[...other program...]]
The actual replacement has type
    'b
==============================
