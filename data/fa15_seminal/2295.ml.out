------------------------------------------------------------------
File "2295.ml", line 29, characters 7-23:
This expression has type float but is here used with type int
Relevant code: (eval (l, x, y))
------------------------------------------------------------------
Triaged the following locations:
File "2295.ml", line 29, characters 44-45:
And modified the following location:
File "2295.ml", line 29, characters 24-25:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    *
If you ignore other surrounding code, try replacing
    *
with
    *; [[...]]
The actual replacement has type
    float -> float -> 'a
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Cotangent e -> (1.0 /. (tan (eval (e, x, y))))
                              | Volume (l, w, h) ->
                                (((eval (l, x, y)) *; [[...]] (eval (w, x, y)))
                                      *; [[...]] (eval (h, x, y)))) ;; 
==============================
Triaged the following locations:
File "2295.ml", line 29, characters 44-45:
And modified the following location:
File "2295.ml", line 29, characters 24-25:
Your code has several type errors.  The following subexpressions are type-correct on their own, but do not fit with the rest of the program:
    *
If you ignore other surrounding code, try replacing
    *
with
    <
The actual replacement has type
    float -> float -> bool
within context
    let rec eval (e, x, y) = (match e with 
                              | VarX -> x
                              | VarY -> y
                              | Sine e -> (sin (pi *. (eval (e, x, y))))
                              | Cosine e -> (cos (pi *. (eval (e, x, y))))
                              | Average (a, b) ->
                                (((eval (a, x, y)) +. (eval (b, x, y))) /. 2.0)
                              | Times (a, b) ->
                                ((eval (a, x, y)) *. (eval (b, x, y)))
                              | Thresh (a, b, c, d) ->
                                (if (eval (a, x, y)) < (eval (b, x, y)) then
                                    (eval (c, x, y))
                                    else
                                    (eval (d, x, y)))
                              | Cotangent e -> (1.0 /. (tan (eval (e, x, y))))
                              | Volume (l, w, h) ->
                                ((eval (l, x, y)) < (eval (w, x, y))
                                      *; [[...]] (eval (h, x, y)))) ;; 
==============================
