------------------------------------------------------------------
File "1579.ml", line 24, characters 35-39:
This expression has type int * 'a list but is here used with type int list
Relevant code: base
------------------------------------------------------------------
File "1579.ml", line 24, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'b list -> 'c * 'd -> int * 'b list
within context
    let f a x = let sum = (fst x) + (snd x) in (match a with 
                                                | h :: t ->
                                                  (h + sum) / 10 ::
                                                        (mod (h + sum) 10) :: t
                                                | _ ->
                                                  [sum / 10 ; (mod sum 10)
                                                        ]) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "1579.ml", line 24, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list -> int * int -> int list) ->
    int * 'e list -> ('f * 'g) list -> 'h * 'i
within context
    let f a x = let sum = (fst x) + (snd x) in (match a with 
                                                | h :: t ->
                                                  (h + sum) / 10 ::
                                                        (mod (h + sum) 10) :: t
                                                | _ ->
                                                  [sum / 10 ; (mod sum 10)
                                                        ]) in let base = 0, [] in
      let args = (List.rev (List.combine l1 l2)) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "1579.ml", line 17, characters 10-167:
Try replacing
    fun a x -> (let sum = (fst x) + (snd x) in (match a with 
                                                | h :: t ->
                                                  (h + sum) / 10 ::
                                                        (mod (h + sum) 10) :: t
                                                | _ -> [sum / 10 ; (mod sum 10)]))
with
    fun a x -> (let sum = (fst x) + (snd x) in (match a with 
                                                | h :: t ->
                                                  (h + sum) / 10 ::
                                                        (mod (h + sum) 10) :: t
                                                | _ ->
                                                  [sum / 10 ; (mod sum 10)
                                                        ])); [[...]]
of type
    'j
==============================
