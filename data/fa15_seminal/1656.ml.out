------------------------------------------------------------------
File "1656.ml", line 20, characters 33-34:
This expression has type int list -> int * int -> int * int list
but is here used with type int list -> int * int -> int list
Relevant code: f
------------------------------------------------------------------
File "1656.ml", line 20, characters 33-34:
Try replacing
    f
with
    f; [[...]]
of type
    int * 'a list -> 'b * 'c -> int * 'a list
within context
    let f a x =
      (if (let (y, z) = x in y + z > 9) then
        1, (let (y, z) = x in [(mod (y + z) 10)] @ a)
        else
        0, (let (y, z) = x in [y + z] @ a))
      in
      let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = (List.fold_left (f; [[...]]) base  args) in res
==============================
File "1656.ml", line 20, characters 18-32:
Try replacing
    List.fold_left
with
    List.fold_left; [[...]]
of type
    (int list -> int * int -> int * int list) ->
    int * 'd list -> ('e * 'f) list -> 'g * 'h
within context
    let f a x =
      (if (let (y, z) = x in y + z > 9) then
        1, (let (y, z) = x in [(mod (y + z) 10)] @ a)
        else
        0, (let (y, z) = x in [y + z] @ a))
      in
      let base = 0, [] in
      let args = (List.combine l1 l2) in
      let (_, res) = ((List.fold_left; [[...]]) f base  args) in res
==============================
File "1656.ml", line 14, characters 10-158:
Try replacing
    fun a
      x ->
        (if (let (y, z) = x in y + z > 9) then
          1, (let (y, z) = x in [(mod (y + z) 10)] @ a)
          else
          0, (let (y, z) = x in [y + z] @ a))
with
    fun a
      x ->
        (if (let (y, z) = x in y + z > 9) then
          1, (let (y, z) = x in [(mod (y + z) 10)] @ a)
          else
          0, (let (y, z) = x in [y + z] @ a));
    [[...]]
of type
    'i
==============================
