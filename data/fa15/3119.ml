
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Op1 of expr
  | Op2 of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildOp1 e = Op1 e;;

let buildOp2 (e1,e2,e3) = Op2 (e1, e2, e3);;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let r = rand (0, 2) in match r with | 0 -> buildX () | 1 -> buildY ()
  else
    (let r = rand (0, 11) in
     let d = depth - 1 in
     match r with
     | 0 -> buildAverage ((build (rand, d)), (build (rand, d)))
     | 1 -> buildCosine (build (rand, d))
     | 2 -> buildSine (build (rand, d))
     | 3 -> buildTimes ((build (rand, d)), (build (rand, d)))
     | 4 ->
         buildThresh
           ((build (rand, d)), (build (rand, d)), (build (rand, d)),
             (build (rand, d)))
     | 5 ->
         buildOp2
           ((build (rand, d)), (build (rand, d)), (build (rand, d)),
             (build (rand, d)))
     | 6 -> buildSine (build (rand, d))
     | 7 -> buildCosine (build (rand, d))
     | 8 -> buildOp1 (build (rand, d))
     | 9 -> buildSine (build (rand, d))
     | 10 -> buildCosine (build (rand, d)));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Op1 of expr
  | Op2 of expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildOp1 e = Op1 e;;

let buildOp2 (e1,e2,e3) = Op2 (e1, e2, e3);;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then let r = rand (0, 2) in match r with | 0 -> buildX () | 1 -> buildY ()
  else
    (let r = rand (0, 11) in
     let d = depth - 1 in
     match r with
     | 0 -> buildAverage ((build (rand, d)), (build (rand, d)))
     | 1 -> buildCosine (build (rand, d))
     | 2 -> buildSine (build (rand, d))
     | 3 -> buildTimes ((build (rand, d)), (build (rand, d)))
     | 4 ->
         buildThresh
           ((build (rand, d)), (build (rand, d)), (build (rand, d)),
             (build (rand, d)))
     | 5 ->
         buildOp2 ((build (rand, d)), (build (rand, d)), (build (rand, d)))
     | 6 -> buildSine (build (rand, d))
     | 7 -> buildCosine (build (rand, d))
     | 8 -> buildOp1 (build (rand, d))
     | 9 -> buildSine (build (rand, d))
     | 10 -> buildCosine (build (rand, d)));;

*)

(* changed spans
(48,11)-(49,31)
(48,12)-(48,29)
(48,13)-(48,18)
(48,19)-(48,28)
(48,20)-(48,24)
(48,26)-(48,27)
*)

(* type error slice
(19,3)-(19,44)
(19,14)-(19,42)
(47,9)-(47,17)
(47,9)-(49,31)
(48,11)-(49,31)
*)

(* all spans
(13,18)-(13,43)
(13,27)-(13,43)
(13,36)-(13,38)
(13,40)-(13,42)
(15,16)-(15,28)
(15,20)-(15,28)
(15,27)-(15,28)
(17,13)-(17,22)
(17,17)-(17,22)
(17,21)-(17,22)
(19,14)-(19,42)
(19,26)-(19,42)
(19,31)-(19,33)
(19,35)-(19,37)
(19,39)-(19,41)
(21,14)-(21,24)
(21,18)-(21,24)
(21,23)-(21,24)
(23,17)-(23,67)
(23,38)-(23,67)
(23,46)-(23,47)
(23,49)-(23,50)
(23,52)-(23,58)
(23,60)-(23,66)
(25,16)-(25,39)
(25,25)-(25,39)
(25,32)-(25,34)
(25,36)-(25,38)
(27,11)-(27,20)
(27,16)-(27,20)
(29,11)-(29,20)
(29,16)-(29,20)
(31,15)-(54,43)
(32,2)-(54,43)
(32,5)-(32,14)
(32,5)-(32,10)
(32,13)-(32,14)
(33,7)-(33,76)
(33,15)-(33,26)
(33,15)-(33,19)
(33,20)-(33,26)
(33,21)-(33,22)
(33,24)-(33,25)
(33,30)-(33,76)
(33,36)-(33,37)
(33,50)-(33,59)
(33,50)-(33,56)
(33,57)-(33,59)
(33,67)-(33,76)
(33,67)-(33,73)
(33,74)-(33,76)
(35,4)-(54,43)
(35,13)-(35,25)
(35,13)-(35,17)
(35,18)-(35,25)
(35,19)-(35,20)
(35,22)-(35,24)
(36,5)-(54,42)
(36,13)-(36,22)
(36,13)-(36,18)
(36,21)-(36,22)
(37,5)-(54,42)
(37,11)-(37,12)
(38,12)-(38,63)
(38,12)-(38,24)
(38,25)-(38,63)
(38,26)-(38,43)
(38,27)-(38,32)
(38,33)-(38,42)
(38,34)-(38,38)
(38,40)-(38,41)
(38,45)-(38,62)
(38,46)-(38,51)
(38,52)-(38,61)
(38,53)-(38,57)
(38,59)-(38,60)
(39,12)-(39,41)
(39,12)-(39,23)
(39,24)-(39,41)
(39,25)-(39,30)
(39,31)-(39,40)
(39,32)-(39,36)
(39,38)-(39,39)
(40,12)-(40,39)
(40,12)-(40,21)
(40,22)-(40,39)
(40,23)-(40,28)
(40,29)-(40,38)
(40,30)-(40,34)
(40,36)-(40,37)
(41,12)-(41,61)
(41,12)-(41,22)
(41,23)-(41,61)
(41,24)-(41,41)
(41,25)-(41,30)
(41,31)-(41,40)
(41,32)-(41,36)
(41,38)-(41,39)
(41,43)-(41,60)
(41,44)-(41,49)
(41,50)-(41,59)
(41,51)-(41,55)
(41,57)-(41,58)
(43,9)-(45,31)
(43,9)-(43,20)
(44,11)-(45,31)
(44,12)-(44,29)
(44,13)-(44,18)
(44,19)-(44,28)
(44,20)-(44,24)
(44,26)-(44,27)
(44,31)-(44,48)
(44,32)-(44,37)
(44,38)-(44,47)
(44,39)-(44,43)
(44,45)-(44,46)
(44,50)-(44,67)
(44,51)-(44,56)
(44,57)-(44,66)
(44,58)-(44,62)
(44,64)-(44,65)
(45,13)-(45,30)
(45,14)-(45,19)
(45,20)-(45,29)
(45,21)-(45,25)
(45,27)-(45,28)
(47,9)-(49,31)
(47,9)-(47,17)
(48,11)-(49,31)
(48,12)-(48,29)
(48,13)-(48,18)
(48,19)-(48,28)
(48,20)-(48,24)
(48,26)-(48,27)
(48,31)-(48,48)
(48,32)-(48,37)
(48,38)-(48,47)
(48,39)-(48,43)
(48,45)-(48,46)
(48,50)-(48,67)
(48,51)-(48,56)
(48,57)-(48,66)
(48,58)-(48,62)
(48,64)-(48,65)
(49,13)-(49,30)
(49,14)-(49,19)
(49,20)-(49,29)
(49,21)-(49,25)
(49,27)-(49,28)
(50,12)-(50,39)
(50,12)-(50,21)
(50,22)-(50,39)
(50,23)-(50,28)
(50,29)-(50,38)
(50,30)-(50,34)
(50,36)-(50,37)
(51,12)-(51,41)
(51,12)-(51,23)
(51,24)-(51,41)
(51,25)-(51,30)
(51,31)-(51,40)
(51,32)-(51,36)
(51,38)-(51,39)
(52,12)-(52,38)
(52,12)-(52,20)
(52,21)-(52,38)
(52,22)-(52,27)
(52,28)-(52,37)
(52,29)-(52,33)
(52,35)-(52,36)
(53,12)-(53,39)
(53,12)-(53,21)
(53,22)-(53,39)
(53,23)-(53,28)
(53,29)-(53,38)
(53,30)-(53,34)
(53,36)-(53,37)
(54,13)-(54,42)
(54,13)-(54,24)
(54,25)-(54,42)
(54,26)-(54,31)
(54,32)-(54,41)
(54,33)-(54,37)
(54,39)-(54,40)
*)
