
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then List.append (clone 0 ((List.length l1) - (List.length l2))) l2;;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

*)

(* changed spans
(5,2)-(6,69)
(6,7)-(6,18)
(6,7)-(6,69)
*)

(* type error slice
(5,2)-(6,69)
(6,7)-(6,18)
(6,7)-(6,69)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(6,69)
(4,15)-(6,69)
(5,2)-(6,69)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,69)
(6,7)-(6,18)
(6,19)-(6,66)
(6,20)-(6,25)
(6,26)-(6,27)
(6,28)-(6,65)
(6,29)-(6,45)
(6,30)-(6,41)
(6,42)-(6,44)
(6,48)-(6,64)
(6,49)-(6,60)
(6,61)-(6,63)
(6,67)-(6,69)
*)
