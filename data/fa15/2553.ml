
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let sizDif = (List.length l1) - (List.length l2) in
  if sizDif > 0
  then let pad = clone 0 sizDif in (l1 :: pad) :: l2
  else (let pad = clone 0 (- sizDif) in (pad :: l1) :: l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let sizDif = (List.length l1) - (List.length l2) in
  if sizDif > 0
  then let pad = clone 0 sizDif in (l1, (pad @ l2))
  else (let pad = clone 0 (- sizDif) in ((pad @ l1), l2));;

*)

(* changed spans
(7,35)-(7,46)
(7,35)-(7,52)
(7,42)-(7,45)
(8,40)-(8,51)
(8,40)-(8,57)
(8,41)-(8,44)
*)

(* type error slice
(2,43)-(2,44)
(2,43)-(2,65)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(5,15)-(5,31)
(5,16)-(5,27)
(5,28)-(5,30)
(7,7)-(7,52)
(7,17)-(7,22)
(7,17)-(7,31)
(7,23)-(7,24)
(7,35)-(7,46)
(7,35)-(7,52)
(7,36)-(7,38)
(7,42)-(7,45)
(7,50)-(7,52)
(8,40)-(8,51)
(8,40)-(8,57)
(8,48)-(8,50)
(8,55)-(8,57)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(8,58)
(4,15)-(8,58)
(5,2)-(8,58)
(5,15)-(5,50)
(5,15)-(5,31)
(5,16)-(5,27)
(5,28)-(5,30)
(5,34)-(5,50)
(5,35)-(5,46)
(5,47)-(5,49)
(6,2)-(8,58)
(6,5)-(6,15)
(6,5)-(6,11)
(6,14)-(6,15)
(7,7)-(7,52)
(7,17)-(7,31)
(7,17)-(7,22)
(7,23)-(7,24)
(7,25)-(7,31)
(7,35)-(7,52)
(7,35)-(7,46)
(7,36)-(7,38)
(7,42)-(7,45)
(7,50)-(7,52)
(8,7)-(8,58)
(8,18)-(8,36)
(8,18)-(8,23)
(8,24)-(8,25)
(8,26)-(8,36)
(8,29)-(8,35)
(8,40)-(8,57)
(8,40)-(8,51)
(8,41)-(8,44)
(8,48)-(8,50)
(8,55)-(8,57)
*)
