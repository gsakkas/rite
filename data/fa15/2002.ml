
let rec clone x n = if n <= 0 then [] else [x] :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, (clone 0 ((List.length l1) - (List.length l2)))) @ l2
  else (((clone 9 ((List.length l2) - (List.length l1))) @ l1), l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

*)

(* changed spans
(2,43)-(2,46)
(6,7)-(6,65)
(6,13)-(6,18)
(6,61)-(6,62)
(7,16)-(7,17)
*)

(* type error slice
(6,7)-(6,60)
(6,7)-(6,65)
(6,61)-(6,62)
*)

(* all spans
(2,14)-(2,67)
(2,16)-(2,67)
(2,20)-(2,67)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,67)
(2,43)-(2,46)
(2,44)-(2,45)
(2,50)-(2,67)
(2,51)-(2,56)
(2,57)-(2,58)
(2,59)-(2,66)
(2,60)-(2,61)
(2,64)-(2,65)
(4,12)-(7,67)
(4,15)-(7,67)
(5,2)-(7,67)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,65)
(6,61)-(6,62)
(6,7)-(6,60)
(6,8)-(6,10)
(6,12)-(6,59)
(6,13)-(6,18)
(6,19)-(6,20)
(6,21)-(6,58)
(6,22)-(6,38)
(6,23)-(6,34)
(6,35)-(6,37)
(6,41)-(6,57)
(6,42)-(6,53)
(6,54)-(6,56)
(6,63)-(6,65)
(7,7)-(7,67)
(7,8)-(7,62)
(7,57)-(7,58)
(7,9)-(7,56)
(7,10)-(7,15)
(7,16)-(7,17)
(7,18)-(7,55)
(7,19)-(7,35)
(7,20)-(7,31)
(7,32)-(7,34)
(7,38)-(7,54)
(7,39)-(7,50)
(7,51)-(7,53)
(7,59)-(7,61)
(7,64)-(7,66)
*)
