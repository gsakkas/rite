
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;

let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;

let rec additivePersistence n =
  let rec recCounter n count =
    if n < 10
    then count
    else recCounter ((sumList (digitsOfInt n)) (count + 1)) in
  recCounter n 0;;


(* fix

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;

let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;

let rec additivePersistence n =
  let rec recCounter n count =
    if n < 10
    then count
    else (recCounter (sumList (digitsOfInt n)) count) + 1 in
  recCounter n 0;;

*)

(* changed spans
(11,9)-(11,19)
(11,9)-(11,59)
(11,21)-(11,46)
(11,47)-(11,58)
*)

(* type error slice
(5,55)-(5,70)
(5,59)-(5,70)
(5,60)-(5,67)
(8,2)-(12,16)
(8,21)-(11,59)
(8,23)-(11,59)
(9,4)-(11,59)
(10,9)-(10,14)
(11,9)-(11,19)
(11,9)-(11,59)
(11,20)-(11,59)
(11,21)-(11,46)
(11,22)-(11,29)
(11,47)-(11,58)
(11,48)-(11,53)
(12,2)-(12,12)
(12,2)-(12,16)
*)

(* all spans
(2,20)-(3,60)
(3,2)-(3,60)
(3,5)-(3,11)
(3,5)-(3,6)
(3,10)-(3,11)
(3,17)-(3,19)
(3,25)-(3,60)
(3,48)-(3,49)
(3,25)-(3,47)
(3,26)-(3,37)
(3,38)-(3,46)
(3,39)-(3,40)
(3,43)-(3,45)
(3,50)-(3,60)
(3,51)-(3,59)
(3,51)-(3,52)
(3,57)-(3,59)
(5,16)-(5,70)
(5,21)-(5,70)
(5,27)-(5,29)
(5,43)-(5,44)
(5,55)-(5,70)
(5,55)-(5,56)
(5,59)-(5,70)
(5,60)-(5,67)
(5,68)-(5,69)
(7,28)-(12,16)
(8,2)-(12,16)
(8,21)-(11,59)
(8,23)-(11,59)
(9,4)-(11,59)
(9,7)-(9,13)
(9,7)-(9,8)
(9,11)-(9,13)
(10,9)-(10,14)
(11,9)-(11,59)
(11,9)-(11,19)
(11,20)-(11,59)
(11,21)-(11,46)
(11,22)-(11,29)
(11,30)-(11,45)
(11,31)-(11,42)
(11,43)-(11,44)
(11,47)-(11,58)
(11,48)-(11,53)
(11,56)-(11,57)
(12,2)-(12,16)
(12,2)-(12,12)
(12,13)-(12,14)
(12,15)-(12,16)
*)
