
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let addTuple (l1,l2) = l1 + l2;;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      ((((x1 + x2) + carry) / 10), ((((x1 + x2) + carry) mod 10) :: res)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(4,14)-(4,30)
(4,23)-(4,25)
(4,23)-(4,30)
(4,28)-(4,30)
(19,16)-(19,30)
(19,17)-(19,18)
(19,21)-(19,22)
(19,28)-(19,30)
(20,4)-(22,51)
(20,15)-(20,16)
(21,4)-(22,51)
(21,15)-(21,23)
(21,15)-(21,53)
(21,24)-(21,32)
(21,33)-(21,53)
*)

(* type error slice
(19,4)-(22,51)
(19,10)-(19,30)
(19,16)-(19,23)
(19,17)-(19,18)
(22,4)-(22,51)
(22,18)-(22,32)
(22,18)-(22,44)
(22,33)-(22,34)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,14)-(4,30)
(4,23)-(4,30)
(4,23)-(4,25)
(4,28)-(4,30)
(6,12)-(12,17)
(6,15)-(12,17)
(7,2)-(12,17)
(7,5)-(7,40)
(7,5)-(7,21)
(7,6)-(7,17)
(7,18)-(7,20)
(7,24)-(7,40)
(7,25)-(7,36)
(7,37)-(7,39)
(8,7)-(8,67)
(8,8)-(8,10)
(8,12)-(8,66)
(8,61)-(8,62)
(8,13)-(8,60)
(8,14)-(8,19)
(8,20)-(8,21)
(8,22)-(8,59)
(8,23)-(8,39)
(8,24)-(8,35)
(8,36)-(8,38)
(8,42)-(8,58)
(8,43)-(8,54)
(8,55)-(8,57)
(8,63)-(8,65)
(10,4)-(12,17)
(10,7)-(10,42)
(10,7)-(10,23)
(10,8)-(10,19)
(10,20)-(10,22)
(10,26)-(10,42)
(10,27)-(10,38)
(10,39)-(10,41)
(11,9)-(11,69)
(11,10)-(11,64)
(11,59)-(11,60)
(11,11)-(11,58)
(11,12)-(11,17)
(11,18)-(11,19)
(11,20)-(11,57)
(11,21)-(11,37)
(11,22)-(11,33)
(11,34)-(11,36)
(11,40)-(11,56)
(11,41)-(11,52)
(11,53)-(11,55)
(11,61)-(11,63)
(11,66)-(11,68)
(12,9)-(12,17)
(12,10)-(12,12)
(12,14)-(12,16)
(14,19)-(15,74)
(15,2)-(15,74)
(15,8)-(15,9)
(15,23)-(15,25)
(15,36)-(15,74)
(15,39)-(15,44)
(15,39)-(15,40)
(15,43)-(15,44)
(15,50)-(15,62)
(15,50)-(15,60)
(15,61)-(15,62)
(15,68)-(15,74)
(15,68)-(15,69)
(15,73)-(15,74)
(17,11)-(23,34)
(17,14)-(23,34)
(18,2)-(23,34)
(18,11)-(22,51)
(19,4)-(22,51)
(19,10)-(19,30)
(19,12)-(19,30)
(19,16)-(19,30)
(19,16)-(19,23)
(19,17)-(19,18)
(19,21)-(19,22)
(19,28)-(19,30)
(20,4)-(22,51)
(20,15)-(20,16)
(21,4)-(22,51)
(21,15)-(21,53)
(21,15)-(21,23)
(21,24)-(21,32)
(21,33)-(21,53)
(21,34)-(21,46)
(21,47)-(21,49)
(21,50)-(21,52)
(22,4)-(22,51)
(22,18)-(22,44)
(22,18)-(22,32)
(22,33)-(22,34)
(22,35)-(22,39)
(22,40)-(22,44)
(22,48)-(22,51)
(23,2)-(23,34)
(23,2)-(23,12)
(23,13)-(23,34)
(23,14)-(23,17)
(23,18)-(23,33)
(23,19)-(23,26)
(23,27)-(23,29)
(23,30)-(23,32)
*)
