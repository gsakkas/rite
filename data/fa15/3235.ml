
let rec clone x n =
  if n < 1 then [] else (match n with | _ -> [x] @ (clone x (n - 1)));;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 = s2
  then (l1, l2)
  else if s1 > s2 then (l1, (clone 0 (s1 - s2))) else clone 0 (s2 - s1);;


(* fix

let rec clone x n =
  if n < 1 then [] else (match n with | _ -> [x] @ (clone x (n - 1)));;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 = s2
  then (l1, l2)
  else
    if s1 > s2 then (l1, (clone 0 (s1 - s2))) else ((clone 0 (s2 - s1)), l2);;

*)

(* changed spans
(10,54)-(10,71)
*)

(* type error slice
(10,7)-(10,71)
(10,23)-(10,48)
(10,28)-(10,47)
(10,29)-(10,34)
(10,54)-(10,59)
(10,54)-(10,71)
*)

(* all spans
(2,14)-(3,69)
(2,16)-(3,69)
(3,2)-(3,69)
(3,5)-(3,10)
(3,5)-(3,6)
(3,9)-(3,10)
(3,16)-(3,18)
(3,24)-(3,69)
(3,31)-(3,32)
(3,45)-(3,68)
(3,49)-(3,50)
(3,45)-(3,48)
(3,46)-(3,47)
(3,51)-(3,68)
(3,52)-(3,57)
(3,58)-(3,59)
(3,60)-(3,67)
(3,61)-(3,62)
(3,65)-(3,66)
(5,12)-(10,71)
(5,15)-(10,71)
(6,2)-(10,71)
(6,11)-(6,25)
(6,11)-(6,22)
(6,23)-(6,25)
(7,2)-(10,71)
(7,11)-(7,25)
(7,11)-(7,22)
(7,23)-(7,25)
(8,2)-(10,71)
(8,5)-(8,12)
(8,5)-(8,7)
(8,10)-(8,12)
(9,7)-(9,15)
(9,8)-(9,10)
(9,12)-(9,14)
(10,7)-(10,71)
(10,10)-(10,17)
(10,10)-(10,12)
(10,15)-(10,17)
(10,23)-(10,48)
(10,24)-(10,26)
(10,28)-(10,47)
(10,29)-(10,34)
(10,35)-(10,36)
(10,37)-(10,46)
(10,38)-(10,40)
(10,43)-(10,45)
(10,54)-(10,71)
(10,54)-(10,59)
(10,60)-(10,61)
(10,62)-(10,71)
(10,63)-(10,65)
(10,68)-(10,70)
*)
