
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 ((List.length l2) - (List.length l1))) @ l1
  else (clone 0 ((List.length l1) - (List.length l2))) @ l2;;

let rec removeZero l =
  let f a x =
    if (List.length a) = 0 then (if x = 0 then [] else [x]) else a @ [x] in
  let base = [] in List.fold_left f base l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (l1e,l2e) ->
          (match a with
           | (carry,list) ->
               let num = (l1e + l2e) + carry in
               if num < 10
               then (0, (num @ list))
               else if num = 10 then (1, ([0] @ list))) in
    let base = (0, []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero
    (add
       ((padZero l1 l2),
         (if (List.length l1) > (List.length l2) then l1 else l2)));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 ((List.length l2) - (List.length l1))) @ l1
  else (clone 0 ((List.length l1) - (List.length l2))) @ l2;;

let rec removeZero l =
  let f a x =
    if (List.length a) = 0 then (if x = 0 then [] else [x]) else a @ [x] in
  let base = [] in List.fold_left f base l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (l1e,l2e) ->
          (match a with
           | (carry,list) ->
               let num = (l1e + l2e) + carry in
               if num < 10
               then (0, ([num] @ list))
               else
                 if num = 10
                 then (1, ([0] @ list))
                 else ((num / 10), ([num mod 10] @ list))) in
    let base = (0, []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero
    (add
       ((padZero l1 l2),
         (if (List.length l1) > (List.length l2) then l1 else l2)));;

*)

(* changed spans
(23,25)-(23,28)
(24,20)-(24,54)
(25,4)-(27,51)
*)

(* type error slice
(21,15)-(24,54)
(21,25)-(21,44)
(23,24)-(23,36)
(23,25)-(23,28)
(23,29)-(23,30)
(24,20)-(24,54)
(24,37)-(24,54)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(7,59)
(4,15)-(7,59)
(5,2)-(7,59)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,59)
(6,55)-(6,56)
(6,7)-(6,54)
(6,8)-(6,13)
(6,14)-(6,15)
(6,16)-(6,53)
(6,17)-(6,33)
(6,18)-(6,29)
(6,30)-(6,32)
(6,36)-(6,52)
(6,37)-(6,48)
(6,49)-(6,51)
(6,57)-(6,59)
(7,7)-(7,59)
(7,55)-(7,56)
(7,7)-(7,54)
(7,8)-(7,13)
(7,14)-(7,15)
(7,16)-(7,53)
(7,17)-(7,33)
(7,18)-(7,29)
(7,30)-(7,32)
(7,36)-(7,52)
(7,37)-(7,48)
(7,49)-(7,51)
(7,57)-(7,59)
(9,19)-(12,42)
(10,2)-(12,42)
(10,8)-(11,72)
(10,10)-(11,72)
(11,4)-(11,72)
(11,7)-(11,26)
(11,7)-(11,22)
(11,8)-(11,19)
(11,20)-(11,21)
(11,25)-(11,26)
(11,32)-(11,59)
(11,36)-(11,41)
(11,36)-(11,37)
(11,40)-(11,41)
(11,47)-(11,49)
(11,55)-(11,58)
(11,56)-(11,57)
(11,65)-(11,72)
(11,67)-(11,68)
(11,65)-(11,66)
(11,69)-(11,72)
(11,70)-(11,71)
(12,2)-(12,42)
(12,13)-(12,15)
(12,19)-(12,42)
(12,19)-(12,33)
(12,34)-(12,35)
(12,36)-(12,40)
(12,41)-(12,42)
(14,11)-(31,67)
(14,14)-(31,67)
(15,2)-(31,67)
(15,11)-(27,51)
(16,4)-(27,51)
(16,10)-(24,55)
(16,12)-(24,55)
(17,6)-(24,55)
(17,12)-(17,13)
(19,10)-(24,55)
(19,17)-(19,18)
(21,15)-(24,54)
(21,25)-(21,44)
(21,25)-(21,36)
(21,26)-(21,29)
(21,32)-(21,35)
(21,39)-(21,44)
(22,15)-(24,54)
(22,18)-(22,26)
(22,18)-(22,21)
(22,24)-(22,26)
(23,20)-(23,37)
(23,21)-(23,22)
(23,24)-(23,36)
(23,29)-(23,30)
(23,25)-(23,28)
(23,31)-(23,35)
(24,20)-(24,54)
(24,23)-(24,31)
(24,23)-(24,26)
(24,29)-(24,31)
(24,37)-(24,54)
(24,38)-(24,39)
(24,41)-(24,53)
(24,46)-(24,47)
(24,42)-(24,45)
(24,43)-(24,44)
(24,48)-(24,52)
(25,4)-(27,51)
(25,15)-(25,22)
(25,16)-(25,17)
(25,19)-(25,21)
(26,4)-(27,51)
(26,15)-(26,33)
(26,15)-(26,27)
(26,28)-(26,30)
(26,31)-(26,33)
(27,4)-(27,51)
(27,18)-(27,44)
(27,18)-(27,32)
(27,33)-(27,34)
(27,35)-(27,39)
(27,40)-(27,44)
(27,48)-(27,51)
(28,2)-(31,67)
(28,2)-(28,12)
(29,4)-(31,67)
(29,5)-(29,8)
(30,7)-(31,66)
(30,8)-(30,23)
(30,9)-(30,16)
(30,17)-(30,19)
(30,20)-(30,22)
(31,9)-(31,65)
(31,13)-(31,48)
(31,13)-(31,29)
(31,14)-(31,25)
(31,26)-(31,28)
(31,32)-(31,48)
(31,33)-(31,44)
(31,45)-(31,47)
(31,54)-(31,56)
(31,62)-(31,64)
*)
