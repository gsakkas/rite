
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let difference = (List.length l1) - (List.length l2) in
  if difference > 0
  then (l1, ((clone 0 difference) @ l2))
  else
    if difference < 0
    then (((clone 0 ((-1) * difference)) @ l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (o,l) ->
          if o = 0
          then (if x < 10 then (0, (x :: l)) else (1, ((x mod 10) :: l)))
          else
            if o = 1
            then
              (if (x + 1) < 10
               then (0, ((x + 1) :: l))
               else (1, (((x + 1) mod 10) :: l))) in
    let base = (0, []) in
    let args =
      let combine (a,b) = a + b in
      List.map combine (List.rev (List.combine l1 l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let difference = (List.length l1) - (List.length l2) in
  if difference > 0
  then (l1, ((clone 0 difference) @ l2))
  else
    if difference < 0
    then (((clone 0 ((-1) * difference)) @ l1), l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | (o,l) ->
          let sum = o + x in
          if sum < 10 then (0, (x :: l)) else (1, ((x mod 10) :: l)) in
    let base = (0, []) in
    let args =
      let combine (a,b) = a + b in
      List.map combine (List.rev (List.combine l1 l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(21,10)-(28,49)
(21,13)-(21,14)
(21,13)-(21,18)
(21,17)-(21,18)
(22,15)-(22,73)
(22,19)-(22,25)
(22,23)-(22,25)
(22,31)-(22,44)
(22,32)-(22,33)
(22,35)-(22,43)
(22,36)-(22,37)
(22,41)-(22,42)
(22,50)-(22,72)
(22,51)-(22,52)
(22,54)-(22,71)
(22,55)-(22,65)
(22,56)-(22,57)
(22,62)-(22,64)
(22,69)-(22,70)
(24,12)-(28,49)
(24,15)-(24,16)
(24,15)-(24,20)
(24,19)-(24,20)
(26,14)-(28,49)
(26,18)-(26,25)
(26,19)-(26,20)
(26,23)-(26,24)
(27,25)-(27,32)
(27,30)-(27,31)
(28,26)-(28,33)
(28,31)-(28,32)
*)

(* type error slice
(24,12)-(28,49)
(26,14)-(28,49)
(28,20)-(28,48)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(11,17)
(4,15)-(11,17)
(5,2)-(11,17)
(5,19)-(5,54)
(5,19)-(5,35)
(5,20)-(5,31)
(5,32)-(5,34)
(5,38)-(5,54)
(5,39)-(5,50)
(5,51)-(5,53)
(6,2)-(11,17)
(6,5)-(6,19)
(6,5)-(6,15)
(6,18)-(6,19)
(7,7)-(7,40)
(7,8)-(7,10)
(7,12)-(7,39)
(7,34)-(7,35)
(7,13)-(7,33)
(7,14)-(7,19)
(7,20)-(7,21)
(7,22)-(7,32)
(7,36)-(7,38)
(9,4)-(11,17)
(9,7)-(9,21)
(9,7)-(9,17)
(9,20)-(9,21)
(10,9)-(10,51)
(10,10)-(10,46)
(10,41)-(10,42)
(10,11)-(10,40)
(10,12)-(10,17)
(10,18)-(10,19)
(10,20)-(10,39)
(10,21)-(10,25)
(10,28)-(10,38)
(10,43)-(10,45)
(10,48)-(10,50)
(11,9)-(11,17)
(11,10)-(11,12)
(11,14)-(11,16)
(13,19)-(14,73)
(14,2)-(14,73)
(14,8)-(14,9)
(14,23)-(14,24)
(14,35)-(14,73)
(14,38)-(14,43)
(14,38)-(14,39)
(14,42)-(14,43)
(14,49)-(14,61)
(14,49)-(14,59)
(14,60)-(14,61)
(14,67)-(14,73)
(14,67)-(14,68)
(14,72)-(14,73)
(16,11)-(34,34)
(16,14)-(34,34)
(17,2)-(34,34)
(17,11)-(33,51)
(18,4)-(33,51)
(18,10)-(28,49)
(18,12)-(28,49)
(19,6)-(28,49)
(19,12)-(19,13)
(21,10)-(28,49)
(21,13)-(21,18)
(21,13)-(21,14)
(21,17)-(21,18)
(22,15)-(22,73)
(22,19)-(22,25)
(22,19)-(22,20)
(22,23)-(22,25)
(22,31)-(22,44)
(22,32)-(22,33)
(22,35)-(22,43)
(22,36)-(22,37)
(22,41)-(22,42)
(22,50)-(22,72)
(22,51)-(22,52)
(22,54)-(22,71)
(22,55)-(22,65)
(22,56)-(22,57)
(22,62)-(22,64)
(22,69)-(22,70)
(24,12)-(28,49)
(24,15)-(24,20)
(24,15)-(24,16)
(24,19)-(24,20)
(26,14)-(28,49)
(26,18)-(26,30)
(26,18)-(26,25)
(26,19)-(26,20)
(26,23)-(26,24)
(26,28)-(26,30)
(27,20)-(27,39)
(27,21)-(27,22)
(27,24)-(27,38)
(27,25)-(27,32)
(27,26)-(27,27)
(27,30)-(27,31)
(27,36)-(27,37)
(28,20)-(28,48)
(28,21)-(28,22)
(28,24)-(28,47)
(28,25)-(28,41)
(28,26)-(28,33)
(28,27)-(28,28)
(28,31)-(28,32)
(28,38)-(28,40)
(28,45)-(28,46)
(29,4)-(33,51)
(29,15)-(29,22)
(29,16)-(29,17)
(29,19)-(29,21)
(30,4)-(33,51)
(31,6)-(32,54)
(31,19)-(31,31)
(31,26)-(31,31)
(31,26)-(31,27)
(31,30)-(31,31)
(32,6)-(32,54)
(32,6)-(32,14)
(32,15)-(32,22)
(32,23)-(32,54)
(32,24)-(32,32)
(32,33)-(32,53)
(32,34)-(32,46)
(32,47)-(32,49)
(32,50)-(32,52)
(33,4)-(33,51)
(33,18)-(33,44)
(33,18)-(33,32)
(33,33)-(33,34)
(33,35)-(33,39)
(33,40)-(33,44)
(33,48)-(33,51)
(34,2)-(34,34)
(34,2)-(34,12)
(34,13)-(34,34)
(34,14)-(34,17)
(34,18)-(34,33)
(34,19)-(34,26)
(34,27)-(34,29)
(34,30)-(34,32)
*)
