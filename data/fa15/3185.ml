
let rec clone x n =
  if n < 1 then [] else (match n with | _ -> x :: (clone x (n - 1)));;

let c y = y;;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 = s2
  then (l1, l2)
  else
    if s1 > s2
    then (l1, ((clone 0 (s1 - s2)) @ l2))
    else (((clone 0 (s2 - s1)) @ l1), l2);;

let rec removeZero l =
  if l = []
  then []
  else (let h::t = l in match h with | 0 -> removeZero t | _ -> l);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (a1,a2) = a in
      let c::c' = a1 in
      match c with
      | [] -> ((a1 @ [(x1 + x2) / 10]), (a2 @ [(x1 + x2) mod 10]))
      | _ -> ((a1 @ [((x1 + x2) + c) / 10]), (a2 @ [((x1 + x2) + c) mod 10])) in
    let base = ([], []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  if n < 1 then [] else (match n with | _ -> x :: (clone x (n - 1)));;

let c y = y;;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 = s2
  then (l1, l2)
  else
    if s1 > s2
    then (l1, ((clone 0 (s1 - s2)) @ l2))
    else (((clone 0 (s2 - s1)) @ l1), l2);;

let rec removeZero l =
  if l = []
  then []
  else (let h::t = l in match h with | 0 -> removeZero t | _ -> l);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (a1,a2) = a in
      let c::c' = a1 in
      match c with
      | 0 -> ((a1 @ [(x1 + x2) / 10]), (a2 @ [(x1 + x2) mod 10]))
      | _ -> ((a1 @ [((x1 + x2) + c) / 10]), (a2 @ [((x1 + x2) + c) mod 10])) in
    let base = ([], []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(28,6)-(30,77)
*)

(* type error slice
(27,6)-(30,77)
(27,18)-(27,20)
(28,6)-(30,77)
(28,12)-(28,13)
(29,15)-(29,38)
(29,16)-(29,18)
(29,19)-(29,20)
(29,21)-(29,37)
(29,22)-(29,36)
*)

(* all spans
(2,14)-(3,68)
(2,16)-(3,68)
(3,2)-(3,68)
(3,5)-(3,10)
(3,5)-(3,6)
(3,9)-(3,10)
(3,16)-(3,18)
(3,24)-(3,68)
(3,31)-(3,32)
(3,45)-(3,67)
(3,45)-(3,46)
(3,50)-(3,67)
(3,51)-(3,56)
(3,57)-(3,58)
(3,59)-(3,66)
(3,60)-(3,61)
(3,64)-(3,65)
(5,6)-(5,11)
(5,10)-(5,11)
(7,12)-(15,41)
(7,15)-(15,41)
(8,2)-(15,41)
(8,11)-(8,25)
(8,11)-(8,22)
(8,23)-(8,25)
(9,2)-(15,41)
(9,11)-(9,25)
(9,11)-(9,22)
(9,23)-(9,25)
(10,2)-(15,41)
(10,5)-(10,12)
(10,5)-(10,7)
(10,10)-(10,12)
(11,7)-(11,15)
(11,8)-(11,10)
(11,12)-(11,14)
(13,4)-(15,41)
(13,7)-(13,14)
(13,7)-(13,9)
(13,12)-(13,14)
(14,9)-(14,41)
(14,10)-(14,12)
(14,14)-(14,40)
(14,35)-(14,36)
(14,15)-(14,34)
(14,16)-(14,21)
(14,22)-(14,23)
(14,24)-(14,33)
(14,25)-(14,27)
(14,30)-(14,32)
(14,37)-(14,39)
(15,9)-(15,41)
(15,10)-(15,36)
(15,31)-(15,32)
(15,11)-(15,30)
(15,12)-(15,17)
(15,18)-(15,19)
(15,20)-(15,29)
(15,21)-(15,23)
(15,26)-(15,28)
(15,33)-(15,35)
(15,38)-(15,40)
(17,19)-(20,66)
(18,2)-(20,66)
(18,5)-(18,11)
(18,5)-(18,6)
(18,9)-(18,11)
(19,7)-(19,9)
(20,7)-(20,66)
(20,19)-(20,20)
(20,24)-(20,65)
(20,30)-(20,31)
(20,44)-(20,56)
(20,44)-(20,54)
(20,55)-(20,56)
(20,64)-(20,65)
(22,11)-(34,34)
(22,14)-(34,34)
(23,2)-(34,34)
(23,11)-(33,51)
(24,4)-(33,51)
(24,10)-(30,77)
(24,12)-(30,77)
(25,6)-(30,77)
(25,20)-(25,21)
(26,6)-(30,77)
(26,20)-(26,21)
(27,6)-(30,77)
(27,18)-(27,20)
(28,6)-(30,77)
(28,12)-(28,13)
(29,14)-(29,66)
(29,15)-(29,38)
(29,19)-(29,20)
(29,16)-(29,18)
(29,21)-(29,37)
(29,22)-(29,36)
(29,22)-(29,31)
(29,23)-(29,25)
(29,28)-(29,30)
(29,34)-(29,36)
(29,40)-(29,65)
(29,44)-(29,45)
(29,41)-(29,43)
(29,46)-(29,64)
(29,47)-(29,63)
(29,47)-(29,56)
(29,48)-(29,50)
(29,53)-(29,55)
(29,61)-(29,63)
(30,13)-(30,77)
(30,14)-(30,43)
(30,18)-(30,19)
(30,15)-(30,17)
(30,20)-(30,42)
(30,21)-(30,41)
(30,21)-(30,36)
(30,22)-(30,31)
(30,23)-(30,25)
(30,28)-(30,30)
(30,34)-(30,35)
(30,39)-(30,41)
(30,45)-(30,76)
(30,49)-(30,50)
(30,46)-(30,48)
(30,51)-(30,75)
(30,52)-(30,74)
(30,52)-(30,67)
(30,53)-(30,62)
(30,54)-(30,56)
(30,59)-(30,61)
(30,65)-(30,66)
(30,72)-(30,74)
(31,4)-(33,51)
(31,15)-(31,23)
(31,16)-(31,18)
(31,20)-(31,22)
(32,4)-(33,51)
(32,15)-(32,33)
(32,15)-(32,27)
(32,28)-(32,30)
(32,31)-(32,33)
(33,4)-(33,51)
(33,18)-(33,44)
(33,18)-(33,32)
(33,33)-(33,34)
(33,35)-(33,39)
(33,40)-(33,44)
(33,48)-(33,51)
(34,2)-(34,34)
(34,2)-(34,12)
(34,13)-(34,34)
(34,14)-(34,17)
(34,18)-(34,33)
(34,19)-(34,26)
(34,27)-(34,29)
(34,30)-(34,32)
*)
