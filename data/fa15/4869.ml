
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let r = rand (0, 10) in
  let d = depth - 1 in
  if d > 0
  then
    match r with
    | 0 -> buildSine (build (rand, d))
    | 1 -> buildSine (build (rand, d))
    | 2 -> buildCosine (build (rand, d))
    | 3 -> buildCosine (build (rand, d))
    | 4 -> ((buildAverage build (rand, d)), (build (rand, d)))
    | 5 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 6 -> ((buildTimes build (rand, d)), (build (rand, d)))
    | 7 -> buildTimes ((build (rand, d)), (build (rand, d)))
    | 8 ->
        buildThresh
          ((build (rand, d)), (build (rand, d)), (build (rand, d)),
            (build (rand, d)))
    | 9 ->
        buildThresh
          ((build (rand, d)), (build (rand, d)), (build (rand, d)),
            (build (rand, d)))
    | 10 ->
        buildThresh
          ((build (rand, d)), (build (rand, d)), (build (rand, d)),
            (build (rand, d)))
  else
    (let rr = rand (1, 2) in match rr with | 1 -> buildX () | 2 -> buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let r = rand (0, 10) in
  let d = depth - 1 in
  if d > 0
  then
    match r with
    | 0 -> buildSine (build (rand, d))
    | 1 -> buildSine (build (rand, d))
    | 2 -> buildCosine (build (rand, d))
    | 3 -> buildCosine (build (rand, d))
    | 4 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 5 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 6 -> buildTimes ((build (rand, d)), (build (rand, d)))
    | 7 -> buildTimes ((build (rand, d)), (build (rand, d)))
    | 8 ->
        buildThresh
          ((build (rand, d)), (build (rand, d)), (build (rand, d)),
            (build (rand, d)))
    | 9 ->
        buildThresh
          ((build (rand, d)), (build (rand, d)), (build (rand, d)),
            (build (rand, d)))
    | 10 ->
        buildThresh
          ((build (rand, d)), (build (rand, d)), (build (rand, d)),
            (build (rand, d)))
  else
    (let rr = rand (1, 2) in match rr with | 1 -> buildX () | 2 -> buildY ());;

*)

(* changed spans
(35,11)-(35,62)
(35,12)-(35,42)
(35,26)-(35,31)
(37,11)-(37,60)
(37,12)-(37,40)
(37,24)-(37,29)
*)

(* type error slice
(11,3)-(11,45)
(11,18)-(11,43)
(19,3)-(19,41)
(19,16)-(19,39)
(19,25)-(19,39)
(31,21)-(31,38)
(31,22)-(31,27)
(35,12)-(35,42)
(35,13)-(35,25)
(35,26)-(35,31)
(37,12)-(37,40)
(37,13)-(37,23)
(37,24)-(37,29)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(52,77)
(26,2)-(52,77)
(26,10)-(26,22)
(26,10)-(26,14)
(26,15)-(26,22)
(26,16)-(26,17)
(26,19)-(26,21)
(27,2)-(52,77)
(27,10)-(27,19)
(27,10)-(27,15)
(27,18)-(27,19)
(28,2)-(52,77)
(28,5)-(28,10)
(28,5)-(28,6)
(28,9)-(28,10)
(30,4)-(50,30)
(30,10)-(30,11)
(31,11)-(31,38)
(31,11)-(31,20)
(31,21)-(31,38)
(31,22)-(31,27)
(31,28)-(31,37)
(31,29)-(31,33)
(31,35)-(31,36)
(32,11)-(32,38)
(32,11)-(32,20)
(32,21)-(32,38)
(32,22)-(32,27)
(32,28)-(32,37)
(32,29)-(32,33)
(32,35)-(32,36)
(33,11)-(33,40)
(33,11)-(33,22)
(33,23)-(33,40)
(33,24)-(33,29)
(33,30)-(33,39)
(33,31)-(33,35)
(33,37)-(33,38)
(34,11)-(34,40)
(34,11)-(34,22)
(34,23)-(34,40)
(34,24)-(34,29)
(34,30)-(34,39)
(34,31)-(34,35)
(34,37)-(34,38)
(35,11)-(35,62)
(35,12)-(35,42)
(35,13)-(35,25)
(35,26)-(35,31)
(35,32)-(35,41)
(35,33)-(35,37)
(35,39)-(35,40)
(35,44)-(35,61)
(35,45)-(35,50)
(35,51)-(35,60)
(35,52)-(35,56)
(35,58)-(35,59)
(36,11)-(36,62)
(36,11)-(36,23)
(36,24)-(36,62)
(36,25)-(36,42)
(36,26)-(36,31)
(36,32)-(36,41)
(36,33)-(36,37)
(36,39)-(36,40)
(36,44)-(36,61)
(36,45)-(36,50)
(36,51)-(36,60)
(36,52)-(36,56)
(36,58)-(36,59)
(37,11)-(37,60)
(37,12)-(37,40)
(37,13)-(37,23)
(37,24)-(37,29)
(37,30)-(37,39)
(37,31)-(37,35)
(37,37)-(37,38)
(37,42)-(37,59)
(37,43)-(37,48)
(37,49)-(37,58)
(37,50)-(37,54)
(37,56)-(37,57)
(38,11)-(38,60)
(38,11)-(38,21)
(38,22)-(38,60)
(38,23)-(38,40)
(38,24)-(38,29)
(38,30)-(38,39)
(38,31)-(38,35)
(38,37)-(38,38)
(38,42)-(38,59)
(38,43)-(38,48)
(38,49)-(38,58)
(38,50)-(38,54)
(38,56)-(38,57)
(40,8)-(42,30)
(40,8)-(40,19)
(41,10)-(42,30)
(41,11)-(41,28)
(41,12)-(41,17)
(41,18)-(41,27)
(41,19)-(41,23)
(41,25)-(41,26)
(41,30)-(41,47)
(41,31)-(41,36)
(41,37)-(41,46)
(41,38)-(41,42)
(41,44)-(41,45)
(41,49)-(41,66)
(41,50)-(41,55)
(41,56)-(41,65)
(41,57)-(41,61)
(41,63)-(41,64)
(42,12)-(42,29)
(42,13)-(42,18)
(42,19)-(42,28)
(42,20)-(42,24)
(42,26)-(42,27)
(44,8)-(46,30)
(44,8)-(44,19)
(45,10)-(46,30)
(45,11)-(45,28)
(45,12)-(45,17)
(45,18)-(45,27)
(45,19)-(45,23)
(45,25)-(45,26)
(45,30)-(45,47)
(45,31)-(45,36)
(45,37)-(45,46)
(45,38)-(45,42)
(45,44)-(45,45)
(45,49)-(45,66)
(45,50)-(45,55)
(45,56)-(45,65)
(45,57)-(45,61)
(45,63)-(45,64)
(46,12)-(46,29)
(46,13)-(46,18)
(46,19)-(46,28)
(46,20)-(46,24)
(46,26)-(46,27)
(48,8)-(50,30)
(48,8)-(48,19)
(49,10)-(50,30)
(49,11)-(49,28)
(49,12)-(49,17)
(49,18)-(49,27)
(49,19)-(49,23)
(49,25)-(49,26)
(49,30)-(49,47)
(49,31)-(49,36)
(49,37)-(49,46)
(49,38)-(49,42)
(49,44)-(49,45)
(49,49)-(49,66)
(49,50)-(49,55)
(49,56)-(49,65)
(49,57)-(49,61)
(49,63)-(49,64)
(50,12)-(50,29)
(50,13)-(50,18)
(50,19)-(50,28)
(50,20)-(50,24)
(50,26)-(50,27)
(52,4)-(52,77)
(52,14)-(52,25)
(52,14)-(52,18)
(52,19)-(52,25)
(52,20)-(52,21)
(52,23)-(52,24)
(52,29)-(52,76)
(52,35)-(52,37)
(52,50)-(52,59)
(52,50)-(52,56)
(52,57)-(52,59)
(52,67)-(52,76)
(52,67)-(52,73)
(52,74)-(52,76)
*)
