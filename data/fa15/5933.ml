
let rec mulByDigit i l =
  if (List.length l) = 1
  then [l * i]
  else
    (match l with
     | [] -> []
     | z::x::x' ->
         [(z * i) / 10] @ ((mulByDigit i [((z * i) mod 10) + x]) @ x'));;


(* fix

let rec mulByDigit i l =
  if (List.length l) = 1
  then let x::x' = l in [x * i]
  else
    (match l with
     | [] -> []
     | z::x::x' ->
         [(z * i) / 10] @ ((mulByDigit i [((z * i) mod 10) + x]) @ x'));;

*)

(* changed spans
(4,7)-(4,14)
(4,8)-(4,9)
*)

(* type error slice
(3,5)-(3,20)
(3,6)-(3,17)
(3,18)-(3,19)
(4,8)-(4,9)
(4,8)-(4,13)
*)

(* all spans
(2,19)-(9,71)
(2,21)-(9,71)
(3,2)-(9,71)
(3,5)-(3,24)
(3,5)-(3,20)
(3,6)-(3,17)
(3,18)-(3,19)
(3,23)-(3,24)
(4,7)-(4,14)
(4,8)-(4,13)
(4,8)-(4,9)
(4,12)-(4,13)
(6,4)-(9,71)
(6,11)-(6,12)
(7,13)-(7,15)
(9,9)-(9,70)
(9,24)-(9,25)
(9,9)-(9,23)
(9,10)-(9,22)
(9,10)-(9,17)
(9,11)-(9,12)
(9,15)-(9,16)
(9,20)-(9,22)
(9,26)-(9,70)
(9,65)-(9,66)
(9,27)-(9,64)
(9,28)-(9,38)
(9,39)-(9,40)
(9,41)-(9,63)
(9,42)-(9,62)
(9,42)-(9,58)
(9,43)-(9,50)
(9,44)-(9,45)
(9,48)-(9,49)
(9,55)-(9,57)
(9,61)-(9,62)
(9,67)-(9,69)
*)
