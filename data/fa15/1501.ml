
let rec clone x n =
  match n with | y when y <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) <= (List.length l2) with
  | true  ->
      ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  | false  ->
      (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> l);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | [] ->
          (match x with
           | (x1,x2) when (x1 + x2) <= 9 -> 0 :: (x1 + x2) :: a
           | (x1,x2) when (x1 + x2) > 9 -> 1 :: ((x1 + x2) - 9) :: a)
      | h::t ->
          (match x with
           | (x1,x2) when ((x1 + x2) + h) <= 9 -> 0 :: ((x1 + x2) + h) :: t
           | (x1,x2) when ((x1 + x2) + h) > 9 -> 1 :: (((x1 + x2) + h) - 9)
               :: t) in
    let base = [] in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n with | y when y <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) <= (List.length l2) with
  | true  ->
      ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  | false  ->
      (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> l);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let sum = (fst x) + (snd x) in
      match a with
      | [] -> (sum / 10) :: (sum mod 10) :: a
      | h::t -> (sum / 10) :: (h + (sum mod 10)) :: t in
    let base = [] in
    let args = List.combine (List.rev l1) (List.rev l2) in
    List.fold_left f base args in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(20,6)-(29,20)
(20,12)-(20,13)
(22,10)-(24,69)
(22,17)-(22,18)
(23,32)-(23,34)
(23,44)-(23,45)
(23,44)-(23,63)
(23,49)-(23,63)
(23,50)-(23,52)
(23,55)-(23,57)
(24,26)-(24,35)
(24,43)-(24,44)
(24,48)-(24,63)
(24,49)-(24,58)
(24,50)-(24,52)
(24,55)-(24,57)
(24,61)-(24,62)
(26,10)-(29,20)
(26,17)-(26,18)
(27,45)-(27,46)
(27,50)-(27,51)
(27,55)-(27,70)
(27,55)-(27,75)
(27,56)-(27,65)
(27,57)-(27,59)
(27,62)-(27,64)
(27,68)-(27,69)
(27,74)-(27,75)
(28,49)-(28,50)
(28,49)-(29,19)
(28,54)-(28,75)
(28,56)-(28,65)
(28,57)-(28,59)
(28,62)-(28,64)
(28,73)-(28,74)
(32,4)-(32,51)
(32,48)-(32,51)
*)

(* type error slice
(19,4)-(32,51)
(19,10)-(29,20)
(23,49)-(23,63)
(23,62)-(23,63)
(32,4)-(32,51)
(32,18)-(32,32)
(32,18)-(32,44)
(32,33)-(32,34)
*)

(* all spans
(2,14)-(3,66)
(2,16)-(3,66)
(3,2)-(3,66)
(3,8)-(3,9)
(3,24)-(3,30)
(3,24)-(3,25)
(3,29)-(3,30)
(3,34)-(3,36)
(3,44)-(3,66)
(3,44)-(3,45)
(3,49)-(3,66)
(3,50)-(3,55)
(3,56)-(3,57)
(3,58)-(3,65)
(3,59)-(3,60)
(3,63)-(3,64)
(5,12)-(10,76)
(5,15)-(10,76)
(6,2)-(10,76)
(6,8)-(6,44)
(6,8)-(6,24)
(6,9)-(6,20)
(6,21)-(6,23)
(6,28)-(6,44)
(6,29)-(6,40)
(6,41)-(6,43)
(8,6)-(8,76)
(8,7)-(8,71)
(8,8)-(8,19)
(8,20)-(8,67)
(8,21)-(8,26)
(8,27)-(8,28)
(8,29)-(8,66)
(8,30)-(8,46)
(8,31)-(8,42)
(8,43)-(8,45)
(8,49)-(8,65)
(8,50)-(8,61)
(8,62)-(8,64)
(8,68)-(8,70)
(8,73)-(8,75)
(10,6)-(10,76)
(10,7)-(10,9)
(10,11)-(10,75)
(10,12)-(10,23)
(10,24)-(10,71)
(10,25)-(10,30)
(10,31)-(10,32)
(10,33)-(10,70)
(10,34)-(10,50)
(10,35)-(10,46)
(10,47)-(10,49)
(10,53)-(10,69)
(10,54)-(10,65)
(10,66)-(10,68)
(10,72)-(10,74)
(12,19)-(15,55)
(13,2)-(15,55)
(13,8)-(13,9)
(14,10)-(14,12)
(15,12)-(15,55)
(15,19)-(15,20)
(15,33)-(15,45)
(15,33)-(15,43)
(15,44)-(15,45)
(15,53)-(15,54)
(17,11)-(33,34)
(17,14)-(33,34)
(18,2)-(33,34)
(18,11)-(32,51)
(19,4)-(32,51)
(19,10)-(29,20)
(19,12)-(29,20)
(20,6)-(29,20)
(20,12)-(20,13)
(22,10)-(24,69)
(22,17)-(22,18)
(23,26)-(23,40)
(23,26)-(23,35)
(23,27)-(23,29)
(23,32)-(23,34)
(23,39)-(23,40)
(24,26)-(24,39)
(24,26)-(24,35)
(24,27)-(24,29)
(24,32)-(24,34)
(24,38)-(24,39)
(23,44)-(23,63)
(23,44)-(23,45)
(23,49)-(23,63)
(23,49)-(23,58)
(23,50)-(23,52)
(23,55)-(23,57)
(23,62)-(23,63)
(24,43)-(24,68)
(24,43)-(24,44)
(24,48)-(24,68)
(24,48)-(24,63)
(24,49)-(24,58)
(24,50)-(24,52)
(24,55)-(24,57)
(24,61)-(24,62)
(24,67)-(24,68)
(26,10)-(29,20)
(26,17)-(26,18)
(27,26)-(27,46)
(27,26)-(27,41)
(27,27)-(27,36)
(27,28)-(27,30)
(27,33)-(27,35)
(27,39)-(27,40)
(27,45)-(27,46)
(28,26)-(28,45)
(28,26)-(28,41)
(28,27)-(28,36)
(28,28)-(28,30)
(28,33)-(28,35)
(28,39)-(28,40)
(28,44)-(28,45)
(27,50)-(27,75)
(27,50)-(27,51)
(27,55)-(27,75)
(27,55)-(27,70)
(27,56)-(27,65)
(27,57)-(27,59)
(27,62)-(27,64)
(27,68)-(27,69)
(27,74)-(27,75)
(28,49)-(29,19)
(28,49)-(28,50)
(28,54)-(29,19)
(28,54)-(28,75)
(28,55)-(28,70)
(28,56)-(28,65)
(28,57)-(28,59)
(28,62)-(28,64)
(28,68)-(28,69)
(28,73)-(28,74)
(29,18)-(29,19)
(30,4)-(32,51)
(30,15)-(30,17)
(31,4)-(32,51)
(31,15)-(31,55)
(31,15)-(31,27)
(31,28)-(31,41)
(31,29)-(31,37)
(31,38)-(31,40)
(31,42)-(31,55)
(31,43)-(31,51)
(31,52)-(31,54)
(32,4)-(32,51)
(32,18)-(32,44)
(32,18)-(32,32)
(32,33)-(32,34)
(32,35)-(32,39)
(32,40)-(32,44)
(32,48)-(32,51)
(33,2)-(33,34)
(33,2)-(33,12)
(33,13)-(33,34)
(33,14)-(33,17)
(33,18)-(33,33)
(33,19)-(33,26)
(33,27)-(33,29)
(33,30)-(33,32)
*)
