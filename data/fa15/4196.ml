
let rec clone x n =
  match n with | 0 -> [] | n -> if n < 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) - (List.length l2) with
  | 0 -> (l1, l2)
  | n ->
      if n < 0
      then (((clone 0 (n * (-1))) @ l1), l2)
      else (((clone 0 n) @ l2), l1);;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (fst,sec) = x in
      let (fst',sec') =
        if (fst + sec) > 9 then (((fst + sec) - 10), 1) else ((fst + sec), 0) in
      let (carry,digits) = a in
      let (carry',digits') =
        if sec' = 1
        then (1, (digits @ (fst, sec)))
        else (0, (digits @ (fst, sec))) in
      (carry', digits') in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n with | 0 -> [] | n -> if n < 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) - (List.length l2) with
  | 0 -> (l1, l2)
  | n ->
      if n < 0
      then (((clone 0 (n * (-1))) @ l1), l2)
      else (((clone 0 n) @ l2), l1);;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (fst,sec) = x in
      let (fst',sec') =
        if (fst + sec) > 9 then (((fst + sec) - 10), 1) else ((fst + sec), 0) in
      let (carry,digits) = a in
      let (carry',digits') =
        if sec' = 1 then (1, (digits @ [fst'])) else (0, (digits @ [fst'])) in
      (carry', digits') in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(25,27)-(25,37)
(25,28)-(25,31)
(25,33)-(25,36)
(26,13)-(26,39)
(26,27)-(26,37)
(26,28)-(26,31)
(26,33)-(26,36)
(27,6)-(27,23)
*)

(* type error slice
(25,17)-(25,38)
(25,25)-(25,26)
(25,27)-(25,37)
(26,17)-(26,38)
(26,25)-(26,26)
(26,27)-(26,37)
*)

(* all spans
(2,14)-(3,76)
(2,16)-(3,76)
(3,2)-(3,76)
(3,8)-(3,9)
(3,22)-(3,24)
(3,32)-(3,76)
(3,35)-(3,40)
(3,35)-(3,36)
(3,39)-(3,40)
(3,46)-(3,48)
(3,54)-(3,76)
(3,54)-(3,55)
(3,59)-(3,76)
(3,60)-(3,65)
(3,66)-(3,67)
(3,68)-(3,75)
(3,69)-(3,70)
(3,73)-(3,74)
(5,12)-(11,35)
(5,15)-(11,35)
(6,2)-(11,35)
(6,8)-(6,43)
(6,8)-(6,24)
(6,9)-(6,20)
(6,21)-(6,23)
(6,27)-(6,43)
(6,28)-(6,39)
(6,40)-(6,42)
(7,9)-(7,17)
(7,10)-(7,12)
(7,14)-(7,16)
(9,6)-(11,35)
(9,9)-(9,14)
(9,9)-(9,10)
(9,13)-(9,14)
(10,11)-(10,44)
(10,12)-(10,39)
(10,34)-(10,35)
(10,13)-(10,33)
(10,14)-(10,19)
(10,20)-(10,21)
(10,22)-(10,32)
(10,23)-(10,24)
(10,27)-(10,31)
(10,36)-(10,38)
(10,41)-(10,43)
(11,11)-(11,35)
(11,12)-(11,30)
(11,25)-(11,26)
(11,13)-(11,24)
(11,14)-(11,19)
(11,20)-(11,21)
(11,22)-(11,23)
(11,27)-(11,29)
(11,32)-(11,34)
(13,19)-(14,68)
(14,2)-(14,68)
(14,8)-(14,9)
(14,23)-(14,24)
(14,35)-(14,68)
(14,38)-(14,43)
(14,38)-(14,39)
(14,42)-(14,43)
(14,49)-(14,61)
(14,49)-(14,59)
(14,60)-(14,61)
(14,67)-(14,68)
(16,11)-(31,34)
(16,14)-(31,34)
(17,2)-(31,34)
(17,11)-(30,51)
(18,4)-(30,51)
(18,10)-(27,23)
(18,12)-(27,23)
(19,6)-(27,23)
(19,22)-(19,23)
(20,6)-(27,23)
(21,8)-(21,77)
(21,11)-(21,26)
(21,11)-(21,22)
(21,12)-(21,15)
(21,18)-(21,21)
(21,25)-(21,26)
(21,32)-(21,55)
(21,33)-(21,51)
(21,34)-(21,45)
(21,35)-(21,38)
(21,41)-(21,44)
(21,48)-(21,50)
(21,53)-(21,54)
(21,61)-(21,77)
(21,62)-(21,73)
(21,63)-(21,66)
(21,69)-(21,72)
(21,75)-(21,76)
(22,6)-(27,23)
(22,27)-(22,28)
(23,6)-(27,23)
(24,8)-(26,39)
(24,11)-(24,19)
(24,11)-(24,15)
(24,18)-(24,19)
(25,13)-(25,39)
(25,14)-(25,15)
(25,17)-(25,38)
(25,25)-(25,26)
(25,18)-(25,24)
(25,27)-(25,37)
(25,28)-(25,31)
(25,33)-(25,36)
(26,13)-(26,39)
(26,14)-(26,15)
(26,17)-(26,38)
(26,25)-(26,26)
(26,18)-(26,24)
(26,27)-(26,37)
(26,28)-(26,31)
(26,33)-(26,36)
(27,6)-(27,23)
(27,7)-(27,13)
(27,15)-(27,22)
(28,4)-(30,51)
(28,15)-(28,22)
(28,16)-(28,17)
(28,19)-(28,21)
(29,4)-(30,51)
(29,15)-(29,57)
(29,47)-(29,48)
(29,15)-(29,46)
(29,16)-(29,24)
(29,25)-(29,45)
(29,26)-(29,38)
(29,39)-(29,41)
(29,42)-(29,44)
(29,49)-(29,57)
(29,50)-(29,56)
(29,51)-(29,52)
(29,54)-(29,55)
(30,4)-(30,51)
(30,18)-(30,44)
(30,18)-(30,32)
(30,33)-(30,34)
(30,35)-(30,39)
(30,40)-(30,44)
(30,48)-(30,51)
(31,2)-(31,34)
(31,2)-(31,12)
(31,13)-(31,34)
(31,14)-(31,17)
(31,18)-(31,33)
(31,19)-(31,26)
(31,27)-(31,29)
(31,30)-(31,32)
*)
