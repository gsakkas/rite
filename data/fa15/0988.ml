
let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let n = (List.length l1) - (List.length l2) in
  if n > 0 then (l1, ((clone 0 n) @ l2)) else (((clone 0 (0 - n)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,accList) = a in
      let (x1,x2) = x in
      if ((x1 + x2) + carry) / 10
      then (1, ((((x1 + x2) + carry) mod 10) :: accList))
      else (0, ((x1 + x2) :: accList)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let n = (List.length l1) - (List.length l2) in
  if n > 0 then (l1, ((clone 0 n) @ l2)) else (((clone 0 (0 - n)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,accList) = a in
      let (x1,x2) = x in
      ((((x1 + x2) + carry) / 10), ((((x1 + x2) + carry) mod 10) :: accList)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(16,6)-(18,38)
(17,11)-(17,57)
(17,12)-(17,13)
(18,11)-(18,38)
(18,12)-(18,13)
(18,15)-(18,37)
(18,16)-(18,25)
(18,17)-(18,19)
(18,22)-(18,24)
(18,29)-(18,36)
*)

(* type error slice
(16,6)-(18,38)
(16,9)-(16,33)
*)

(* all spans
(2,14)-(2,64)
(2,16)-(2,64)
(2,20)-(2,64)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,36)
(2,42)-(2,64)
(2,42)-(2,43)
(2,47)-(2,64)
(2,48)-(2,53)
(2,54)-(2,55)
(2,56)-(2,63)
(2,57)-(2,58)
(2,61)-(2,62)
(4,12)-(6,76)
(4,15)-(6,76)
(5,2)-(6,76)
(5,10)-(5,45)
(5,10)-(5,26)
(5,11)-(5,22)
(5,23)-(5,25)
(5,29)-(5,45)
(5,30)-(5,41)
(5,42)-(5,44)
(6,2)-(6,76)
(6,5)-(6,10)
(6,5)-(6,6)
(6,9)-(6,10)
(6,16)-(6,40)
(6,17)-(6,19)
(6,21)-(6,39)
(6,34)-(6,35)
(6,22)-(6,33)
(6,23)-(6,28)
(6,29)-(6,30)
(6,31)-(6,32)
(6,36)-(6,38)
(6,46)-(6,76)
(6,47)-(6,71)
(6,66)-(6,67)
(6,48)-(6,65)
(6,49)-(6,54)
(6,55)-(6,56)
(6,57)-(6,64)
(6,58)-(6,59)
(6,62)-(6,63)
(6,68)-(6,70)
(6,73)-(6,75)
(8,19)-(9,74)
(9,2)-(9,74)
(9,8)-(9,9)
(9,23)-(9,25)
(9,36)-(9,74)
(9,39)-(9,44)
(9,39)-(9,40)
(9,43)-(9,44)
(9,50)-(9,62)
(9,50)-(9,60)
(9,61)-(9,62)
(9,68)-(9,74)
(9,68)-(9,69)
(9,73)-(9,74)
(11,11)-(22,34)
(11,14)-(22,34)
(12,2)-(22,34)
(12,11)-(21,51)
(13,4)-(21,51)
(13,10)-(18,38)
(13,12)-(18,38)
(14,6)-(18,38)
(14,28)-(14,29)
(15,6)-(18,38)
(15,20)-(15,21)
(16,6)-(18,38)
(16,9)-(16,33)
(16,9)-(16,28)
(16,10)-(16,19)
(16,11)-(16,13)
(16,16)-(16,18)
(16,22)-(16,27)
(16,31)-(16,33)
(17,11)-(17,57)
(17,12)-(17,13)
(17,15)-(17,56)
(17,16)-(17,44)
(17,17)-(17,36)
(17,18)-(17,27)
(17,19)-(17,21)
(17,24)-(17,26)
(17,30)-(17,35)
(17,41)-(17,43)
(17,48)-(17,55)
(18,11)-(18,38)
(18,12)-(18,13)
(18,15)-(18,37)
(18,16)-(18,25)
(18,17)-(18,19)
(18,22)-(18,24)
(18,29)-(18,36)
(19,4)-(21,51)
(19,15)-(19,22)
(19,16)-(19,17)
(19,19)-(19,21)
(20,4)-(21,51)
(20,15)-(20,44)
(20,15)-(20,23)
(20,24)-(20,44)
(20,25)-(20,37)
(20,38)-(20,40)
(20,41)-(20,43)
(21,4)-(21,51)
(21,18)-(21,44)
(21,18)-(21,32)
(21,33)-(21,34)
(21,35)-(21,39)
(21,40)-(21,44)
(21,48)-(21,51)
(22,2)-(22,34)
(22,2)-(22,12)
(22,13)-(22,34)
(22,14)-(22,17)
(22,18)-(22,33)
(22,19)-(22,26)
(22,27)-(22,29)
(22,30)-(22,32)
*)
