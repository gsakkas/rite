
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone (0, (abs numZeros)) in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;

*)

(* changed spans
(6,2)-(10,77)
(9,21)-(9,46)
(9,27)-(9,46)
(9,31)-(9,45)
(9,32)-(9,35)
(9,36)-(9,44)
*)

(* type error slice
(2,48)-(2,65)
(2,49)-(2,54)
(9,4)-(10,77)
(9,21)-(9,26)
(9,21)-(9,46)
(10,31)-(10,47)
(10,32)-(10,41)
(10,42)-(10,43)
(10,55)-(10,71)
(10,56)-(10,65)
(10,66)-(10,67)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(10,77)
(4,15)-(10,77)
(5,2)-(10,77)
(5,17)-(5,52)
(5,17)-(5,33)
(5,18)-(5,29)
(5,30)-(5,32)
(5,36)-(5,52)
(5,37)-(5,48)
(5,49)-(5,51)
(6,2)-(10,77)
(6,5)-(6,17)
(6,5)-(6,13)
(6,16)-(6,17)
(7,7)-(7,15)
(7,8)-(7,10)
(7,12)-(7,14)
(9,4)-(10,77)
(9,21)-(9,46)
(9,21)-(9,26)
(9,27)-(9,46)
(9,28)-(9,29)
(9,31)-(9,45)
(9,32)-(9,35)
(9,36)-(9,44)
(10,5)-(10,76)
(10,8)-(10,20)
(10,8)-(10,16)
(10,19)-(10,20)
(10,26)-(10,48)
(10,27)-(10,29)
(10,31)-(10,47)
(10,42)-(10,43)
(10,32)-(10,41)
(10,44)-(10,46)
(10,54)-(10,76)
(10,55)-(10,71)
(10,66)-(10,67)
(10,56)-(10,65)
(10,68)-(10,70)
(10,73)-(10,75)
*)
