
let rec digitsOfInt n =
  match n < 0 with
  | true  -> []
  | false  ->
      if (n / 10) = 0
      then [n mod 10]
      else (digitsOfInt (n / 10)) :: (n mod 10);;


(* fix

let rec digitsOfInt n =
  match n < 0 with
  | true  -> []
  | false  ->
      if (n / 10) = 0
      then [n mod 10]
      else (digitsOfInt (n / 10)) @ [n mod 10];;

let _ = digitsOfInt 3124;;

*)

(* changed spans
(8,11)-(8,33)
(8,11)-(8,47)
(8,37)-(8,47)
*)

(* type error slice
(2,3)-(8,49)
(2,20)-(8,47)
(3,2)-(8,47)
(6,6)-(8,47)
(8,11)-(8,33)
(8,11)-(8,47)
(8,12)-(8,23)
(8,37)-(8,47)
*)

(* all spans
(2,20)-(8,47)
(3,2)-(8,47)
(3,8)-(3,13)
(3,8)-(3,9)
(3,12)-(3,13)
(4,13)-(4,15)
(6,6)-(8,47)
(6,9)-(6,21)
(6,9)-(6,17)
(6,10)-(6,11)
(6,14)-(6,16)
(6,20)-(6,21)
(7,11)-(7,21)
(7,12)-(7,20)
(7,12)-(7,13)
(7,18)-(7,20)
(8,11)-(8,47)
(8,11)-(8,33)
(8,12)-(8,23)
(8,24)-(8,32)
(8,25)-(8,26)
(8,29)-(8,31)
(8,37)-(8,47)
(8,38)-(8,39)
(8,44)-(8,46)
*)
