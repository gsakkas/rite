
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Funny of expr* expr* expr
  | Funny1 of expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildFunny (c,d,e) = Funny (c, d, e);;

let buildFunny1 f = Funny1 f;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match rand (0, 8) with
  | 0 -> if (rand (0, 2)) = 0 then buildX () else buildY ()
  | 1 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else buildSine (build (rand, (depth - 1)))
  | 2 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else buildCosine (build (rand, (depth - 1)))
  | 3 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 4 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 6 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else buildFunny (build (rand, (depth - 1)))
  | 7 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else buildFunny1 (build (rand, (depth - 1)));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Funny of expr* expr* expr
  | Funny1 of expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildFunny (c,d,e) = Funny (c, d, e);;

let buildFunny1 f = Funny1 f;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  match rand (0, 8) with
  | 0 -> if (rand (0, 2)) = 0 then buildX () else buildY ()
  | 1 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else buildSine (build (rand, (depth - 1)))
  | 2 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else buildCosine (build (rand, (depth - 1)))
  | 3 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else
        buildAverage
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 4 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else
        buildTimes ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 5 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else
        buildThresh
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))), (build (rand, (depth - 1))))
  | 6 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else
        buildFunny
          ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
            (build (rand, (depth - 1))))
  | 7 ->
      if depth = 0
      then (if (rand (0, 2)) = 0 then buildX () else buildY ())
      else buildFunny1 (build (rand, (depth - 1)));;

*)

(* changed spans
(63,22)-(63,49)
(65,6)-(67,50)
*)

(* type error slice
(17,3)-(17,42)
(17,16)-(17,40)
(21,3)-(21,26)
(21,14)-(21,24)
(21,18)-(21,24)
(21,23)-(21,24)
(37,11)-(37,20)
(37,11)-(37,48)
(37,21)-(37,48)
(37,22)-(37,27)
(63,11)-(63,21)
(63,11)-(63,49)
(63,22)-(63,49)
(63,23)-(63,28)
*)

(* all spans
(13,18)-(13,43)
(13,27)-(13,43)
(13,36)-(13,38)
(13,40)-(13,42)
(15,16)-(15,28)
(15,20)-(15,28)
(15,27)-(15,28)
(17,16)-(17,40)
(17,25)-(17,40)
(17,32)-(17,33)
(17,35)-(17,36)
(17,38)-(17,39)
(19,16)-(19,28)
(19,20)-(19,28)
(19,27)-(19,28)
(21,14)-(21,24)
(21,18)-(21,24)
(21,23)-(21,24)
(23,17)-(23,67)
(23,38)-(23,67)
(23,46)-(23,47)
(23,49)-(23,50)
(23,52)-(23,58)
(23,60)-(23,66)
(25,16)-(25,39)
(25,25)-(25,39)
(25,32)-(25,34)
(25,36)-(25,38)
(27,11)-(27,20)
(27,16)-(27,20)
(29,11)-(29,20)
(29,16)-(29,20)
(31,15)-(67,50)
(32,2)-(67,50)
(32,8)-(32,19)
(32,8)-(32,12)
(32,13)-(32,19)
(32,14)-(32,15)
(32,17)-(32,18)
(33,9)-(33,59)
(33,12)-(33,29)
(33,12)-(33,25)
(33,13)-(33,17)
(33,18)-(33,24)
(33,19)-(33,20)
(33,22)-(33,23)
(33,28)-(33,29)
(33,35)-(33,44)
(33,35)-(33,41)
(33,42)-(33,44)
(33,50)-(33,59)
(33,50)-(33,56)
(33,57)-(33,59)
(35,6)-(37,48)
(35,9)-(35,18)
(35,9)-(35,14)
(35,17)-(35,18)
(36,11)-(36,63)
(36,15)-(36,32)
(36,15)-(36,28)
(36,16)-(36,20)
(36,21)-(36,27)
(36,22)-(36,23)
(36,25)-(36,26)
(36,31)-(36,32)
(36,38)-(36,47)
(36,38)-(36,44)
(36,45)-(36,47)
(36,53)-(36,62)
(36,53)-(36,59)
(36,60)-(36,62)
(37,11)-(37,48)
(37,11)-(37,20)
(37,21)-(37,48)
(37,22)-(37,27)
(37,28)-(37,47)
(37,29)-(37,33)
(37,35)-(37,46)
(37,36)-(37,41)
(37,44)-(37,45)
(39,6)-(41,50)
(39,9)-(39,18)
(39,9)-(39,14)
(39,17)-(39,18)
(40,11)-(40,63)
(40,15)-(40,32)
(40,15)-(40,28)
(40,16)-(40,20)
(40,21)-(40,27)
(40,22)-(40,23)
(40,25)-(40,26)
(40,31)-(40,32)
(40,38)-(40,47)
(40,38)-(40,44)
(40,45)-(40,47)
(40,53)-(40,62)
(40,53)-(40,59)
(40,60)-(40,62)
(41,11)-(41,50)
(41,11)-(41,22)
(41,23)-(41,50)
(41,24)-(41,29)
(41,30)-(41,49)
(41,31)-(41,35)
(41,37)-(41,48)
(41,38)-(41,43)
(41,46)-(41,47)
(43,6)-(47,68)
(43,9)-(43,18)
(43,9)-(43,14)
(43,17)-(43,18)
(44,11)-(44,63)
(44,15)-(44,32)
(44,15)-(44,28)
(44,16)-(44,20)
(44,21)-(44,27)
(44,22)-(44,23)
(44,25)-(44,26)
(44,31)-(44,32)
(44,38)-(44,47)
(44,38)-(44,44)
(44,45)-(44,47)
(44,53)-(44,62)
(44,53)-(44,59)
(44,60)-(44,62)
(46,8)-(47,68)
(46,8)-(46,20)
(47,10)-(47,68)
(47,11)-(47,38)
(47,12)-(47,17)
(47,18)-(47,37)
(47,19)-(47,23)
(47,25)-(47,36)
(47,26)-(47,31)
(47,34)-(47,35)
(47,40)-(47,67)
(47,41)-(47,46)
(47,47)-(47,66)
(47,48)-(47,52)
(47,54)-(47,65)
(47,55)-(47,60)
(47,63)-(47,64)
(49,6)-(52,77)
(49,9)-(49,18)
(49,9)-(49,14)
(49,17)-(49,18)
(50,11)-(50,63)
(50,15)-(50,32)
(50,15)-(50,28)
(50,16)-(50,20)
(50,21)-(50,27)
(50,22)-(50,23)
(50,25)-(50,26)
(50,31)-(50,32)
(50,38)-(50,47)
(50,38)-(50,44)
(50,45)-(50,47)
(50,53)-(50,62)
(50,53)-(50,59)
(50,60)-(50,62)
(52,8)-(52,77)
(52,8)-(52,18)
(52,19)-(52,77)
(52,20)-(52,47)
(52,21)-(52,26)
(52,27)-(52,46)
(52,28)-(52,32)
(52,34)-(52,45)
(52,35)-(52,40)
(52,43)-(52,44)
(52,49)-(52,76)
(52,50)-(52,55)
(52,56)-(52,75)
(52,57)-(52,61)
(52,63)-(52,74)
(52,64)-(52,69)
(52,72)-(52,73)
(54,6)-(59,69)
(54,9)-(54,18)
(54,9)-(54,14)
(54,17)-(54,18)
(55,11)-(55,63)
(55,15)-(55,32)
(55,15)-(55,28)
(55,16)-(55,20)
(55,21)-(55,27)
(55,22)-(55,23)
(55,25)-(55,26)
(55,31)-(55,32)
(55,38)-(55,47)
(55,38)-(55,44)
(55,45)-(55,47)
(55,53)-(55,62)
(55,53)-(55,59)
(55,60)-(55,62)
(57,8)-(59,69)
(57,8)-(57,19)
(58,10)-(59,69)
(58,11)-(58,38)
(58,12)-(58,17)
(58,18)-(58,37)
(58,19)-(58,23)
(58,25)-(58,36)
(58,26)-(58,31)
(58,34)-(58,35)
(58,40)-(58,67)
(58,41)-(58,46)
(58,47)-(58,66)
(58,48)-(58,52)
(58,54)-(58,65)
(58,55)-(58,60)
(58,63)-(58,64)
(59,12)-(59,39)
(59,13)-(59,18)
(59,19)-(59,38)
(59,20)-(59,24)
(59,26)-(59,37)
(59,27)-(59,32)
(59,35)-(59,36)
(59,41)-(59,68)
(59,42)-(59,47)
(59,48)-(59,67)
(59,49)-(59,53)
(59,55)-(59,66)
(59,56)-(59,61)
(59,64)-(59,65)
(61,6)-(63,49)
(61,9)-(61,18)
(61,9)-(61,14)
(61,17)-(61,18)
(62,11)-(62,63)
(62,15)-(62,32)
(62,15)-(62,28)
(62,16)-(62,20)
(62,21)-(62,27)
(62,22)-(62,23)
(62,25)-(62,26)
(62,31)-(62,32)
(62,38)-(62,47)
(62,38)-(62,44)
(62,45)-(62,47)
(62,53)-(62,62)
(62,53)-(62,59)
(62,60)-(62,62)
(63,11)-(63,49)
(63,11)-(63,21)
(63,22)-(63,49)
(63,23)-(63,28)
(63,29)-(63,48)
(63,30)-(63,34)
(63,36)-(63,47)
(63,37)-(63,42)
(63,45)-(63,46)
(65,6)-(67,50)
(65,9)-(65,18)
(65,9)-(65,14)
(65,17)-(65,18)
(66,11)-(66,63)
(66,15)-(66,32)
(66,15)-(66,28)
(66,16)-(66,20)
(66,21)-(66,27)
(66,22)-(66,23)
(66,25)-(66,26)
(66,31)-(66,32)
(66,38)-(66,47)
(66,38)-(66,44)
(66,45)-(66,47)
(66,53)-(66,62)
(66,53)-(66,59)
(66,60)-(66,62)
(67,11)-(67,50)
(67,11)-(67,22)
(67,23)-(67,50)
(67,24)-(67,29)
(67,30)-(67,49)
(67,31)-(67,35)
(67,37)-(67,48)
(67,38)-(67,43)
(67,46)-(67,47)
*)
