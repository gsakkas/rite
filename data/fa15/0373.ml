
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let r = rand (0, 11) in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX () else buildY ()
  | d ->
      if r <= 2
      then buildSine (build (rand, (d - 1)))
      else
        if r <= 9
        then
          (match r with
           | 3 ->
               buildAverage
                 ((build (rand, (d - 1))), (build (rand, (d - 1))))
           | 4 ->
               buildTimes ((build (rand, (d - 1))), (build (rand, (d - 1))))
           | 5 ->
               buildThresh
                 ((build (rand, (d - 1))), (build (rand, (d - 1))),
                   (build (rand, (d - 1))), (build (rand, (d - 1))))
           | 6 -> 0.
           | 7 -> 0.)
        else buildCosine (build (rand, (d - 1)));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  let r = rand (0, 11) in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX () else buildY ()
  | d ->
      if r <= 2
      then buildSine (build (rand, (d - 1)))
      else
        if r <= 9
        then
          (match r with
           | 3 ->
               buildAverage
                 ((build (rand, (d - 1))), (build (rand, (d - 1))))
           | 4 ->
               buildTimes ((build (rand, (d - 1))), (build (rand, (d - 1))))
           | 5 ->
               buildThresh
                 ((build (rand, (d - 1))), (build (rand, (d - 1))),
                   (build (rand, (d - 1))), (build (rand, (d - 1)))))
        else buildCosine (build (rand, (d - 1)));;

*)

(* changed spans
(35,10)-(46,21)
(45,18)-(45,20)
(46,18)-(46,20)
*)

(* type error slice
(11,3)-(11,45)
(11,18)-(11,43)
(11,27)-(11,43)
(35,10)-(46,21)
(37,15)-(37,27)
(37,15)-(38,67)
(45,18)-(45,20)
(46,18)-(46,20)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(47,48)
(26,2)-(47,48)
(26,10)-(26,22)
(26,10)-(26,14)
(26,15)-(26,22)
(26,16)-(26,17)
(26,19)-(26,21)
(27,2)-(47,48)
(27,8)-(27,13)
(28,9)-(28,55)
(28,12)-(28,25)
(28,12)-(28,21)
(28,13)-(28,14)
(28,19)-(28,20)
(28,24)-(28,25)
(28,31)-(28,40)
(28,31)-(28,37)
(28,38)-(28,40)
(28,46)-(28,55)
(28,46)-(28,52)
(28,53)-(28,55)
(30,6)-(47,48)
(30,9)-(30,15)
(30,9)-(30,10)
(30,14)-(30,15)
(31,11)-(31,44)
(31,11)-(31,20)
(31,21)-(31,44)
(31,22)-(31,27)
(31,28)-(31,43)
(31,29)-(31,33)
(31,35)-(31,42)
(31,36)-(31,37)
(31,40)-(31,41)
(33,8)-(47,48)
(33,11)-(33,17)
(33,11)-(33,12)
(33,16)-(33,17)
(35,10)-(46,21)
(35,17)-(35,18)
(37,15)-(38,67)
(37,15)-(37,27)
(38,17)-(38,67)
(38,18)-(38,41)
(38,19)-(38,24)
(38,25)-(38,40)
(38,26)-(38,30)
(38,32)-(38,39)
(38,33)-(38,34)
(38,37)-(38,38)
(38,43)-(38,66)
(38,44)-(38,49)
(38,50)-(38,65)
(38,51)-(38,55)
(38,57)-(38,64)
(38,58)-(38,59)
(38,62)-(38,63)
(40,15)-(40,76)
(40,15)-(40,25)
(40,26)-(40,76)
(40,27)-(40,50)
(40,28)-(40,33)
(40,34)-(40,49)
(40,35)-(40,39)
(40,41)-(40,48)
(40,42)-(40,43)
(40,46)-(40,47)
(40,52)-(40,75)
(40,53)-(40,58)
(40,59)-(40,74)
(40,60)-(40,64)
(40,66)-(40,73)
(40,67)-(40,68)
(40,71)-(40,72)
(42,15)-(44,68)
(42,15)-(42,26)
(43,17)-(44,68)
(43,18)-(43,41)
(43,19)-(43,24)
(43,25)-(43,40)
(43,26)-(43,30)
(43,32)-(43,39)
(43,33)-(43,34)
(43,37)-(43,38)
(43,43)-(43,66)
(43,44)-(43,49)
(43,50)-(43,65)
(43,51)-(43,55)
(43,57)-(43,64)
(43,58)-(43,59)
(43,62)-(43,63)
(44,19)-(44,42)
(44,20)-(44,25)
(44,26)-(44,41)
(44,27)-(44,31)
(44,33)-(44,40)
(44,34)-(44,35)
(44,38)-(44,39)
(44,44)-(44,67)
(44,45)-(44,50)
(44,51)-(44,66)
(44,52)-(44,56)
(44,58)-(44,65)
(44,59)-(44,60)
(44,63)-(44,64)
(45,18)-(45,20)
(46,18)-(46,20)
(47,13)-(47,48)
(47,13)-(47,24)
(47,25)-(47,48)
(47,26)-(47,31)
(47,32)-(47,47)
(47,33)-(47,37)
(47,39)-(47,46)
(47,40)-(47,41)
(47,44)-(47,45)
*)
