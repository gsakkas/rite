
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let d = (List.length l1) - (List.length l2) in
  if d < 0 then (((clone 0 (0 - d)) @ l1), l2) else (l1, ((clone 0 d) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = match a with | [] -> [] | h::t -> let (j,k) = x in [0] in
    let base = [0] in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let d = (List.length l1) - (List.length l2) in
  if d < 0 then (((clone 0 (0 - d)) @ l1), l2) else (l1, ((clone 0 d) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (j,k) = x in
      let (l,m) = a in
      if ((j + k) + l) > 9
      then (1, ((((j + k) + l) - 10) :: m))
      else (0, (((j + k) + l) :: m)) in
    let base = (0, []) in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(13,16)-(13,70)
(13,22)-(13,23)
(13,37)-(13,39)
(13,67)-(13,70)
(13,68)-(13,69)
(14,4)-(16,51)
(14,15)-(14,18)
(15,4)-(16,51)
*)

(* type error slice
(13,4)-(16,51)
(13,10)-(13,70)
(13,16)-(13,70)
(13,22)-(13,23)
(16,4)-(16,51)
(16,18)-(16,32)
(16,18)-(16,44)
(16,33)-(16,34)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(6,76)
(4,15)-(6,76)
(5,2)-(6,76)
(5,10)-(5,45)
(5,10)-(5,26)
(5,11)-(5,22)
(5,23)-(5,25)
(5,29)-(5,45)
(5,30)-(5,41)
(5,42)-(5,44)
(6,2)-(6,76)
(6,5)-(6,10)
(6,5)-(6,6)
(6,9)-(6,10)
(6,16)-(6,46)
(6,17)-(6,41)
(6,36)-(6,37)
(6,18)-(6,35)
(6,19)-(6,24)
(6,25)-(6,26)
(6,27)-(6,34)
(6,28)-(6,29)
(6,32)-(6,33)
(6,38)-(6,40)
(6,43)-(6,45)
(6,52)-(6,76)
(6,53)-(6,55)
(6,57)-(6,75)
(6,70)-(6,71)
(6,58)-(6,69)
(6,59)-(6,64)
(6,65)-(6,66)
(6,67)-(6,68)
(6,72)-(6,74)
(8,19)-(9,69)
(9,2)-(9,69)
(9,8)-(9,9)
(9,23)-(9,25)
(9,36)-(9,69)
(9,39)-(9,44)
(9,39)-(9,40)
(9,43)-(9,44)
(9,50)-(9,62)
(9,50)-(9,60)
(9,61)-(9,62)
(9,68)-(9,69)
(11,11)-(17,34)
(11,14)-(17,34)
(12,2)-(17,34)
(12,11)-(16,51)
(13,4)-(16,51)
(13,10)-(13,70)
(13,12)-(13,70)
(13,16)-(13,70)
(13,22)-(13,23)
(13,37)-(13,39)
(13,50)-(13,70)
(13,62)-(13,63)
(13,67)-(13,70)
(13,68)-(13,69)
(14,4)-(16,51)
(14,15)-(14,18)
(14,16)-(14,17)
(15,4)-(16,51)
(15,15)-(15,55)
(15,15)-(15,27)
(15,28)-(15,41)
(15,29)-(15,37)
(15,38)-(15,40)
(15,42)-(15,55)
(15,43)-(15,51)
(15,52)-(15,54)
(16,4)-(16,51)
(16,18)-(16,44)
(16,18)-(16,32)
(16,33)-(16,34)
(16,35)-(16,39)
(16,40)-(16,44)
(16,48)-(16,51)
(17,2)-(17,34)
(17,2)-(17,12)
(17,13)-(17,34)
(17,14)-(17,17)
(17,18)-(17,33)
(17,19)-(17,26)
(17,27)-(17,29)
(17,30)-(17,32)
*)
