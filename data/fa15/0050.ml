
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let ll1 = List.length l1
  and ll2 = List.length l2 in
  if ll1 > ll2
  then (l1, ((clone (0, (ll1 - ll2))) @ l2))
  else (((clone (0, (ll2 - ll1))) @ l1), l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let ll1 = List.length l1
  and ll2 = List.length l2 in
  if ll1 > ll2
  then (l1, ((clone 0 (ll1 - ll2)) @ l2))
  else (((clone 0 (ll2 - ll1)) @ l1), l2);;

*)

(* changed spans
(8,13)-(8,37)
(8,20)-(8,36)
(9,9)-(9,33)
(9,16)-(9,32)
*)

(* type error slice
(2,48)-(2,65)
(2,49)-(2,54)
(8,12)-(8,43)
(8,13)-(8,37)
(8,14)-(8,19)
(8,38)-(8,39)
(9,8)-(9,39)
(9,9)-(9,33)
(9,10)-(9,15)
(9,34)-(9,35)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(9,44)
(4,15)-(9,44)
(5,2)-(9,44)
(5,12)-(5,26)
(5,12)-(5,23)
(5,24)-(5,26)
(6,12)-(6,26)
(6,12)-(6,23)
(6,24)-(6,26)
(7,2)-(9,44)
(7,5)-(7,14)
(7,5)-(7,8)
(7,11)-(7,14)
(8,7)-(8,44)
(8,8)-(8,10)
(8,12)-(8,43)
(8,38)-(8,39)
(8,13)-(8,37)
(8,14)-(8,19)
(8,20)-(8,36)
(8,21)-(8,22)
(8,24)-(8,35)
(8,25)-(8,28)
(8,31)-(8,34)
(8,40)-(8,42)
(9,7)-(9,44)
(9,8)-(9,39)
(9,34)-(9,35)
(9,9)-(9,33)
(9,10)-(9,15)
(9,16)-(9,32)
(9,17)-(9,18)
(9,20)-(9,31)
(9,21)-(9,24)
(9,27)-(9,30)
(9,36)-(9,38)
(9,41)-(9,43)
*)
