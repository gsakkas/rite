
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then ((clone 0 ((List.length l2) - (List.length l1))) @ l1) l2
  else
    if (List.length l1) > (List.length l2)
    then l1 ((clone 0 ((List.length l1) - (List.length l2))) @ l2)
    else l1 l2;;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
  else
    if (List.length l1) > (List.length l2)
    then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
    else (l1, l2);;

*)

(* changed spans
(6,7)-(6,64)
(9,9)-(9,66)
(10,9)-(10,14)
*)

(* type error slice
(6,7)-(6,61)
(6,7)-(6,64)
(6,37)-(6,53)
(6,38)-(6,49)
(6,50)-(6,52)
(6,56)-(6,57)
(9,9)-(9,11)
(9,9)-(9,66)
(10,9)-(10,11)
(10,9)-(10,14)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(10,14)
(4,15)-(10,14)
(5,2)-(10,14)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,64)
(6,7)-(6,61)
(6,56)-(6,57)
(6,8)-(6,55)
(6,9)-(6,14)
(6,15)-(6,16)
(6,17)-(6,54)
(6,18)-(6,34)
(6,19)-(6,30)
(6,31)-(6,33)
(6,37)-(6,53)
(6,38)-(6,49)
(6,50)-(6,52)
(6,58)-(6,60)
(6,62)-(6,64)
(8,4)-(10,14)
(8,7)-(8,42)
(8,7)-(8,23)
(8,8)-(8,19)
(8,20)-(8,22)
(8,26)-(8,42)
(8,27)-(8,38)
(8,39)-(8,41)
(9,9)-(9,66)
(9,9)-(9,11)
(9,12)-(9,66)
(9,61)-(9,62)
(9,13)-(9,60)
(9,14)-(9,19)
(9,20)-(9,21)
(9,22)-(9,59)
(9,23)-(9,39)
(9,24)-(9,35)
(9,36)-(9,38)
(9,42)-(9,58)
(9,43)-(9,54)
(9,55)-(9,57)
(9,63)-(9,65)
(10,9)-(10,14)
(10,9)-(10,11)
(10,12)-(10,14)
*)
