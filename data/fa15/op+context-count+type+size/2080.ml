
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t when h == 0 -> removeZero t | h::t -> h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match (a, x) with
      | ((w,b),(y,z)) ->
          ((((w + y) + z) / 10), ((((w + y) + z) mod 10) :: b)) in
    let base = (0, []) in
    let args = List.rev (List.combine (0 :: l1) (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l = if i > 0 then bigAdd l (mulByDigit (i - 1) l) else 0;;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t when h == 0 -> removeZero t | h::t -> h :: t;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match (a, x) with
      | ((w,b),(y,z)) ->
          ((((w + y) + z) / 10), ((((w + y) + z) mod 10) :: b)) in
    let base = (0, []) in
    let args = List.rev (List.combine (0 :: l1) (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i > 0 then bigAdd l (mulByDigit (i - 1) l) else [0];;

*)

(* changed spans
(25,76)-(25,77)
*)

(* type error slice
(12,2)-(12,77)
(12,2)-(12,77)
(12,23)-(12,25)
(12,48)-(12,58)
(12,48)-(12,60)
(14,3)-(23,36)
(14,11)-(23,34)
(14,14)-(23,34)
(15,2)-(23,34)
(23,2)-(23,12)
(23,2)-(23,34)
(25,25)-(25,77)
(25,25)-(25,77)
(25,39)-(25,45)
(25,39)-(25,70)
(25,76)-(25,77)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(9,43)
(4,15)-(9,43)
(5,2)-(9,43)
(5,13)-(5,27)
(5,13)-(5,24)
(5,25)-(5,27)
(6,2)-(9,43)
(6,13)-(6,27)
(6,13)-(6,24)
(6,25)-(6,27)
(7,2)-(9,43)
(7,5)-(7,16)
(7,5)-(7,9)
(7,12)-(7,16)
(8,7)-(8,43)
(8,8)-(8,10)
(8,12)-(8,42)
(8,37)-(8,38)
(8,13)-(8,36)
(8,14)-(8,19)
(8,20)-(8,21)
(8,22)-(8,35)
(8,23)-(8,27)
(8,30)-(8,34)
(8,39)-(8,41)
(9,7)-(9,43)
(9,8)-(9,38)
(9,33)-(9,34)
(9,9)-(9,32)
(9,10)-(9,15)
(9,16)-(9,17)
(9,18)-(9,31)
(9,19)-(9,23)
(9,26)-(9,30)
(9,35)-(9,37)
(9,40)-(9,42)
(11,19)-(12,77)
(12,2)-(12,77)
(12,8)-(12,9)
(12,23)-(12,25)
(12,48)-(12,60)
(12,48)-(12,58)
(12,59)-(12,60)
(12,71)-(12,77)
(12,71)-(12,72)
(12,76)-(12,77)
(14,11)-(23,34)
(14,14)-(23,34)
(15,2)-(23,34)
(15,11)-(22,51)
(16,4)-(22,51)
(16,10)-(19,63)
(16,12)-(19,63)
(17,6)-(19,63)
(17,12)-(17,18)
(17,13)-(17,14)
(17,16)-(17,17)
(19,10)-(19,63)
(19,11)-(19,31)
(19,12)-(19,25)
(19,13)-(19,20)
(19,14)-(19,15)
(19,18)-(19,19)
(19,23)-(19,24)
(19,28)-(19,30)
(19,33)-(19,62)
(19,34)-(19,56)
(19,35)-(19,48)
(19,36)-(19,43)
(19,37)-(19,38)
(19,41)-(19,42)
(19,46)-(19,47)
(19,53)-(19,55)
(19,60)-(19,61)
(20,4)-(22,51)
(20,15)-(20,22)
(20,16)-(20,17)
(20,19)-(20,21)
(21,4)-(22,51)
(21,15)-(21,58)
(21,15)-(21,23)
(21,24)-(21,58)
(21,25)-(21,37)
(21,38)-(21,47)
(21,39)-(21,40)
(21,44)-(21,46)
(21,48)-(21,57)
(21,49)-(21,50)
(21,54)-(21,56)
(22,4)-(22,51)
(22,18)-(22,44)
(22,18)-(22,32)
(22,33)-(22,34)
(22,35)-(22,39)
(22,40)-(22,44)
(22,48)-(22,51)
(23,2)-(23,34)
(23,2)-(23,12)
(23,13)-(23,34)
(23,14)-(23,17)
(23,18)-(23,33)
(23,19)-(23,26)
(23,27)-(23,29)
(23,30)-(23,32)
(25,19)-(25,77)
(25,21)-(25,77)
(25,25)-(25,77)
(25,28)-(25,33)
(25,28)-(25,29)
(25,32)-(25,33)
(25,39)-(25,70)
(25,39)-(25,45)
(25,46)-(25,47)
(25,48)-(25,70)
(25,49)-(25,59)
(25,60)-(25,67)
(25,61)-(25,62)
(25,65)-(25,66)
(25,68)-(25,69)
(25,76)-(25,77)
*)
