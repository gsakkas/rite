
let rec clone x n =
  match n with | 0 -> [] | n -> if n < 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) - (List.length l2) with
  | 0 -> (l1, l2)
  | n ->
      if n < 0
      then (((clone 0 (n * (-1))) @ l1), l2)
      else (((clone 0 n) @ l2), l1);;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (fst,sec) = x in
      let (fst',sec') =
        if (fst + sec) > 9 then (((fst + sec) - 10), 1) else ((fst + sec), 0) in
      let (carry,digits) = a in
      let (carry',digits') =
        if (carry + fst') > 9
        then (1, (digits @ [fst' - 9]))
        else
          if sec' = 1
          then (1, (digits @ [fst' + carry]))
          else (0, (digits @ [fst' + carry])) in
      (carry', digits') in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (List.rev (padZero l1 l2)));;


(* fix

let rec clone x n =
  match n with | 0 -> [] | n -> if n < 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) - (List.length l2) with
  | 0 -> (l1, l2)
  | n ->
      if n < 0
      then (((clone 0 (n * (-1))) @ l1), l2)
      else (((clone 0 n) @ l2), l1);;

let rec removeZero l =
  match l with | [] -> l | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (fst,sec) = x in
      let (fst',sec') =
        if (fst + sec) > 9 then (((fst + sec) - 10), 1) else ((fst + sec), 0) in
      let (carry,digits) = a in
      let (carry',digits') =
        if (carry + fst') > 9
        then (1, (digits @ [fst' - 9]))
        else
          if sec' = 1
          then (1, (digits @ [fst' + carry]))
          else (0, (digits @ [fst' + carry])) in
      (carry', digits') in
    let base = (0, []) in
    let args = (List.rev (List.combine l1 l2)) @ [(0, 0)] in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(34,18)-(34,44)
(34,19)-(34,27)
*)

(* type error slice
(5,3)-(11,37)
(5,12)-(11,35)
(5,15)-(11,35)
(6,2)-(11,35)
(7,9)-(7,17)
(34,18)-(34,44)
(34,19)-(34,27)
(34,28)-(34,43)
(34,29)-(34,36)
*)

(* all spans
(2,14)-(3,76)
(2,16)-(3,76)
(3,2)-(3,76)
(3,8)-(3,9)
(3,22)-(3,24)
(3,32)-(3,76)
(3,35)-(3,40)
(3,35)-(3,36)
(3,39)-(3,40)
(3,46)-(3,48)
(3,54)-(3,76)
(3,54)-(3,55)
(3,59)-(3,76)
(3,60)-(3,65)
(3,66)-(3,67)
(3,68)-(3,75)
(3,69)-(3,70)
(3,73)-(3,74)
(5,12)-(11,35)
(5,15)-(11,35)
(6,2)-(11,35)
(6,8)-(6,43)
(6,8)-(6,24)
(6,9)-(6,20)
(6,21)-(6,23)
(6,27)-(6,43)
(6,28)-(6,39)
(6,40)-(6,42)
(7,9)-(7,17)
(7,10)-(7,12)
(7,14)-(7,16)
(9,6)-(11,35)
(9,9)-(9,14)
(9,9)-(9,10)
(9,13)-(9,14)
(10,11)-(10,44)
(10,12)-(10,39)
(10,34)-(10,35)
(10,13)-(10,33)
(10,14)-(10,19)
(10,20)-(10,21)
(10,22)-(10,32)
(10,23)-(10,24)
(10,27)-(10,31)
(10,36)-(10,38)
(10,41)-(10,43)
(11,11)-(11,35)
(11,12)-(11,30)
(11,25)-(11,26)
(11,13)-(11,24)
(11,14)-(11,19)
(11,20)-(11,21)
(11,22)-(11,23)
(11,27)-(11,29)
(11,32)-(11,34)
(13,19)-(14,68)
(14,2)-(14,68)
(14,8)-(14,9)
(14,23)-(14,24)
(14,35)-(14,68)
(14,38)-(14,43)
(14,38)-(14,39)
(14,42)-(14,43)
(14,49)-(14,61)
(14,49)-(14,59)
(14,60)-(14,61)
(14,67)-(14,68)
(16,11)-(34,45)
(16,14)-(34,45)
(17,2)-(34,45)
(17,11)-(33,51)
(18,4)-(33,51)
(18,10)-(30,23)
(18,12)-(30,23)
(19,6)-(30,23)
(19,22)-(19,23)
(20,6)-(30,23)
(21,8)-(21,77)
(21,11)-(21,26)
(21,11)-(21,22)
(21,12)-(21,15)
(21,18)-(21,21)
(21,25)-(21,26)
(21,32)-(21,55)
(21,33)-(21,51)
(21,34)-(21,45)
(21,35)-(21,38)
(21,41)-(21,44)
(21,48)-(21,50)
(21,53)-(21,54)
(21,61)-(21,77)
(21,62)-(21,73)
(21,63)-(21,66)
(21,69)-(21,72)
(21,75)-(21,76)
(22,6)-(30,23)
(22,27)-(22,28)
(23,6)-(30,23)
(24,8)-(29,45)
(24,11)-(24,29)
(24,11)-(24,25)
(24,12)-(24,17)
(24,20)-(24,24)
(24,28)-(24,29)
(25,13)-(25,39)
(25,14)-(25,15)
(25,17)-(25,38)
(25,25)-(25,26)
(25,18)-(25,24)
(25,27)-(25,37)
(25,28)-(25,36)
(25,28)-(25,32)
(25,35)-(25,36)
(27,10)-(29,45)
(27,13)-(27,21)
(27,13)-(27,17)
(27,20)-(27,21)
(28,15)-(28,45)
(28,16)-(28,17)
(28,19)-(28,44)
(28,27)-(28,28)
(28,20)-(28,26)
(28,29)-(28,43)
(28,30)-(28,42)
(28,30)-(28,34)
(28,37)-(28,42)
(29,15)-(29,45)
(29,16)-(29,17)
(29,19)-(29,44)
(29,27)-(29,28)
(29,20)-(29,26)
(29,29)-(29,43)
(29,30)-(29,42)
(29,30)-(29,34)
(29,37)-(29,42)
(30,6)-(30,23)
(30,7)-(30,13)
(30,15)-(30,22)
(31,4)-(33,51)
(31,15)-(31,22)
(31,16)-(31,17)
(31,19)-(31,21)
(32,4)-(33,51)
(32,15)-(32,57)
(32,47)-(32,48)
(32,15)-(32,46)
(32,16)-(32,24)
(32,25)-(32,45)
(32,26)-(32,38)
(32,39)-(32,41)
(32,42)-(32,44)
(32,49)-(32,57)
(32,50)-(32,56)
(32,51)-(32,52)
(32,54)-(32,55)
(33,4)-(33,51)
(33,18)-(33,44)
(33,18)-(33,32)
(33,33)-(33,34)
(33,35)-(33,39)
(33,40)-(33,44)
(33,48)-(33,51)
(34,2)-(34,45)
(34,2)-(34,12)
(34,13)-(34,45)
(34,14)-(34,17)
(34,18)-(34,44)
(34,19)-(34,27)
(34,28)-(34,43)
(34,29)-(34,36)
(34,37)-(34,39)
(34,40)-(34,42)
*)
