
let rec clone x n =
  if n < 1 then [] else (match n with | _ -> x :: (clone x (n - 1)));;

let c y = y;;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 = s2
  then (l1, l2)
  else
    if s1 > s2
    then (l1, ((clone 0 (s1 - s2)) @ l2))
    else (((clone 0 (s2 - s1)) @ l1), l2);;

let rec removeZero l =
  if l = []
  then []
  else (let h::t = l in match h with | 0 -> removeZero t | _ -> l);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (a1,a2) = a in let v = x1 + x2 in ((a1 @ [c + 1]), (a2 @ [c + 1])) in
    let base = ([0], [5]) in
    let args = List.combine l1 l2 in
    let (duh,res) = List.fold_left f base args in (duh, res) in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  if n < 1 then [] else (match n with | _ -> x :: (clone x (n - 1)));;

let padZero l1 l2 =
  let s1 = List.length l1 in
  let s2 = List.length l2 in
  if s1 = s2
  then (l1, l2)
  else
    if s1 > s2
    then (l1, ((clone 0 (s1 - s2)) @ l2))
    else (((clone 0 (s2 - s1)) @ l1), l2);;

let rec removeZero l =
  if l = []
  then []
  else (let h::t = l in match h with | 0 -> removeZero t | _ -> l);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (c,a1::a2) = a in
      let v = (x1 + x2) + c in ((v / 10), ([v / 10] @ ([v mod 10] @ a2))) in
    let base = (0, [0]) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(5,6)-(5,11)
(5,10)-(5,11)
(26,6)-(26,76)
(26,33)-(26,35)
(26,44)-(26,76)
(26,45)-(26,59)
(26,46)-(26,48)
(26,52)-(26,53)
(26,52)-(26,57)
(26,56)-(26,57)
(26,61)-(26,75)
(26,62)-(26,64)
(26,68)-(26,69)
(26,68)-(26,73)
(26,72)-(26,73)
(27,4)-(29,60)
(27,16)-(27,19)
(27,22)-(27,23)
(28,15)-(28,33)
(29,4)-(29,60)
(29,50)-(29,60)
(29,51)-(29,54)
*)

(* type error slice
(5,3)-(5,13)
(5,6)-(5,11)
(20,7)-(20,66)
(20,44)-(20,54)
(20,44)-(20,56)
(20,55)-(20,56)
(23,2)-(30,34)
(23,11)-(29,60)
(24,4)-(29,60)
(26,52)-(26,53)
(26,52)-(26,57)
(26,68)-(26,69)
(26,68)-(26,73)
(27,4)-(29,60)
(28,4)-(29,60)
(29,4)-(29,60)
(29,50)-(29,60)
(30,2)-(30,12)
(30,2)-(30,34)
(30,13)-(30,34)
(30,14)-(30,17)
*)

(* all spans
(2,14)-(3,68)
(2,16)-(3,68)
(3,2)-(3,68)
(3,5)-(3,10)
(3,5)-(3,6)
(3,9)-(3,10)
(3,16)-(3,18)
(3,24)-(3,68)
(3,31)-(3,32)
(3,45)-(3,67)
(3,45)-(3,46)
(3,50)-(3,67)
(3,51)-(3,56)
(3,57)-(3,58)
(3,59)-(3,66)
(3,60)-(3,61)
(3,64)-(3,65)
(5,6)-(5,11)
(5,10)-(5,11)
(7,12)-(15,41)
(7,15)-(15,41)
(8,2)-(15,41)
(8,11)-(8,25)
(8,11)-(8,22)
(8,23)-(8,25)
(9,2)-(15,41)
(9,11)-(9,25)
(9,11)-(9,22)
(9,23)-(9,25)
(10,2)-(15,41)
(10,5)-(10,12)
(10,5)-(10,7)
(10,10)-(10,12)
(11,7)-(11,15)
(11,8)-(11,10)
(11,12)-(11,14)
(13,4)-(15,41)
(13,7)-(13,14)
(13,7)-(13,9)
(13,12)-(13,14)
(14,9)-(14,41)
(14,10)-(14,12)
(14,14)-(14,40)
(14,35)-(14,36)
(14,15)-(14,34)
(14,16)-(14,21)
(14,22)-(14,23)
(14,24)-(14,33)
(14,25)-(14,27)
(14,30)-(14,32)
(14,37)-(14,39)
(15,9)-(15,41)
(15,10)-(15,36)
(15,31)-(15,32)
(15,11)-(15,30)
(15,12)-(15,17)
(15,18)-(15,19)
(15,20)-(15,29)
(15,21)-(15,23)
(15,26)-(15,28)
(15,33)-(15,35)
(15,38)-(15,40)
(17,19)-(20,66)
(18,2)-(20,66)
(18,5)-(18,11)
(18,5)-(18,6)
(18,9)-(18,11)
(19,7)-(19,9)
(20,7)-(20,66)
(20,19)-(20,20)
(20,24)-(20,65)
(20,30)-(20,31)
(20,44)-(20,56)
(20,44)-(20,54)
(20,55)-(20,56)
(20,64)-(20,65)
(22,11)-(30,34)
(22,14)-(30,34)
(23,2)-(30,34)
(23,11)-(29,60)
(24,4)-(29,60)
(24,10)-(26,76)
(24,12)-(26,76)
(25,6)-(26,76)
(25,20)-(25,21)
(26,6)-(26,76)
(26,20)-(26,21)
(26,25)-(26,76)
(26,33)-(26,40)
(26,33)-(26,35)
(26,38)-(26,40)
(26,44)-(26,76)
(26,45)-(26,59)
(26,49)-(26,50)
(26,46)-(26,48)
(26,51)-(26,58)
(26,52)-(26,57)
(26,52)-(26,53)
(26,56)-(26,57)
(26,61)-(26,75)
(26,65)-(26,66)
(26,62)-(26,64)
(26,67)-(26,74)
(26,68)-(26,73)
(26,68)-(26,69)
(26,72)-(26,73)
(27,4)-(29,60)
(27,15)-(27,25)
(27,16)-(27,19)
(27,17)-(27,18)
(27,21)-(27,24)
(27,22)-(27,23)
(28,4)-(29,60)
(28,15)-(28,33)
(28,15)-(28,27)
(28,28)-(28,30)
(28,31)-(28,33)
(29,4)-(29,60)
(29,20)-(29,46)
(29,20)-(29,34)
(29,35)-(29,36)
(29,37)-(29,41)
(29,42)-(29,46)
(29,50)-(29,60)
(29,51)-(29,54)
(29,56)-(29,59)
(30,2)-(30,34)
(30,2)-(30,12)
(30,13)-(30,34)
(30,14)-(30,17)
(30,18)-(30,33)
(30,19)-(30,26)
(30,27)-(30,29)
(30,30)-(30,32)
*)
