
let rec rmzhelp l =
  match l with | [] -> [] | x::xs' -> if x = 0 then rmzhelp xs' else x :: xs';;

let rec foldr f b x n = if n > 0 then f x (foldr f b x (n - 1)) else b;;

let rec clone x n = foldr (fun y  -> fun m  -> y :: m) [] x n;;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (clone 0 ((List.length l1) - (List.length l2))) @ l2
  else (clone 0 ((List.length l2) - (List.length l1))) @ l1;;

let rec removeZero l =
  match l with | [] -> [] | x::xs' -> if x = 0 then rmzhelp xs' else x :: xs';;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (c,d) ->
          (match a with
           | (n,listSum) ->
               (match listSum with
                | [] ->
                    if ((n + c) + d) < 10
                    then (0, [n; (n + c) + d])
                    else ((n + 1), [n + 1; ((n + c) + d) mod 10])
                | h::t ->
                    if ((n + c) + d) < 10
                    then (0, ([0; (c + d) + h] @ t))
                    else
                      ((n + 1),
                        ([((h + c) + d) / 10] @ ([((h + c) + d) mod 10] @ t))))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec rmzhelp l =
  match l with | [] -> [] | x::xs' -> if x = 0 then rmzhelp xs' else x :: xs';;

let rec foldr f b x n = if n > 0 then f x (foldr f b x (n - 1)) else b;;

let rec clone x n = foldr (fun y  -> fun m  -> y :: m) [] x n;;

let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | x::xs' -> if x = 0 then rmzhelp xs' else x :: xs';;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (c,d) ->
          (match a with
           | (n,listSum) ->
               (match listSum with
                | [] ->
                    if ((n + c) + d) < 10
                    then (0, ([n] @ [(n + c) + d]))
                    else ((n + 1), ([n + 1] @ [((n + c) + d) mod 10]))
                | h::t ->
                    if ((n + c) + d) < 10
                    then (0, ([0] @ ([(c + d) + h] @ t)))
                    else
                      ((n + 1),
                        ([((h + c) + d) / 10] @ ([((h + c) + d) mod 10] @ t))))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(11,7)-(11,59)
(12,7)-(12,59)
(14,19)-(15,77)
(27,29)-(27,45)
(27,30)-(27,31)
(27,33)-(27,44)
(28,35)-(28,64)
(28,36)-(28,41)
(28,43)-(28,63)
(31,30)-(31,46)
(31,34)-(31,45)
*)

(* type error slice
(9,3)-(12,61)
(9,12)-(12,59)
(9,15)-(12,59)
(10,2)-(12,59)
(12,7)-(12,59)
(12,55)-(12,56)
(18,2)-(38,34)
(18,11)-(37,51)
(38,13)-(38,34)
(38,14)-(38,17)
(38,18)-(38,33)
(38,19)-(38,26)
*)

(* all spans
(2,16)-(3,77)
(3,2)-(3,77)
(3,8)-(3,9)
(3,23)-(3,25)
(3,38)-(3,77)
(3,41)-(3,46)
(3,41)-(3,42)
(3,45)-(3,46)
(3,52)-(3,63)
(3,52)-(3,59)
(3,60)-(3,63)
(3,69)-(3,77)
(3,69)-(3,70)
(3,74)-(3,77)
(5,14)-(5,70)
(5,16)-(5,70)
(5,18)-(5,70)
(5,20)-(5,70)
(5,24)-(5,70)
(5,27)-(5,32)
(5,27)-(5,28)
(5,31)-(5,32)
(5,38)-(5,63)
(5,38)-(5,39)
(5,40)-(5,41)
(5,42)-(5,63)
(5,43)-(5,48)
(5,49)-(5,50)
(5,51)-(5,52)
(5,53)-(5,54)
(5,55)-(5,62)
(5,56)-(5,57)
(5,60)-(5,61)
(5,69)-(5,70)
(7,14)-(7,61)
(7,16)-(7,61)
(7,20)-(7,61)
(7,20)-(7,25)
(7,26)-(7,54)
(7,37)-(7,53)
(7,47)-(7,53)
(7,47)-(7,48)
(7,52)-(7,53)
(7,55)-(7,57)
(7,58)-(7,59)
(7,60)-(7,61)
(9,12)-(12,59)
(9,15)-(12,59)
(10,2)-(12,59)
(10,5)-(10,40)
(10,5)-(10,21)
(10,6)-(10,17)
(10,18)-(10,20)
(10,24)-(10,40)
(10,25)-(10,36)
(10,37)-(10,39)
(11,7)-(11,59)
(11,55)-(11,56)
(11,7)-(11,54)
(11,8)-(11,13)
(11,14)-(11,15)
(11,16)-(11,53)
(11,17)-(11,33)
(11,18)-(11,29)
(11,30)-(11,32)
(11,36)-(11,52)
(11,37)-(11,48)
(11,49)-(11,51)
(11,57)-(11,59)
(12,7)-(12,59)
(12,55)-(12,56)
(12,7)-(12,54)
(12,8)-(12,13)
(12,14)-(12,15)
(12,16)-(12,53)
(12,17)-(12,33)
(12,18)-(12,29)
(12,30)-(12,32)
(12,36)-(12,52)
(12,37)-(12,48)
(12,49)-(12,51)
(12,57)-(12,59)
(14,19)-(15,77)
(15,2)-(15,77)
(15,8)-(15,9)
(15,23)-(15,25)
(15,38)-(15,77)
(15,41)-(15,46)
(15,41)-(15,42)
(15,45)-(15,46)
(15,52)-(15,63)
(15,52)-(15,59)
(15,60)-(15,63)
(15,69)-(15,77)
(15,69)-(15,70)
(15,74)-(15,77)
(17,11)-(38,34)
(17,14)-(38,34)
(18,2)-(38,34)
(18,11)-(37,51)
(19,4)-(37,51)
(19,10)-(34,80)
(19,12)-(34,80)
(20,6)-(34,80)
(20,12)-(20,13)
(22,10)-(34,80)
(22,17)-(22,18)
(24,15)-(34,79)
(24,22)-(24,29)
(26,20)-(28,65)
(26,23)-(26,41)
(26,23)-(26,36)
(26,24)-(26,31)
(26,25)-(26,26)
(26,29)-(26,30)
(26,34)-(26,35)
(26,39)-(26,41)
(27,25)-(27,46)
(27,26)-(27,27)
(27,29)-(27,45)
(27,30)-(27,31)
(27,33)-(27,44)
(27,33)-(27,40)
(27,34)-(27,35)
(27,38)-(27,39)
(27,43)-(27,44)
(28,25)-(28,65)
(28,26)-(28,33)
(28,27)-(28,28)
(28,31)-(28,32)
(28,35)-(28,64)
(28,36)-(28,41)
(28,36)-(28,37)
(28,40)-(28,41)
(28,43)-(28,63)
(28,43)-(28,56)
(28,44)-(28,51)
(28,45)-(28,46)
(28,49)-(28,50)
(28,54)-(28,55)
(28,61)-(28,63)
(30,20)-(34,78)
(30,23)-(30,41)
(30,23)-(30,36)
(30,24)-(30,31)
(30,25)-(30,26)
(30,29)-(30,30)
(30,34)-(30,35)
(30,39)-(30,41)
(31,25)-(31,52)
(31,26)-(31,27)
(31,29)-(31,51)
(31,47)-(31,48)
(31,30)-(31,46)
(31,31)-(31,32)
(31,34)-(31,45)
(31,34)-(31,41)
(31,35)-(31,36)
(31,39)-(31,40)
(31,44)-(31,45)
(31,49)-(31,50)
(33,22)-(34,78)
(33,23)-(33,30)
(33,24)-(33,25)
(33,28)-(33,29)
(34,24)-(34,77)
(34,46)-(34,47)
(34,25)-(34,45)
(34,26)-(34,44)
(34,26)-(34,39)
(34,27)-(34,34)
(34,28)-(34,29)
(34,32)-(34,33)
(34,37)-(34,38)
(34,42)-(34,44)
(34,48)-(34,76)
(34,72)-(34,73)
(34,49)-(34,71)
(34,50)-(34,70)
(34,50)-(34,63)
(34,51)-(34,58)
(34,52)-(34,53)
(34,56)-(34,57)
(34,61)-(34,62)
(34,68)-(34,70)
(34,74)-(34,75)
(35,4)-(37,51)
(35,15)-(35,22)
(35,16)-(35,17)
(35,19)-(35,21)
(36,4)-(37,51)
(36,15)-(36,44)
(36,15)-(36,23)
(36,24)-(36,44)
(36,25)-(36,37)
(36,38)-(36,40)
(36,41)-(36,43)
(37,4)-(37,51)
(37,18)-(37,44)
(37,18)-(37,32)
(37,33)-(37,34)
(37,35)-(37,39)
(37,40)-(37,44)
(37,48)-(37,51)
(38,2)-(38,34)
(38,2)-(38,12)
(38,13)-(38,34)
(38,14)-(38,17)
(38,18)-(38,33)
(38,19)-(38,26)
(38,27)-(38,29)
(38,30)-(38,32)
*)
