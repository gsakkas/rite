
let rec clone x n =
  match n with | n when n <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x = List.length l1 in
  let y = List.length l2 in
  if x > y
  then let z = x - y in (l1, ((clone 0 z) @ l2))
  else (let z = y - x in (((clone 0 z) @ l1), l2));;

let pairHelper x = let (r,s) = x in r + s;;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = pairHelper x in
    let base = 0 in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  match n with | n when n <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  let x = List.length l1 in
  let y = List.length l2 in
  if x > y
  then let z = x - y in (l1, ((clone 0 z) @ l2))
  else (let z = y - x in (((clone 0 z) @ l1), l2));;

let rec removeZero l =
  match l with
  | [] -> []
  | h::t -> (match h with | 0 -> removeZero t | _ -> h :: t);;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (y,z) = a in
      let (r,s) = x in let m = (r + s) + y in ((m / 10), ((m mod 10) :: z)) in
    let base = (0, []) in
    let args = List.combine l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(12,15)-(12,41)
(12,19)-(12,41)
(12,31)-(12,32)
(12,36)-(12,37)
(12,36)-(12,41)
(12,40)-(12,41)
(21,12)-(21,28)
(21,16)-(21,26)
(21,16)-(21,28)
(21,27)-(21,28)
*)

(* type error slice
(12,3)-(12,43)
(12,15)-(12,41)
(12,19)-(12,41)
(12,36)-(12,41)
(21,4)-(24,51)
(21,10)-(21,28)
(21,12)-(21,28)
(21,16)-(21,26)
(21,16)-(21,28)
(24,4)-(24,51)
(24,18)-(24,32)
(24,18)-(24,44)
(24,33)-(24,34)
*)

(* all spans
(2,14)-(3,66)
(2,16)-(3,66)
(3,2)-(3,66)
(3,8)-(3,9)
(3,24)-(3,30)
(3,24)-(3,25)
(3,29)-(3,30)
(3,34)-(3,36)
(3,44)-(3,66)
(3,44)-(3,45)
(3,49)-(3,66)
(3,50)-(3,55)
(3,56)-(3,57)
(3,58)-(3,65)
(3,59)-(3,60)
(3,63)-(3,64)
(5,12)-(10,50)
(5,15)-(10,50)
(6,2)-(10,50)
(6,10)-(6,24)
(6,10)-(6,21)
(6,22)-(6,24)
(7,2)-(10,50)
(7,10)-(7,24)
(7,10)-(7,21)
(7,22)-(7,24)
(8,2)-(10,50)
(8,5)-(8,10)
(8,5)-(8,6)
(8,9)-(8,10)
(9,7)-(9,48)
(9,15)-(9,20)
(9,15)-(9,16)
(9,19)-(9,20)
(9,24)-(9,48)
(9,25)-(9,27)
(9,29)-(9,47)
(9,42)-(9,43)
(9,30)-(9,41)
(9,31)-(9,36)
(9,37)-(9,38)
(9,39)-(9,40)
(9,44)-(9,46)
(10,7)-(10,50)
(10,16)-(10,21)
(10,16)-(10,17)
(10,20)-(10,21)
(10,25)-(10,49)
(10,26)-(10,44)
(10,39)-(10,40)
(10,27)-(10,38)
(10,28)-(10,33)
(10,34)-(10,35)
(10,36)-(10,37)
(10,41)-(10,43)
(10,46)-(10,48)
(12,15)-(12,41)
(12,19)-(12,41)
(12,31)-(12,32)
(12,36)-(12,41)
(12,36)-(12,37)
(12,40)-(12,41)
(14,19)-(17,60)
(15,2)-(17,60)
(15,8)-(15,9)
(16,10)-(16,12)
(17,12)-(17,60)
(17,19)-(17,20)
(17,33)-(17,45)
(17,33)-(17,43)
(17,44)-(17,45)
(17,53)-(17,59)
(17,53)-(17,54)
(17,58)-(17,59)
(19,11)-(25,34)
(19,14)-(25,34)
(20,2)-(25,34)
(20,11)-(24,51)
(21,4)-(24,51)
(21,10)-(21,28)
(21,12)-(21,28)
(21,16)-(21,28)
(21,16)-(21,26)
(21,27)-(21,28)
(22,4)-(24,51)
(22,15)-(22,16)
(23,4)-(24,51)
(23,15)-(23,33)
(23,15)-(23,27)
(23,28)-(23,30)
(23,31)-(23,33)
(24,4)-(24,51)
(24,18)-(24,44)
(24,18)-(24,32)
(24,33)-(24,34)
(24,35)-(24,39)
(24,40)-(24,44)
(24,48)-(24,51)
(25,2)-(25,34)
(25,2)-(25,12)
(25,13)-(25,34)
(25,14)-(25,17)
(25,18)-(25,33)
(25,19)-(25,26)
(25,27)-(25,29)
(25,30)-(25,32)
*)
