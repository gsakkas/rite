
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let r = rand (0, 26) in
    let d = depth - 1 in
    match r with
    | 0 -> buildSine (build (rand, d))
    | 1 -> buildSine (build (rand, d))
    | 2 -> buildSine (build (rand, d))
    | 3 -> buildSine (build (rand, d))
    | 4 -> buildSine (build (rand, d))
    | 5 -> buildSine (build (rand, d))
    | 6 -> buildCosine (build (rand, d))
    | 7 -> buildCosine (build (rand, d))
    | 8 -> buildCosine (build (rand, d))
    | 9 -> buildCosine (build (rand, d))
    | 10 -> buildCosine (build (rand, d))
    | 11 -> buildTimes (build (rand, d))
    | 12 -> buildTimes (build (rand, d))
    | 13 -> buildTimes (build (rand, d))
    | 14 -> buildTimes (build (rand, d))
    | 15 -> buildTimes (build (rand, d))
    | 16 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 17 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 18 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 19 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 20 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 21 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 22 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 23 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 24 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 25 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
  else
    (let r = rand (0, 1) in match r with | 0 -> buildX () | _ -> buildY ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth > 0
  then
    let r = rand (0, 26) in
    let d = depth - 1 in
    match r with
    | 0 -> buildSine (build (rand, d))
    | 1 -> buildSine (build (rand, d))
    | 2 -> buildSine (build (rand, d))
    | 3 -> buildSine (build (rand, d))
    | 4 -> buildSine (build (rand, d))
    | 5 -> buildSine (build (rand, d))
    | 6 -> buildCosine (build (rand, d))
    | 7 -> buildCosine (build (rand, d))
    | 8 -> buildCosine (build (rand, d))
    | 9 -> buildCosine (build (rand, d))
    | 10 -> buildCosine (build (rand, d))
    | 11 -> buildTimes ((buildX ()), (build (rand, d)))
    | 12 -> buildTimes ((buildX ()), (build (rand, d)))
    | 13 -> buildTimes ((buildX ()), (build (rand, d)))
    | 14 -> buildTimes ((buildX ()), (build (rand, d)))
    | 15 -> buildTimes ((buildX ()), (build (rand, d)))
    | 16 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 17 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 18 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 19 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 20 -> buildAverage ((build (rand, d)), (build (rand, d)))
    | 21 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 22 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 23 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 24 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
    | 25 ->
        buildThresh
          ((build (rand, d)), (buildX ()), (buildY ()), (buildX ()))
  else
    (let r = rand (0, 1) in match r with | 0 -> buildX () | _ -> buildY ());;

*)

(* changed spans
(42,23)-(42,40)
(42,24)-(42,29)
(43,23)-(43,40)
(43,24)-(43,29)
(44,23)-(44,40)
(44,24)-(44,29)
(45,23)-(45,40)
(45,24)-(45,29)
(46,23)-(46,40)
(46,24)-(46,29)
*)

(* type error slice
(15,3)-(15,26)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(19,3)-(19,41)
(19,16)-(19,39)
(31,11)-(31,20)
(31,11)-(31,38)
(31,21)-(31,38)
(31,22)-(31,27)
(42,12)-(42,22)
(42,12)-(42,40)
(42,23)-(42,40)
(42,24)-(42,29)
(43,12)-(43,22)
(43,12)-(43,40)
(43,23)-(43,40)
(43,24)-(43,29)
(44,12)-(44,22)
(44,12)-(44,40)
(44,23)-(44,40)
(44,24)-(44,29)
(45,12)-(45,22)
(45,12)-(45,40)
(45,23)-(45,40)
(45,24)-(45,29)
(46,12)-(46,22)
(46,12)-(46,40)
(46,23)-(46,40)
(46,24)-(46,29)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(68,75)
(26,2)-(68,75)
(26,5)-(26,14)
(26,5)-(26,10)
(26,13)-(26,14)
(28,4)-(66,68)
(28,12)-(28,24)
(28,12)-(28,16)
(28,17)-(28,24)
(28,18)-(28,19)
(28,21)-(28,23)
(29,4)-(66,68)
(29,12)-(29,21)
(29,12)-(29,17)
(29,20)-(29,21)
(30,4)-(66,68)
(30,10)-(30,11)
(31,11)-(31,38)
(31,11)-(31,20)
(31,21)-(31,38)
(31,22)-(31,27)
(31,28)-(31,37)
(31,29)-(31,33)
(31,35)-(31,36)
(32,11)-(32,38)
(32,11)-(32,20)
(32,21)-(32,38)
(32,22)-(32,27)
(32,28)-(32,37)
(32,29)-(32,33)
(32,35)-(32,36)
(33,11)-(33,38)
(33,11)-(33,20)
(33,21)-(33,38)
(33,22)-(33,27)
(33,28)-(33,37)
(33,29)-(33,33)
(33,35)-(33,36)
(34,11)-(34,38)
(34,11)-(34,20)
(34,21)-(34,38)
(34,22)-(34,27)
(34,28)-(34,37)
(34,29)-(34,33)
(34,35)-(34,36)
(35,11)-(35,38)
(35,11)-(35,20)
(35,21)-(35,38)
(35,22)-(35,27)
(35,28)-(35,37)
(35,29)-(35,33)
(35,35)-(35,36)
(36,11)-(36,38)
(36,11)-(36,20)
(36,21)-(36,38)
(36,22)-(36,27)
(36,28)-(36,37)
(36,29)-(36,33)
(36,35)-(36,36)
(37,11)-(37,40)
(37,11)-(37,22)
(37,23)-(37,40)
(37,24)-(37,29)
(37,30)-(37,39)
(37,31)-(37,35)
(37,37)-(37,38)
(38,11)-(38,40)
(38,11)-(38,22)
(38,23)-(38,40)
(38,24)-(38,29)
(38,30)-(38,39)
(38,31)-(38,35)
(38,37)-(38,38)
(39,11)-(39,40)
(39,11)-(39,22)
(39,23)-(39,40)
(39,24)-(39,29)
(39,30)-(39,39)
(39,31)-(39,35)
(39,37)-(39,38)
(40,11)-(40,40)
(40,11)-(40,22)
(40,23)-(40,40)
(40,24)-(40,29)
(40,30)-(40,39)
(40,31)-(40,35)
(40,37)-(40,38)
(41,12)-(41,41)
(41,12)-(41,23)
(41,24)-(41,41)
(41,25)-(41,30)
(41,31)-(41,40)
(41,32)-(41,36)
(41,38)-(41,39)
(42,12)-(42,40)
(42,12)-(42,22)
(42,23)-(42,40)
(42,24)-(42,29)
(42,30)-(42,39)
(42,31)-(42,35)
(42,37)-(42,38)
(43,12)-(43,40)
(43,12)-(43,22)
(43,23)-(43,40)
(43,24)-(43,29)
(43,30)-(43,39)
(43,31)-(43,35)
(43,37)-(43,38)
(44,12)-(44,40)
(44,12)-(44,22)
(44,23)-(44,40)
(44,24)-(44,29)
(44,30)-(44,39)
(44,31)-(44,35)
(44,37)-(44,38)
(45,12)-(45,40)
(45,12)-(45,22)
(45,23)-(45,40)
(45,24)-(45,29)
(45,30)-(45,39)
(45,31)-(45,35)
(45,37)-(45,38)
(46,12)-(46,40)
(46,12)-(46,22)
(46,23)-(46,40)
(46,24)-(46,29)
(46,30)-(46,39)
(46,31)-(46,35)
(46,37)-(46,38)
(47,12)-(47,63)
(47,12)-(47,24)
(47,25)-(47,63)
(47,26)-(47,43)
(47,27)-(47,32)
(47,33)-(47,42)
(47,34)-(47,38)
(47,40)-(47,41)
(47,45)-(47,62)
(47,46)-(47,51)
(47,52)-(47,61)
(47,53)-(47,57)
(47,59)-(47,60)
(48,12)-(48,63)
(48,12)-(48,24)
(48,25)-(48,63)
(48,26)-(48,43)
(48,27)-(48,32)
(48,33)-(48,42)
(48,34)-(48,38)
(48,40)-(48,41)
(48,45)-(48,62)
(48,46)-(48,51)
(48,52)-(48,61)
(48,53)-(48,57)
(48,59)-(48,60)
(49,12)-(49,63)
(49,12)-(49,24)
(49,25)-(49,63)
(49,26)-(49,43)
(49,27)-(49,32)
(49,33)-(49,42)
(49,34)-(49,38)
(49,40)-(49,41)
(49,45)-(49,62)
(49,46)-(49,51)
(49,52)-(49,61)
(49,53)-(49,57)
(49,59)-(49,60)
(50,12)-(50,63)
(50,12)-(50,24)
(50,25)-(50,63)
(50,26)-(50,43)
(50,27)-(50,32)
(50,33)-(50,42)
(50,34)-(50,38)
(50,40)-(50,41)
(50,45)-(50,62)
(50,46)-(50,51)
(50,52)-(50,61)
(50,53)-(50,57)
(50,59)-(50,60)
(51,12)-(51,63)
(51,12)-(51,24)
(51,25)-(51,63)
(51,26)-(51,43)
(51,27)-(51,32)
(51,33)-(51,42)
(51,34)-(51,38)
(51,40)-(51,41)
(51,45)-(51,62)
(51,46)-(51,51)
(51,52)-(51,61)
(51,53)-(51,57)
(51,59)-(51,60)
(53,8)-(54,68)
(53,8)-(53,19)
(54,10)-(54,68)
(54,11)-(54,28)
(54,12)-(54,17)
(54,18)-(54,27)
(54,19)-(54,23)
(54,25)-(54,26)
(54,30)-(54,41)
(54,31)-(54,37)
(54,38)-(54,40)
(54,43)-(54,54)
(54,44)-(54,50)
(54,51)-(54,53)
(54,56)-(54,67)
(54,57)-(54,63)
(54,64)-(54,66)
(56,8)-(57,68)
(56,8)-(56,19)
(57,10)-(57,68)
(57,11)-(57,28)
(57,12)-(57,17)
(57,18)-(57,27)
(57,19)-(57,23)
(57,25)-(57,26)
(57,30)-(57,41)
(57,31)-(57,37)
(57,38)-(57,40)
(57,43)-(57,54)
(57,44)-(57,50)
(57,51)-(57,53)
(57,56)-(57,67)
(57,57)-(57,63)
(57,64)-(57,66)
(59,8)-(60,68)
(59,8)-(59,19)
(60,10)-(60,68)
(60,11)-(60,28)
(60,12)-(60,17)
(60,18)-(60,27)
(60,19)-(60,23)
(60,25)-(60,26)
(60,30)-(60,41)
(60,31)-(60,37)
(60,38)-(60,40)
(60,43)-(60,54)
(60,44)-(60,50)
(60,51)-(60,53)
(60,56)-(60,67)
(60,57)-(60,63)
(60,64)-(60,66)
(62,8)-(63,68)
(62,8)-(62,19)
(63,10)-(63,68)
(63,11)-(63,28)
(63,12)-(63,17)
(63,18)-(63,27)
(63,19)-(63,23)
(63,25)-(63,26)
(63,30)-(63,41)
(63,31)-(63,37)
(63,38)-(63,40)
(63,43)-(63,54)
(63,44)-(63,50)
(63,51)-(63,53)
(63,56)-(63,67)
(63,57)-(63,63)
(63,64)-(63,66)
(65,8)-(66,68)
(65,8)-(65,19)
(66,10)-(66,68)
(66,11)-(66,28)
(66,12)-(66,17)
(66,18)-(66,27)
(66,19)-(66,23)
(66,25)-(66,26)
(66,30)-(66,41)
(66,31)-(66,37)
(66,38)-(66,40)
(66,43)-(66,54)
(66,44)-(66,50)
(66,51)-(66,53)
(66,56)-(66,67)
(66,57)-(66,63)
(66,64)-(66,66)
(68,4)-(68,75)
(68,13)-(68,24)
(68,13)-(68,17)
(68,18)-(68,24)
(68,19)-(68,20)
(68,22)-(68,23)
(68,28)-(68,74)
(68,34)-(68,35)
(68,48)-(68,57)
(68,48)-(68,54)
(68,55)-(68,57)
(68,65)-(68,74)
(68,65)-(68,71)
(68,72)-(68,74)
*)
