
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  if numZeros = 0
  then (l1, l2)
  else
    if numZeros > 0
    then (l1, ((clone (0, numZeros)) @ l2))
    else (((clone (0, (abs numZeros))) @ l1), l2);;


(* fix

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;

*)

(* changed spans
(6,2)-(11,49)
(9,4)-(11,49)
(10,15)-(10,36)
(10,16)-(10,21)
(10,22)-(10,35)
(10,23)-(10,24)
(10,26)-(10,34)
(11,11)-(11,38)
(11,12)-(11,17)
(11,18)-(11,37)
(11,19)-(11,20)
(11,22)-(11,36)
(11,23)-(11,26)
(11,27)-(11,35)
*)

(* type error slice
(2,48)-(2,65)
(2,49)-(2,54)
(10,14)-(10,42)
(10,15)-(10,36)
(10,16)-(10,21)
(10,37)-(10,38)
(11,10)-(11,44)
(11,11)-(11,38)
(11,12)-(11,17)
(11,39)-(11,40)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,65)
(2,43)-(2,44)
(2,48)-(2,65)
(2,49)-(2,54)
(2,55)-(2,56)
(2,57)-(2,64)
(2,58)-(2,59)
(2,62)-(2,63)
(4,12)-(11,49)
(4,15)-(11,49)
(5,2)-(11,49)
(5,17)-(5,52)
(5,17)-(5,33)
(5,18)-(5,29)
(5,30)-(5,32)
(5,36)-(5,52)
(5,37)-(5,48)
(5,49)-(5,51)
(6,2)-(11,49)
(6,5)-(6,17)
(6,5)-(6,13)
(6,16)-(6,17)
(7,7)-(7,15)
(7,8)-(7,10)
(7,12)-(7,14)
(9,4)-(11,49)
(9,7)-(9,19)
(9,7)-(9,15)
(9,18)-(9,19)
(10,9)-(10,43)
(10,10)-(10,12)
(10,14)-(10,42)
(10,37)-(10,38)
(10,15)-(10,36)
(10,16)-(10,21)
(10,22)-(10,35)
(10,23)-(10,24)
(10,26)-(10,34)
(10,39)-(10,41)
(11,9)-(11,49)
(11,10)-(11,44)
(11,39)-(11,40)
(11,11)-(11,38)
(11,12)-(11,17)
(11,18)-(11,37)
(11,19)-(11,20)
(11,22)-(11,36)
(11,23)-(11,26)
(11,27)-(11,35)
(11,41)-(11,43)
(11,46)-(11,48)
*)
