
let rec clone x n =
  if n <= 0 then [] else (let y = clone x (n - 1) in x :: y);;

let padZero l1 l2 =
  let x = List.length l1 in
  let y = List.length l2 in
  if x < y
  then (((clone 0 (y - x)) @ l1), l2)
  else (l1, ((clone 0 (x - y)) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | x::y -> if x = 0 then removeZero y else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = a + x in
    let base = 0 in
    let args = l1 in let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n =
  if n <= 0 then [] else (let y = clone x (n - 1) in x :: y);;

let padZero l1 l2 =
  let x = List.length l1 in
  let y = List.length l2 in
  if x < y
  then (((clone 0 (y - x)) @ l1), l2)
  else (l1, ((clone 0 (x - y)) @ l2));;

let rec removeZero l =
  match l with | [] -> [] | x::y -> if x = 0 then removeZero y else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (m,n) = a in
      let (o,p) = x in
      let z = (o + p) + m in
      if z > 9 then (1, ((z - 10) :: n)) else (0, (z :: n)) in
    let base = (0, []) in
    let args =
      let rec helper curList lt1 lt2 =
        match lt1 with
        | [] -> curList
        | h::t -> helper ((h, (List.hd lt2)) :: curList) t (List.tl lt2) in
      helper [] l1 l2 in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(17,16)-(17,21)
(17,20)-(17,21)
(18,4)-(19,68)
(18,15)-(18,16)
(19,4)-(19,68)
(19,15)-(19,17)
(19,21)-(19,68)
*)

(* type error slice
(17,4)-(19,68)
(17,10)-(17,21)
(17,16)-(17,17)
(17,16)-(17,21)
(19,21)-(19,68)
(19,35)-(19,49)
(19,35)-(19,61)
(19,50)-(19,51)
*)

(* all spans
(2,14)-(3,60)
(2,16)-(3,60)
(3,2)-(3,60)
(3,5)-(3,11)
(3,5)-(3,6)
(3,10)-(3,11)
(3,17)-(3,19)
(3,25)-(3,60)
(3,34)-(3,49)
(3,34)-(3,39)
(3,40)-(3,41)
(3,42)-(3,49)
(3,43)-(3,44)
(3,47)-(3,48)
(3,53)-(3,59)
(3,53)-(3,54)
(3,58)-(3,59)
(5,12)-(10,37)
(5,15)-(10,37)
(6,2)-(10,37)
(6,10)-(6,24)
(6,10)-(6,21)
(6,22)-(6,24)
(7,2)-(10,37)
(7,10)-(7,24)
(7,10)-(7,21)
(7,22)-(7,24)
(8,2)-(10,37)
(8,5)-(8,10)
(8,5)-(8,6)
(8,9)-(8,10)
(9,7)-(9,37)
(9,8)-(9,32)
(9,27)-(9,28)
(9,9)-(9,26)
(9,10)-(9,15)
(9,16)-(9,17)
(9,18)-(9,25)
(9,19)-(9,20)
(9,23)-(9,24)
(9,29)-(9,31)
(9,34)-(9,36)
(10,7)-(10,37)
(10,8)-(10,10)
(10,12)-(10,36)
(10,31)-(10,32)
(10,13)-(10,30)
(10,14)-(10,19)
(10,20)-(10,21)
(10,22)-(10,29)
(10,23)-(10,24)
(10,27)-(10,28)
(10,33)-(10,35)
(12,19)-(13,69)
(13,2)-(13,69)
(13,8)-(13,9)
(13,23)-(13,25)
(13,36)-(13,69)
(13,39)-(13,44)
(13,39)-(13,40)
(13,43)-(13,44)
(13,50)-(13,62)
(13,50)-(13,60)
(13,61)-(13,62)
(13,68)-(13,69)
(15,11)-(20,34)
(15,14)-(20,34)
(16,2)-(20,34)
(16,11)-(19,68)
(17,4)-(19,68)
(17,10)-(17,21)
(17,12)-(17,21)
(17,16)-(17,21)
(17,16)-(17,17)
(17,20)-(17,21)
(18,4)-(19,68)
(18,15)-(18,16)
(19,4)-(19,68)
(19,15)-(19,17)
(19,21)-(19,68)
(19,35)-(19,61)
(19,35)-(19,49)
(19,50)-(19,51)
(19,52)-(19,56)
(19,57)-(19,61)
(19,65)-(19,68)
(20,2)-(20,34)
(20,2)-(20,12)
(20,13)-(20,34)
(20,14)-(20,17)
(20,18)-(20,33)
(20,19)-(20,26)
(20,27)-(20,29)
(20,30)-(20,32)
*)
