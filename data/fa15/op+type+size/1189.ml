
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Circ of expr
  | Oscillate of expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCirc c1 = Circ c1;;

let buildCosine e = Cosine e;;

let buildOscillate n = Oscillate n;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then
    match rand (0, 2) with | 0 -> buildX () | 1 -> buildY () | _ -> buildX ()
  else
    (match rand (0, 25) with
     | 0 ->
         if depth < 5
         then buildX ()
         else
           buildCirc
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 1 ->
         if depth < 5
         then buildY ()
         else
           buildCirc
             ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 2|7|8 -> buildSine (build (rand, (depth - 1)))
     | 3|9|13 -> buildCosine (build (rand, (depth - 1)))
     | 4|10|14 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5|11|15 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6|12 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 17|18|19|23|25 -> buildCirc (build (rand, (depth - 1)))
     | 20|21|22|16 -> buildOscillate (build (rand, (depth - 1)))
     | _ -> buildX ());;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr
  | Circ of expr
  | Oscillate of expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCirc c1 = Circ c1;;

let buildCosine e = Cosine e;;

let buildOscillate n = Oscillate n;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then
    match rand (0, 2) with | 0 -> buildX () | 1 -> buildY () | _ -> buildX ()
  else
    (match rand (0, 25) with
     | 0 ->
         if depth < 5
         then buildX ()
         else buildCirc (build (rand, (depth - 1)))
     | 1 ->
         if depth < 5
         then buildY ()
         else buildCirc (build (rand, (depth - 1)))
     | 2|7|8 -> buildSine (build (rand, (depth - 1)))
     | 3|9|13 -> buildCosine (build (rand, (depth - 1)))
     | 4|10|14 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5|11|15 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6|12 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 17|18|19|23|25 -> buildCirc (build (rand, (depth - 1)))
     | 20|21|22|16 -> buildOscillate (build (rand, (depth - 1)))
     | _ -> buildX ());;

*)

(* changed spans
(42,13)-(42,71)
(42,43)-(42,70)
(42,44)-(42,49)
(42,50)-(42,69)
(42,51)-(42,55)
(42,57)-(42,68)
(42,58)-(42,63)
(42,66)-(42,67)
(48,13)-(48,71)
(48,44)-(48,49)
(48,50)-(48,69)
(48,51)-(48,55)
(48,57)-(48,68)
(48,58)-(48,63)
(48,66)-(48,67)
(49,16)-(49,53)
*)

(* type error slice
(15,3)-(15,28)
(15,14)-(15,26)
(15,19)-(15,26)
(15,24)-(15,26)
(41,11)-(41,20)
(41,11)-(42,71)
(42,13)-(42,71)
(47,11)-(47,20)
(47,11)-(48,71)
(48,13)-(48,71)
*)

(* all spans
(13,18)-(13,43)
(13,27)-(13,43)
(13,36)-(13,38)
(13,40)-(13,42)
(15,14)-(15,26)
(15,19)-(15,26)
(15,24)-(15,26)
(17,16)-(17,28)
(17,20)-(17,28)
(17,27)-(17,28)
(19,19)-(19,34)
(19,23)-(19,34)
(19,33)-(19,34)
(21,14)-(21,24)
(21,18)-(21,24)
(21,23)-(21,24)
(23,17)-(23,67)
(23,38)-(23,67)
(23,46)-(23,47)
(23,49)-(23,50)
(23,52)-(23,58)
(23,60)-(23,66)
(25,16)-(25,39)
(25,25)-(25,39)
(25,32)-(25,34)
(25,36)-(25,38)
(27,11)-(27,20)
(27,16)-(27,20)
(29,11)-(29,20)
(29,16)-(29,20)
(31,15)-(63,22)
(32,2)-(63,22)
(32,5)-(32,14)
(32,5)-(32,10)
(32,13)-(32,14)
(34,4)-(34,77)
(34,10)-(34,21)
(34,10)-(34,14)
(34,15)-(34,21)
(34,16)-(34,17)
(34,19)-(34,20)
(34,34)-(34,43)
(34,34)-(34,40)
(34,41)-(34,43)
(34,51)-(34,60)
(34,51)-(34,57)
(34,58)-(34,60)
(34,68)-(34,77)
(34,68)-(34,74)
(34,75)-(34,77)
(36,4)-(63,22)
(36,11)-(36,23)
(36,11)-(36,15)
(36,16)-(36,23)
(36,17)-(36,18)
(36,20)-(36,22)
(38,9)-(42,71)
(38,12)-(38,21)
(38,12)-(38,17)
(38,20)-(38,21)
(39,14)-(39,23)
(39,14)-(39,20)
(39,21)-(39,23)
(41,11)-(42,71)
(41,11)-(41,20)
(42,13)-(42,71)
(42,14)-(42,41)
(42,15)-(42,20)
(42,21)-(42,40)
(42,22)-(42,26)
(42,28)-(42,39)
(42,29)-(42,34)
(42,37)-(42,38)
(42,43)-(42,70)
(42,44)-(42,49)
(42,50)-(42,69)
(42,51)-(42,55)
(42,57)-(42,68)
(42,58)-(42,63)
(42,66)-(42,67)
(44,9)-(48,71)
(44,12)-(44,21)
(44,12)-(44,17)
(44,20)-(44,21)
(45,14)-(45,23)
(45,14)-(45,20)
(45,21)-(45,23)
(47,11)-(48,71)
(47,11)-(47,20)
(48,13)-(48,71)
(48,14)-(48,41)
(48,15)-(48,20)
(48,21)-(48,40)
(48,22)-(48,26)
(48,28)-(48,39)
(48,29)-(48,34)
(48,37)-(48,38)
(48,43)-(48,70)
(48,44)-(48,49)
(48,50)-(48,69)
(48,51)-(48,55)
(48,57)-(48,68)
(48,58)-(48,63)
(48,66)-(48,67)
(49,16)-(49,53)
(49,16)-(49,25)
(49,26)-(49,53)
(49,27)-(49,32)
(49,33)-(49,52)
(49,34)-(49,38)
(49,40)-(49,51)
(49,41)-(49,46)
(49,49)-(49,50)
(50,17)-(50,56)
(50,17)-(50,28)
(50,29)-(50,56)
(50,30)-(50,35)
(50,36)-(50,55)
(50,37)-(50,41)
(50,43)-(50,54)
(50,44)-(50,49)
(50,52)-(50,53)
(52,9)-(53,69)
(52,9)-(52,21)
(53,11)-(53,69)
(53,12)-(53,39)
(53,13)-(53,18)
(53,19)-(53,38)
(53,20)-(53,24)
(53,26)-(53,37)
(53,27)-(53,32)
(53,35)-(53,36)
(53,41)-(53,68)
(53,42)-(53,47)
(53,48)-(53,67)
(53,49)-(53,53)
(53,55)-(53,66)
(53,56)-(53,61)
(53,64)-(53,65)
(55,9)-(56,69)
(55,9)-(55,19)
(56,11)-(56,69)
(56,12)-(56,39)
(56,13)-(56,18)
(56,19)-(56,38)
(56,20)-(56,24)
(56,26)-(56,37)
(56,27)-(56,32)
(56,35)-(56,36)
(56,41)-(56,68)
(56,42)-(56,47)
(56,48)-(56,67)
(56,49)-(56,53)
(56,55)-(56,66)
(56,56)-(56,61)
(56,64)-(56,65)
(58,9)-(60,70)
(58,9)-(58,20)
(59,11)-(60,70)
(59,12)-(59,39)
(59,13)-(59,18)
(59,19)-(59,38)
(59,20)-(59,24)
(59,26)-(59,37)
(59,27)-(59,32)
(59,35)-(59,36)
(59,41)-(59,68)
(59,42)-(59,47)
(59,48)-(59,67)
(59,49)-(59,53)
(59,55)-(59,66)
(59,56)-(59,61)
(59,64)-(59,65)
(60,13)-(60,40)
(60,14)-(60,19)
(60,20)-(60,39)
(60,21)-(60,25)
(60,27)-(60,38)
(60,28)-(60,33)
(60,36)-(60,37)
(60,42)-(60,69)
(60,43)-(60,48)
(60,49)-(60,68)
(60,50)-(60,54)
(60,56)-(60,67)
(60,57)-(60,62)
(60,65)-(60,66)
(61,25)-(61,62)
(61,25)-(61,34)
(61,35)-(61,62)
(61,36)-(61,41)
(61,42)-(61,61)
(61,43)-(61,47)
(61,49)-(61,60)
(61,50)-(61,55)
(61,58)-(61,59)
(62,22)-(62,64)
(62,22)-(62,36)
(62,37)-(62,64)
(62,38)-(62,43)
(62,44)-(62,63)
(62,45)-(62,49)
(62,51)-(62,62)
(62,52)-(62,57)
(62,60)-(62,61)
(63,12)-(63,21)
(63,12)-(63,18)
(63,19)-(63,21)
*)
