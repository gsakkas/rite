
let rec clone x n = if n <= 0 then [] else [x] :: (clone x (n - 1));;

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) :: l1), l2)
    else clone (List.length l1) (0 :: l2);;


(* fix

let padZero l1 l2 =
  if (List.length l1) = (List.length l2)
  then (l1, l2)
  else
    if (List.length l1) < (List.length l2)
    then ((0 :: l1), l2)
    else (l1, (0 :: l2));;

*)

(* changed spans
(2,14)-(2,67)
(2,16)-(2,67)
(2,20)-(2,67)
(2,23)-(2,24)
(2,23)-(2,29)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,46)
(2,43)-(2,67)
(2,44)-(2,45)
(2,50)-(2,67)
(2,51)-(2,56)
(2,57)-(2,58)
(2,59)-(2,66)
(2,60)-(2,61)
(2,64)-(2,65)
(8,8)-(8,19)
(8,20)-(8,22)
(8,27)-(8,38)
(10,9)-(10,41)
*)

(* type error slice
(2,50)-(2,67)
(2,51)-(2,56)
(2,59)-(2,66)
(10,9)-(10,14)
(10,9)-(10,41)
(10,32)-(10,41)
*)

(* all spans
(2,14)-(2,67)
(2,16)-(2,67)
(2,20)-(2,67)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,67)
(2,43)-(2,46)
(2,44)-(2,45)
(2,50)-(2,67)
(2,51)-(2,56)
(2,57)-(2,58)
(2,59)-(2,66)
(2,60)-(2,61)
(2,64)-(2,65)
(4,12)-(10,41)
(4,15)-(10,41)
(5,2)-(10,41)
(5,5)-(5,40)
(5,5)-(5,21)
(5,6)-(5,17)
(5,18)-(5,20)
(5,24)-(5,40)
(5,25)-(5,36)
(5,37)-(5,39)
(6,7)-(6,15)
(6,8)-(6,10)
(6,12)-(6,14)
(8,4)-(10,41)
(8,7)-(8,42)
(8,7)-(8,23)
(8,8)-(8,19)
(8,20)-(8,22)
(8,26)-(8,42)
(8,27)-(8,38)
(8,39)-(8,41)
(9,9)-(9,70)
(9,10)-(9,65)
(9,11)-(9,58)
(9,12)-(9,17)
(9,18)-(9,19)
(9,20)-(9,57)
(9,21)-(9,37)
(9,22)-(9,33)
(9,34)-(9,36)
(9,40)-(9,56)
(9,41)-(9,52)
(9,53)-(9,55)
(9,62)-(9,64)
(9,67)-(9,69)
(10,9)-(10,41)
(10,9)-(10,14)
(10,15)-(10,31)
(10,16)-(10,27)
(10,28)-(10,30)
(10,32)-(10,41)
(10,33)-(10,34)
(10,38)-(10,40)
*)
