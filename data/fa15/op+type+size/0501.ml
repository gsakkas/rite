
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;

let digits n = digitsOfInt (abs n);;

let rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;

let rec additivePersistence n =
  let rec counter c =
    if n < 10
    then c
    else counter (c + 1) additivePersistence (sumList (digits n)) in
  counter 0 n;;


(* fix

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;

let digits n = digitsOfInt (abs n);;

let rec sumList xs = match xs with | [] -> 0 | x::xs' -> x + (sumList xs');;

let rec additivePersistence n =
  if n < 10 then 0 else 1 + (additivePersistence (sumList (digits n)));;

*)

(* changed spans
(10,2)-(14,13)
(10,18)-(13,65)
(12,9)-(12,10)
(13,9)-(13,16)
(13,9)-(13,65)
(13,18)-(13,19)
(13,25)-(13,44)
(14,2)-(14,9)
(14,2)-(14,13)
(14,10)-(14,11)
(14,12)-(14,13)
*)

(* type error slice
(9,3)-(14,15)
(9,28)-(14,13)
(10,2)-(14,13)
(10,18)-(13,65)
(11,4)-(13,65)
(13,9)-(13,16)
(13,9)-(13,65)
(13,25)-(13,44)
(14,2)-(14,9)
(14,2)-(14,13)
(14,12)-(14,13)
*)

(* all spans
(2,20)-(3,60)
(3,2)-(3,60)
(3,5)-(3,11)
(3,5)-(3,6)
(3,10)-(3,11)
(3,17)-(3,19)
(3,25)-(3,60)
(3,48)-(3,49)
(3,25)-(3,47)
(3,26)-(3,37)
(3,38)-(3,46)
(3,39)-(3,40)
(3,43)-(3,45)
(3,50)-(3,60)
(3,51)-(3,59)
(3,51)-(3,52)
(3,57)-(3,59)
(5,11)-(5,34)
(5,15)-(5,34)
(5,15)-(5,26)
(5,27)-(5,34)
(5,28)-(5,31)
(5,32)-(5,33)
(7,16)-(7,74)
(7,21)-(7,74)
(7,27)-(7,29)
(7,43)-(7,44)
(7,57)-(7,74)
(7,57)-(7,58)
(7,61)-(7,74)
(7,62)-(7,69)
(7,70)-(7,73)
(9,28)-(14,13)
(10,2)-(14,13)
(10,18)-(13,65)
(11,4)-(13,65)
(11,7)-(11,13)
(11,7)-(11,8)
(11,11)-(11,13)
(12,9)-(12,10)
(13,9)-(13,65)
(13,9)-(13,16)
(13,17)-(13,24)
(13,18)-(13,19)
(13,22)-(13,23)
(13,25)-(13,44)
(13,45)-(13,65)
(13,46)-(13,53)
(13,54)-(13,64)
(13,55)-(13,61)
(13,62)-(13,63)
(14,2)-(14,13)
(14,2)-(14,9)
(14,10)-(14,11)
(14,12)-(14,13)
*)
