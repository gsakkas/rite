
let rec padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then padZero (0 :: l1) l2
  else
    if (List.length l1) > (List.length l2)
    then padZero l1 (0 :: l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match a with
      | h::t ->
          let sum = ((fst x) + (snd x)) + (fst h) in (sum / 10) ::
            (sum mod 10) :: t in
    let base = [()] in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then padZero (0 :: l1) l2
  else
    if (List.length l1) > (List.length l2)
    then padZero l1 (0 :: l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let b = (fst x) + (snd x) in
      match a with
      | h::t -> ((h + b) / 10) :: ((h + b) mod 10) :: t
      | _ -> [b / 10; b mod 10] in
    let base = [] in
    let args = List.rev (List.combine l1 l2) in List.fold_left f base args in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(16,6)-(19,29)
(16,12)-(16,13)
(18,10)-(19,29)
(18,20)-(18,49)
(18,42)-(18,49)
(18,43)-(18,46)
(18,47)-(18,48)
(18,53)-(19,29)
(18,54)-(18,57)
(18,60)-(18,62)
(19,13)-(19,16)
(19,21)-(19,23)
(20,4)-(22,51)
(20,15)-(20,19)
(20,16)-(20,18)
(22,4)-(22,51)
(22,48)-(22,51)
*)

(* type error slice
(15,4)-(22,51)
(15,10)-(19,29)
(15,12)-(19,29)
(16,6)-(19,29)
(16,12)-(16,13)
(18,10)-(19,29)
(18,42)-(18,49)
(18,43)-(18,46)
(18,47)-(18,48)
(18,53)-(18,63)
(18,53)-(19,29)
(19,12)-(19,24)
(19,12)-(19,29)
(19,28)-(19,29)
(22,18)-(22,32)
(22,18)-(22,44)
(22,33)-(22,34)
*)

(* all spans
(2,16)-(8,17)
(2,19)-(8,17)
(3,2)-(8,17)
(3,5)-(3,40)
(3,5)-(3,21)
(3,6)-(3,17)
(3,18)-(3,20)
(3,24)-(3,40)
(3,25)-(3,36)
(3,37)-(3,39)
(4,7)-(4,27)
(4,7)-(4,14)
(4,15)-(4,24)
(4,16)-(4,17)
(4,21)-(4,23)
(4,25)-(4,27)
(6,4)-(8,17)
(6,7)-(6,42)
(6,7)-(6,23)
(6,8)-(6,19)
(6,20)-(6,22)
(6,26)-(6,42)
(6,27)-(6,38)
(6,39)-(6,41)
(7,9)-(7,29)
(7,9)-(7,16)
(7,17)-(7,19)
(7,20)-(7,29)
(7,21)-(7,22)
(7,26)-(7,28)
(8,9)-(8,17)
(8,10)-(8,12)
(8,14)-(8,16)
(10,19)-(11,69)
(11,2)-(11,69)
(11,8)-(11,9)
(11,23)-(11,25)
(11,36)-(11,69)
(11,39)-(11,44)
(11,39)-(11,40)
(11,43)-(11,44)
(11,50)-(11,62)
(11,50)-(11,60)
(11,61)-(11,62)
(11,68)-(11,69)
(13,11)-(23,34)
(13,14)-(23,34)
(14,2)-(23,34)
(14,11)-(22,51)
(15,4)-(22,51)
(15,10)-(19,29)
(15,12)-(19,29)
(16,6)-(19,29)
(16,12)-(16,13)
(18,10)-(19,29)
(18,20)-(18,49)
(18,20)-(18,39)
(18,21)-(18,28)
(18,22)-(18,25)
(18,26)-(18,27)
(18,31)-(18,38)
(18,32)-(18,35)
(18,36)-(18,37)
(18,42)-(18,49)
(18,43)-(18,46)
(18,47)-(18,48)
(18,53)-(19,29)
(18,53)-(18,63)
(18,54)-(18,57)
(18,60)-(18,62)
(19,12)-(19,29)
(19,12)-(19,24)
(19,13)-(19,16)
(19,21)-(19,23)
(19,28)-(19,29)
(20,4)-(22,51)
(20,15)-(20,19)
(20,16)-(20,18)
(21,4)-(22,51)
(21,15)-(21,44)
(21,15)-(21,23)
(21,24)-(21,44)
(21,25)-(21,37)
(21,38)-(21,40)
(21,41)-(21,43)
(22,4)-(22,51)
(22,18)-(22,44)
(22,18)-(22,32)
(22,33)-(22,34)
(22,35)-(22,39)
(22,40)-(22,44)
(22,48)-(22,51)
(23,2)-(23,34)
(23,2)-(23,12)
(23,13)-(23,34)
(23,14)-(23,17)
(23,18)-(23,33)
(23,19)-(23,26)
(23,27)-(23,29)
(23,30)-(23,32)
*)
