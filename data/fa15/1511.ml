
let rec clone x n =
  match n with | y when y <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) <= (List.length l2) with
  | true  ->
      ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  | false  ->
      (l1, (List.append (clone 0 ((List.length l1) - (List.length l2)) l2)));;


(* fix

let rec clone x n =
  match n with | y when y <= 0 -> [] | _ -> x :: (clone x (n - 1));;

let padZero l1 l2 =
  match (List.length l1) <= (List.length l2) with
  | true  ->
      ((List.append (clone 0 ((List.length l2) - (List.length l1))) l1), l2)
  | false  ->
      (l1, (List.append (clone 0 ((List.length l1) - (List.length l2))) l2));;

*)

(* changed spans
(10,11)-(10,75)
(10,24)-(10,74)
*)

(* type error slice
(3,44)-(3,66)
(3,49)-(3,66)
(3,50)-(3,55)
(6,2)-(10,76)
(8,6)-(8,76)
(8,73)-(8,75)
(10,6)-(10,76)
(10,11)-(10,75)
(10,12)-(10,23)
(10,24)-(10,74)
(10,25)-(10,30)
(10,53)-(10,69)
(10,54)-(10,65)
(10,66)-(10,68)
*)

(* all spans
(2,14)-(3,66)
(2,16)-(3,66)
(3,2)-(3,66)
(3,8)-(3,9)
(3,24)-(3,30)
(3,24)-(3,25)
(3,29)-(3,30)
(3,34)-(3,36)
(3,44)-(3,66)
(3,44)-(3,45)
(3,49)-(3,66)
(3,50)-(3,55)
(3,56)-(3,57)
(3,58)-(3,65)
(3,59)-(3,60)
(3,63)-(3,64)
(5,12)-(10,76)
(5,15)-(10,76)
(6,2)-(10,76)
(6,8)-(6,44)
(6,8)-(6,24)
(6,9)-(6,20)
(6,21)-(6,23)
(6,28)-(6,44)
(6,29)-(6,40)
(6,41)-(6,43)
(8,6)-(8,76)
(8,7)-(8,71)
(8,8)-(8,19)
(8,20)-(8,67)
(8,21)-(8,26)
(8,27)-(8,28)
(8,29)-(8,66)
(8,30)-(8,46)
(8,31)-(8,42)
(8,43)-(8,45)
(8,49)-(8,65)
(8,50)-(8,61)
(8,62)-(8,64)
(8,68)-(8,70)
(8,73)-(8,75)
(10,6)-(10,76)
(10,7)-(10,9)
(10,11)-(10,75)
(10,12)-(10,23)
(10,24)-(10,74)
(10,25)-(10,30)
(10,31)-(10,32)
(10,33)-(10,70)
(10,34)-(10,50)
(10,35)-(10,46)
(10,47)-(10,49)
(10,53)-(10,69)
(10,54)-(10,65)
(10,66)-(10,68)
(10,71)-(10,73)
*)
