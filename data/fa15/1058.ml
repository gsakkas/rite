
let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff > 0
  then (l1, ((clone 0 diff) @ l2))
  else if diff < 0 then (((clone 0 (diff * (-1))) @ l1), l2) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::l' -> if h = 0 then removeZero l' else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (n1,n2) = x in
      let sum = n1 + n2 in
      match a with
      | [] -> [sum]
      | c::x' -> if c > 9 then (sum + 1) :: (c - 10) :: x' else sum :: a in
    let base = [] in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec clone x n = if n < 1 then [] else x :: (clone x (n - 1));;

let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff > 0
  then (l1, ((clone 0 diff) @ l2))
  else if diff < 0 then (((clone 0 (diff * (-1))) @ l1), l2) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::l' -> if h = 0 then removeZero l' else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (n1,n2) = x in
      let sum = n1 + n2 in
      match a with
      | [] -> [sum]
      | c::x' -> if c > 9 then (sum + 1) :: (c - 10) :: x' else sum :: a in
    let base = [] in
    let args = List.combine (List.rev l1) (List.rev l2) in
    let res = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(23,4)-(23,51)
*)

(* type error slice
(15,4)-(23,51)
(15,10)-(20,72)
(20,64)-(20,72)
(20,71)-(20,72)
(23,4)-(23,51)
(23,18)-(23,32)
(23,18)-(23,44)
(23,33)-(23,34)
*)

(* all spans
(2,14)-(2,64)
(2,16)-(2,64)
(2,20)-(2,64)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,36)
(2,42)-(2,64)
(2,42)-(2,43)
(2,47)-(2,64)
(2,48)-(2,53)
(2,54)-(2,55)
(2,56)-(2,63)
(2,57)-(2,58)
(2,61)-(2,62)
(4,12)-(8,74)
(4,15)-(8,74)
(5,2)-(8,74)
(5,13)-(5,48)
(5,13)-(5,29)
(5,14)-(5,25)
(5,26)-(5,28)
(5,32)-(5,48)
(5,33)-(5,44)
(5,45)-(5,47)
(6,2)-(8,74)
(6,5)-(6,13)
(6,5)-(6,9)
(6,12)-(6,13)
(7,7)-(7,34)
(7,8)-(7,10)
(7,12)-(7,33)
(7,28)-(7,29)
(7,13)-(7,27)
(7,14)-(7,19)
(7,20)-(7,21)
(7,22)-(7,26)
(7,30)-(7,32)
(8,7)-(8,74)
(8,10)-(8,18)
(8,10)-(8,14)
(8,17)-(8,18)
(8,24)-(8,60)
(8,25)-(8,55)
(8,50)-(8,51)
(8,26)-(8,49)
(8,27)-(8,32)
(8,33)-(8,34)
(8,35)-(8,48)
(8,36)-(8,40)
(8,43)-(8,47)
(8,52)-(8,54)
(8,57)-(8,59)
(8,66)-(8,74)
(8,67)-(8,69)
(8,71)-(8,73)
(10,19)-(11,71)
(11,2)-(11,71)
(11,8)-(11,9)
(11,23)-(11,25)
(11,37)-(11,71)
(11,40)-(11,45)
(11,40)-(11,41)
(11,44)-(11,45)
(11,51)-(11,64)
(11,51)-(11,61)
(11,62)-(11,64)
(11,70)-(11,71)
(13,11)-(24,34)
(13,14)-(24,34)
(14,2)-(24,34)
(14,11)-(23,51)
(15,4)-(23,51)
(15,10)-(20,72)
(15,12)-(20,72)
(16,6)-(20,72)
(16,20)-(16,21)
(17,6)-(20,72)
(17,16)-(17,23)
(17,16)-(17,18)
(17,21)-(17,23)
(18,6)-(20,72)
(18,12)-(18,13)
(19,14)-(19,19)
(19,15)-(19,18)
(20,17)-(20,72)
(20,20)-(20,25)
(20,20)-(20,21)
(20,24)-(20,25)
(20,31)-(20,58)
(20,31)-(20,40)
(20,32)-(20,35)
(20,38)-(20,39)
(20,44)-(20,58)
(20,44)-(20,52)
(20,45)-(20,46)
(20,49)-(20,51)
(20,56)-(20,58)
(20,64)-(20,72)
(20,64)-(20,67)
(20,71)-(20,72)
(21,4)-(23,51)
(21,15)-(21,17)
(22,4)-(23,51)
(22,15)-(22,55)
(22,15)-(22,27)
(22,28)-(22,41)
(22,29)-(22,37)
(22,38)-(22,40)
(22,42)-(22,55)
(22,43)-(22,51)
(22,52)-(22,54)
(23,4)-(23,51)
(23,18)-(23,44)
(23,18)-(23,32)
(23,33)-(23,34)
(23,35)-(23,39)
(23,40)-(23,44)
(23,48)-(23,51)
(24,2)-(24,34)
(24,2)-(24,12)
(24,13)-(24,34)
(24,14)-(24,17)
(24,18)-(24,33)
(24,19)-(24,26)
(24,27)-(24,29)
(24,30)-(24,32)
*)
