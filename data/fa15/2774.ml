
let rec clone x n = if n > 0 then [x] @ (clone x (n - 1)) else [];;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (x1,x2) ->
          (match a with
           | (car,cur) ->
               (match cur with
                | [] ->
                    if ((car + x1) + x2) > 10
                    then
                      ((car + 1), ([car + 1] @ [((car + x1) + x2) mod 10]))
                    else (0, ([car] @ [(car + x1) + x2]))
                | h::t ->
                    if ((x1 + x2) + h) < 10
                    then (0, ([0] @ ([(x1 + x2) + h] @ t)))
                    else
                      ((car + 1),
                        ([((h + x1) + x2) / 10] @
                           ([((h + x1) + x2) mod 10] @ t))))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  match i with | 0 -> [] | _ -> bigAdd (((mulByDigit i) - (1 l)) l);;


(* fix

let rec clone x n = if n > 0 then [x] @ (clone x (n - 1)) else [];;

let padZero l1 l2 =
  let len1 = List.length l1 in
  let len2 = List.length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      match x with
      | (x1,x2) ->
          (match a with
           | (car,cur) ->
               (match cur with
                | [] ->
                    if ((car + x1) + x2) > 10
                    then
                      ((car + 1), ([car + 1] @ [((car + x1) + x2) mod 10]))
                    else (0, ([car] @ [(car + x1) + x2]))
                | h::t ->
                    if ((x1 + x2) + h) < 10
                    then (0, ([0] @ ([(x1 + x2) + h] @ t)))
                    else
                      ((car + 1),
                        ([((h + x1) + x2) / 10] @
                           ([((h + x1) + x2) mod 10] @ t))))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  match i with | 0 -> [] | _ -> bigAdd (mulByDigit (i - 1) l) l;;

*)

(* changed spans
(40,32)-(40,67)
(40,39)-(40,67)
(40,40)-(40,64)
(40,41)-(40,55)
(40,53)-(40,54)
(40,58)-(40,63)
*)

(* type error slice
(14,3)-(37,36)
(14,11)-(37,34)
(14,14)-(37,34)
(39,3)-(40,69)
(39,19)-(40,67)
(39,21)-(40,67)
(40,2)-(40,67)
(40,22)-(40,24)
(40,32)-(40,38)
(40,32)-(40,67)
(40,39)-(40,67)
(40,40)-(40,64)
(40,41)-(40,55)
(40,42)-(40,52)
(40,58)-(40,63)
(40,59)-(40,60)
*)

(* all spans
(2,14)-(2,65)
(2,16)-(2,65)
(2,20)-(2,65)
(2,23)-(2,28)
(2,23)-(2,24)
(2,27)-(2,28)
(2,34)-(2,57)
(2,38)-(2,39)
(2,34)-(2,37)
(2,35)-(2,36)
(2,40)-(2,57)
(2,41)-(2,46)
(2,47)-(2,48)
(2,49)-(2,56)
(2,50)-(2,51)
(2,54)-(2,55)
(2,63)-(2,65)
(4,12)-(9,43)
(4,15)-(9,43)
(5,2)-(9,43)
(5,13)-(5,27)
(5,13)-(5,24)
(5,25)-(5,27)
(6,2)-(9,43)
(6,13)-(6,27)
(6,13)-(6,24)
(6,25)-(6,27)
(7,2)-(9,43)
(7,5)-(7,16)
(7,5)-(7,9)
(7,12)-(7,16)
(8,7)-(8,43)
(8,8)-(8,10)
(8,12)-(8,42)
(8,37)-(8,38)
(8,13)-(8,36)
(8,14)-(8,19)
(8,20)-(8,21)
(8,22)-(8,35)
(8,23)-(8,27)
(8,30)-(8,34)
(8,39)-(8,41)
(9,7)-(9,43)
(9,8)-(9,38)
(9,33)-(9,34)
(9,9)-(9,32)
(9,10)-(9,15)
(9,16)-(9,17)
(9,18)-(9,31)
(9,19)-(9,23)
(9,26)-(9,30)
(9,35)-(9,37)
(9,40)-(9,42)
(11,19)-(12,69)
(12,2)-(12,69)
(12,8)-(12,9)
(12,23)-(12,25)
(12,36)-(12,69)
(12,39)-(12,44)
(12,39)-(12,40)
(12,43)-(12,44)
(12,50)-(12,62)
(12,50)-(12,60)
(12,61)-(12,62)
(12,68)-(12,69)
(14,11)-(37,34)
(14,14)-(37,34)
(15,2)-(37,34)
(15,11)-(36,51)
(16,4)-(36,51)
(16,10)-(33,61)
(16,12)-(33,61)
(17,6)-(33,61)
(17,12)-(17,13)
(19,10)-(33,61)
(19,17)-(19,18)
(21,15)-(33,60)
(21,22)-(21,25)
(23,20)-(26,57)
(23,23)-(23,45)
(23,23)-(23,40)
(23,24)-(23,34)
(23,25)-(23,28)
(23,31)-(23,33)
(23,37)-(23,39)
(23,43)-(23,45)
(25,22)-(25,75)
(25,23)-(25,32)
(25,24)-(25,27)
(25,30)-(25,31)
(25,34)-(25,74)
(25,45)-(25,46)
(25,35)-(25,44)
(25,36)-(25,43)
(25,36)-(25,39)
(25,42)-(25,43)
(25,47)-(25,73)
(25,48)-(25,72)
(25,48)-(25,65)
(25,49)-(25,59)
(25,50)-(25,53)
(25,56)-(25,58)
(25,62)-(25,64)
(25,70)-(25,72)
(26,25)-(26,57)
(26,26)-(26,27)
(26,29)-(26,56)
(26,36)-(26,37)
(26,30)-(26,35)
(26,31)-(26,34)
(26,38)-(26,55)
(26,39)-(26,54)
(26,39)-(26,49)
(26,40)-(26,43)
(26,46)-(26,48)
(26,52)-(26,54)
(28,20)-(33,59)
(28,23)-(28,43)
(28,23)-(28,38)
(28,24)-(28,33)
(28,25)-(28,27)
(28,30)-(28,32)
(28,36)-(28,37)
(28,41)-(28,43)
(29,25)-(29,59)
(29,26)-(29,27)
(29,29)-(29,58)
(29,34)-(29,35)
(29,30)-(29,33)
(29,31)-(29,32)
(29,36)-(29,57)
(29,53)-(29,54)
(29,37)-(29,52)
(29,38)-(29,51)
(29,38)-(29,47)
(29,39)-(29,41)
(29,44)-(29,46)
(29,50)-(29,51)
(29,55)-(29,56)
(31,22)-(33,59)
(31,23)-(31,32)
(31,24)-(31,27)
(31,30)-(31,31)
(32,24)-(33,58)
(32,48)-(32,49)
(32,25)-(32,47)
(32,26)-(32,46)
(32,26)-(32,41)
(32,27)-(32,35)
(32,28)-(32,29)
(32,32)-(32,34)
(32,38)-(32,40)
(32,44)-(32,46)
(33,27)-(33,57)
(33,53)-(33,54)
(33,28)-(33,52)
(33,29)-(33,51)
(33,29)-(33,44)
(33,30)-(33,38)
(33,31)-(33,32)
(33,35)-(33,37)
(33,41)-(33,43)
(33,49)-(33,51)
(33,55)-(33,56)
(34,4)-(36,51)
(34,15)-(34,22)
(34,16)-(34,17)
(34,19)-(34,21)
(35,4)-(36,51)
(35,15)-(35,44)
(35,15)-(35,23)
(35,24)-(35,44)
(35,25)-(35,37)
(35,38)-(35,40)
(35,41)-(35,43)
(36,4)-(36,51)
(36,18)-(36,44)
(36,18)-(36,32)
(36,33)-(36,34)
(36,35)-(36,39)
(36,40)-(36,44)
(36,48)-(36,51)
(37,2)-(37,34)
(37,2)-(37,12)
(37,13)-(37,34)
(37,14)-(37,17)
(37,18)-(37,33)
(37,19)-(37,26)
(37,27)-(37,29)
(37,30)-(37,32)
(39,19)-(40,67)
(39,21)-(40,67)
(40,2)-(40,67)
(40,8)-(40,9)
(40,22)-(40,24)
(40,32)-(40,67)
(40,32)-(40,38)
(40,39)-(40,67)
(40,40)-(40,64)
(40,41)-(40,55)
(40,42)-(40,52)
(40,53)-(40,54)
(40,58)-(40,63)
(40,59)-(40,60)
(40,61)-(40,62)
(40,65)-(40,66)
*)
