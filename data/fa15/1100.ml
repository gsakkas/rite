
let rec padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then padZero (0 :: l1) l2
  else
    if (List.length l1) > (List.length l2)
    then padZero l1 (0 :: l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let sum = ((fst x) + (snd x)) + (fst a) in
      match a with | h::t -> (sum / 10) :: (sum mod 10) :: t in
    let base = [] in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;


(* fix

let rec padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then padZero (0 :: l1) l2
  else
    if (List.length l1) > (List.length l2)
    then padZero l1 (0 :: l2)
    else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let b = (fst x) + (snd x) in
      match a with
      | h::t -> ((h + b) / 10) :: ((h + b) mod 10) :: t
      | _ -> [b / 10; b mod 10] in
    let base = [] in
    let args = List.rev (List.combine l1 l2) in List.fold_left f base args in
  removeZero (add (padZero l1 l2));;

*)

(* changed spans
(16,6)-(17,60)
(16,16)-(16,45)
(16,38)-(16,45)
(16,39)-(16,42)
(16,43)-(16,44)
(17,6)-(17,60)
(17,30)-(17,33)
(17,36)-(17,38)
(17,44)-(17,47)
(17,52)-(17,54)
(18,4)-(20,51)
(20,4)-(20,51)
(20,48)-(20,51)
*)

(* type error slice
(15,4)-(20,51)
(15,10)-(17,60)
(15,12)-(17,60)
(16,6)-(17,60)
(16,38)-(16,45)
(16,39)-(16,42)
(16,43)-(16,44)
(17,6)-(17,60)
(17,12)-(17,13)
(17,29)-(17,60)
(20,18)-(20,32)
(20,18)-(20,44)
(20,33)-(20,34)
*)

(* all spans
(2,16)-(8,17)
(2,19)-(8,17)
(3,2)-(8,17)
(3,5)-(3,40)
(3,5)-(3,21)
(3,6)-(3,17)
(3,18)-(3,20)
(3,24)-(3,40)
(3,25)-(3,36)
(3,37)-(3,39)
(4,7)-(4,27)
(4,7)-(4,14)
(4,15)-(4,24)
(4,16)-(4,17)
(4,21)-(4,23)
(4,25)-(4,27)
(6,4)-(8,17)
(6,7)-(6,42)
(6,7)-(6,23)
(6,8)-(6,19)
(6,20)-(6,22)
(6,26)-(6,42)
(6,27)-(6,38)
(6,39)-(6,41)
(7,9)-(7,29)
(7,9)-(7,16)
(7,17)-(7,19)
(7,20)-(7,29)
(7,21)-(7,22)
(7,26)-(7,28)
(8,9)-(8,17)
(8,10)-(8,12)
(8,14)-(8,16)
(10,19)-(11,69)
(11,2)-(11,69)
(11,8)-(11,9)
(11,23)-(11,25)
(11,36)-(11,69)
(11,39)-(11,44)
(11,39)-(11,40)
(11,43)-(11,44)
(11,50)-(11,62)
(11,50)-(11,60)
(11,61)-(11,62)
(11,68)-(11,69)
(13,11)-(21,34)
(13,14)-(21,34)
(14,2)-(21,34)
(14,11)-(20,51)
(15,4)-(20,51)
(15,10)-(17,60)
(15,12)-(17,60)
(16,6)-(17,60)
(16,16)-(16,45)
(16,16)-(16,35)
(16,17)-(16,24)
(16,18)-(16,21)
(16,22)-(16,23)
(16,27)-(16,34)
(16,28)-(16,31)
(16,32)-(16,33)
(16,38)-(16,45)
(16,39)-(16,42)
(16,43)-(16,44)
(17,6)-(17,60)
(17,12)-(17,13)
(17,29)-(17,60)
(17,29)-(17,39)
(17,30)-(17,33)
(17,36)-(17,38)
(17,43)-(17,60)
(17,43)-(17,55)
(17,44)-(17,47)
(17,52)-(17,54)
(17,59)-(17,60)
(18,4)-(20,51)
(18,15)-(18,17)
(19,4)-(20,51)
(19,15)-(19,44)
(19,15)-(19,23)
(19,24)-(19,44)
(19,25)-(19,37)
(19,38)-(19,40)
(19,41)-(19,43)
(20,4)-(20,51)
(20,18)-(20,44)
(20,18)-(20,32)
(20,33)-(20,34)
(20,35)-(20,39)
(20,40)-(20,44)
(20,48)-(20,51)
(21,2)-(21,34)
(21,2)-(21,12)
(21,13)-(21,34)
(21,14)-(21,17)
(21,18)-(21,33)
(21,19)-(21,26)
(21,27)-(21,29)
(21,30)-(21,32)
*)
