
type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then match rand (0, 1) with | 0 -> buildX () | 1 -> buildY
  else
    (match rand (0, 7) with
     | 0 -> buildX
     | 1 -> buildY
     | 2 -> buildSine (build (rand, (depth - 1)))
     | 3 -> buildCosine (build (rand, (depth - 1)))
     | 4 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1)))));;


(* fix

type expr =
  | VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;

let buildAverage (e1,e2) = Average (e1, e2);;

let buildCosine e = Cosine e;;

let buildSine e = Sine e;;

let buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;

let buildTimes (e1,e2) = Times (e1, e2);;

let buildX () = VarX;;

let buildY () = VarY;;

let rec build (rand,depth) =
  if depth = 0
  then match rand (0, 1) with | 0 -> buildX () | 1 -> buildY ()
  else
    (match rand (0, 7) with
     | 0 -> buildX ()
     | 1 -> buildY ()
     | 2 -> buildSine (build (rand, (depth - 1)))
     | 3 -> buildCosine (build (rand, (depth - 1)))
     | 4 ->
         buildAverage
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 5 ->
         buildTimes
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))))
     | 6 ->
         buildThresh
           ((build (rand, (depth - 1))), (build (rand, (depth - 1))),
             (build (rand, (depth - 1))), (build (rand, (depth - 1)))));;

*)

(* changed spans
(27,54)-(27,60)
(29,4)-(43,71)
(30,12)-(30,18)
(31,12)-(31,18)
(32,12)-(32,49)
*)

(* type error slice
(11,3)-(11,45)
(11,18)-(11,43)
(11,27)-(11,43)
(13,3)-(13,30)
(13,16)-(13,28)
(13,20)-(13,28)
(15,3)-(15,26)
(15,14)-(15,24)
(15,18)-(15,24)
(17,3)-(17,69)
(17,17)-(17,67)
(17,38)-(17,67)
(19,3)-(19,41)
(19,16)-(19,39)
(19,25)-(19,39)
(21,3)-(21,22)
(21,11)-(21,20)
(21,16)-(21,20)
(23,3)-(23,22)
(23,11)-(23,20)
(26,2)-(43,71)
(27,7)-(27,60)
(27,37)-(27,43)
(27,37)-(27,46)
(27,54)-(27,60)
(29,4)-(43,71)
(30,12)-(30,18)
(32,12)-(32,21)
(32,12)-(32,49)
(33,12)-(33,23)
(33,12)-(33,51)
(35,9)-(35,21)
(35,9)-(36,69)
(38,9)-(38,19)
(38,9)-(39,69)
(41,9)-(41,20)
(41,9)-(43,70)
*)

(* all spans
(11,18)-(11,43)
(11,27)-(11,43)
(11,36)-(11,38)
(11,40)-(11,42)
(13,16)-(13,28)
(13,20)-(13,28)
(13,27)-(13,28)
(15,14)-(15,24)
(15,18)-(15,24)
(15,23)-(15,24)
(17,17)-(17,67)
(17,38)-(17,67)
(17,46)-(17,47)
(17,49)-(17,50)
(17,52)-(17,58)
(17,60)-(17,66)
(19,16)-(19,39)
(19,25)-(19,39)
(19,32)-(19,34)
(19,36)-(19,38)
(21,11)-(21,20)
(21,16)-(21,20)
(23,11)-(23,20)
(23,16)-(23,20)
(25,15)-(43,71)
(26,2)-(43,71)
(26,5)-(26,14)
(26,5)-(26,10)
(26,13)-(26,14)
(27,7)-(27,60)
(27,13)-(27,24)
(27,13)-(27,17)
(27,18)-(27,24)
(27,19)-(27,20)
(27,22)-(27,23)
(27,37)-(27,46)
(27,37)-(27,43)
(27,44)-(27,46)
(27,54)-(27,60)
(29,4)-(43,71)
(29,11)-(29,22)
(29,11)-(29,15)
(29,16)-(29,22)
(29,17)-(29,18)
(29,20)-(29,21)
(30,12)-(30,18)
(31,12)-(31,18)
(32,12)-(32,49)
(32,12)-(32,21)
(32,22)-(32,49)
(32,23)-(32,28)
(32,29)-(32,48)
(32,30)-(32,34)
(32,36)-(32,47)
(32,37)-(32,42)
(32,45)-(32,46)
(33,12)-(33,51)
(33,12)-(33,23)
(33,24)-(33,51)
(33,25)-(33,30)
(33,31)-(33,50)
(33,32)-(33,36)
(33,38)-(33,49)
(33,39)-(33,44)
(33,47)-(33,48)
(35,9)-(36,69)
(35,9)-(35,21)
(36,11)-(36,69)
(36,12)-(36,39)
(36,13)-(36,18)
(36,19)-(36,38)
(36,20)-(36,24)
(36,26)-(36,37)
(36,27)-(36,32)
(36,35)-(36,36)
(36,41)-(36,68)
(36,42)-(36,47)
(36,48)-(36,67)
(36,49)-(36,53)
(36,55)-(36,66)
(36,56)-(36,61)
(36,64)-(36,65)
(38,9)-(39,69)
(38,9)-(38,19)
(39,11)-(39,69)
(39,12)-(39,39)
(39,13)-(39,18)
(39,19)-(39,38)
(39,20)-(39,24)
(39,26)-(39,37)
(39,27)-(39,32)
(39,35)-(39,36)
(39,41)-(39,68)
(39,42)-(39,47)
(39,48)-(39,67)
(39,49)-(39,53)
(39,55)-(39,66)
(39,56)-(39,61)
(39,64)-(39,65)
(41,9)-(43,70)
(41,9)-(41,20)
(42,11)-(43,70)
(42,12)-(42,39)
(42,13)-(42,18)
(42,19)-(42,38)
(42,20)-(42,24)
(42,26)-(42,37)
(42,27)-(42,32)
(42,35)-(42,36)
(42,41)-(42,68)
(42,42)-(42,47)
(42,48)-(42,67)
(42,49)-(42,53)
(42,55)-(42,66)
(42,56)-(42,61)
(42,64)-(42,65)
(43,13)-(43,40)
(43,14)-(43,19)
(43,20)-(43,39)
(43,21)-(43,25)
(43,27)-(43,38)
(43,28)-(43,33)
(43,36)-(43,37)
(43,42)-(43,69)
(43,43)-(43,48)
(43,49)-(43,68)
(43,50)-(43,54)
(43,56)-(43,67)
(43,57)-(43,62)
(43,65)-(43,66)
*)
