
let mult (x,y) = x * y;;

let bigMul l1 l2 =
  let f a x =
    let (m,n) = x in
    let (y,z) = a in
    ((((mult (m, n)) + y) / 10), [((mult (m, n)) + y) mod 10]) @ z in
  let base = (0, []) in
  let args = List.rev (List.combine l1 l2) in
  let (cin,res) = List.fold_left f base args in [cin] @ res;;


(* fix

let mult (x,y) = x * y;;

let bigMul l1 l2 =
  let f a x =
    let (m,n) = x in
    let (y,z) = a in
    ((((mult (m, n)) + y) / 10), ([((mult (m, n)) + y) mod 10] @ z)) in
  let base = (0, []) in
  let args = List.rev (List.combine l1 l2) in
  let (cin,res) = List.fold_left f base args in [cin] @ res;;

*)

(* changed spans
(8,4)-(8,66)
(8,33)-(8,61)
(8,63)-(8,64)
*)

(* type error slice
(8,4)-(8,62)
(8,4)-(8,66)
(8,63)-(8,64)
*)

(* all spans
(2,10)-(2,22)
(2,17)-(2,22)
(2,17)-(2,18)
(2,21)-(2,22)
(4,11)-(11,59)
(4,14)-(11,59)
(5,2)-(11,59)
(5,8)-(8,66)
(5,10)-(8,66)
(6,4)-(8,66)
(6,16)-(6,17)
(7,4)-(8,66)
(7,16)-(7,17)
(8,4)-(8,66)
(8,63)-(8,64)
(8,4)-(8,62)
(8,5)-(8,31)
(8,6)-(8,25)
(8,7)-(8,20)
(8,8)-(8,12)
(8,13)-(8,19)
(8,14)-(8,15)
(8,17)-(8,18)
(8,23)-(8,24)
(8,28)-(8,30)
(8,33)-(8,61)
(8,34)-(8,60)
(8,34)-(8,53)
(8,35)-(8,48)
(8,36)-(8,40)
(8,41)-(8,47)
(8,42)-(8,43)
(8,45)-(8,46)
(8,51)-(8,52)
(8,58)-(8,60)
(8,65)-(8,66)
(9,2)-(11,59)
(9,13)-(9,20)
(9,14)-(9,15)
(9,17)-(9,19)
(10,2)-(11,59)
(10,13)-(10,42)
(10,13)-(10,21)
(10,22)-(10,42)
(10,23)-(10,35)
(10,36)-(10,38)
(10,39)-(10,41)
(11,2)-(11,59)
(11,18)-(11,44)
(11,18)-(11,32)
(11,33)-(11,34)
(11,35)-(11,39)
(11,40)-(11,44)
(11,48)-(11,59)
(11,54)-(11,55)
(11,48)-(11,53)
(11,49)-(11,52)
(11,56)-(11,59)
*)
