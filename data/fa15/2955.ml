
let rec clone x n = if n <= 0 then [] else List.append [x] (clone x (n - 1));;

let padZero l1 l2 =
  let x = List.length l1 in
  let y = List.length l2 in
  if x > y
  then (l1, (List.append (clone 0 (x - y)) l2))
  else if x < y then ((List.append (clone 0 (y - x)) l1), l2) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (lh1,lh2) = x in
      let (carry,res) = a in
      let num = (lh1 + lh2) + carry in ((num / 10), ((num mod 10) :: res)) in
    let base = (0, []) in
    let args = List.rev (List.combine (0 :: l1) (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i <= 0 then [] else bigAdd l (mulByDigit (i - 1) l);;

let bigMul l1 l2 =
  let f a x = mulByDigit x a in
  let base = (0, []) in
  let args = List.rev l1 in let (_,res) = List.fold_left f base args in res;;


(* fix

let rec clone x n = if n <= 0 then [] else List.append [x] (clone x (n - 1));;

let padZero l1 l2 =
  let x = List.length l1 in
  let y = List.length l2 in
  if x > y
  then (l1, (List.append (clone 0 (x - y)) l2))
  else if x < y then ((List.append (clone 0 (y - x)) l1), l2) else (l1, l2);;

let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else l;;

let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (lh1,lh2) = x in
      let (carry,res) = a in
      let num = (lh1 + lh2) + carry in ((num / 10), ((num mod 10) :: res)) in
    let base = (0, []) in
    let args = List.rev (List.combine (0 :: l1) (0 :: l2)) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;

let rec mulByDigit i l =
  if i <= 0 then [] else bigAdd l (mulByDigit (i - 1) l);;

let bigMul l1 l2 =
  let f a x = let (0,res) = a in (0, (mulByDigit x res)) in
  let base = (0, []) in
  let args = List.rev l1 in let (_,res) = List.fold_left f base args in res;;

*)

(* changed spans
(29,14)-(29,28)
(29,27)-(29,28)
*)

(* type error slice
(4,3)-(9,77)
(4,12)-(9,75)
(9,22)-(9,56)
(9,23)-(9,34)
(9,53)-(9,55)
(14,3)-(23,36)
(14,11)-(23,34)
(23,18)-(23,33)
(23,19)-(23,26)
(23,27)-(23,29)
(26,25)-(26,31)
(26,25)-(26,56)
(26,32)-(26,33)
(26,34)-(26,56)
(26,35)-(26,45)
(26,54)-(26,55)
(29,2)-(31,75)
(29,8)-(29,28)
(29,14)-(29,24)
(29,14)-(29,28)
(29,27)-(29,28)
(30,2)-(31,75)
(30,13)-(30,20)
(31,42)-(31,56)
(31,42)-(31,68)
(31,57)-(31,58)
(31,59)-(31,63)
*)

(* all spans
(2,14)-(2,76)
(2,16)-(2,76)
(2,20)-(2,76)
(2,23)-(2,29)
(2,23)-(2,24)
(2,28)-(2,29)
(2,35)-(2,37)
(2,43)-(2,76)
(2,43)-(2,54)
(2,55)-(2,58)
(2,56)-(2,57)
(2,59)-(2,76)
(2,60)-(2,65)
(2,66)-(2,67)
(2,68)-(2,75)
(2,69)-(2,70)
(2,73)-(2,74)
(4,12)-(9,75)
(4,15)-(9,75)
(5,2)-(9,75)
(5,10)-(5,24)
(5,10)-(5,21)
(5,22)-(5,24)
(6,2)-(9,75)
(6,10)-(6,24)
(6,10)-(6,21)
(6,22)-(6,24)
(7,2)-(9,75)
(7,5)-(7,10)
(7,5)-(7,6)
(7,9)-(7,10)
(8,7)-(8,47)
(8,8)-(8,10)
(8,12)-(8,46)
(8,13)-(8,24)
(8,25)-(8,42)
(8,26)-(8,31)
(8,32)-(8,33)
(8,34)-(8,41)
(8,35)-(8,36)
(8,39)-(8,40)
(8,43)-(8,45)
(9,7)-(9,75)
(9,10)-(9,15)
(9,10)-(9,11)
(9,14)-(9,15)
(9,21)-(9,61)
(9,22)-(9,56)
(9,23)-(9,34)
(9,35)-(9,52)
(9,36)-(9,41)
(9,42)-(9,43)
(9,44)-(9,51)
(9,45)-(9,46)
(9,49)-(9,50)
(9,53)-(9,55)
(9,58)-(9,60)
(9,67)-(9,75)
(9,68)-(9,70)
(9,72)-(9,74)
(11,19)-(12,69)
(12,2)-(12,69)
(12,8)-(12,9)
(12,23)-(12,25)
(12,36)-(12,69)
(12,39)-(12,44)
(12,39)-(12,40)
(12,43)-(12,44)
(12,50)-(12,62)
(12,50)-(12,60)
(12,61)-(12,62)
(12,68)-(12,69)
(14,11)-(23,34)
(14,14)-(23,34)
(15,2)-(23,34)
(15,11)-(22,51)
(16,4)-(22,51)
(16,10)-(19,74)
(16,12)-(19,74)
(17,6)-(19,74)
(17,22)-(17,23)
(18,6)-(19,74)
(18,24)-(18,25)
(19,6)-(19,74)
(19,16)-(19,35)
(19,16)-(19,27)
(19,17)-(19,20)
(19,23)-(19,26)
(19,30)-(19,35)
(19,39)-(19,74)
(19,40)-(19,50)
(19,41)-(19,44)
(19,47)-(19,49)
(19,52)-(19,73)
(19,53)-(19,65)
(19,54)-(19,57)
(19,62)-(19,64)
(19,69)-(19,72)
(20,4)-(22,51)
(20,15)-(20,22)
(20,16)-(20,17)
(20,19)-(20,21)
(21,4)-(22,51)
(21,15)-(21,58)
(21,15)-(21,23)
(21,24)-(21,58)
(21,25)-(21,37)
(21,38)-(21,47)
(21,39)-(21,40)
(21,44)-(21,46)
(21,48)-(21,57)
(21,49)-(21,50)
(21,54)-(21,56)
(22,4)-(22,51)
(22,18)-(22,44)
(22,18)-(22,32)
(22,33)-(22,34)
(22,35)-(22,39)
(22,40)-(22,44)
(22,48)-(22,51)
(23,2)-(23,34)
(23,2)-(23,12)
(23,13)-(23,34)
(23,14)-(23,17)
(23,18)-(23,33)
(23,19)-(23,26)
(23,27)-(23,29)
(23,30)-(23,32)
(25,19)-(26,56)
(25,21)-(26,56)
(26,2)-(26,56)
(26,5)-(26,11)
(26,5)-(26,6)
(26,10)-(26,11)
(26,17)-(26,19)
(26,25)-(26,56)
(26,25)-(26,31)
(26,32)-(26,33)
(26,34)-(26,56)
(26,35)-(26,45)
(26,46)-(26,53)
(26,47)-(26,48)
(26,51)-(26,52)
(26,54)-(26,55)
(28,11)-(31,75)
(28,14)-(31,75)
(29,2)-(31,75)
(29,8)-(29,28)
(29,10)-(29,28)
(29,14)-(29,28)
(29,14)-(29,24)
(29,25)-(29,26)
(29,27)-(29,28)
(30,2)-(31,75)
(30,13)-(30,20)
(30,14)-(30,15)
(30,17)-(30,19)
(31,2)-(31,75)
(31,13)-(31,24)
(31,13)-(31,21)
(31,22)-(31,24)
(31,28)-(31,75)
(31,42)-(31,68)
(31,42)-(31,56)
(31,57)-(31,58)
(31,59)-(31,63)
(31,64)-(31,68)
(31,72)-(31,75)
*)
