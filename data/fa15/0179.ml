
let rec digitsOfInt n =
  let rec helper n l = if n = 0 then l else helper (n / 10) ((n mod 10) :: l) in
  match n with | 0 -> [0] | _ -> helper n [];;

let digits n = digitsOfInt (abs n);;

let rec additivePersistence n =
  if (List.length (digits n)) = 1
  then List.hd (digits n)
  else additivePersistence (digits n);;


(* fix

let rec digitsOfInt n =
  let rec helper n l = if n = 0 then l else helper (n / 10) ((n mod 10) :: l) in
  match n with | 0 -> [0] | _ -> helper n [];;

let digits n = digitsOfInt (abs n);;

let rec additivePersistence n =
  if (List.length (digits n)) = 1
  then List.hd (digits n)
  else additivePersistence (n / 10);;

*)

(* changed spans
(11,27)-(11,37)
(11,28)-(11,34)
*)

(* type error slice
(6,3)-(6,36)
(6,11)-(6,34)
(6,27)-(6,34)
(6,28)-(6,31)
(6,32)-(6,33)
(8,3)-(11,39)
(8,28)-(11,37)
(9,18)-(9,28)
(9,19)-(9,25)
(9,26)-(9,27)
(10,7)-(10,14)
(10,7)-(10,25)
(10,15)-(10,25)
(10,16)-(10,22)
(11,7)-(11,26)
(11,7)-(11,37)
(11,27)-(11,37)
(11,28)-(11,34)
*)

(* all spans
(2,20)-(4,44)
(3,2)-(4,44)
(3,17)-(3,77)
(3,19)-(3,77)
(3,23)-(3,77)
(3,26)-(3,31)
(3,26)-(3,27)
(3,30)-(3,31)
(3,37)-(3,38)
(3,44)-(3,77)
(3,44)-(3,50)
(3,51)-(3,59)
(3,52)-(3,53)
(3,56)-(3,58)
(3,60)-(3,77)
(3,61)-(3,71)
(3,62)-(3,63)
(3,68)-(3,70)
(3,75)-(3,76)
(4,2)-(4,44)
(4,8)-(4,9)
(4,22)-(4,25)
(4,23)-(4,24)
(4,33)-(4,44)
(4,33)-(4,39)
(4,40)-(4,41)
(4,42)-(4,44)
(6,11)-(6,34)
(6,15)-(6,34)
(6,15)-(6,26)
(6,27)-(6,34)
(6,28)-(6,31)
(6,32)-(6,33)
(8,28)-(11,37)
(9,2)-(11,37)
(9,5)-(9,33)
(9,5)-(9,29)
(9,6)-(9,17)
(9,18)-(9,28)
(9,19)-(9,25)
(9,26)-(9,27)
(9,32)-(9,33)
(10,7)-(10,25)
(10,7)-(10,14)
(10,15)-(10,25)
(10,16)-(10,22)
(10,23)-(10,24)
(11,7)-(11,37)
(11,7)-(11,26)
(11,27)-(11,37)
(11,28)-(11,34)
(11,35)-(11,36)
*)
