AppG (fromList [AppG (fromList [EmptyG])])
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
exprToString e1 ^ ("+" ^ (exprToString e2 ^ ")/2)"))
exprToString e1 ^ ("*" ^ exprToString e2)
exprToString e1 ^ ("<" ^ (exprToString e2 ^ ("?" ^ (exprToString e3 ^ (":" ^ (exprToString e4 ^ ")"))))))
exprToString e2 ^ ("?" ^ (exprToString e3 ^ (":" ^ (exprToString e4 ^ ")"))))
exprToString e3 ^ (":" ^ (exprToString e4 ^ ")"))
not (List.mem h seen)
sumList (digits n)
digitsOfInt (abs n)
digitsOfInt (abs n)
exprToString e1 ^ ("+" ^ exprToString e2)
exprToString e1 ^ ("+" ^ exprToString e2)
exprToString e1 ^ ("*" ^ exprToString e2)
exprToString e1 ^ ("+" ^ exprToString e2)
sumList (digitsOfInt n)
digitsOfInt (abs n)
List.rev (List.combine l1 l2)
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
f (f (f b))
f (f (f (f b)))
sumList (digits n)
sumList (digits n)
not (List.mem h seen)
x (a g)
x (a g)
x (a g)
x (a g)
x (a g)
x (a g)
x (a g)
x (a g)
x (a g)
x (a g)
sumList (digits n)
listReverse (explode w)
exp b ^ (")/(" ^ (exp c ^ ")"))
exp b ^ (")/(" ^ (exp c ^ ")"))
exp b ^ (")/(" ^ (exp c ^ ")"))
buildSine (build (rand , depth - 1))
buildCosine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildCosine (build (rand , depth - 1))
buildCosine (build (rand , depth - 1))
buildCosine (build (rand , depth - 1))
exprToString expr ^ ("^2-" ^ (exprToString expr ^ "-1)"))
digitalRoot (sumList (digitsOfInt n))
sumList (digitsOfInt n)
sumList (digitsOfInt x)
sumList (digitsOfInt x)
sumList (digitsOfInt x)
List.rev ([0] @ l1)
List.combine (List.rev (0 :: l1))
             (List.rev (0 :: l2))
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
int_of_string (sepConcat ""
                         (List.map string_of_int l))
intListToInt (mulByDigit (intListToInt l1)
                         [s])
int_of_string (sepConcat ""
                         (List.map string_of_int l))
int_of_string (sepConcat ""
                         (List.map string_of_int l))
intListToInt (mulByDigit (intListToInt l1)
                         [s])
intListToInt (mulByDigit (intListToInt l1)
                         [s])
carryFunc (mulByDigit (intListToInt l1)
                      [s])
exprToString e ^ ("*" ^ exprToString f)
exprToString g ^ ("<" ^ (exprToString h ^ ("?" ^ (exprToString i ^ (":" ^ (exprToString j ^ ")"))))))
exprToString h ^ ("?" ^ (exprToString i ^ (":" ^ (exprToString j ^ ")"))))
exprToString i ^ (":" ^ (exprToString j ^ ")"))
exprToString e ^ ("*" ^ exprToString f)
exprToString g ^ ("<" ^ (exprToString h ^ ("?" ^ (exprToString i ^ (":" ^ (exprToString j ^ ")"))))))
exprToString h ^ ("?" ^ (exprToString i ^ (":" ^ (exprToString j ^ ")"))))
exprToString i ^ (":" ^ (exprToString j ^ ")"))
x (a b)
additivePersistence (sumList x)
additivePersistence (sumList x)
additivePersistence (sumList (digits n))
sumList (digits n)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
x (a f')
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
buildSine (build (rand , depth - 1))
log (eval (nlog , x , y))
log (eval (nlog , x , y))
log (eval (nlog , x , y))
log (eval (nlog , x , y))
log (eval (nlog , x , y))
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
sumList (digitsOfInt n)
listReverse (explode w)
listReverse (explode w)
buildSine (build (rand , depth - 1))
exprToString e ^ ("*" ^ exprToString e)
sumList (digits n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
sumList (digitsOfInt n)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
List.rev (helper l1 l2)
sqrt (d ** d)
List.rev (List.combine l1 l2)
x (a y)
not (List.mem h l)
List.rev (List.combine l1 l2)
x (a x')
exprToString y ^ ("+" ^ (exprToString y ^ ")/2)"))
exprToString x ^ ("*" ^ exprToString y)
exprToString y ^ ("+" ^ (exprToString y ^ ")/2)"))
exprToString x ^ ("*" ^ exprToString y)
exprToString y ^ ("+" ^ (exprToString y ^ ")/2)"))
exprToString x ^ ("*" ^ exprToString y)
exprToString x ^ ("*" ^ exprToString y)
exprToString x ^ ("*" ^ exprToString y)
exprToString x ^ ("*" ^ exprToString y)
exprToString x ^ ("*" ^ exprToString y)
exprToString e ^ ("*" ^ exprToString e)
exprToString e ^ ("*" ^ exprToString e)
matchHeads (loseTail t)
matchHeads (getTail (listReverse t))
matchHeads (getTail (listReverse t))
matchHeads (getTail (listReverse t))
matchHeads (getTail (listReverse t))
matchHeads (getTail (listReverse t))
matchHeads (explode w)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
List.rev (List.combine l1 l2)
x (a b)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
bigAdd total (mulByDigit x
                         l2) @ listZeros pow
bigAdd total (mulByDigit x
                         l2) @ listZeros pow
atan (eval (e1 , x , y))
atan (eval (e1 , x , y))
atan (eval (e1 , x , y))
atan (eval (e1 , x , y))
atan (eval (e1 , x , y))
atan (eval (e1 , x , y))
listReverse (explode w)
exprToString i ^ ("*" ^ exprToString i)
exprToString i1 ^ ("^" ^ exprToString i2)
additivePersistence (sumList (digits n))
mulByDigit i
           t' @ ([remainder h'
                            i + carry h i] @ [remainder h
                                                        i])
List.rev (List.combine l1 l2)
x (a y)
x (a y)
x (a y)
x (a y)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
x (x a)
not (List.mem h seen)
not (List.mem h seen)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
add (padZero l1 l2)
List.rev (List.combine l1 l2)
add (padZero l1 l2)
List.rev (List.combine l1 l2)
add (padZero l1 l2)
List.rev (List.combine l1 l2)
add (padZero l1 l2)
