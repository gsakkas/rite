AppG (fromList [AppG (fromList [EmptyG])])
List.tl (List.rev (h1 :: t1))
List.tl (List.rev (h1 :: t1))
List.rev (List.tl (List.rev (h1 :: t1)))
List.tl (List.rev (h1 :: t1))
List.rev (List.tl (List.rev (h1 :: t1)))
List.tl (List.rev (h1 :: t1))
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
additivePersistence (sumList (digits n))
sumList (digits n)
additivePersistence (sumList (digits n))
sumList (digits n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
listReverse (digitsOfInt (n / 10))
listReverse (digitsOfInt (n / 10))
listReverse (explode w)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
listReverse (explode w)
buildCosine (build (rand , depth - 1))
exprToString e3 ^ exprToString e4
exprToString e3 ^ exprToString e4
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
int_of_float (float_of_int x ** 2.0)
int_of_float (float_of_int x ** 2.0)
int_of_float (float_of_int x ** 2.0)
List.rev (List.combine l1 l2)
sumList (digits n)
List.rev (helper ([] , l))
digitalRoot (sumDigits n)
sumList (digitsOfInt n)
sumList (List.tl xs)
sumList (digitsOfInt n)
listReverse (xxx n)
listReverse (List.tl l)
sumList (List.tl xs)
sumList (List.tl xs)
sumList (List.tl xs)
sumList (List.tl xs)
sumList (List.tl xs)
x (a v)
List.rev (List.combine l1 l2)
x (a c)
x (a c)
x (a i)
x (a i)
List.rev (removeZero (add (padZero l1
                                   l2)))
removeZero (add (padZero l1
                         l2))
x (a l)
x (a l)
abs_float (eval (e2 , x , y))
snd (f b)
fst (f b)
fst (f b)
additivePersistence (digitSum (digits n))
digitSum (digits n)
listReverse (explode w)
abs_float (cos (pi *. eval (e' , x , y)))
abs_float (sin ((cos (pi *. eval (e1 , x , y)) *. cos (pi *. eval (e2 , x , y))) *. cos (pi *. eval (e3 , x , y))))
abs_float (sin ((cos (pi *. eval (e1 , x , y)) *. cos (pi *. eval (e2 , x , y))) *. cos (pi *. eval (e3 , x , y))))
sumList (digits n)
pair (List.rev l1)
     (List.rev l2)
add (padZero l1 l2)
not (List.mem h seen)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
buildCosine (build (rand , depth - 1))
int_of_float (10.0 ** float_of_int pos)
int_of_float (10.0 ** float_of_int pos)
int_of_float (10.0 ** float_of_int pos)
bigAdd (bigAdd l l)
       (mulByDigit (i - 1) l)
bigAdd (bigAdd l l)
       (mulByDigit (i - 1) l)
x (a y)
x (a y)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
x (a z)
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
x (a k)
x (a k)
listReverse (explode w)
buildSine (build (rand , depth - 1))
exprToString x ^ ("*" ^ (exprToString y ^ ")/2)"))
exprToString x ^ ("*" ^ exprToString y)
exprToString a ^ ("<" ^ (exprToString b ^ ("?" ^ (exprToString c ^ (":" ^ exprToString d)))))
exprToString b ^ ("?" ^ (exprToString c ^ (":" ^ exprToString d)))
exprToString c ^ (":" ^ exprToString d)
exprToString x ^ ("*" ^ (exprToString y ^ ")/2)"))
exprToString x ^ ("*" ^ exprToString y)
exprToString a ^ ("<" ^ (exprToString b ^ ("?" ^ (exprToString c ^ (":" ^ exprToString d)))))
exprToString b ^ ("?" ^ (exprToString c ^ (":" ^ exprToString d)))
exprToString c ^ (":" ^ exprToString d)
exprToString c ^ (":" ^ exprToString d)
sumList (List.tl xs)
additivePersistence (sumList (digits n))
sumList (digits n)
listReverse (append t [h])
helper (sumList (digits x))
sumList (digits x)
sumList (digits x)
mulHelper (List.rev (0 :: l))
additivePersistence (sumList (digits n))
sumList (digits n)
sumList (digits n)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
bigAdd (List.rev (0 :: (List.rev a)))
       (mulByDigit x l2)
removeZero (List.fold_left f
                           base args)
cos (pi ** eval (a , x , y))
sin (pi ** eval (a , x , y))
sin (pi ** eval (a , x , y))
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
List.combine (List.rev l1)
             (List.rev l2)
sin (eval (a , x , y))
cos (eval (a , x , y))
List.combine (List.rev l1)
             (List.rev l2)
x (a j)
bigAdd (bigAdd l l)
       (mulByDigit (i - 2) l)
bigAdd (bigAdd l l)
       (mulByDigit (i - 2) l)
bigAdd (bigAdd l l)
       (mulByDigit (i - 2) l)
bigAdd (bigAdd l l)
       (mulByDigit (i - 2) l)
buildSine (build (rand , depth - 1))
buildCosine (build (rand , depth - 1))
additivePersistence (sumList (digits n))
sumList (digits n)
additivePersistence (sumList (digits n))
sumList (digits n)
sumList (digits n)
buildSine (buildhelper 0 0
                       expr)
buildCosine (buildhelper 0 0
                         expr)
buildCosine (buildhelper 0 0
                         expr)
buildSine (buildhelper 0 0
                       expr)
buildCosine (buildhelper 0 0
                         expr)
buildCosine (buildhelper 0 0
                         expr)
getTail (getSum a)
exprToString b ^ (exprToString c ^ ")/3)")
exprToString b ^ (exprToString c ^ ")/3)")
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
buildCosine (build (rand , depth - 1))
sumList (List.tl xs)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
a (x y)
additivePersistence (help n)
sumList (List.tl xs)
exprToString var3 ^ (" + " ^ (exprToString var4 ^ ")/2)"))
exprToString var5 ^ (" * " ^ exprToString var6)
exprToString var7 ^ ("<" ^ (exprToString var8 ^ (" ? " ^ (exprToString var9 ^ (" : " ^ (exprToString var0 ^ ")"))))))
exprToString var8 ^ (" ? " ^ (exprToString var9 ^ (" : " ^ (exprToString var0 ^ ")"))))
exprToString var9 ^ (" : " ^ (exprToString var0 ^ ")"))
listReverse (cat l h)
listReverse (cat l h)
listReverse (cat l h)
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
List.rev (List.combine l1 l2)
removeZero (add (padZero l1
                         l2))
List.rev (List.combine l1 l2)
bigAdd (mulByDigit i
                   (List.rev (List.map (fun x ->
                                          x * 10) t)))
       (helper [] (h * i))
bigAdd (mulByDigit i
                   (List.rev (List.map (fun x ->
                                          x * 10) t)))
       (helper [] (h * i))
sumList (digitsOfInt n)
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
additivePersistence (sumList (digitsOfInt n))
additivePersistence (sumList (digitsOfInt n))
additivePersistence (sumList (digitsOfInt n))
sumList (digitsOfInt n)
additivePersistence (sumList (digitsOfInt n))
List.rev (digitsOfInt (n / 10))
