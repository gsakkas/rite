AppG [AppG [EmptyG],ListG EmptyG Nothing]
listReverse tl @ [hd]
listReverse tl @ [hd]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
listReverse t @ []
listReverse t @ [h]
listReverse t @ [h]
listReverse t @ [h]
listReverse t @ [h]
listReverse t @ [h]
digitsOfInt (n / 10) @ [n mod 10]
listReverse t @ [h]
listReverse b @ [a]
listReverse b @ [a]
listReverse b @ [a]
listReverse b @ [a]
digitsOfInt (n / 10) @ [n mod 10]
append_new (listReverse tail)
           [head]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
listReverse t @ [h]
append (listReverse t) [h]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
append (helper (n / 10))
       [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
listReverse t @ [h]
listReverse t @ [h]
digitsOfInt (n / 10) @ [n mod 10]
listReverse l' @ [x]
intlist (x / 10) @ [x mod 10]
intlist (x / 10) @ [x mod 10]
append (digitsOfInt (n / 10))
       [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
app (digitsOfInt (n / 10))
    [n mod 10]
app (digitsOfInt (n / 10))
    [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
digitsOfInt (n / 10) @ [n mod 10]
List.append (List.rev (List.combine l1
                                    l2)) [(0 , 0)]
helper t1 @ [h1 mod 10]
