BopG VarG (AppG [EmptyG])
pi *. eval (a , x , y)
pi *. eval (a , x , y)
x + sumList xs'
x + sumList xs'
pi *. eval (a , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e2 , x , y)
pi *. eval (e , x , y)
pi *. eval (e , x , y)
pi *. eval (a , x , y)
pi *. eval (a , x , y)
pi *. eval (a , x , y)
pi *. eval (a , x , y)
pi *. eval (e1 , x , y)
a + int_of_float (float_of_int x ** 2.0)
pi *. eval (i , x , y)
pi *. eval (i , x , y)
pi *. eval (i , x , y)
pi *. eval (e , x , y)
pi *. eval (e , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
n - List.hd ((n mod 10) :: ns)
pi *. eval (e' , x , y)
pi *. eval (a , x , y)
pi *. eval (a , x , y)
pi *. eval (a , x , y)
pi *. eval (u , x , y)
pi *. eval (u , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. cos (pi *. eval (e1 , x , y))
pi *. eval (e1 , x , y)
pi *. cos (pi *. eval (e1 , x , y))
pi *. cos (pi *. eval (e1 , x , y))
pi *. eval (v , x , y)
pi *. eval (v , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e' , x , y)
pi *. eval (e' , x , y)
xx = h x
b = f b
b = f b
b = f b
b = f b
b = f b
b = f b
b = f b
pi *. eval (s1 , x , y)
pi *. eval (c1 , x , y)
pi *. eval (s1 , x , y)
pi *. eval (c1 , x , y)
pi *. eval (a , x , y)
pi *. eval (a , x , y)
pi *. eval (t , x , y)
pi *. eval (t , x , y)
pi *. eval (t , x , y)
pi *. eval (t , x , y)
pi *. eval (t , x , y)
pi *. eval (t , x , y)
b = f b
b = f b
pi *. eval (e0 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e1 , x , y)
pi *. eval (e , 0.0 , 0.0)
pi *. eval (var1 , x , y)
pi *. eval (var2 , x , y)
pi *. eval (ex , x , y)
pi *. eval (ex , x , y)
pi *. eval (ex2 , x , y)
pi *. eval (ex3 , x , y)
h + sumList t
explosion = listReverse explosion
pi *. eval (ex , x , y)
pi *. eval (ex , x , y)
pi *. eval (ex , x , y)
pi *. eval (ex , x , y)
