// assumption airlines actsfor AirlineA is missing at line 31

import java.io.PrintStream;
import jif.runtime.Runtime;

public class AirlineExample [principal AirlineA, principal AirlineB, principal TheUser, principal Broker] 
    authority (AirlineA, AirlineB, TheUser, Broker)
    where Broker actsfor AirlineA,  Broker actsfor AirlineB, Broker actsfor TheUser, provider actsfor Broker
{
    public AirlineExample () {
	// constructor
    }

    protected PrintStream[{}]{} output  ;

    public void go { ‚ä§ <-  } (PrintStream[{}] {} output ) where authority (AirlineA, AirlineB, TheUser, Broker), provider <= {Broker <- }, 
	 {*AirlineServer.provider} <= {AirlineA <- },  {*AirlineServer.provider } <= {AirlineB <- },
         {*AirlineAgent.provider } <= {AirlineA <- },  {*AirlineAgent.provider  } <= {AirlineB <- },

	 {*IAirlineServer.provider} equiv {*provider}, {*IAirlineServer.provider} <= {*AirlineServer.provider},
         {*IAirlineServer.provider} <= {*AirlineAgent.provider},  {*AirlineServer.provider} equiv {*AirlineAgent.provider}

    {
	this.output = output; 
	println ("Starting Airline example");

	final principal airlines = new principal (AirlineA & AirlineB) ;
	final label  lbl = new label {TheUser -> ; TheUser <-; airlines -> ; airlines <-};

	// holds by construction, dancing around type system... 
	if (/* airlines actsfor AirlineA && */ airlines actsfor AirlineB && 
	    ( new label {AirlineA ->; AirlineA <-} <= lbl) &&  (new label {AirlineB ->; AirlineB <-} <= lbl)  ) {

	    IAirlineServer [AirlineA, airlines,  lbl] a = new AirlineServer [AirlineA, airlines, lbl] (10, 10);
	    IAirlineServer [AirlineB, airlines,  lbl] b = new AirlineServer [AirlineB, airlines, lbl] (20, 10);

	    User [TheUser, lbl ] user = new User();

	    AirlineAgent [ AirlineA, airlines, lbl ]  agentA = a.getAgent();
	    AirlineAgent [ AirlineB, airlines, lbl ]  agentB = b.getAgent();

	    UserChoice [lbl] choice = user.getChoice();

	    agentA.prepareForAuction();
	    agentB.prepareForAuction(); 

	    // this variable stores the winning agent. When winner == 0 we have no winner yet
	    int winner = 0;



	    Offer [lbl] offerA;
	    Offer [lbl] offerB = agentB.makeFirstOffer();


	    // main auction loop 
	    while (winner == 0) { 
		offerA = agentA.makeOffer (choice, offerB); // makeOffer returns null if it can't compete anymore.
		if (offerA == null) { 
		    winner = 2; // declare that B is the winning agent 
		    break;
		}
		offerB = agentB.makeOffer (choice, offerA);
		if (offerB == null)  {
		    winner = 1; // declare that A is the winning agent
		}
	     }


	    // with enough authority we can declassify anything... ;-) 
	    // 

	    int {TheUser ->; airlines ->; Broker <-} w0 = endorse (winner, {*lbl} to {*provider; TheUser ->; airlines ->; Broker <-} );

	    if (Broker actsfor airlines) {
		int {} w = declassify ( w0, {} ); 
		println ("Ending Airline example with winner " + w);
	    }
	}
    }

    public void println {} (String {} x) where provider <= {Broker <- }  { // encapsulate output so fatal error analysis kicks in... 
	    output.println (x) ; 
    }
}

