-   
OCaml           # Objective Caml toplevel
Usage: ocaml <options>
options are:
  -I <dir>  Add <dir> to the list of include directories
  -unsafe  No bound checking on array and string access
  -drawlambda  (undocumented)
  -dlambda  (undocumented)
  -dinstr  (undocumented)
  -rectypes  (undocumented)

-   
OCamlc          # Objective Caml compiler
Usage: ocamlc <options> <files>
Options are:
  -a  Build a library
  -c  Compile only (do not link)
  -cc <comp>  Use <comp> as the C compiler and linker
  -cclib <opt>  Pass option <opt> to the C linker
  -ccopt <opt>  Pass option <opt> to the C compiler and linker
  -g  Save debugging information
  -i  Print the types
  -I <dir>  Add <dir> to the list of include directories
  -impl <file>  Compile <file> as a .ml file
  -intf <file>  Compile <file> as a .mli file
  -intf-suffix <file>  Suffix for interface file (default: .mli)
  -intf_suffix <file>  (deprecated) same as -intf-suffix
  -linkall  Link all modules, even unused ones
  -make-runtime  Build a runtime system with given C objects and libraries
  -make_runtime  (deprecated) same as -make-runtime
  -noassert  Do not compile assertion checks
  -o <file>  Set output file name to <file>
  -output-obj Output a C object file instead of an executable
  -pp <command>  Pipe sources through preprocessor <command>
  -thread  Use thread-safe standard library
  -unsafe  No bounds checking on array and string access
  -use-runtime <path>  Generate bytecode for the given runtime system
  -use_runtime <path>  (deprecated) same as -use-runtime
  -v  Print compiler version number
  -verbose  Print calls to external commands
  -w <flags>  Enable or disable warnings according to <flags>:
     A/a enable/disable all warnings
     C/c enable/disable suspicious comment
     F/f enable/disable partially applied function
     M/m enable/disable overriden method
     P/p enable/disable partial match
     S/s enable/disable non-unit statement
     U/u enable/disable unused match case
     V/v enable/disable hidden instance variable
     X/x enable/disable all other warnings
     default setting is A (all warnings enabled)
  -nopervasives  (undocumented)
  -dparsetree  (undocumented)
  -drawlambda  (undocumented)
  -dlambda  (undocumented)
  -dinstr  (undocumented)
  -use-prims <file>  (undocumented)
  -rectypes  (undocumented)
  - <file>  Treat <file> as a file name (even if it starts with `-')

-   
OCamlc-custom   # Objective Caml compiler for custom runtime mode
Usage: ocamlc-custom <options> <files>
Options are:
  -a  Build a library
  -c  Compile only (do not link)
  -cc <comp>  Use <comp> as the C compiler and linker
  -cclib <opt>  Pass option <opt> to the C linker
  -ccopt <opt>  Pass option <opt> to the C compiler and linker
  -g  Save debugging information
  -i  Print the types
  -I <dir>  Add <dir> to the list of include directories
  -impl <file>  Compile <file> as a .ml file
  -intf <file>  Compile <file> as a .mli file
  -intf-suffix <file>  Suffix for interface file (default: .mli)
  -intf_suffix <file>  (deprecated) same as -intf-suffix
  -linkall  Link all modules, even unused ones
  -make-runtime  Build a runtime system with given C objects and libraries
  -make_runtime  (deprecated) same as -make-runtime
  -noassert  Do not compile assertion checks
  -o <file>  Set output file name to <file>
  -output-obj Output a C object file instead of an executable
  -pp <command>  Pipe sources through preprocessor <command>
  -thread  Use thread-safe standard library
  -unsafe  No bounds checking on array and string access
  -use-runtime <path>  Generate bytecode for the given runtime system
  -use_runtime <path>  (deprecated) same as -use-runtime
  -v  Print compiler version number
  -verbose  Print calls to external commands
  -w <flags>  Enable or disable warnings according to <flags>:
     A/a enable/disable all warnings
     C/c enable/disable suspicious comment
     F/f enable/disable partially applied function
     M/m enable/disable overriden method
     P/p enable/disable partial match
     S/s enable/disable non-unit statement
     U/u enable/disable unused match case
     V/v enable/disable hidden instance variable
     X/x enable/disable all other warnings
     default setting is A (all warnings enabled)
  -nopervasives  (undocumented)
  -dparsetree  (undocumented)
  -drawlambda  (undocumented)
  -dlambda  (undocumented)
  -dinstr  (undocumented)
  -use-prims <file>  (undocumented)
  -rectypes  (undocumented)
  - <file>  Treat <file> as a file name (even if it starts with `-')

-   
OCamlDep        # Objective Caml dependency generator
Usage: ocamldep [-I <dir>] <files>
  -I <dir>  Add <dir> to the list of include directories

-   
OCamlLex        # Objective Caml lexer generator
OCamlLex name.mll

-   
OCamlRun        # Objective Caml bytecode interpreter
OCamlRun [-v] file [arguments…]
    -v                      # print GC messages

Environment variable:
Set -e OCamlRunParam "<option>=<value>,…"
    h     # initial size of the major heap
    i     # minimum size increment for the major heap
    l     # maximum stack size
    o     # major GC speed setting
    O     # heap compaction trigger setting
    s     # size of the minor heap
    v     # verbosity flags for GC messages

-   
OCamlYacc       # Objective Caml parser generator
OCamlYacc [-v] [-b string] file.mly
    -v                      # put verbose report in file.output
    -b string               # name output files string.ml and string.mli
