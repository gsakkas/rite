{"root":82,"result":"stuck","reason":"Type error : could not match 't26 list with int","bad":44,"stuck":56,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":2,"label":"StepsTo CallStep"},{"arrows":"to","to":31,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":3,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":99,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":4,"label":"StepsTo ReturnStep"},{"arrows":"to","to":2,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":6,"label":"StepsTo CallStep"},{"arrows":"to","to":1,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":8,"label":"StepsTo ReturnStep"},{"arrows":"to","to":7,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":9,"label":"StepsTo ReturnStep"},{"arrows":"to","to":95,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":10,"label":"StepsTo PrimStep"},{"arrows":"to","to":12,"from":11,"label":"SubTerm 2"},{"arrows":"to","to":40,"from":11,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":13,"label":"StepsTo PrimStep"},{"arrows":"to","to":7,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":14,"label":"StepsTo PrimStep"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":14,"label":"SubTerm 2"},{"arrows":"to","to":99,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":15,"label":"StepsTo PrimStep"},{"arrows":"to","to":103,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":112,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":18,"label":"StepsTo CallStep"},{"arrows":"to","to":12,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":19,"label":"StepsTo PrimStep"},{"arrows":"to","to":20,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":20,"label":"StepsTo PrimStep"},{"arrows":"to","to":30,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":21,"label":"StepsTo BoringStep"},{"arrows":"to","to":22,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":25,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":26,"label":"StepsTo CallStep"},{"arrows":"to","to":28,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":28,"label":"StepsTo CallStep"},{"arrows":"to","to":37,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":30,"label":"StepsTo PrimStep"},{"arrows":"to","to":34,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":118,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":32,"label":"SubTerm 2"},{"arrows":"to","to":124,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":119,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":36,"label":"SubTerm 2"},{"arrows":"to","to":49,"from":36,"label":"StepsTo CallStep"},{"arrows":"to","to":57,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":40,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":40,"label":"StepsTo PrimStep"},{"arrows":"to","to":57,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":26,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":41,"label":"StepsTo CallStep"},{"arrows":"to","to":57,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":42,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":48,"label":"StepsTo CallStep"},{"arrows":"to","to":47,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":49,"label":"SubTerm 2"},{"arrows":"to","to":56,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":51,"label":"SubTerm 2"},{"arrows":"to","to":52,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":78,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":45,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":56,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":58,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":63,"label":"StepsTo CallStep"},{"arrows":"to","to":1,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":70,"label":"StepsTo PrimStep"},{"arrows":"to","to":111,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":72,"label":"SubTerm 2"},{"arrows":"to","to":44,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":73,"label":"StepsTo CallStep"},{"arrows":"to","to":108,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":96,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":76,"label":"StepsTo CallStep"},{"arrows":"to","to":101,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":77,"label":"StepsTo BoringStep"},{"arrows":"to","to":84,"from":77,"label":"SubTerm 2"},{"arrows":"to","to":90,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":79,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":79,"label":"StepsTo ReturnStep"},{"arrows":"to","to":57,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":111,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":83,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":82,"label":"StepsTo CallStep"},{"arrows":"to","to":123,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":84,"label":"SubTerm 2"},{"arrows":"to","to":106,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":85,"label":"StepsTo BoringStep"},{"arrows":"to","to":110,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":87,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":87,"label":"StepsTo PrimStep"},{"arrows":"to","to":15,"from":90,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":91,"label":"StepsTo BoringStep"},{"arrows":"to","to":50,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":93,"label":"SubTerm 2"},{"arrows":"to","to":18,"from":93,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":85,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":94,"label":"StepsTo PrimStep"},{"arrows":"to","to":4,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":95,"label":"StepsTo ReturnStep"},{"arrows":"to","to":29,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":101,"label":"StepsTo CallStep"},{"arrows":"to","to":99,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":108,"label":"StepsTo CallStep"},{"arrows":"to","to":7,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":108,"from":110,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":111,"label":"StepsTo PrimStep"},{"arrows":"to","to":94,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":117,"label":"StepsTo BoringStep"},{"arrows":"to","to":109,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":112,"from":122,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,1,"Redex"]],"id":0,"label":"sumList (if n < 1\n         then []\n         else digitsOfInt (n / 10) @ [n mod 10]) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":41},"env":[],"annots":[],"id":1,"label":"10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,15,"Redex"]],"id":2,"label":"digitsOfInt (digitsOfInt 0)"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[0,13,"Redex"]],"id":3,"label":"digitsOfInt 0"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[0,54,"Redex"]],"id":4,"label":"if true\nthen []\nelse digitsOfInt (n / 10) @ [n mod 10]"},{"span":null,"env":[],"annots":[],"id":5,"label":"true"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[21,15,"Redex"]],"id":6,"label":"sumList (digitsOfInt (digitsOfInt 0))"},{"span":{"startLine":13,"endLine":13,"endCol":13,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"]],"annots":[],"id":7,"label":"sumList"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[21,100,"Redex"]],"id":8,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else digitsOfInt (n / 10) @ [n mod 10])) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[21,100,"Redex"]],"id":9,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else digitsOfInt (n / 10) @ [n mod 10]))"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":10,"label":"sumList (digitsOfInt (digitsOfInt (abs 0))) < 10"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[42,1,"Redex"]],"id":11,"label":"if sumList (digitsOfInt (digitsOfInt (abs n))) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":8},"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[50,1,"Redex"]],"id":12,"label":"additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":13,"label":"sumList (digitsOfInt (digitsOfInt (abs 0)))"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[3,5,"Redex"]],"id":14,"label":"if 0 < 1\nthen []\nelse digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,5,"Redex"]],"id":15,"label":"0 < 1"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":16,"label":"digits n"},{"span":{"startLine":15,"endLine":15,"endCol":57,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":17,"label":"digits"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[24,10,"Redex"]],"id":18,"label":"if sumList (digitsOfInt (digits 0)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":19,"label":"digitsOfInt (digitsOfInt (abs 0))"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":20,"label":"digitsOfInt (abs 0)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[30,1,"Redex"]],"id":21,"label":"digitsOfInt (digitsOfInt (abs n))"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[17,1,"Redex"]],"id":22,"label":"digitsOfInt (abs n)"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":22},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":23,"label":"n / 10"},{"span":{"startLine":4,"endLine":4,"endCol":23,"startCol":22},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":24,"label":"n"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,1,"Redex"]],"id":25,"label":"sumList (if n < 1\n         then []\n         else digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[21,15,"Redex"]],"id":26,"label":"sumList (digitsOfInt (digitsOfInt 0)) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":27,"label":"digitsOfInt (digits n)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[12,10,"Redex"]],"id":28,"label":"digitsOfInt (digits 0)"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":29,"label":"digitsOfInt (digits n)"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":29},"env":[],"annots":[],"id":30,"label":"abs 0"},{"span":null,"env":[],"annots":[],"id":31,"label":"0"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","[]"]],"annots":[[13,1,"Redex"],[24,1,"Redex"]],"id":32,"label":"digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","[]"]],"annots":[[13,1,"Redex"]],"id":33,"label":"digitsOfInt (n / 10)"},{"span":{"startLine":6,"endLine":6,"endCol":32,"startCol":29},"env":[],"annots":[],"id":34,"label":"abs"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","[]"]],"annots":[[12,6,"Redex"]],"id":35,"label":"sumList (if [] < 1\n         then []\n         else digitsOfInt (n / 10) @ [n mod 10]) < 10"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[11,16,"Redex"]],"id":36,"label":"if sumList (digitsOfInt []) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":26,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":37,"label":"digitsOfInt"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":34},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":38,"label":"n mod 10"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":40},"env":[],"annots":[],"id":39,"label":"10"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":40,"label":"if sumList (digitsOfInt (digitsOfInt (abs 0))) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[24,15,"Redex"]],"id":41,"label":"if sumList (digitsOfInt (digitsOfInt 0)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[28,1,"Redex"]],"id":42,"label":"if sumList (digitsOfInt (if n < 1\n                         then []\n                         else digitsOfInt (n / 10) @ [n mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":33},"env":[["n","[]"]],"annots":[[1,1,"Redex"]],"id":43,"label":"[n mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":44,"label":"[] < 1"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":45,"label":"1"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":28},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":46,"label":"digits n"},{"span":{"startLine":13,"endLine":13,"endCol":34,"startCol":28},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":47,"label":"digits"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":28},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[0,8,"Redex"]],"id":48,"label":"digits 0"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[15,1,"Redex"]],"id":49,"label":"if sumList (if n < 1\n            then []\n            else digitsOfInt (n / 10) @ [n mod 10]) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[39,1,"Redex"]],"id":50,"label":"sumList (digitsOfInt (digitsOfInt (abs n)))"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["n","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[3,1,"Redex"]],"id":51,"label":"if n < 1\nthen []\nelse digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":52,"label":"n < 1"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":53,"label":"digitsOfInt"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","[]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[15,6,"Redex"]],"id":56,"label":"if sumList (if [] < 1\n            then []\n            else digitsOfInt (n / 10) @ [n mod 10]) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":14,"endLine":14,"endCol":9,"startCol":8},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":57,"label":"n"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[16,1,"Redex"]],"id":58,"label":"digitsOfInt (if n < 1\n             then []\n             else digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":22},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":59,"label":"n / 10"},{"span":{"startLine":4,"endLine":4,"endCol":23,"startCol":22},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":60,"label":"n"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[8,16,"Redex"]],"id":63,"label":"sumList (digitsOfInt []) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[25,5,"Redex"]],"id":70,"label":"sumList (digitsOfInt (if 0 < 1\n                      then []\n                      else digitsOfInt (n / 10) @ [n mod 10])) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":35},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":71,"label":"n"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","[]"]],"annots":[[3,6,"Redex"]],"id":72,"label":"if [] < 1\nthen []\nelse digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":73,"label":"sumList (digitsOfInt (digits 0)) < 10"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":33},"env":[["n","0"]],"annots":[[1,1,"Redex"]],"id":74,"label":"[n mod 10]"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":34},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":75,"label":"n mod 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[8,16,"Redex"]],"id":76,"label":"sumList (digitsOfInt [])"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["n","0"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[3,1,"Redex"]],"id":77,"label":"if n < 1\nthen []\nelse digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":3,"endLine":3,"endCol":10,"startCol":8},"env":[],"annots":[],"id":78,"label":"[]"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[24,106,"Redex"]],"id":79,"label":"if sumList (digitsOfInt (if true\n                         then []\n                         else digitsOfInt (n / 10) @ [n mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":40},"env":[],"annots":[],"id":80,"label":"10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[25,1,"Redex"]],"id":81,"label":"sumList (digitsOfInt (if n < 1\n                      then []\n                      else digitsOfInt (n / 10) @ [n mod 10]))"},{"span":null,"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[0,21,"Redex"]],"id":82,"label":"additivePersistence 0"},{"span":null,"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":83,"label":"additivePersistence"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[13,1,"Redex"],[24,1,"Redex"]],"id":84,"label":"digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":85,"label":"sumList (digitsOfInt (digits n)) < 10"},{"span":null,"env":[],"annots":[],"id":86,"label":"0"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[28,5,"Redex"]],"id":87,"label":"if sumList (digitsOfInt (if 0 < 1\n                         then []\n                         else digitsOfInt (n / 10) @ [n mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":90,"label":"n < 1"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[39,1,"Redex"]],"id":91,"label":"sumList (digitsOfInt (digitsOfInt (abs n))) < 10"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":29},"env":[["n","0"]],"annots":[[4,1,"Redex"]],"id":92,"label":"abs n"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[32,1,"Redex"]],"id":93,"label":"if sumList (digitsOfInt (digits n)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[16,5,"Redex"]],"id":94,"label":"digitsOfInt (if 0 < 1\n             then []\n             else digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[12,82,"Redex"]],"id":95,"label":"digitsOfInt (if true\n             then []\n             else digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":4,"endLine":4,"endCol":35,"startCol":34},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":96,"label":"n"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":29},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":97,"label":"sumList (digitsOfInt (digits n))"},{"span":null,"env":[],"annots":[],"id":99,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[25,1,"Redex"]],"id":100,"label":"sumList (digitsOfInt (if n < 1\n                      then []\n                      else digitsOfInt (n / 10) @ [n mod 10])) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[0,14,"Redex"]],"id":101,"label":"digitsOfInt []"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":103,"label":"1"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":26},"env":[],"annots":[],"id":104,"label":"10"},{"span":{"startLine":15,"endLine":15,"endCol":49,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":105,"label":"digitsOfInt"},{"span":{"startLine":4,"endLine":4,"endCol":32,"startCol":31},"env":[],"annots":[],"id":106,"label":"@"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":26},"env":[],"annots":[],"id":107,"label":"10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":108,"label":"sumList (digitsOfInt (digits 0))"},{"span":null,"env":[],"annots":[],"id":109,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":110,"label":"sumList (digitsOfInt (digits n))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[25,5,"Redex"]],"id":111,"label":"sumList (digitsOfInt (if 0 < 1\n                      then []\n                      else digitsOfInt (n / 10) @ [n mod 10]))"},{"span":null,"env":[],"annots":[],"id":112,"label":"0"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"]],"annots":[[13,1,"Redex"]],"id":113,"label":"digitsOfInt (n / 10)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","[]"]],"annots":[[12,6,"Redex"]],"id":114,"label":"sumList (if [] < 1\n         then []\n         else digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":4,"endLine":4,"endCol":35,"startCol":34},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":115,"label":"n"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":58},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":116,"label":"n"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":33},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":117,"label":"n"},{"span":null,"env":[],"annots":[],"id":118,"label":"0"},{"span":{"startLine":4,"endLine":4,"endCol":20,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":119,"label":"digitsOfInt"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":121,"label":"n"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":122,"label":"n"},{"span":null,"env":[],"annots":[],"id":123,"label":"0"},{"span":{"startLine":4,"endLine":4,"endCol":32,"startCol":31},"env":[],"annots":[],"id":124,"label":"@"},{"span":{"startLine":15,"endLine":15,"endCol":27,"startCol":8},"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":125,"label":"additivePersistence"},{"span":{"startLine":4,"endLine":4,"endCol":20,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":126,"label":"digitsOfInt"},{"span":{"startLine":15,"endLine":15,"endCol":36,"startCol":29},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"]],"annots":[],"id":127,"label":"sumList"}]}