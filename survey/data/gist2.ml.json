{"root":122,"result":"stuck","reason":"Type error: stuck because `int' is incompatible with `list'","bad":72,"stuck":241,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":1,"label":"StepsTo BoringStep"},{"arrows":"to","to":216,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":384,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":185,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":199,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":126,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":318,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":14,"label":"StepsTo PrimStep"},{"arrows":"to","to":11,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":227,"from":15,"label":"StepsTo PrimStep"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":16,"label":"SubTerm 2"},{"arrows":"to","to":355,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":387,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":141,"from":20,"label":"StepsTo BoringStep"},{"arrows":"to","to":142,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":21,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":142,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":272,"from":22,"label":"SubTerm 2"},{"arrows":"to","to":25,"from":24,"label":"StepsTo CallStep"},{"arrows":"to","to":38,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":25,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":41,"from":26,"label":"SubTerm 2"},{"arrows":"to","to":146,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":341,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":27,"label":"SubTerm 2"},{"arrows":"to","to":54,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":146,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":238,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":251,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":212,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":10,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":294,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":29,"from":33,"label":"StepsTo ReturnStep"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":34,"label":"StepsTo ReturnStep"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":167,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":262,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":136,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":285,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":190,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":260,"from":43,"label":"SubTerm 2"},{"arrows":"to","to":358,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":203,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":46,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":46,"label":"StepsTo ReturnStep"},{"arrows":"to","to":145,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":374,"from":47,"label":"StepsTo ReturnStep"},{"arrows":"to","to":24,"from":48,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":292,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":40,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":250,"from":52,"label":"SubTerm 2"},{"arrows":"to","to":353,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":54,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":22,"from":55,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":55,"label":"StepsTo CallStep"},{"arrows":"to","to":141,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":60,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":60,"label":"StepsTo PrimStep"},{"arrows":"to","to":159,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":295,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":66,"label":"StepsTo CallStep"},{"arrows":"to","to":254,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":168,"from":69,"label":"StepsTo BoringStep"},{"arrows":"to","to":174,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":215,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":143,"from":70,"label":"StepsTo CallStep"},{"arrows":"to","to":72,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":215,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":236,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":339,"from":72,"label":"SubTerm 2"},{"arrows":"to","to":74,"from":73,"label":"StepsTo CallStep"},{"arrows":"to","to":135,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":129,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":75,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":78,"label":"StepsTo CallStep"},{"arrows":"to","to":200,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":78,"label":"SubTerm 2"},{"arrows":"to","to":300,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":242,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":69,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":84,"from":83,"label":"SubTerm 2"},{"arrows":"to","to":280,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":327,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":85,"label":"SubTerm 2"},{"arrows":"to","to":191,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":108,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":303,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":89,"label":"StepsTo BoringStep"},{"arrows":"to","to":170,"from":89,"label":"SubTerm 2"},{"arrows":"to","to":346,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":91,"label":"StepsTo BoringStep"},{"arrows":"to","to":269,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":367,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":94,"label":"StepsTo BoringStep"},{"arrows":"to","to":254,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":254,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":95,"label":"StepsTo BoringStep"},{"arrows":"to","to":154,"from":95,"label":"SubTerm 2"},{"arrows":"to","to":255,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":158,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":83,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":84,"from":98,"label":"SubTerm 2"},{"arrows":"to","to":259,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":327,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 2"},{"arrows":"to","to":247,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":383,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":102,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":347,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":340,"from":103,"label":"SubTerm 2"},{"arrows":"to","to":393,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":105,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":60,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":160,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":107,"from":106,"label":"SubTerm 2"},{"arrows":"to","to":115,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":236,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":339,"from":107,"label":"StepsTo BoringStep"},{"arrows":"to","to":109,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":354,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":392,"from":108,"label":"SubTerm 2"},{"arrows":"to","to":38,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":110,"label":"StepsTo CallStep"},{"arrows":"to","to":11,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":111,"label":"StepsTo ReturnStep"},{"arrows":"to","to":112,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":162,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":112,"label":"StepsTo ReturnStep"},{"arrows":"to","to":11,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":345,"from":113,"label":"StepsTo CallStep"},{"arrows":"to","to":73,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":310,"from":114,"label":"StepsTo CallStep"},{"arrows":"to","to":117,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":357,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":359,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":321,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":332,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":122,"label":"StepsTo CallStep"},{"arrows":"to","to":369,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":306,"from":123,"label":"StepsTo BoringStep"},{"arrows":"to","to":308,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":350,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":360,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":376,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":328,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":129,"label":"StepsTo BoringStep"},{"arrows":"to","to":289,"from":129,"label":"SubTerm 2"},{"arrows":"to","to":363,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":323,"from":130,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":225,"from":131,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":132,"label":"SubTerm 2"},{"arrows":"to","to":278,"from":132,"label":"StepsTo BoringStep"},{"arrows":"to","to":333,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":137,"label":"StepsTo CallStep"},{"arrows":"to","to":142,"from":137,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":137,"label":"SubTerm 2"},{"arrows":"to","to":11,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":139,"from":138,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":139,"label":"StepsTo PrimStep"},{"arrows":"to","to":60,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":96,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":140,"label":"SubTerm 2"},{"arrows":"to","to":243,"from":140,"label":"StepsTo BoringStep"},{"arrows":"to","to":256,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":141,"label":"SubTerm 1"},{"arrows":"to","to":142,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":141,"label":"StepsTo CallStep"},{"arrows":"to","to":10,"from":143,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":144,"label":"StepsTo PrimStep"},{"arrows":"to","to":179,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":336,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":279,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":151,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":320,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":153,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":153,"label":"StepsTo PrimStep"},{"arrows":"to","to":38,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":187,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":196,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":155,"label":"SubTerm 1"},{"arrows":"to","to":98,"from":155,"label":"StepsTo CallStep"},{"arrows":"to","to":175,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":379,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":158,"label":"StepsTo BoringStep"},{"arrows":"to","to":83,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":159,"label":"StepsTo PrimStep"},{"arrows":"to","to":144,"from":159,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":159,"from":160,"label":"StepsTo BoringStep"},{"arrows":"to","to":178,"from":160,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":160,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":302,"from":162,"label":"StepsTo ReturnStep"},{"arrows":"to","to":217,"from":163,"label":"StepsTo ReturnStep"},{"arrows":"to","to":302,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":165,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":380,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":166,"label":"SubTerm 2"},{"arrows":"to","to":38,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":167,"label":"StepsTo CallStep"},{"arrows":"to","to":155,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":168,"label":"StepsTo BoringStep"},{"arrows":"to","to":106,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":215,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":338,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":352,"from":169,"label":"SubTerm 2"},{"arrows":"to","to":171,"from":170,"label":"StepsTo BoringStep"},{"arrows":"to","to":173,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":284,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":106,"from":174,"label":"StepsTo BoringStep"},{"arrows":"to","to":107,"from":174,"label":"SubTerm 2"},{"arrows":"to","to":115,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":325,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":289,"from":176,"label":"SubTerm 2"},{"arrows":"to","to":291,"from":176,"label":"StepsTo ReturnStep"},{"arrows":"to","to":323,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":363,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":144,"from":178,"label":"StepsTo BoringStep"},{"arrows":"to","to":179,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":184,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":375,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":370,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":187,"label":"SubTerm 1"},{"arrows":"to","to":209,"from":187,"label":"SubTerm 2"},{"arrows":"to","to":372,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":192,"label":"SubTerm 1"},{"arrows":"to","to":257,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":194,"label":"SubTerm 1"},{"arrows":"to","to":373,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":313,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":197,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":292,"from":199,"label":"StepsTo BoringStep"},{"arrows":"to","to":202,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":331,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":204,"label":"StepsTo PrimStep"},{"arrows":"to","to":38,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":232,"from":204,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":205,"label":"StepsTo BoringStep"},{"arrows":"to","to":348,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":206,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":206,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":207,"label":"StepsTo BoringStep"},{"arrows":"to","to":345,"from":207,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":208,"label":"StepsTo ReturnStep"},{"arrows":"to","to":38,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":371,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":212,"label":"SubTerm 1"},{"arrows":"to","to":214,"from":212,"label":"StepsTo BoringStep"},{"arrows":"to","to":114,"from":213,"label":"StepsTo BoringStep"},{"arrows":"to","to":214,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":214,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":329,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":218,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":220,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":293,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":152,"from":221,"label":"StepsTo CallStep"},{"arrows":"to","to":222,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":222,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":222,"label":"SubTerm 1"},{"arrows":"to","to":138,"from":222,"label":"StepsTo CallStep"},{"arrows":"to","to":201,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":224,"from":223,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":225,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":225,"label":"StepsTo BoringStep"},{"arrows":"to","to":213,"from":225,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":205,"from":226,"label":"StepsTo ReturnStep"},{"arrows":"to","to":227,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":348,"from":227,"label":"StepsTo ReturnStep"},{"arrows":"to","to":38,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":225,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":319,"from":228,"label":"StepsTo BoringStep"},{"arrows":"to","to":309,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":230,"label":"StepsTo BoringStep"},{"arrows":"to","to":231,"from":230,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":232,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":232,"label":"StepsTo PrimStep"},{"arrows":"to","to":216,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":236,"label":"SubTerm 1"},{"arrows":"to","to":385,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":311,"from":238,"label":"StepsTo BoringStep"},{"arrows":"to","to":240,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":304,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":337,"from":239,"label":"SubTerm 2"},{"arrows":"to","to":38,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":241,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":230,"from":242,"label":"StepsTo BoringStep"},{"arrows":"to","to":243,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":243,"label":"StepsTo BoringStep"},{"arrows":"to","to":61,"from":245,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":245,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":249,"from":248,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":251,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":311,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":252,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":255,"label":"StepsTo BoringStep"},{"arrows":"to","to":280,"from":259,"label":"StepsTo BoringStep"},{"arrows":"to","to":239,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":365,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":265,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":267,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":267,"label":"SubTerm 1"},{"arrows":"to","to":222,"from":267,"label":"StepsTo BoringStep"},{"arrows":"to","to":75,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":268,"label":"StepsTo BoringStep"},{"arrows":"to","to":269,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":367,"from":269,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":270,"label":"StepsTo BoringStep"},{"arrows":"to","to":286,"from":271,"label":"SubTerm 0"},{"arrows":"to","to":273,"from":272,"label":"StepsTo BoringStep"},{"arrows":"to","to":275,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":334,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":274,"label":"SubTerm 2"},{"arrows":"to","to":22,"from":276,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":276,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":374,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":277,"label":"SubTerm 1"},{"arrows":"to","to":241,"from":277,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":278,"label":"SubTerm 2"},{"arrows":"to","to":219,"from":278,"label":"StepsTo PrimStep"},{"arrows":"to","to":333,"from":278,"label":"SubTerm 1"},{"arrows":"to","to":85,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":281,"from":280,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":282,"label":"SubTerm 1"},{"arrows":"to","to":362,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":285,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":285,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":366,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":289,"label":"SubTerm 2"},{"arrows":"to","to":172,"from":289,"label":"SubTerm 0"},{"arrows":"to","to":312,"from":289,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":292,"label":"StepsTo BoringStep"},{"arrows":"to","to":200,"from":292,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":292,"label":"SubTerm 2"},{"arrows":"to","to":300,"from":292,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":294,"label":"StepsTo BoringStep"},{"arrows":"to","to":267,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":296,"from":295,"label":"SubTerm 1"},{"arrows":"to","to":326,"from":295,"label":"SubTerm 0"},{"arrows":"to","to":390,"from":295,"label":"SubTerm 2"},{"arrows":"to","to":298,"from":297,"label":"SubTerm 1"},{"arrows":"to","to":382,"from":297,"label":"SubTerm 0"},{"arrows":"to","to":297,"from":299,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":299,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":302,"label":"SubTerm 1"},{"arrows":"to","to":124,"from":303,"label":"SubTerm 0"},{"arrows":"to","to":265,"from":303,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":306,"label":"StepsTo BoringStep"},{"arrows":"to","to":299,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":351,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":252,"from":309,"label":"SubTerm 2"},{"arrows":"to","to":324,"from":309,"label":"SubTerm 0"},{"arrows":"to","to":394,"from":309,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":310,"label":"StepsTo BoringStep"},{"arrows":"to","to":121,"from":311,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":311,"label":"SubTerm 0"},{"arrows":"to","to":268,"from":311,"label":"SubTerm 1"},{"arrows":"to","to":165,"from":312,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":313,"label":"SubTerm 1"},{"arrows":"to","to":388,"from":313,"label":"SubTerm 0"},{"arrows":"to","to":192,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":315,"from":314,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":207,"from":319,"label":"StepsTo CallStep"},{"arrows":"to","to":322,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":381,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":236,"from":325,"label":"StepsTo BoringStep"},{"arrows":"to","to":330,"from":329,"label":"SubTerm 1"},{"arrows":"to","to":356,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":343,"from":330,"label":"SubTerm 1"},{"arrows":"to","to":364,"from":330,"label":"SubTerm 0"},{"arrows":"to","to":336,"from":335,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":341,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":345,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":345,"label":"StepsTo BoringStep"},{"arrows":"to","to":310,"from":345,"label":"SubTerm 1"},{"arrows":"to","to":333,"from":346,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":348,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":348,"label":"StepsTo BoringStep"},{"arrows":"to","to":276,"from":348,"label":"SubTerm 1"},{"arrows":"to","to":223,"from":365,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":366,"label":"SubTerm 0"},{"arrows":"to","to":368,"from":367,"label":"SubTerm 0"},{"arrows":"to","to":210,"from":378,"label":"SubTerm 0"},{"arrows":"to","to":386,"from":378,"label":"SubTerm 1"},{"arrows":"to","to":378,"from":384,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,227,"Redex"]],"id":0,"label":"List.rev (let seen' =\n            [_ ; _] in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t) in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,173,"Redex"]],"id":1,"label":"let seen' = [_ ; _] in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[27,39,"Redex"]],"id":2,"label":"let rest' =\n  (let is_in = fun i ->\n                 (i mod 2) = 0 in List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[12,36,"Redex"]],"id":3,"label":"let is_in = fun i ->\n              (i mod 2) = 0 in List.filter is_in t"},{"span":null,"env":[],"annots":[],"id":4,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":5,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":6,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":7,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[47,49,"LastRedex"],[34,86,"Redex"]],"id":8,"label":"List.rev (let rest' =\n            (let is_in = fun i ->\n                           (i mod 2) = 0 in List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[40,22,"LastRedex"],[12,112,"Redex"]],"id":9,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,212,"Redex"]],"id":10,"label":"let rest' = match [2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":11,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":12,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":13,"label":"l"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,5,"Redex"]],"id":14,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,5,"Redex"]],"id":15,"label":"let rest' =\n  if 0 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[18,1,"Redex"]],"id":16,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":17,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":18,"label":"[_ ; _]"},{"span":null,"env":[],"annots":[],"id":19,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"]],"annots":[[2,1,"Redex"]],"id":20,"label":"f y"},{"span":null,"env":[["y","2"]],"annots":[[0,1,"Redex"]],"id":21,"label":"y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[14,2,"Redex"]],"id":22,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":23,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,21,"Redex"]],"id":24,"label":"List.rev (let rest' =\n            List.filter is_in [2] in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[40,2,"Redex"]],"id":25,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"],[0,121,"LastRedex"]],"id":26,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,122,"Redex"]],"id":27,"label":"match [2] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[9,53,"Redex"]],"id":29,"label":"List.rev (let rest' = [2] in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,1,"Redex"],[0,23,"LastRedex"]],"id":31,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,170,"Redex"]],"id":32,"label":"List.rev (let rest' =\n            match [2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,7,"Redex"]],"id":33,"label":"List.rev (let rest' =\n            2 :: [] in\n          helper (seen' , rest'))"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,7,"Redex"]],"id":34,"label":"let rest' = 2 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":35,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":36,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[2]"]],"annots":[],"id":37,"label":"List.rev (helper ([_ ; _] , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":38,"label":"List.rev"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 2]"]],"annots":[[0,1,"Redex"]],"id":40,"label":"l"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":41,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":42,"label":"List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[18,1,"Redex"]],"id":43,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":44,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":45,"label":"(y , List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,5,"Redex"]],"id":46,"label":"if 0 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":47,"label":"0 = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[52,1,"Redex"]],"id":48,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[32,1,"Redex"]],"id":49,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 2]"]],"annots":[],"id":51,"label":"([] , l)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[18,1,"Redex"]],"id":52,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":53,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"]],"annots":[[5,1,"Redex"],[0,57,"LastRedex"]],"id":54,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"]],"annots":[[3,3,"Redex"]],"id":55,"label":"if f 2\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,9,"Redex"]],"id":60,"label":"if (2 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":61,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":62,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[27,39,"Redex"]],"id":63,"label":"let rest' =\n  (let is_in = fun i ->\n                 (i mod 2) = 0 in List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[12,36,"Redex"]],"id":64,"label":"let is_in = fun i ->\n              (i mod 2) = 0 in List.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,27,"Redex"]],"id":66,"label":"helper ([] , [[_ ; _] ; 2])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":67,"label":"([] , [[_ ; _] ; 2])"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"],["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,6,"Redex"]],"id":68,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"],["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[0,137,"LastRedex"]],"id":69,"label":"let seen' = seen_1 @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,45,"Redex"]],"id":70,"label":"let rest' = List.filter is_in\n                        [2] in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,11,"Redex"]],"id":71,"label":"let seen' = [_ ; _] @ 2 in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t_1) in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,11,"Redex"]],"id":72,"label":"[_ ; _] @ 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":73,"label":"(2 , List.filter f [])"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":74,"label":"(2 , match xs_1 with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[0,5,"Redex"]],"id":75,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,21,"Redex"]],"id":78,"label":"List.filter is_in [2]"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _] ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,4,"Redex"]],"id":79,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,345,"Redex"]],"id":80,"label":"List.rev (match [[_ ; _] ; 2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,257,"Redex"]],"id":83,"label":"match [2] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":84,"label":"let seen' = seen_1 @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"]],"id":85,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"]],"id":86,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":87,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":88,"label":"helper"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _]"]],"annots":[[0,4,"Redex"]],"id":89,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":90,"label":"(@)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[2]"]],"annots":[],"id":91,"label":"([_ ; _] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":92,"label":"([_ ; _] , [2])"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[_ ; _] ; 2]"]],"annots":[],"id":94,"label":"helper ([] , l)"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _] ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,4,"Redex"],[0,254,"LastRedex"]],"id":95,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":96,"label":"seen"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[2]"],["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,6,"Redex"]],"id":97,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[2]"],["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,6,"Redex"],[0,260,"LastRedex"]],"id":98,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[],"id":99,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[]"]],"annots":[],"id":100,"label":"t_1"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":101,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":102,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":103,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":104,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[4,1,"Redex"]],"id":105,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","2"]],"annots":[[10,3,"Redex"]],"id":106,"label":"[_ ; _] @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":107,"label":"h_1"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"]],"id":108,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":109,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,29,"Redex"]],"id":110,"label":"List.rev (helper ([] , [[_ ; _] ; 2]))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,161,"Redex"]],"id":111,"label":"let rest' =\n  2 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":112,"label":"2 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,18,"Redex"]],"id":113,"label":"let rest' =\n  2 :: (List.filter f []) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":114,"label":"2 :: (List.filter f [])"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":115,"label":"(@)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":116,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":117,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":120,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[2]"]],"annots":[],"id":121,"label":"helper ([_ ; _] , rest')"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[[0,30,"Redex"]],"id":122,"label":"removeDuplicates [[_ ; _] ; 2]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_ ; _] ; 2]"]],"annots":[[0,360,"LastRedex"],[0,360,"Redex"]],"id":123,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":124,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":125,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[],"id":126,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[["List.rev","List.rev"]],"annots":[],"id":127,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":128,"label":"helper ([] , l)"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[0,129,"LastRedex"]],"id":129,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[["xs_1","[]"]],"annots":[[0,4,"Redex"]],"id":130,"label":"xs_1"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[14,1,"Redex"],[14,23,"LastRedex"]],"id":131,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"]],"annots":[[5,1,"Redex"]],"id":132,"label":"[] @ h"},{"span":null,"env":[],"annots":[],"id":135,"label":"2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"]],"id":136,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,16,"Redex"]],"id":137,"label":"List.filter f []"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[18,1,"Redex"]],"id":138,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,9,"Redex"]],"id":139,"label":"let rest' =\n  if (2 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,263,"Redex"]],"id":140,"label":"match [[_ ; _] ; 2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":141,"label":"f 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":142,"label":"f"},{"span":null,"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[20,2,"Redex"]],"id":143,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":144,"label":"2 mod 2"},{"span":null,"env":[],"annots":[],"id":145,"label":"0"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":146,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":147,"label":"rest'"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,360,"Redex"]],"id":149,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":150,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":151,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[38,1,"Redex"]],"id":152,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,9,"Redex"]],"id":153,"label":"List.rev (let rest' =\n            if (2 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"]],"id":154,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,22,"Redex"]],"id":155,"label":"helper ([_ ; _] , [2])"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":156,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":157,"label":"(i mod 2) = 0"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,339,"Redex"]],"id":158,"label":"List.rev (match [2] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":159,"label":"(2 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[1,1,"Redex"],[0,13,"LastRedex"]],"id":160,"label":"(i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":161,"label":"rest'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":162,"label":"(2 , match [] with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":null,"env":[],"annots":[[0,7,"Redex"]],"id":163,"label":"2 :: []"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":164,"label":"rest'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":165,"label":"(y , List.filter f_1 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":166,"label":"List.filter f_1 ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,24,"Redex"]],"id":167,"label":"List.rev (helper ([_ ; _] , [2]))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[22,3,"Redex"]],"id":168,"label":"let seen' = [_ ; _] @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[],"id":169,"label":"seen_1 @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"]],"annots":[[0,1,"Redex"]],"id":170,"label":"h"},{"span":null,"env":[],"annots":[],"id":171,"label":"[_ ; _]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":172,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":173,"label":"f_1"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"],["h_1","2"]],"annots":[[0,6,"Redex"]],"id":174,"label":"seen_1 @ h_1"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":175,"label":"helper"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":176,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":177,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":178,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":179,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":180,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":183,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":184,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":185,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":186,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":187,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":188,"label":"seen"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":190,"label":"f"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":191,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":192,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":193,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":194,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":195,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[27,39,"Redex"]],"id":196,"label":"let rest' =\n  (let is_in = fun i ->\n                 (i mod 2) = 0 in List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[27,39,"Redex"],[0,116,"LastRedex"]],"id":197,"label":"let rest' =\n  (let is_in = fun i ->\n                 (i mod 2) = 0 in List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[12,36,"LastRedex"],[0,71,"Redex"]],"id":199,"label":"let is_in = fun i ->\n              (i mod 2) = 0 in List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":200,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":201,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":202,"label":"2"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":203,"label":"y"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,12,"Redex"]],"id":204,"label":"List.rev (let seen' =\n            [] @ [_ ; _] in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t) in helper (seen' , rest'))"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[22,141,"Redex"]],"id":205,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,1,"Redex"],[34,23,"LastRedex"]],"id":206,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[46,4,"Redex"]],"id":207,"label":"List.rev (let rest' =\n            2 :: (match xs_1 with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,255,"Redex"]],"id":208,"label":"List.rev (let rest' =\n            2 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":209,"label":"h"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":210,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":211,"label":"i"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[],"id":212,"label":"(y , List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[20,2,"Redex"]],"id":213,"label":"2 :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[],"id":214,"label":"(2 , List.filter f ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":215,"label":"let rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[27,39,"Redex"]],"id":216,"label":"let rest' =\n  (let is_in = fun i ->\n                 (i mod 2) = 0 in List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":217,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":218,"label":"2"},{"span":null,"env":[],"annots":[],"id":219,"label":"[_ ; _]"},{"span":null,"env":[],"annots":[],"id":220,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,3,"Redex"]],"id":221,"label":"List.rev (let rest' =\n            if f 2\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,3,"Redex"]],"id":222,"label":"let rest' =\n  if f 2\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":223,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":224,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,2,"Redex"]],"id":225,"label":"let rest' =\n  2 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":226,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":227,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[54,2,"Redex"]],"id":228,"label":"List.rev (let rest' =\n            2 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":229,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[39,1,"Redex"]],"id":230,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[17,1,"Redex"]],"id":231,"label":"let seen' = [] @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,12,"Redex"]],"id":232,"label":"let seen' = [] @ [_ ; _] in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":233,"label":"0"},{"span":null,"env":[],"annots":[],"id":236,"label":"[_ ; _]"},{"span":null,"env":[],"annots":[],"id":237,"label":"_"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[0,41,"Redex"]],"id":238,"label":"let rest' = [2] in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":239,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":240,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,11,"Redex"]],"id":241,"label":"List.rev (let seen' =\n            [_ ; _] @ 2 in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t_1) in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,4,"Redex"]],"id":242,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[0,131,"LastRedex"]],"id":243,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":245,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":247,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[["t","[2]"]],"annots":[[12,36,"Redex"]],"id":248,"label":"let is_in = fun i ->\n              (i mod 2) = 0 in List.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":249,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":250,"label":"t"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"],["rest'","[2]"]],"annots":[],"id":251,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[12,4,"Redex"]],"id":252,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":254,"label":"helper"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _] ; 2]"]],"annots":[[0,4,"Redex"]],"id":255,"label":"rest"},{"span":null,"env":[],"annots":[],"id":256,"label":"[[_ ; _] ; 2]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":257,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":258,"label":"t"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[2]"]],"annots":[[0,6,"Redex"]],"id":259,"label":"rest_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":260,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[12,36,"Redex"]],"id":261,"label":"let is_in = fun i ->\n              (i mod 2) = 0 in List.filter is_in t"},{"span":null,"env":[],"annots":[],"id":262,"label":"[[_ ; _] ; 2]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":263,"label":"(@)"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,481,"Redex"]],"id":264,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' =\n                             (let is_in =\n                                fun i -> (i mod 2) = 0 in\n                              List.filter is_in t) in\n                           helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,36,"Redex"]],"id":265,"label":"let is_in = fun i ->\n              (i mod 2) = 0 in List.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":266,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,1,"Redex"]],"id":267,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"],["rest'","[2]"]],"annots":[],"id":268,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[2]"]],"annots":[[0,5,"Redex"]],"id":269,"label":"rest'"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":270,"label":"t"},{"span":null,"env":[],"annots":[],"id":271,"label":"[2]"},{"span":null,"env":[["ys","[]"]],"annots":[[0,2,"Redex"]],"id":272,"label":"ys"},{"span":null,"env":[],"annots":[],"id":273,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":274,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":275,"label":"is_in"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,58,"Redex"]],"id":276,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[44,3,"Redex"]],"id":277,"label":"List.rev (let seen' =\n            [_ ; _] @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,12,"Redex"]],"id":278,"label":"[] @ [_ ; _]"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":279,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":280,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":281,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":282,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":283,"label":"rest'"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":284,"label":"y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":285,"label":"f y"},{"span":null,"env":[],"annots":[],"id":286,"label":"2"},{"span":null,"env":[],"annots":[],"id":287,"label":"List.filter"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[],"id":288,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":289,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":291,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"]],"annots":[[18,1,"Redex"],[0,19,"LastRedex"]],"id":292,"label":"List.filter is_in t"},{"span":null,"env":[],"annots":[],"id":293,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,1,"Redex"]],"id":294,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":295,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":296,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[["l","[[_ ; _] ; 2]"]],"annots":[],"id":297,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 2]"]],"annots":[[0,1,"Redex"]],"id":298,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[["l","[[_ ; _] ; 2]"]],"annots":[],"id":299,"label":"helper ([] , l)"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":300,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":302,"label":"(2 , [])"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[27,39,"Redex"]],"id":303,"label":"let rest' =\n  (let is_in = fun i ->\n                 (i mod 2) = 0 in List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":304,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":305,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[_ ; _] ; 2]"]],"annots":[],"id":306,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[["l","[[_ ; _] ; 2]"]],"annots":[],"id":308,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":309,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":310,"label":"2 :: (match xs_1 with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"],["rest'","[2]"]],"annots":[[0,22,"LastRedex"]],"id":311,"label":"helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":312,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":313,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":314,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":315,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":318,"label":"[]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,18,"Redex"]],"id":319,"label":"List.rev (let rest' =\n            2 :: (List.filter f []) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":320,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":321,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":322,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":323,"label":"[]"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":324,"label":"rest"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"]],"id":325,"label":"seen_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":326,"label":"List.filter"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[_ ; _]"]],"annots":[],"id":327,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":328,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":329,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[],"id":330,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":331,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":332,"label":"helper"},{"span":null,"env":[],"annots":[],"id":333,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":334,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":335,"label":"i"},{"span":null,"env":[],"annots":[],"id":336,"label":"2"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":337,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"]],"id":338,"label":"seen_1"},{"span":null,"env":[],"annots":[],"id":339,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":340,"label":"h"},{"span":null,"env":[["xs","[2]"]],"annots":[[0,2,"Redex"]],"id":341,"label":"xs"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":342,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":343,"label":"rest'"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[26,4,"Redex"]],"id":345,"label":"let rest' =\n  2 :: (match xs_1 with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":346,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":347,"label":"i"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,111,"Redex"]],"id":348,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":349,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":350,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":351,"label":"List.rev"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":352,"label":"h"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":353,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":354,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":355,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":356,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":357,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":358,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":359,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":360,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[0,5,"Redex"]],"id":361,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":362,"label":"seen'"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":363,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":364,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":365,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":366,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":367,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":368,"label":"2"},{"span":null,"env":[],"annots":[],"id":369,"label":"[[_ ; _] ; 2]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":370,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":371,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":372,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":373,"label":"i"},{"span":null,"env":[],"annots":[],"id":374,"label":"true"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":375,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":376,"label":"List.rev"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[],"id":377,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":378,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":379,"label":"0"},{"span":null,"env":[],"annots":[],"id":380,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":381,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":382,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":383,"label":"is_in"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":384,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":385,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":386,"label":"0"},{"span":null,"env":[],"annots":[],"id":387,"label":"_"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":388,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":389,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":390,"label":"t"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":391,"label":"ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":392,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":393,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":394,"label":"seen"}]}