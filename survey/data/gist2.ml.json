{"root":131,"result":"stuck","reason":"Type error : could not match int with 't72 list","bad":173,"stuck":142,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":0,"label":"StepsTo CallStep"},{"arrows":"to","to":229,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":3,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":199,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":7,"label":"StepsTo BoringStep"},{"arrows":"to","to":370,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":9,"label":"SubTerm 2"},{"arrows":"to","to":46,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":194,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":10,"label":"StepsTo CallStep"},{"arrows":"to","to":13,"from":12,"label":"StepsTo PrimStep"},{"arrows":"to","to":46,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":13,"label":"StepsTo PrimStep"},{"arrows":"to","to":274,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":144,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":185,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":19,"label":"StepsTo CallStep"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":328,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":23,"label":"SubTerm 2"},{"arrows":"to","to":344,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":24,"label":"StepsTo ReturnStep"},{"arrows":"to","to":115,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":25,"label":"StepsTo BoringStep"},{"arrows":"to","to":220,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":269,"from":26,"label":"SubTerm 2"},{"arrows":"to","to":360,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"StepsTo PrimStep"},{"arrows":"to","to":100,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":32,"label":"SubTerm 2"},{"arrows":"to","to":340,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":390,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":35,"label":"StepsTo CallStep"},{"arrows":"to","to":144,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":36,"label":"StepsTo CallStep"},{"arrows":"to","to":320,"from":36,"label":"SubTerm 2"},{"arrows":"to","to":7,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 2"},{"arrows":"to","to":159,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":368,"from":38,"label":"SubTerm 2"},{"arrows":"to","to":40,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":346,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":253,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":45,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":46,"label":"SubTerm 2"},{"arrows":"to","to":195,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":46,"label":"StepsTo PrimStep"},{"arrows":"to","to":48,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":223,"from":47,"label":"StepsTo ReturnStep"},{"arrows":"to","to":130,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":329,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":50,"label":"StepsTo CallStep"},{"arrows":"to","to":104,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":252,"from":51,"label":"SubTerm 2"},{"arrows":"to","to":362,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":270,"from":53,"label":"SubTerm 2"},{"arrows":"to","to":363,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":56,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":158,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":291,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":58,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":259,"from":59,"label":"SubTerm 2"},{"arrows":"to","to":358,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":63,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":65,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":279,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":264,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":67,"label":"StepsTo BoringStep"},{"arrows":"to","to":282,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":97,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":298,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":144,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":72,"label":"StepsTo CallStep"},{"arrows":"to","to":263,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":273,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":386,"from":80,"label":"SubTerm 2"},{"arrows":"to","to":1,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":82,"label":"StepsTo PrimStep"},{"arrows":"to","to":1,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":224,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":84,"label":"StepsTo ReturnStep"},{"arrows":"to","to":14,"from":85,"label":"StepsTo ReturnStep"},{"arrows":"to","to":144,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":312,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":105,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":249,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":47,"from":88,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":88,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":91,"label":"StepsTo BoringStep"},{"arrows":"to","to":226,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":93,"label":"SubTerm 2"},{"arrows":"to","to":216,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":93,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":308,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":95,"label":"SubTerm 2"},{"arrows":"to","to":196,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":345,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":309,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":141,"from":99,"label":"StepsTo BoringStep"},{"arrows":"to","to":171,"from":99,"label":"SubTerm 2"},{"arrows":"to","to":351,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":102,"label":"StepsTo BoringStep"},{"arrows":"to","to":263,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":129,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":104,"label":"StepsTo CallStep"},{"arrows":"to","to":129,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":106,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":147,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":157,"from":105,"label":"SubTerm 2"},{"arrows":"to","to":266,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":356,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":366,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":354,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":295,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":115,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":220,"from":115,"label":"StepsTo ReturnStep"},{"arrows":"to","to":117,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":343,"from":116,"label":"SubTerm 2"},{"arrows":"to","to":388,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":118,"label":"SubTerm 1"},{"arrows":"to","to":350,"from":118,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":359,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":387,"from":120,"label":"SubTerm 2"},{"arrows":"to","to":1,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":122,"label":"StepsTo CallStep"},{"arrows":"to","to":124,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":364,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":125,"label":"SubTerm 2"},{"arrows":"to","to":178,"from":125,"label":"StepsTo CallStep"},{"arrows":"to","to":360,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":222,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":127,"label":"StepsTo BoringStep"},{"arrows":"to","to":132,"from":131,"label":"StepsTo CallStep"},{"arrows":"to","to":372,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":379,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":313,"from":132,"label":"StepsTo BoringStep"},{"arrows":"to","to":314,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":355,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":365,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":135,"label":"StepsTo BoringStep"},{"arrows":"to","to":144,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":137,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":142,"from":138,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":281,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":344,"from":139,"label":"StepsTo ReturnStep"},{"arrows":"to","to":32,"from":141,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":141,"label":"SubTerm 2"},{"arrows":"to","to":340,"from":141,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":143,"label":"StepsTo ReturnStep"},{"arrows":"to","to":1,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":145,"label":"StepsTo PrimStep"},{"arrows":"to","to":48,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":190,"from":146,"label":"StepsTo BoringStep"},{"arrows":"to","to":106,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":157,"from":147,"label":"SubTerm 2"},{"arrows":"to","to":250,"from":147,"label":"StepsTo BoringStep"},{"arrows":"to","to":267,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":381,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":150,"label":"StepsTo BoringStep"},{"arrows":"to","to":129,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":330,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":331,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":188,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":204,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":159,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":159,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":144,"from":160,"label":"StepsTo BoringStep"},{"arrows":"to","to":162,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":380,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":322,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":304,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":323,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":333,"from":168,"label":"SubTerm 2"},{"arrows":"to","to":170,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":327,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":172,"from":171,"label":"StepsTo BoringStep"},{"arrows":"to","to":79,"from":173,"label":"SubTerm 2"},{"arrows":"to","to":242,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":174,"label":"StepsTo PrimStep"},{"arrows":"to","to":237,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":177,"from":176,"label":"SubTerm 2"},{"arrows":"to","to":214,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":296,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":178,"label":"StepsTo BoringStep"},{"arrows":"to","to":203,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":178,"label":"SubTerm 2"},{"arrows":"to","to":182,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":254,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":281,"from":181,"label":"StepsTo PrimStep"},{"arrows":"to","to":111,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":176,"from":183,"label":"SubTerm 2"},{"arrows":"to","to":294,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":373,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":213,"from":188,"label":"SubTerm 2"},{"arrows":"to","to":374,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":251,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":191,"label":"StepsTo BoringStep"},{"arrows":"to","to":202,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":191,"label":"SubTerm 2"},{"arrows":"to","to":1,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":192,"label":"StepsTo BoringStep"},{"arrows":"to","to":74,"from":192,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":233,"from":193,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":194,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":194,"label":"StepsTo BoringStep"},{"arrows":"to","to":211,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":195,"label":"StepsTo PrimStep"},{"arrows":"to","to":140,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":198,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":376,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":199,"label":"SubTerm 1"},{"arrows":"to","to":378,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":201,"label":"StepsTo BoringStep"},{"arrows":"to","to":285,"from":202,"label":"SubTerm 0"},{"arrows":"to","to":202,"from":203,"label":"StepsTo BoringStep"},{"arrows":"to","to":272,"from":204,"label":"SubTerm 1"},{"arrows":"to","to":318,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":337,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":243,"from":210,"label":"StepsTo ReturnStep"},{"arrows":"to","to":181,"from":211,"label":"StepsTo BoringStep"},{"arrows":"to","to":212,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":254,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":182,"from":212,"label":"StepsTo BoringStep"},{"arrows":"to","to":230,"from":216,"label":"StepsTo BoringStep"},{"arrows":"to","to":347,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":218,"label":"StepsTo CallStep"},{"arrows":"to","to":10,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":218,"label":"SubTerm 2"},{"arrows":"to","to":6,"from":220,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":221,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":223,"label":"SubTerm 1"},{"arrows":"to","to":248,"from":223,"label":"StepsTo ReturnStep"},{"arrows":"to","to":1,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":224,"label":"StepsTo BoringStep"},{"arrows":"to","to":262,"from":224,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":226,"label":"SubTerm 2"},{"arrows":"to","to":173,"from":226,"label":"StepsTo BoringStep"},{"arrows":"to","to":242,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":208,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":228,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":229,"label":"StepsTo CallStep"},{"arrows":"to","to":48,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":229,"label":"SubTerm 1"},{"arrows":"to","to":231,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":233,"label":"SubTerm 1"},{"arrows":"to","to":326,"from":233,"label":"StepsTo BoringStep"},{"arrows":"to","to":316,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":235,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":235,"label":"StepsTo BoringStep"},{"arrows":"to","to":236,"from":235,"label":"SubTerm 1"},{"arrows":"to","to":141,"from":236,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":236,"label":"StepsTo BoringStep"},{"arrows":"to","to":279,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":237,"label":"StepsTo PrimStep"},{"arrows":"to","to":279,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":238,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":251,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":239,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":240,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":240,"label":"SubTerm 1"},{"arrows":"to","to":146,"from":240,"label":"StepsTo CallStep"},{"arrows":"to","to":1,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":247,"from":243,"label":"StepsTo ReturnStep"},{"arrows":"to","to":245,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":310,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":341,"from":244,"label":"SubTerm 2"},{"arrows":"to","to":1,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":247,"label":"StepsTo BoringStep"},{"arrows":"to","to":248,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":248,"label":"StepsTo BoringStep"},{"arrows":"to","to":165,"from":248,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":249,"label":"StepsTo BoringStep"},{"arrows":"to","to":250,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":250,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":250,"label":"StepsTo BoringStep"},{"arrows":"to","to":279,"from":250,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":251,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":253,"label":"StepsTo BoringStep"},{"arrows":"to","to":268,"from":253,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":255,"label":"SubTerm 0"},{"arrows":"to","to":256,"from":255,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":258,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":258,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":260,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":261,"label":"SubTerm 2"},{"arrows":"to","to":312,"from":261,"label":"StepsTo BoringStep"},{"arrows":"to","to":349,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":262,"label":"SubTerm 2"},{"arrows":"to","to":230,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":262,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":267,"from":266,"label":"StepsTo BoringStep"},{"arrows":"to","to":78,"from":268,"label":"SubTerm 2"},{"arrows":"to","to":226,"from":268,"label":"StepsTo BoringStep"},{"arrows":"to","to":242,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":269,"label":"StepsTo BoringStep"},{"arrows":"to","to":244,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":369,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":274,"label":"StepsTo ReturnStep"},{"arrows":"to","to":38,"from":274,"label":"SubTerm 2"},{"arrows":"to","to":139,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":275,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":275,"label":"SubTerm 0"},{"arrows":"to","to":264,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":277,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":257,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":283,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":284,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":284,"label":"SubTerm 1"},{"arrows":"to","to":348,"from":284,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":287,"label":"SubTerm 1"},{"arrows":"to","to":367,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":292,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":336,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":291,"label":"SubTerm 2"},{"arrows":"to","to":375,"from":293,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":295,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":299,"from":298,"label":"SubTerm 1"},{"arrows":"to","to":334,"from":298,"label":"SubTerm 0"},{"arrows":"to","to":385,"from":298,"label":"SubTerm 2"},{"arrows":"to","to":301,"from":300,"label":"SubTerm 1"},{"arrows":"to","to":383,"from":300,"label":"SubTerm 0"},{"arrows":"to","to":300,"from":302,"label":"SubTerm 1"},{"arrows":"to","to":311,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":304,"from":303,"label":"SubTerm 0"},{"arrows":"to","to":322,"from":303,"label":"SubTerm 1"},{"arrows":"to","to":306,"from":305,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":305,"label":"SubTerm 2"},{"arrows":"to","to":338,"from":305,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":307,"label":"SubTerm 2"},{"arrows":"to","to":184,"from":307,"label":"SubTerm 1"},{"arrows":"to","to":303,"from":307,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":255,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":133,"from":309,"label":"SubTerm 0"},{"arrows":"to","to":277,"from":309,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":312,"label":"StepsTo ReturnStep"},{"arrows":"to","to":128,"from":312,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":312,"label":"SubTerm 2"},{"arrows":"to","to":349,"from":312,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":313,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":313,"label":"StepsTo BoringStep"},{"arrows":"to","to":302,"from":314,"label":"SubTerm 1"},{"arrows":"to","to":357,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":316,"label":"SubTerm 2"},{"arrows":"to","to":332,"from":316,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":316,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":318,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":319,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":319,"from":326,"label":"StepsTo CallStep"},{"arrows":"to","to":1,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":329,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":329,"label":"StepsTo CallStep"},{"arrows":"to","to":67,"from":330,"label":"StepsTo BoringStep"},{"arrows":"to","to":68,"from":330,"label":"SubTerm 1"},{"arrows":"to","to":371,"from":330,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":342,"label":"StepsTo BoringStep"},{"arrows":"to","to":118,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":382,"from":347,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":348,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":348,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":348,"label":"StepsTo BoringStep"},{"arrows":"to","to":340,"from":351,"label":"StepsTo BoringStep"},{"arrows":"to","to":320,"from":368,"label":"StepsTo BoringStep"},{"arrows":"to","to":227,"from":369,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":370,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":370,"label":"StepsTo BoringStep"},{"arrows":"to","to":160,"from":370,"label":"SubTerm 0"},{"arrows":"to","to":264,"from":371,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[37,3,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":0,"label":"List.rev (let rest' =\n            if f 2\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":1,"label":"List.rev"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,2,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":2,"label":"let rest' =\n  2 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[19,18,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":3,"label":"let rest' =\n  2 :: (List.filter f []) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":4,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":5,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[14,1,"Redex"],[34,2,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":6,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":7,"label":"y :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[18,1,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":8,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[4,1,"Redex"]],"id":9,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":10,"label":"f 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":11,"label":"f"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[17,9,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":12,"label":"let rest' =\n  if (2 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[17,5,"Redex"],[89,5,"Redex"],[97,5,"Redex"]],"id":13,"label":"let rest' =\n  if 0 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":14,"label":"(2 , [])"},{"span":null,"env":[],"annots":[],"id":15,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":16,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":17,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[20,2,"Redex"]],"id":18,"label":"2 :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":19,"label":"2 :: (List.filter f [])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":20,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":21,"label":"l"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,58,"Redex"]],"id":23,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[138,5,"Redex"],[146,5,"Redex"]],"id":24,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[22,141,"Redex"],[175,5,"Redex"],[183,5,"Redex"]],"id":25,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"]],"annots":[[18,1,"Redex"]],"id":26,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":27,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,10,"Redex"]],"id":32,"label":"[] @ [_30]"},{"span":null,"env":[],"annots":[],"id":33,"label":"[_30]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,16,"Redex"]],"id":35,"label":"(2 , List.filter f [])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,16,"Redex"]],"id":36,"label":"List.filter f []"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"]],"annots":[[5,1,"Redex"]],"id":37,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[14,2,"Redex"]],"id":38,"label":"List.filter f ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":39,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":40,"label":"rest'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":41,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":42,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[_30]"],["h","2"],["t","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"],[68,137,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":43,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_30] ; 2]"]],"annots":[[0,1,"Redex"]],"id":45,"label":"l"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,9,"Redex"]],"id":46,"label":"if (2 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[19,155,"Redex"],[186,5,"Redex"],[194,5,"Redex"]],"id":47,"label":"let rest' =\n  2 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f y\n                     then y :: (List.filter f ys)\n                     else List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":48,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[52,1,"Redex"],[75,5,"Redex"],[83,5,"Redex"]],"id":49,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,22,"Redex"]],"id":50,"label":"List.rev (helper ([_30] , [2]))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":51,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":52,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":53,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":54,"label":"is_in"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[0,59,"Redex"]],"id":56,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_30] ; 2]"]],"annots":[[6,1,"Redex"]],"id":58,"label":"([] , l)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":59,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":60,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"],["rest'","[2]"]],"annots":[[18,5,"Redex"],[26,5,"Redex"]],"id":63,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2]"]],"annots":[[26,5,"Redex"]],"id":64,"label":"List.rev (helper ([_30] , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,208,"Redex"]],"id":65,"label":"List.rev (let seen' = [_30] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,166,"Redex"]],"id":66,"label":"let seen' = [_30] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[2]"]],"annots":[[9,5,"Redex"]],"id":67,"label":"([_30] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[2]"]],"annots":[[0,5,"Redex"]],"id":68,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":69,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":70,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[19,2,"Redex"]],"id":71,"label":"(2 , List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,25,"Redex"]],"id":72,"label":"helper ([] , [[_30] ; 2])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":73,"label":"([] , [[_30] ; 2])"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":74,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":76,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[]"]],"annots":[[0,59,"Redex"]],"id":77,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","2"]],"annots":[[0,1,"Redex"]],"id":78,"label":"h"},{"span":null,"env":[],"annots":[],"id":79,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[_30]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":80,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":81,"label":"@"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[37,5,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":82,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[2]"],["seen","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[156,215,"Redex"],[383,5,"Redex"],[391,5,"Redex"]],"id":83,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":84,"label":"2 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f y\n                   then y :: (List.filter f ys)\n                   else List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,141,"Redex"]],"id":85,"label":"(2 , match [] with\n     | [] -> []\n     | y :: ys -> if f y\n                  then y :: (List.filter f ys)\n                  else List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[_30] ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[156,215,"Redex"],[383,5,"Redex"],[391,5,"Redex"]],"id":86,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,397,"Redex"]],"id":87,"label":"List.rev (match [[_30] ; 2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[26,2,"Redex"],[79,1,"Redex"],[186,5,"Redex"],[194,5,"Redex"]],"id":88,"label":"let rest' =\n  2 :: (match xs with\n        | [] -> []\n        | y :: ys -> if f y\n                     then y :: (List.filter f ys)\n                     else List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":89,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":90,"label":"helper"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","2"],["t","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[20,1,"Redex"],[37,107,"Redex"],[156,5,"Redex"],[164,5,"Redex"]],"id":91,"label":"let seen' = [_30] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,9,"Redex"],[37,107,"Redex"],[156,5,"Redex"],[164,5,"Redex"]],"id":92,"label":"let seen' = [_30] @ 2 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[2]"],["seen","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":93,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":94,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":95,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":96,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":97,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":98,"label":"helper"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[_30]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":99,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":100,"label":"@"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_30] ; 2]"]],"annots":[[13,1,"Redex"]],"id":102,"label":"helper ([] , l)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2]"]],"annots":[[16,5,"Redex"]],"id":103,"label":"helper ([_30] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,20,"Redex"]],"id":104,"label":"helper ([_30] , [2])"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[_30] ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":105,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":106,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":107,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":108,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":109,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":110,"label":"2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":111,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":112,"label":"(y , List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":113,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":114,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[88,5,"Redex"],[96,5,"Redex"]],"id":115,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":116,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":117,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":118,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":119,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":120,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":121,"label":"@"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,27,"Redex"]],"id":122,"label":"List.rev (helper ([] , [[_30] ; 2]))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":123,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":124,"label":"(seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,21,"Redex"]],"id":125,"label":"List.filter is_in [2]"},{"span":null,"env":[],"annots":[],"id":126,"label":"[2]"},{"span":null,"env":[["xs","[]"]],"annots":[[0,2,"Redex"]],"id":127,"label":"xs"},{"span":null,"env":[],"annots":[],"id":128,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":129,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":130,"label":"helper"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,28,"Redex"]],"id":131,"label":"removeDuplicates [[_30] ; 2]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_30] ; 2]"]],"annots":[[0,381,"Redex"]],"id":132,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":133,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":134,"label":"(seen' , rest')"},{"span":null,"env":[["xs","[]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[11,2,"Redex"],[58,1,"Redex"]],"id":135,"label":"(2 , match xs with\n     | [] -> []\n     | y :: ys -> if f y\n                  then y :: (List.filter f ys)\n                  else List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":136,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":137,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","2"],["t","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[42,1,"Redex"],[69,137,"Redex"],[218,5,"Redex"],[226,5,"Redex"]],"id":138,"label":"List.rev (let seen' =\n            [_30] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":139,"label":"0 = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":140,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[_30]"]],"annots":[[5,1,"Redex"]],"id":141,"label":"[] @ h"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,9,"Redex"],[69,137,"Redex"],[218,5,"Redex"],[226,5,"Redex"]],"id":142,"label":"List.rev (let seen' =\n            [_30] @ 2 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":143,"label":"2 :: []"},{"span":null,"env":[],"annots":[],"id":144,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[37,9,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":145,"label":"List.rev (let rest' =\n            if (2 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[20,2,"Redex"],[61,1,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":146,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,286,"Redex"]],"id":147,"label":"match [[_30] ; 2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":149,"label":"(i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"],["rest'","[2]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":150,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":151,"label":"rest'"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[],"annots":[[0,381,"Redex"]],"id":153,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":154,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":155,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":156,"label":"rest'"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":157,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":158,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"]],"annots":[[2,1,"Redex"]],"id":159,"label":"f y"},{"span":null,"env":[["y","2"]],"annots":[[0,1,"Redex"]],"id":160,"label":"y"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":161,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":162,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":163,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":164,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":165,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":166,"label":"2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":167,"label":"(y , List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":168,"label":"List.filter f ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_30]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":169,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_30]"]],"annots":[[0,5,"Redex"]],"id":170,"label":"seen'"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_30]"]],"annots":[[0,1,"Redex"]],"id":171,"label":"h"},{"span":null,"env":[],"annots":[],"id":172,"label":"[_30]"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,9,"Redex"]],"id":173,"label":"[_30] @ 2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,10,"Redex"],[70,137,"Redex"],[219,5,"Redex"],[227,5,"Redex"]],"id":174,"label":"List.rev (let seen' =\n            [] @ [_30] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":176,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":177,"label":"ys"},{"span":null,"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":178,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":179,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":181,"label":"2 mod 2"},{"span":null,"env":[],"annots":[],"id":182,"label":"2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":183,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":184,"label":"y :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":185,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":186,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":188,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":189,"label":"seen"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,212,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":190,"label":"let rest' = match [2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,122,"Redex"]],"id":191,"label":"match [2] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,83,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":192,"label":"List.rev (let rest' =\n            let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,1,"Redex"],[54,2,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":193,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","2"]],"annots":[[1,1,"Redex"]],"id":194,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":195,"label":"(2 mod 2) = 0"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":196,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":197,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":198,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":199,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":200,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[38,1,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":201,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":202,"label":"[2]"},{"span":null,"env":[["xs","[2]"]],"annots":[[0,2,"Redex"]],"id":203,"label":"xs"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":204,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":208,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":209,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[39,195,"Redex"],[256,5,"Redex"],[264,5,"Redex"]],"id":210,"label":"List.rev (let rest' =\n            2 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f y\n                               then y :: (List.filter f ys)\n                               else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":211,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":212,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":213,"label":"h"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":214,"label":"f"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[2]"]],"annots":[[0,4,"Redex"]],"id":216,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":217,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"]],"annots":[[3,3,"Redex"]],"id":218,"label":"if f 2\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":219,"label":"[]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,111,"Redex"],[135,5,"Redex"],[143,5,"Redex"]],"id":220,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":null,"env":[["xs","[]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[12,2,"Redex"],[61,1,"Redex"]],"id":221,"label":"2 :: (match xs with\n      | [] -> []\n      | y :: ys -> if f y\n                   then y :: (List.filter f ys)\n                   else List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":222,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[31,5,"Redex"],[39,5,"Redex"]],"id":223,"label":"let rest' = 2 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,389,"Redex"]],"id":224,"label":"List.rev (match [2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","2"]],"annots":[[8,1,"Redex"]],"id":226,"label":"[_30] @ h"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":227,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":228,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[17,3,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":229,"label":"let rest' =\n  if f 2\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":230,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":231,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[54,2,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":233,"label":"List.rev (let rest' =\n            2 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":234,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"],[66,137,"Redex"],[215,5,"Redex"],[223,5,"Redex"]],"id":235,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"],[34,107,"Redex"],[153,5,"Redex"],[161,5,"Redex"]],"id":236,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,10,"Redex"],[38,107,"Redex"],[157,5,"Redex"],[165,5,"Redex"]],"id":237,"label":"let seen' = [] @ [_30] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[39,1,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":238,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[32,1,"Redex"],[45,5,"Redex"],[53,5,"Redex"]],"id":239,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,45,"Redex"],[69,5,"Redex"],[77,5,"Redex"]],"id":240,"label":"let rest' = List.filter is_in\n                        [2] in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":242,"label":"@"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[63,5,"Redex"],[71,5,"Redex"]],"id":243,"label":"List.rev (let rest' =\n            2 :: [] in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":244,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":245,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[9,53,"Redex"]],"id":247,"label":"List.rev (let rest' = [2] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[0,41,"Redex"]],"id":248,"label":"let rest' = [2] in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"],[68,137,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":249,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":250,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[19,1,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":251,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":252,"label":"t"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[_30]"],["h","2"],["t","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":253,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":254,"label":"2"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":255,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":256,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[0,59,"Redex"]],"id":257,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":258,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":259,"label":"t"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":260,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["xs","[]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":261,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,278,"Redex"]],"id":262,"label":"match [2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":263,"label":"helper"},{"span":null,"env":[],"annots":[],"id":264,"label":"[_30]"},{"span":null,"env":[],"annots":[],"id":265,"label":"_30"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_30] ; 2]"]],"annots":[[0,4,"Redex"]],"id":266,"label":"rest"},{"span":null,"env":[],"annots":[],"id":267,"label":"[[_30] ; 2]"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[_30]"],["h","2"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":268,"label":"seen @ h"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":269,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":270,"label":"t"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[_30]"]],"annots":[[0,4,"Redex"]],"id":271,"label":"seen"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":272,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":273,"label":"[[_30] ; 2]"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,5,"Redex"]],"id":274,"label":"if 0 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[],"annots":[],"id":275,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":276,"label":"([_30] , [2])"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":277,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":278,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":279,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":281,"label":"0"},{"span":null,"env":[],"annots":[],"id":282,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":283,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[40,2,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":284,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":285,"label":"2"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":286,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":287,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":288,"label":"rest'"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":291,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":292,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":293,"label":"[_30]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":294,"label":"f y"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":295,"label":"y"},{"span":null,"env":[],"annots":[],"id":296,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":298,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":299,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_30] ; 2]"]],"annots":[[6,1,"Redex"]],"id":300,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_30] ; 2]"]],"annots":[[0,1,"Redex"]],"id":301,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[_30] ; 2]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":302,"label":"helper ([] , l)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":303,"label":"f y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":304,"label":"f"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":305,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":306,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":307,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":308,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":309,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":310,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":311,"label":"helper"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,121,"Redex"]],"id":312,"label":"match [] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_30] ; 2]"]],"annots":[[23,1,"Redex"]],"id":313,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_30] ; 2]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":314,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":316,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[]"]],"annots":[[0,1,"Redex"]],"id":317,"label":"t"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":318,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[46,2,"Redex"],[119,1,"Redex"],[256,5,"Redex"],[264,5,"Redex"]],"id":319,"label":"List.rev (let rest' =\n            2 :: (match xs with\n                  | [] -> []\n                  | y :: ys -> if f y\n                               then y :: (List.filter f ys)\n                               else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":320,"label":"[]"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":322,"label":"y"},{"span":null,"env":[],"annots":[],"id":323,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[39,18,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":326,"label":"List.rev (let rest' =\n            2 :: (List.filter f []) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":327,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":328,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,21,"Redex"],[77,5,"Redex"],[85,5,"Redex"]],"id":329,"label":"List.rev (let rest' =\n            List.filter is_in [2] in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_30]"],["rest'","[2]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":330,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":331,"label":"rest'"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":332,"label":"rest"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":333,"label":"ys"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":334,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":335,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":336,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":337,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":338,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":340,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":341,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[_30]"]],"annots":[[0,4,"Redex"]],"id":342,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":343,"label":"h"},{"span":null,"env":[],"annots":[],"id":344,"label":"true"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":345,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":346,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":347,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,170,"Redex"],[226,5,"Redex"],[234,5,"Redex"]],"id":348,"label":"List.rev (let rest' =\n            match [2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":349,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":350,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":351,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[_30]"]],"annots":[[0,4,"Redex"]],"id":352,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":353,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":354,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":355,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":356,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":357,"label":"List.rev"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":358,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":359,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":360,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":361,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":362,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":363,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":364,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":365,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":366,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":367,"label":"seen'"},{"span":null,"env":[["ys","[]"]],"annots":[[0,2,"Redex"]],"id":368,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":369,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":370,"label":"(y , List.filter f ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_30]"]],"annots":[[0,5,"Redex"]],"id":371,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":372,"label":"[[_30] ; 2]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":373,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":374,"label":"@"},{"span":null,"env":[],"annots":[],"id":375,"label":"_30"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":376,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":377,"label":"List.rev"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":378,"label":"i"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":379,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":380,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":381,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":382,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":383,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":384,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":385,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":386,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":387,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":388,"label":"@"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":389,"label":"seen"},{"span":null,"env":[],"annots":[],"id":390,"label":"_30"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":391,"label":"t"}]}