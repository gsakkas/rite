{"root":168,"result":"stuck","reason":"Type error: stuck because int is incompatible with 'a list","bad":56,"stuck":210,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":0,"label":"StepsTo CallStep"},{"arrows":"to","to":59,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":97,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":1,"label":"StepsTo CallStep"},{"arrows":"to","to":233,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":453,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 2"},{"arrows":"to","to":71,"from":12,"label":"StepsTo BoringStep"},{"arrows":"to","to":91,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":108,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":235,"from":13,"label":"SubTerm 2"},{"arrows":"to","to":319,"from":13,"label":"StepsTo BoringStep"},{"arrows":"to","to":388,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":97,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":233,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":312,"from":14,"label":"SubTerm 2"},{"arrows":"to","to":16,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":416,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":17,"label":"StepsTo ReturnStep"},{"arrows":"to","to":18,"from":17,"label":"SubTerm 2"},{"arrows":"to","to":330,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":332,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":0,"from":19,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":305,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":428,"from":20,"label":"SubTerm 2"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":22,"label":"StepsTo PrimStep"},{"arrows":"to","to":131,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":23,"label":"StepsTo PrimStep"},{"arrows":"to","to":221,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":110,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":377,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":488,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":26,"label":"StepsTo PrimStep"},{"arrows":"to","to":51,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":27,"label":"StepsTo PrimStep"},{"arrows":"to","to":211,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":24,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":334,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":329,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":34,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":34,"label":"StepsTo BoringStep"},{"arrows":"to","to":146,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":108,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":35,"label":"StepsTo BoringStep"},{"arrows":"to","to":436,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":36,"label":"StepsTo CallStep"},{"arrows":"to","to":51,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":38,"label":"StepsTo CallStep"},{"arrows":"to","to":161,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":40,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":130,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":414,"from":39,"label":"SubTerm 2"},{"arrows":"to","to":42,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":234,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":44,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":443,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":13,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":436,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":284,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":417,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":50,"label":"StepsTo CallStep"},{"arrows":"to","to":324,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":260,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":40,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":56,"label":"SubTerm 2"},{"arrows":"to","to":130,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":58,"label":"StepsTo BoringStep"},{"arrows":"to","to":257,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":60,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":61,"label":"StepsTo CallStep"},{"arrows":"to","to":292,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":64,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":347,"from":63,"label":"SubTerm 2"},{"arrows":"to","to":463,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":241,"from":69,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":70,"label":"StepsTo BoringStep"},{"arrows":"to","to":227,"from":70,"label":"SubTerm 2"},{"arrows":"to","to":240,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":398,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":71,"label":"SubTerm 2"},{"arrows":"to","to":72,"from":71,"label":"StepsTo PrimStep"},{"arrows":"to","to":119,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":72,"label":"SubTerm 2"},{"arrows":"to","to":76,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":313,"from":72,"label":"StepsTo ReturnStep"},{"arrows":"to","to":188,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":76,"label":"StepsTo ReturnStep"},{"arrows":"to","to":296,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":77,"label":"StepsTo ReturnStep"},{"arrows":"to","to":182,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":271,"from":80,"label":"StepsTo ReturnStep"},{"arrows":"to","to":43,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":44,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":294,"from":82,"label":"StepsTo ReturnStep"},{"arrows":"to","to":84,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":111,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":365,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":56,"from":88,"label":"SubTerm 1"},{"arrows":"to","to":314,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":391,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":91,"label":"StepsTo BoringStep"},{"arrows":"to","to":184,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":296,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":139,"from":94,"label":"StepsTo CallStep"},{"arrows":"to","to":342,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":97,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":96,"label":"StepsTo CallStep"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":375,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":497,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":280,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":208,"from":102,"label":"StepsTo BoringStep"},{"arrows":"to","to":155,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":310,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":105,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":390,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":384,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":109,"label":"StepsTo BoringStep"},{"arrows":"to","to":227,"from":109,"label":"SubTerm 2"},{"arrows":"to","to":398,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":404,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":409,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":429,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":156,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":112,"label":"StepsTo CallStep"},{"arrows":"to","to":13,"from":112,"label":"SubTerm 2"},{"arrows":"to","to":134,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":115,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":115,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":116,"label":"StepsTo BoringStep"},{"arrows":"to","to":117,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":292,"from":117,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":119,"label":"StepsTo PrimStep"},{"arrows":"to","to":185,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":296,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":425,"from":120,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":268,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":122,"label":"StepsTo BoringStep"},{"arrows":"to","to":123,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":123,"label":"StepsTo BoringStep"},{"arrows":"to","to":258,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":152,"from":124,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":328,"from":125,"label":"StepsTo BoringStep"},{"arrows":"to","to":365,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":455,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":128,"label":"SubTerm 2"},{"arrows":"to","to":254,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":437,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":397,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":130,"label":"SubTerm 2"},{"arrows":"to","to":450,"from":130,"label":"SubTerm 3"},{"arrows":"to","to":494,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":133,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":202,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":134,"label":"StepsTo CallStep"},{"arrows":"to","to":108,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":367,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":138,"label":"StepsTo BoringStep"},{"arrows":"to","to":342,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":189,"from":139,"label":"StepsTo BoringStep"},{"arrows":"to","to":212,"from":139,"label":"SubTerm 2"},{"arrows":"to","to":344,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":456,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":434,"from":147,"label":"SubTerm 2"},{"arrows":"to","to":505,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":460,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":150,"label":"SubTerm 2"},{"arrows":"to","to":131,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":328,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":335,"from":153,"label":"StepsTo CallStep"},{"arrows":"to","to":94,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":154,"label":"StepsTo CallStep"},{"arrows":"to","to":131,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":155,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":225,"from":155,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":117,"from":156,"label":"StepsTo BoringStep"},{"arrows":"to","to":86,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":124,"from":158,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":161,"label":"StepsTo CallStep"},{"arrows":"to","to":163,"from":162,"label":"SubTerm 2"},{"arrows":"to","to":362,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":498,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":164,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":267,"from":164,"label":"StepsTo BoringStep"},{"arrows":"to","to":102,"from":165,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":333,"from":165,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":243,"from":166,"label":"StepsTo PrimStep"},{"arrows":"to","to":80,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":216,"from":167,"label":"StepsTo ReturnStep"},{"arrows":"to","to":169,"from":168,"label":"StepsTo CallStep"},{"arrows":"to","to":474,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":485,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":309,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":403,"from":169,"label":"StepsTo BoringStep"},{"arrows":"to","to":406,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":170,"label":"SubTerm 1"},{"arrows":"to","to":457,"from":170,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":464,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":172,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":220,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":299,"from":173,"label":"StepsTo BoringStep"},{"arrows":"to","to":433,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":481,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":175,"label":"SubTerm 1"},{"arrows":"to","to":426,"from":175,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":177,"label":"SubTerm 0"},{"arrows":"to","to":252,"from":177,"label":"StepsTo CallStep"},{"arrows":"to","to":308,"from":177,"label":"SubTerm 1"},{"arrows":"to","to":106,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":346,"from":179,"label":"StepsTo ReturnStep"},{"arrows":"to","to":42,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":279,"from":180,"label":"StepsTo ReturnStep"},{"arrows":"to","to":412,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":445,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":182,"label":"SubTerm 2"},{"arrows":"to","to":183,"from":182,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":182,"label":"StepsTo BoringStep"},{"arrows":"to","to":438,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":329,"from":183,"label":"StepsTo BoringStep"},{"arrows":"to","to":185,"from":184,"label":"StepsTo BoringStep"},{"arrows":"to","to":255,"from":184,"label":"SubTerm 1"},{"arrows":"to","to":431,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":185,"label":"StepsTo PrimStep"},{"arrows":"to","to":255,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":441,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":189,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":189,"label":"SubTerm 1"},{"arrows":"to","to":212,"from":189,"label":"SubTerm 2"},{"arrows":"to","to":345,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":191,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":295,"from":191,"label":"SubTerm 3"},{"arrows":"to","to":465,"from":191,"label":"SubTerm 2"},{"arrows":"to","to":466,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":468,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":192,"label":"StepsTo CallStep"},{"arrows":"to","to":195,"from":192,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":387,"from":193,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":195,"label":"StepsTo CallStep"},{"arrows":"to","to":374,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":196,"label":"StepsTo BoringStep"},{"arrows":"to","to":204,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":196,"label":"SubTerm 2"},{"arrows":"to","to":215,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":224,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":197,"label":"StepsTo BoringStep"},{"arrows":"to","to":314,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":368,"from":198,"label":"StepsTo BoringStep"},{"arrows":"to","to":201,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":383,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":203,"from":202,"label":"SubTerm 0"},{"arrows":"to","to":422,"from":202,"label":"SubTerm 1"},{"arrows":"to","to":205,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":206,"label":"SubTerm 1"},{"arrows":"to","to":337,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":444,"from":207,"label":"SubTerm 1"},{"arrows":"to","to":462,"from":207,"label":"SubTerm 2"},{"arrows":"to","to":51,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":208,"label":"StepsTo CallStep"},{"arrows":"to","to":310,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":210,"from":209,"label":"StepsTo BoringStep"},{"arrows":"to","to":232,"from":209,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":211,"label":"SubTerm 2"},{"arrows":"to","to":182,"from":211,"label":"StepsTo ReturnStep"},{"arrows":"to","to":183,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":212,"label":"SubTerm 1"},{"arrows":"to","to":272,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":214,"label":"StepsTo PrimStep"},{"arrows":"to","to":267,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":480,"from":216,"label":"StepsTo ReturnStep"},{"arrows":"to","to":219,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":487,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":220,"label":"SubTerm 2"},{"arrows":"to","to":173,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":226,"from":220,"label":"StepsTo BoringStep"},{"arrows":"to","to":191,"from":221,"label":"StepsTo PrimStep"},{"arrows":"to","to":222,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":326,"from":221,"label":"SubTerm 2"},{"arrows":"to","to":358,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":223,"label":"StepsTo BoringStep"},{"arrows":"to","to":222,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":327,"from":223,"label":"SubTerm 2"},{"arrows":"to","to":358,"from":223,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":224,"label":"StepsTo BoringStep"},{"arrows":"to","to":40,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":224,"label":"SubTerm 1"},{"arrows":"to","to":414,"from":224,"label":"SubTerm 2"},{"arrows":"to","to":42,"from":225,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":225,"label":"StepsTo CallStep"},{"arrows":"to","to":319,"from":225,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":226,"label":"SubTerm 2"},{"arrows":"to","to":183,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":226,"label":"StepsTo PrimStep"},{"arrows":"to","to":299,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":227,"label":"SubTerm 2"},{"arrows":"to","to":281,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":304,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":228,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":230,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":230,"label":"StepsTo ReturnStep"},{"arrows":"to","to":78,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":198,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":39,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":232,"label":"StepsTo BoringStep"},{"arrows":"to","to":314,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":234,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":234,"label":"SubTerm 2"},{"arrows":"to","to":330,"from":234,"label":"SubTerm 1"},{"arrows":"to","to":331,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":405,"from":235,"label":"StepsTo BoringStep"},{"arrows":"to","to":420,"from":240,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":241,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":242,"from":241,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":280,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":323,"from":242,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":243,"label":"StepsTo PrimStep"},{"arrows":"to","to":51,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":338,"from":244,"label":"StepsTo ReturnStep"},{"arrows":"to","to":346,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":246,"from":245,"label":"SubTerm 1"},{"arrows":"to","to":283,"from":245,"label":"SubTerm 2"},{"arrows":"to","to":475,"from":245,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":479,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":252,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":252,"label":"StepsTo BoringStep"},{"arrows":"to","to":196,"from":253,"label":"StepsTo BoringStep"},{"arrows":"to","to":206,"from":253,"label":"SubTerm 2"},{"arrows":"to","to":215,"from":253,"label":"SubTerm 1"},{"arrows":"to","to":364,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":228,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":256,"label":"StepsTo BoringStep"},{"arrows":"to","to":476,"from":256,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":257,"label":"SubTerm 2"},{"arrows":"to","to":183,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":300,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":374,"from":257,"label":"StepsTo BoringStep"},{"arrows":"to","to":259,"from":258,"label":"SubTerm 0"},{"arrows":"to","to":268,"from":258,"label":"StepsTo BoringStep"},{"arrows":"to","to":303,"from":258,"label":"SubTerm 1"},{"arrows":"to","to":396,"from":258,"label":"SubTerm 2"},{"arrows":"to","to":269,"from":259,"label":"StepsTo BoringStep"},{"arrows":"to","to":261,"from":260,"label":"SubTerm 1"},{"arrows":"to","to":478,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":411,"from":262,"label":"StepsTo PrimStep"},{"arrows":"to","to":476,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":264,"from":263,"label":"SubTerm 1"},{"arrows":"to","to":343,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":482,"from":265,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":267,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":267,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":267,"label":"StepsTo PrimStep"},{"arrows":"to","to":257,"from":268,"label":"StepsTo BoringStep"},{"arrows":"to","to":269,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":303,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":396,"from":268,"label":"SubTerm 2"},{"arrows":"to","to":415,"from":269,"label":"SubTerm 0"},{"arrows":"to","to":452,"from":269,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":271,"label":"SubTerm 0"},{"arrows":"to","to":294,"from":271,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":271,"label":"StepsTo ReturnStep"},{"arrows":"to","to":348,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":408,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":273,"label":"SubTerm 0"},{"arrows":"to","to":196,"from":273,"label":"SubTerm 1"},{"arrows":"to","to":274,"from":273,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":209,"from":274,"label":"StepsTo BoringStep"},{"arrows":"to","to":366,"from":275,"label":"SubTerm 0"},{"arrows":"to","to":277,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":427,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":447,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":447,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":279,"label":"StepsTo BoringStep"},{"arrows":"to","to":313,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":280,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":280,"label":"SubTerm 0"},{"arrows":"to","to":417,"from":280,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":281,"label":"SubTerm 0"},{"arrows":"to","to":370,"from":284,"label":"SubTerm 1"},{"arrows":"to","to":402,"from":284,"label":"SubTerm 2"},{"arrows":"to","to":430,"from":284,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":285,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":286,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":287,"label":"SubTerm 1"},{"arrows":"to","to":289,"from":287,"label":"StepsTo BoringStep"},{"arrows":"to","to":290,"from":288,"label":"StepsTo BoringStep"},{"arrows":"to","to":306,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":350,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":289,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":289,"label":"StepsTo BoringStep"},{"arrows":"to","to":290,"from":289,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":290,"label":"SubTerm 1"},{"arrows":"to","to":308,"from":290,"label":"StepsTo BoringStep"},{"arrows":"to","to":350,"from":290,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":291,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":292,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":292,"label":"SubTerm 1"},{"arrows":"to","to":164,"from":292,"label":"StepsTo CallStep"},{"arrows":"to","to":14,"from":293,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":293,"label":"StepsTo BoringStep"},{"arrows":"to","to":320,"from":293,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":294,"label":"StepsTo ReturnStep"},{"arrows":"to","to":276,"from":297,"label":"SubTerm 0"},{"arrows":"to","to":298,"from":297,"label":"SubTerm 1"},{"arrows":"to","to":262,"from":299,"label":"SubTerm 0"},{"arrows":"to","to":353,"from":299,"label":"StepsTo PrimStep"},{"arrows":"to","to":433,"from":299,"label":"SubTerm 1"},{"arrows":"to","to":96,"from":300,"label":"StepsTo BoringStep"},{"arrows":"to","to":97,"from":300,"label":"SubTerm 0"},{"arrows":"to","to":320,"from":300,"label":"SubTerm 1"},{"arrows":"to","to":302,"from":301,"label":"SubTerm 1"},{"arrows":"to","to":496,"from":301,"label":"SubTerm 0"},{"arrows":"to","to":305,"from":304,"label":"SubTerm 0"},{"arrows":"to","to":361,"from":304,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":306,"label":"StepsTo BoringStep"},{"arrows":"to","to":379,"from":306,"label":"SubTerm 1"},{"arrows":"to","to":472,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":339,"from":307,"label":"StepsTo BoringStep"},{"arrows":"to","to":372,"from":307,"label":"SubTerm 0"},{"arrows":"to","to":379,"from":307,"label":"SubTerm 1"},{"arrows":"to","to":253,"from":308,"label":"StepsTo CallStep"},{"arrows":"to","to":339,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":350,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":407,"from":309,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":310,"label":"StepsTo CallStep"},{"arrows":"to","to":225,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":312,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":313,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":313,"label":"SubTerm 2"},{"arrows":"to","to":146,"from":313,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":313,"label":"SubTerm 0"},{"arrows":"to","to":381,"from":314,"label":"SubTerm 1"},{"arrows":"to","to":435,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":288,"from":317,"label":"StepsTo BoringStep"},{"arrows":"to","to":108,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":234,"from":319,"label":"StepsTo CallStep"},{"arrows":"to","to":388,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":405,"from":319,"label":"SubTerm 2"},{"arrows":"to","to":42,"from":320,"label":"StepsTo BoringStep"},{"arrows":"to","to":322,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":399,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":432,"from":321,"label":"SubTerm 2"},{"arrows":"to","to":50,"from":323,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":323,"label":"StepsTo CallStep"},{"arrows":"to","to":131,"from":323,"label":"SubTerm 0"},{"arrows":"to","to":258,"from":324,"label":"StepsTo CallStep"},{"arrows":"to","to":301,"from":324,"label":"SubTerm 2"},{"arrows":"to","to":325,"from":324,"label":"SubTerm 1"},{"arrows":"to","to":461,"from":324,"label":"SubTerm 0"},{"arrows":"to","to":326,"from":327,"label":"StepsTo BoringStep"},{"arrows":"to","to":36,"from":328,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":328,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":328,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":329,"label":"StepsTo BoringStep"},{"arrows":"to","to":332,"from":331,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":333,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":333,"label":"SubTerm 1"},{"arrows":"to","to":380,"from":333,"label":"StepsTo CallStep"},{"arrows":"to","to":37,"from":335,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":335,"label":"SubTerm 0"},{"arrows":"to","to":336,"from":335,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":336,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":336,"label":"SubTerm 1"},{"arrows":"to","to":351,"from":336,"label":"StepsTo PrimStep"},{"arrows":"to","to":51,"from":338,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":338,"label":"StepsTo BoringStep"},{"arrows":"to","to":346,"from":338,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":339,"label":"SubTerm 1"},{"arrows":"to","to":372,"from":339,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":341,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":341,"label":"SubTerm 1"},{"arrows":"to","to":345,"from":344,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":346,"label":"StepsTo BoringStep"},{"arrows":"to","to":279,"from":346,"label":"SubTerm 0"},{"arrows":"to","to":321,"from":348,"label":"SubTerm 0"},{"arrows":"to","to":469,"from":348,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":349,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":349,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":351,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":351,"label":"SubTerm 1"},{"arrows":"to","to":421,"from":351,"label":"StepsTo ReturnStep"},{"arrows":"to","to":411,"from":353,"label":"SubTerm 0"},{"arrows":"to","to":433,"from":353,"label":"SubTerm 1"},{"arrows":"to","to":438,"from":353,"label":"StepsTo ReturnStep"},{"arrows":"to","to":200,"from":356,"label":"StepsTo BoringStep"},{"arrows":"to","to":201,"from":356,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":357,"label":"StepsTo BoringStep"},{"arrows":"to","to":63,"from":359,"label":"SubTerm 0"},{"arrows":"to","to":360,"from":359,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":360,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":364,"label":"StepsTo BoringStep"},{"arrows":"to","to":116,"from":365,"label":"StepsTo BoringStep"},{"arrows":"to","to":156,"from":365,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":368,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":368,"label":"SubTerm 0"},{"arrows":"to","to":369,"from":368,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":369,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":369,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":369,"label":"StepsTo CallStep"},{"arrows":"to","to":373,"from":372,"label":"SubTerm 3"},{"arrows":"to","to":449,"from":372,"label":"SubTerm 0"},{"arrows":"to","to":451,"from":372,"label":"SubTerm 1"},{"arrows":"to","to":493,"from":372,"label":"SubTerm 2"},{"arrows":"to","to":14,"from":374,"label":"SubTerm 2"},{"arrows":"to","to":96,"from":374,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":374,"label":"SubTerm 1"},{"arrows":"to","to":220,"from":374,"label":"StepsTo CallStep"},{"arrows":"to","to":376,"from":375,"label":"SubTerm 1"},{"arrows":"to","to":446,"from":375,"label":"SubTerm 0"},{"arrows":"to","to":502,"from":375,"label":"SubTerm 2"},{"arrows":"to","to":378,"from":377,"label":"SubTerm 1"},{"arrows":"to","to":442,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":500,"from":377,"label":"SubTerm 2"},{"arrows":"to","to":92,"from":379,"label":"StepsTo BoringStep"},{"arrows":"to","to":79,"from":380,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":380,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":380,"label":"StepsTo BoringStep"},{"arrows":"to","to":162,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":471,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":128,"from":383,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":384,"label":"SubTerm 1"},{"arrows":"to","to":454,"from":384,"label":"SubTerm 2"},{"arrows":"to","to":503,"from":384,"label":"SubTerm 0"},{"arrows":"to","to":386,"from":385,"label":"SubTerm 1"},{"arrows":"to","to":467,"from":385,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":387,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":387,"label":"SubTerm 0"},{"arrows":"to","to":401,"from":387,"label":"StepsTo PrimStep"},{"arrows":"to","to":222,"from":390,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":390,"label":"StepsTo BoringStep"},{"arrows":"to","to":327,"from":390,"label":"SubTerm 2"},{"arrows":"to","to":357,"from":390,"label":"SubTerm 1"},{"arrows":"to","to":392,"from":391,"label":"SubTerm 1"},{"arrows":"to","to":424,"from":391,"label":"SubTerm 0"},{"arrows":"to","to":501,"from":391,"label":"SubTerm 2"},{"arrows":"to","to":394,"from":393,"label":"SubTerm 1"},{"arrows":"to","to":492,"from":393,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":395,"label":"SubTerm 1"},{"arrows":"to","to":400,"from":395,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":396,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":396,"label":"SubTerm 2"},{"arrows":"to","to":285,"from":396,"label":"SubTerm 1"},{"arrows":"to","to":170,"from":397,"label":"SubTerm 0"},{"arrows":"to","to":359,"from":397,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":401,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":401,"label":"SubTerm 0"},{"arrows":"to","to":230,"from":401,"label":"StepsTo PrimStep"},{"arrows":"to","to":131,"from":403,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":403,"label":"StepsTo BoringStep"},{"arrows":"to","to":240,"from":404,"label":"StepsTo BoringStep"},{"arrows":"to","to":395,"from":406,"label":"SubTerm 1"},{"arrows":"to","to":458,"from":406,"label":"SubTerm 0"},{"arrows":"to","to":341,"from":407,"label":"SubTerm 2"},{"arrows":"to","to":423,"from":407,"label":"SubTerm 0"},{"arrows":"to","to":506,"from":407,"label":"SubTerm 1"},{"arrows":"to","to":385,"from":408,"label":"SubTerm 1"},{"arrows":"to","to":499,"from":408,"label":"SubTerm 0"},{"arrows":"to","to":410,"from":409,"label":"SubTerm 1"},{"arrows":"to","to":483,"from":409,"label":"SubTerm 0"},{"arrows":"to","to":413,"from":412,"label":"SubTerm 1"},{"arrows":"to","to":491,"from":412,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":414,"label":"StepsTo BoringStep"},{"arrows":"to","to":324,"from":417,"label":"StepsTo BoringStep"},{"arrows":"to","to":325,"from":417,"label":"SubTerm 1"},{"arrows":"to","to":461,"from":417,"label":"SubTerm 0"},{"arrows":"to","to":477,"from":417,"label":"SubTerm 2"},{"arrows":"to","to":263,"from":418,"label":"SubTerm 0"},{"arrows":"to","to":419,"from":418,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":421,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":421,"label":"StepsTo BoringStep"},{"arrows":"to","to":338,"from":421,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":425,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":425,"label":"SubTerm 0"},{"arrows":"to","to":192,"from":425,"label":"StepsTo BoringStep"},{"arrows":"to","to":441,"from":431,"label":"StepsTo BoringStep"},{"arrows":"to","to":440,"from":435,"label":"SubTerm 1"},{"arrows":"to","to":459,"from":435,"label":"SubTerm 0"},{"arrows":"to","to":367,"from":436,"label":"StepsTo BoringStep"},{"arrows":"to","to":448,"from":440,"label":"SubTerm 1"},{"arrows":"to","to":470,"from":440,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":447,"label":"SubTerm 0"},{"arrows":"to","to":486,"from":447,"label":"SubTerm 1"},{"arrows":"to","to":297,"from":469,"label":"SubTerm 0"},{"arrows":"to","to":418,"from":471,"label":"SubTerm 0"},{"arrows":"to","to":372,"from":472,"label":"StepsTo BoringStep"},{"arrows":"to","to":301,"from":477,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":480,"label":"SubTerm 0"},{"arrows":"to","to":287,"from":480,"label":"StepsTo BoringStep"},{"arrows":"to","to":317,"from":480,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":484,"label":"SubTerm 0"},{"arrows":"to","to":495,"from":484,"label":"SubTerm 1"},{"arrows":"to","to":489,"from":488,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":489,"label":"SubTerm 0"},{"arrows":"to","to":490,"from":489,"label":"SubTerm 1"},{"arrows":"to","to":484,"from":497,"label":"SubTerm 0"}],"nodes":[{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,17,"Redex"]],"id":0,"label":"(0 , List.filter f [3])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,17,"Redex"]],"id":1,"label":"List.filter f [3]"},{"span":null,"env":[],"annots":[],"id":2,"label":"(0 , [])"},{"span":null,"env":[],"annots":[],"id":3,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _]"]],"annots":[[1,5,"Redex"]],"id":6,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":7,"label":"rest'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[4,1,"Redex"]],"id":12,"label":"if (i mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[16,4,"Redex"]],"id":13,"label":"List.filter f_1 ys_1"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[14,2,"Redex"]],"id":14,"label":"List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[6,1,"Redex"]],"id":15,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":16,"label":"l"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":17,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":18,"label":"if f_2 y\nthen y :: (List.filter f_2 ys)\nelse List.filter f_2 ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[19,2,"Redex"]],"id":19,"label":"(0 , List.filter f ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":20,"label":"List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":21,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,20,"Redex"]],"id":22,"label":"List.rev (let seen' =\n            [] @ [_ ; _ ; _ ; _] in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t) in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[14,20,"Redex"]],"id":23,"label":"let seen' =\n  [] @ [_ ; _ ; _ ; _] in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":24,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 3]"]],"annots":[[0,59,"Redex"]],"id":25,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[17,9,"Redex"]],"id":26,"label":"let rest' =\n  if (0 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[17,5,"Redex"]],"id":27,"label":"let rest' =\n  if 0 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _ ; _ ; _]"],["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[39,1,"Redex"]],"id":28,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _ ; _ ; _]"],["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[17,1,"Redex"]],"id":29,"label":"let seen' = [] @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":30,"label":"f y"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":31,"label":"y"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[14,1,"Redex"]],"id":32,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[34,2,"Redex"]],"id":33,"label":"let rest' =\n  0 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"]],"annots":[[7,3,"Redex"]],"id":34,"label":"if f_1 y_1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"]],"annots":[[4,3,"Redex"]],"id":35,"label":"f_1 y_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[23,5,"Redex"]],"id":36,"label":"let rest' =\n  0 :: (if f_1 3\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[24,1,"Redex"]],"id":37,"label":"let rest' =\n  0 :: (if (i mod 2) = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[19,19,"Redex"]],"id":38,"label":"let rest' =\n  0 :: (List.filter f [3]) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[18,3,"Redex"]],"id":39,"label":"[_ ; _ ; _ ; _] @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":40,"label":"(@)"},{"span":null,"env":[],"annots":[],"id":42,"label":"0"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":43,"label":"(0 , match xs_2 with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":44,"label":"(0 , match [] with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":45,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":46,"label":"List.filter"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[],"id":47,"label":"(y_1 , List.filter f_1 ys_1)"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 3]"]],"annots":[[0,59,"Redex"]],"id":49,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[12,49,"Redex"]],"id":50,"label":"let rest' = List.filter is_in\n                        [0 ; 3] in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[8,5,"Redex"]],"id":51,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":52,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":53,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[0,1,"Redex"]],"id":55,"label":"l"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,19,"Redex"]],"id":56,"label":"[_ ; _ ; _ ; _] @ 0"},{"span":null,"env":[],"annots":[],"id":57,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[19,1,"Redex"]],"id":58,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":59,"label":"[3]"},{"span":null,"env":[],"annots":[],"id":60,"label":"3"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"]],"annots":[[9,5,"Redex"]],"id":61,"label":"0 :: (if f_1 3\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[10,1,"Redex"]],"id":62,"label":"0 :: (if (i mod 2) = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[18,1,"Redex"]],"id":63,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":64,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[6,1,"Redex"]],"id":68,"label":"([] , l)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,202,"Redex"]],"id":69,"label":"List.rev (let seen' =\n            [_ ; _ ; _ ; _] in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,128,"Redex"]],"id":70,"label":"match [3] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[3,9,"Redex"]],"id":71,"label":"if (3 mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[3,5,"Redex"]],"id":72,"label":"if 1 = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":74,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":76,"label":"1 = 0"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[],"id":77,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[12,111,"Redex"]],"id":78,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[26,4,"Redex"]],"id":79,"label":"let rest' =\n  0 :: (match xs_2 with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[19,161,"Redex"]],"id":80,"label":"let rest' =\n  0 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":81,"label":"0 :: (match xs_2 with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":82,"label":"0 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":83,"label":"f_2 y"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":84,"label":"f_2"},{"span":null,"env":[["xs_1","[3]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[26,4,"Redex"]],"id":86,"label":"let rest' =\n  0 :: (match xs_1 with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_1","[3]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":87,"label":"0 :: (match xs_1 with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[14,19,"Redex"]],"id":88,"label":"let seen' =\n  [_ ; _ ; _ ; _] @ 0 in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t_1) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,112,"Redex"]],"id":89,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":90,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"]],"annots":[[1,1,"Redex"]],"id":91,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":92,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":93,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,39,"Redex"]],"id":94,"label":"helper ([] , [[_ ; _ ; _ ; _] ; 0 ; 3])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":95,"label":"([] , [[_ ; _ ; _ ; _] ; 0 ; 3])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":96,"label":"f 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":97,"label":"f"},{"span":null,"env":[],"annots":[],"id":98,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":99,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":100,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[12,112,"Redex"]],"id":101,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[36,4,"Redex"]],"id":102,"label":"let rest' =\n  0 :: (List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[22,4,"Redex"]],"id":103,"label":"0 :: (List.filter f_1 ys_1)"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _ ; _ ; _]"],["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,4,"Redex"]],"id":104,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _ ; _ ; _]"],["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"]],"id":105,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":106,"label":"(y , List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":107,"label":"y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":108,"label":"f_1"},{"span":null,"env":[["xs_1","[3]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":109,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":110,"label":"helper (seen' , rest')"},{"span":null,"env":[["xs_1","[3]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":111,"label":"(0 , match xs_1 with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"]],"annots":[[3,5,"Redex"]],"id":112,"label":"if f_1 3\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _ ; _ ; _] ; 0 ; 3]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,4,"Redex"]],"id":114,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,357,"Redex"]],"id":115,"label":"List.rev (match [[_ ; _ ; _ ; _] ; 0 ; 3] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"]],"annots":[[13,3,"Redex"]],"id":116,"label":"0 :: (if f_1 y_1\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"]],"annots":[[12,3,"Redex"]],"id":117,"label":"(0 , if f_1 y_1\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":118,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":119,"label":"(3 mod 2) = 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[34,174,"Redex"]],"id":120,"label":"List.rev (let rest' =\n            match [0 ; 3] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[12,216,"Redex"]],"id":121,"label":"let rest' = match [0 ; 3] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":null,"env":[["xs","[0 ; 3]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[40,2,"Redex"]],"id":122,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs","[0 ; 3]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[20,2,"Redex"]],"id":123,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[39,256,"Redex"]],"id":124,"label":"List.rev (let rest' =\n            0 :: (match [3] with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[19,162,"Redex"]],"id":125,"label":"let rest' =\n  0 :: (match [3] with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":126,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":127,"label":"2"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"]],"id":128,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"]],"id":129,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":130,"label":"[_ ; _ ; _ ; _]"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":131,"label":"List.rev"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[8,5,"Redex"]],"id":132,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":133,"label":"helper"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":134,"label":"f_1 3"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[13,1,"Redex"]],"id":138,"label":"helper ([] , l)"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _ ; _ ; _] ; 0 ; 3]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,4,"Redex"]],"id":139,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":140,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":143,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":144,"label":"2"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[],"id":146,"label":"y_1 :: (List.filter f_1 ys_1)"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":147,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":148,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"]],"id":150,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":151,"label":"(@)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[47,3,"Redex"]],"id":152,"label":"List.rev (let rest' =\n            0 :: (if f_1 y_1\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[43,5,"Redex"]],"id":153,"label":"List.rev (let rest' =\n            0 :: (if f_1 3\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,41,"Redex"]],"id":154,"label":"List.rev (helper ([] , [[_ ; _ ; _ ; _] ; 0 ; 3]))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[21,4,"Redex"]],"id":155,"label":"(0 , List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,148,"Redex"]],"id":156,"label":"(0 , match [3] with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":null,"env":[["xs_1","[3]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[46,4,"Redex"]],"id":158,"label":"List.rev (let rest' =\n            0 :: (match xs_1 with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,19,"Redex"]],"id":161,"label":"0 :: (List.filter f [3])"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[],"id":162,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[]"]],"annots":[],"id":163,"label":"t_1"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[9,1,"Redex"]],"id":164,"label":"(0 , if (i mod 2) = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[56,4,"Redex"]],"id":165,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[23,9,"Redex"]],"id":166,"label":"let rest' =\n  0 :: (if (3 mod 2) = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[39,255,"Redex"]],"id":167,"label":"List.rev (let rest' =\n            0 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[[0,42,"Redex"]],"id":168,"label":"removeDuplicates [[_ ; _ ; _ ; _] ; 0 ; 3]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[0,360,"Redex"]],"id":169,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[8,5,"Redex"]],"id":170,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":171,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[18,1,"Redex"]],"id":172,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":173,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["List.rev","List.rev"]],"annots":[[23,1,"Redex"]],"id":174,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[13,1,"Redex"]],"id":175,"label":"helper ([] , l)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,32,"Redex"]],"id":177,"label":"List.rev (helper ([_ ; _ ; _ ; _] , [0]))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":178,"label":"y :: (List.filter f_2 ys)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[9,5,"Redex"]],"id":179,"label":"0 :: (if 1 = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[8,5,"Redex"]],"id":180,"label":"(0 , if 1 = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":181,"label":"helper (seen' , rest')"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[0,58,"Redex"]],"id":182,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[0,1,"Redex"]],"id":183,"label":"y :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":184,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":185,"label":"3 mod 2"},{"span":null,"env":[],"annots":[],"id":187,"label":"0"},{"span":null,"env":[],"annots":[],"id":188,"label":"1"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,275,"Redex"]],"id":189,"label":"match [[_ ; _ ; _ ; _] ; 0 ; 3] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,138,"Redex"]],"id":190,"label":"let seen' = [_ ; _ ; _ ; _] in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":191,"label":"[_ ; _ ; _ ; _]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[37,3,"Redex"]],"id":192,"label":"List.rev (let rest' =\n            if f 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[38,1,"Redex"]],"id":193,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":194,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[17,3,"Redex"]],"id":195,"label":"let rest' =\n  if f 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,257,"Redex"]],"id":196,"label":"match [0] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,6,"Redex"]],"id":197,"label":"let seen' = seen_1 @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[34,1,"Redex"]],"id":198,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":199,"label":"rest'"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":200,"label":"fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,360,"Redex"]],"id":201,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":202,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":203,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":204,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":205,"label":"0"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":206,"label":"let seen' = seen_1 @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _]"]],"annots":[],"id":207,"label":"seen_1 @ h"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[19,20,"Redex"]],"id":208,"label":"let rest' =\n  0 :: (List.filter f_1 []) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[52,3,"Redex"]],"id":209,"label":"List.rev (let seen' =\n            [_ ; _ ; _ ; _] @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,19,"Redex"]],"id":210,"label":"List.rev (let seen' =\n            [_ ; _ ; _ ; _] @ 0 in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t_1) in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[3,5,"Redex"]],"id":211,"label":"if 0 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"]],"id":212,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[9,9,"Redex"]],"id":214,"label":"0 :: (if (3 mod 2) = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[_ ; _ ; _ ; _]"]],"annots":[],"id":215,"label":"seen_1"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[],"id":216,"label":"List.rev (let rest' =\n            0 :: [] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":218,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":219,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[4,1,"Redex"]],"id":220,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,20,"Redex"]],"id":221,"label":"[] @ [_ ; _ ; _ ; _]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":222,"label":"(@)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _ ; _ ; _]"]],"annots":[[5,1,"Redex"]],"id":223,"label":"[] @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _]"],["h_1","0"]],"annots":[[0,6,"Redex"]],"id":224,"label":"seen_1 @ h_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":225,"label":"(0 , List.filter f_1 [])"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[3,9,"Redex"]],"id":226,"label":"if (0 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":227,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":228,"label":"i"},{"span":null,"env":[],"annots":[],"id":229,"label":"0"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[],"id":230,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[22,141,"Redex"]],"id":231,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[32,3,"Redex"]],"id":232,"label":"let seen' =\n  [_ ; _ ; _ ; _] @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":233,"label":"List.filter"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":234,"label":"match xs_2 with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[["ys_1","[]"]],"annots":[[0,4,"Redex"]],"id":235,"label":"ys_1"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":236,"label":"[]"},{"span":null,"env":[],"annots":[],"id":239,"label":"false"},{"span":null,"env":[],"annots":[],"id":240,"label":"[3]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[34,87,"Redex"]],"id":241,"label":"List.rev (let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[52,1,"Redex"]],"id":242,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[23,5,"Redex"]],"id":243,"label":"let rest' =\n  0 :: (if 1 = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[],"id":244,"label":"let rest' =\n  0 :: (if false\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":245,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":246,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":247,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":248,"label":"i"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"],["seen_1","[_ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,6,"Redex"]],"id":252,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"],["seen_1","[_ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,6,"Redex"]],"id":253,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":254,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":255,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":256,"label":"i mod 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[3]"]],"annots":[[5,1,"Redex"]],"id":257,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["xs","[0 ; 3]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"]],"id":258,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["xs","[0 ; 3]"]],"annots":[[0,2,"Redex"]],"id":259,"label":"xs"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":260,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":261,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":262,"label":"0 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":263,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":264,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":265,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":266,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[8,9,"Redex"]],"id":267,"label":"(0 , if (3 mod 2) = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,126,"Redex"]],"id":268,"label":"match [0 ; 3] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[],"annots":[],"id":269,"label":"[0 ; 3]"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[],"id":271,"label":"let rest' = 0 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":272,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,339,"Redex"]],"id":273,"label":"List.rev (match [0] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,6,"Redex"]],"id":274,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":275,"label":"[0]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":276,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":277,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":278,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[5,109,"Redex"]],"id":279,"label":"(0 , if false\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0 ; 3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[32,1,"Redex"]],"id":280,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":281,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":283,"label":"h"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 3]"]],"annots":[[18,1,"Redex"]],"id":284,"label":"List.filter is_in t"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"]],"id":285,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"]],"id":286,"label":"(y , List.filter f ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"],["rest'","[0]"]],"annots":[[18,5,"Redex"]],"id":287,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"],["rest'","[0]"]],"annots":[[8,5,"Redex"]],"id":288,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[36,5,"Redex"]],"id":289,"label":"List.rev (helper ([_ ; _ ; _ ; _] , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[26,5,"Redex"]],"id":290,"label":"helper ([_ ; _ ; _ ; _] , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _]"]],"annots":[[0,6,"Redex"]],"id":291,"label":"seen_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"]],"annots":[[8,5,"Redex"]],"id":292,"label":"(0 , if f_1 3\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[1,1,"Redex"]],"id":293,"label":"(y , List.filter f ys)"},{"span":null,"env":[],"annots":[[0,7,"Redex"]],"id":294,"label":"0 :: []"},{"span":null,"env":[],"annots":[],"id":295,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":296,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":297,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":298,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":299,"label":"(0 mod 2) = 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"]],"annots":[[2,1,"Redex"]],"id":300,"label":"f y"},{"span":null,"env":[],"annots":[],"id":301,"label":"[0 ; 3]"},{"span":null,"env":[],"annots":[],"id":302,"label":"3"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":303,"label":"[]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":304,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":305,"label":"f_1"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _]"],["rest'","[0]"]],"annots":[[1,5,"Redex"]],"id":306,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0]"]],"annots":[[19,5,"Redex"]],"id":307,"label":"([_ ; _ ; _ ; _] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,30,"Redex"]],"id":308,"label":"helper ([_ ; _ ; _ ; _] , [0])"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":309,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,20,"Redex"]],"id":310,"label":"0 :: (List.filter f_1 [])"},{"span":null,"env":[["ys","[3]"]],"annots":[[0,2,"Redex"]],"id":312,"label":"ys"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[0,94,"Redex"]],"id":313,"label":"if false\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":314,"label":"let rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[0,41,"Redex"]],"id":317,"label":"let rest' = [0] in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,18,"Redex"]],"id":319,"label":"List.filter f_1 []"},{"span":null,"env":[["y","0"]],"annots":[[0,1,"Redex"]],"id":320,"label":"y"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":321,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":322,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[34,25,"Redex"]],"id":323,"label":"List.rev (let rest' =\n            List.filter is_in [0 ; 3] in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,25,"Redex"]],"id":324,"label":"List.filter is_in [0 ; 3]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":325,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":326,"label":"[_ ; _ ; _ ; _]"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _ ; _ ; _]"]],"annots":[[0,1,"Redex"]],"id":327,"label":"h"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[27,3,"Redex"]],"id":328,"label":"let rest' =\n  0 :: (if f_1 y_1\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3]"]],"annots":[[20,2,"Redex"]],"id":329,"label":"0 :: (List.filter f ys)"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":330,"label":"[]"},{"span":null,"env":[["xs_2","[]"]],"annots":[[0,4,"Redex"]],"id":331,"label":"xs_2"},{"span":null,"env":[],"annots":[],"id":332,"label":"[]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[39,20,"Redex"]],"id":333,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 []) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":334,"label":"f"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[44,1,"Redex"]],"id":335,"label":"List.rev (let rest' =\n            0 :: (if (i mod 2) = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[43,9,"Redex"]],"id":336,"label":"List.rev (let rest' =\n            0 :: (if (3 mod 2) = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":337,"label":"(@)"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[17,185,"Redex"]],"id":338,"label":"let rest' = 0 :: (if false\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1\n                                   ys_1) in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":339,"label":"([_ ; _ ; _ ; _] , [0])"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[12,4,"Redex"]],"id":341,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":342,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":343,"label":"i"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[0,4,"Redex"]],"id":344,"label":"rest"},{"span":null,"env":[],"annots":[],"id":345,"label":"[[_ ; _ ; _ ; _] ; 0 ; 3]"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[5,114,"Redex"]],"id":346,"label":"0 :: (if false\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":347,"label":"t"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":348,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":349,"label":"(y , List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":350,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[43,5,"Redex"]],"id":351,"label":"List.rev (let rest' =\n            0 :: (if 1 = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":352,"label":"[[_ ; _ ; _ ; _] ; 0 ; 3]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":353,"label":"0 = 0"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,481,"Redex"]],"id":356,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' =\n                             (let is_in =\n                                fun i -> (i mod 2) = 0 in\n                              List.filter is_in t) in\n                           helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":357,"label":"seen"},{"span":null,"env":[],"annots":[],"id":358,"label":"[]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":359,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":360,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":361,"label":"y"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":362,"label":"List.filter"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"]],"annots":[[0,6,"Redex"]],"id":364,"label":"rest_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,154,"Redex"]],"id":365,"label":"0 :: (match [3] with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":null,"env":[],"annots":[],"id":366,"label":"0"},{"span":null,"env":[],"annots":[],"id":367,"label":"3"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[54,2,"Redex"]],"id":368,"label":"List.rev (let rest' =\n            0 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[39,19,"Redex"]],"id":369,"label":"List.rev (let rest' =\n            0 :: (List.filter f [3]) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":370,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":372,"label":"[_ ; _ ; _ ; _]"},{"span":null,"env":[],"annots":[],"id":373,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[3]"]],"annots":[[3,3,"Redex"]],"id":374,"label":"if f 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":375,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":376,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 3]"]],"annots":[[18,1,"Redex"]],"id":377,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":378,"label":"is_in"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0]"]],"annots":[[0,5,"Redex"]],"id":379,"label":"rest'"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[46,4,"Redex"]],"id":380,"label":"List.rev (let rest' =\n            0 :: (match xs_2 with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[],"id":381,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":383,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":384,"label":"List.filter f_2 ys"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":385,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":386,"label":"rest'"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[37,9,"Redex"]],"id":387,"label":"List.rev (let rest' =\n            if (0 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":388,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":389,"label":"_"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _ ; _ ; _]"]],"annots":[[0,4,"Redex"]],"id":390,"label":"seen @ h"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":391,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":392,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[6,1,"Redex"]],"id":393,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[0,1,"Redex"]],"id":394,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[13,1,"Redex"]],"id":395,"label":"helper ([] , l)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":396,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,112,"Redex"]],"id":397,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":398,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":399,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":400,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[37,5,"Redex"]],"id":401,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 3]"]],"annots":[[0,1,"Redex"]],"id":402,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[23,1,"Redex"]],"id":403,"label":"List.rev (helper ([] , l))"},{"span":null,"env":[["xs_1","[3]"]],"annots":[[0,4,"Redex"]],"id":404,"label":"xs_1"},{"span":null,"env":[],"annots":[],"id":405,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _] ; 0 ; 3]"]],"annots":[[23,1,"Redex"]],"id":406,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":407,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":408,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":409,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":410,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":411,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":412,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":413,"label":"rest'"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[0,3,"Redex"]],"id":414,"label":"h_1"},{"span":null,"env":[],"annots":[],"id":415,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":416,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0 ; 3]"]],"annots":[[18,1,"Redex"]],"id":417,"label":"List.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":418,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":419,"label":"0"},{"span":null,"env":[],"annots":[],"id":420,"label":"3"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[39,150,"Redex"]],"id":421,"label":"List.rev (let rest' =\n            0 :: (if false\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":422,"label":"rest'"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":423,"label":"rest"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":424,"label":"List.filter"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[3]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[39,1,"Redex"]],"id":425,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":426,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":427,"label":"i"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":428,"label":"ys"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":429,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":430,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":431,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":432,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":433,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":434,"label":"h"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":435,"label":"helper (seen' , rest')"},{"span":null,"env":[["y_1","3"]],"annots":[[0,3,"Redex"]],"id":436,"label":"y_1"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":437,"label":"seen"},{"span":null,"env":[],"annots":[],"id":438,"label":"true"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":440,"label":"(seen' , rest')"},{"span":null,"env":[],"annots":[],"id":441,"label":"3"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":442,"label":"List.filter"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":443,"label":"ys"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _]"]],"annots":[[0,6,"Redex"]],"id":444,"label":"seen_1"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":445,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":446,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":447,"label":"(i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":448,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":449,"label":"_"},{"span":null,"env":[],"annots":[],"id":450,"label":"_"},{"span":null,"env":[],"annots":[],"id":451,"label":"_"},{"span":null,"env":[],"annots":[],"id":452,"label":"3"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _]"]],"annots":[[0,5,"Redex"]],"id":453,"label":"seen'"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":454,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":455,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":456,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":457,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":458,"label":"List.rev"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":459,"label":"helper"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":460,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":461,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":462,"label":"h"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":463,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":464,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":465,"label":"_"},{"span":null,"env":[],"annots":[],"id":466,"label":"_"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":467,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":468,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":469,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":470,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":471,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _]"]],"annots":[[0,5,"Redex"]],"id":472,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":474,"label":"[[_ ; _ ; _ ; _] ; 0 ; 3]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":475,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":476,"label":"2"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 3]"]],"annots":[[0,1,"Redex"]],"id":477,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":478,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":479,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _]"]],"annots":[[9,53,"Redex"]],"id":480,"label":"List.rev (let rest' = [0] in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":481,"label":"List.rev"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":482,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":483,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":484,"label":"(i mod 2) = 0"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[],"id":485,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":486,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":487,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":488,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":489,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":490,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":491,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":492,"label":"[]"},{"span":null,"env":[],"annots":[],"id":493,"label":"_"},{"span":null,"env":[],"annots":[],"id":494,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":495,"label":"0"},{"span":null,"env":[],"annots":[],"id":496,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":497,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":498,"label":"is_in"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":499,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 3]"]],"annots":[[0,1,"Redex"]],"id":500,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":501,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":502,"label":"t"},{"span":null,"env":[],"annots":[],"id":503,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":504,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":505,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":506,"label":"seen"}]}