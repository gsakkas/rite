{"root":196,"result":"stuck","reason":"Type error: could not match int with 't101 list","bad":58,"stuck":35,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":589,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":372,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":169,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":414,"from":3,"label":"SubTerm 2"},{"arrows":"to","to":5,"from":4,"label":"StepsTo CallStep"},{"arrows":"to","to":15,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":281,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":63,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":491,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":491,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":519,"from":7,"label":"StepsTo PrimStep"},{"arrows":"to","to":588,"from":7,"label":"SubTerm 2"},{"arrows":"to","to":11,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":466,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":11,"label":"StepsTo PrimStep"},{"arrows":"to","to":389,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":507,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":310,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":18,"label":"StepsTo PrimStep"},{"arrows":"to","to":62,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":276,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":19,"label":"StepsTo ReturnStep"},{"arrows":"to","to":404,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":20,"label":"StepsTo BoringStep"},{"arrows":"to","to":22,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":424,"from":21,"label":"SubTerm 2"},{"arrows":"to","to":557,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":233,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":234,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":444,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":207,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":264,"from":27,"label":"StepsTo PrimStep"},{"arrows":"to","to":308,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":234,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":534,"from":28,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":322,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":203,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":551,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":479,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":34,"label":"StepsTo BoringStep"},{"arrows":"to","to":274,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":430,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":422,"from":40,"label":"StepsTo PrimStep"},{"arrows":"to","to":42,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":220,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":451,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":295,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":320,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":454,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":346,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":472,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":499,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":425,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":561,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":351,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":53,"label":"SubTerm 2"},{"arrows":"to","to":54,"from":53,"label":"StepsTo BoringStep"},{"arrows":"to","to":156,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":54,"label":"SubTerm 2"},{"arrows":"to","to":156,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":161,"from":54,"label":"StepsTo CallStep"},{"arrows":"to","to":233,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":57,"label":"SubTerm 2"},{"arrows":"to","to":58,"from":57,"label":"StepsTo BoringStep"},{"arrows":"to","to":192,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":541,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":58,"label":"SubTerm 2"},{"arrows":"to","to":192,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":541,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":60,"from":59,"label":"StepsTo BoringStep"},{"arrows":"to","to":307,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":373,"from":60,"label":"StepsTo PrimStep"},{"arrows":"to","to":18,"from":61,"label":"StepsTo BoringStep"},{"arrows":"to","to":62,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":275,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":64,"label":"SubTerm 2"},{"arrows":"to","to":53,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":174,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":311,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":265,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":461,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":71,"label":"StepsTo CallStep"},{"arrows":"to","to":418,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":430,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":76,"label":"StepsTo PrimStep"},{"arrows":"to","to":78,"from":77,"label":"SubTerm 2"},{"arrows":"to","to":147,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":532,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":470,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":82,"label":"StepsTo BoringStep"},{"arrows":"to","to":180,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":492,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":366,"from":84,"label":"StepsTo BoringStep"},{"arrows":"to","to":527,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":85,"label":"SubTerm 2"},{"arrows":"to","to":86,"from":85,"label":"StepsTo PrimStep"},{"arrows":"to","to":156,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":86,"label":"SubTerm 2"},{"arrows":"to","to":156,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":326,"from":86,"label":"StepsTo ReturnStep"},{"arrows":"to","to":88,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":455,"from":87,"label":"SubTerm 2"},{"arrows":"to","to":542,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":357,"from":88,"label":"SubTerm 1"},{"arrows":"to","to":498,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":352,"from":89,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":92,"label":"SubTerm 2"},{"arrows":"to","to":93,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":212,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":94,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":94,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":541,"from":95,"label":"StepsTo BoringStep"},{"arrows":"to","to":97,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":96,"label":"SubTerm 2"},{"arrows":"to","to":162,"from":96,"label":"StepsTo BoringStep"},{"arrows":"to","to":362,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":485,"from":99,"label":"StepsTo CallStep"},{"arrows":"to","to":15,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":145,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":506,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":434,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":329,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":107,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":560,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":573,"from":106,"label":"SubTerm 2"},{"arrows":"to","to":29,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":108,"label":"SubTerm 2"},{"arrows":"to","to":135,"from":108,"label":"StepsTo CallStep"},{"arrows":"to","to":234,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":579,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":601,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":112,"label":"StepsTo PrimStep"},{"arrows":"to","to":298,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":523,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":319,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":525,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":116,"label":"StepsTo BoringStep"},{"arrows":"to","to":221,"from":116,"label":"SubTerm 2"},{"arrows":"to","to":283,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":458,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":117,"label":"SubTerm 2"},{"arrows":"to","to":283,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":376,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":383,"from":117,"label":"StepsTo CallStep"},{"arrows":"to","to":119,"from":118,"label":"SubTerm 2"},{"arrows":"to","to":214,"from":118,"label":"SubTerm 1"},{"arrows":"to","to":219,"from":118,"label":"StepsTo BoringStep"},{"arrows":"to","to":385,"from":118,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":119,"label":"SubTerm 2"},{"arrows":"to","to":384,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":559,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":124,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":125,"label":"StepsTo BoringStep"},{"arrows":"to","to":540,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":126,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":127,"label":"StepsTo ReturnStep"},{"arrows":"to","to":471,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":129,"from":128,"label":"SubTerm 2"},{"arrows":"to","to":325,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":531,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":476,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":230,"from":130,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":131,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":294,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":134,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":330,"from":133,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":411,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":135,"label":"StepsTo BoringStep"},{"arrows":"to","to":209,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":455,"from":135,"label":"SubTerm 2"},{"arrows":"to","to":542,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":139,"from":138,"label":"StepsTo BoringStep"},{"arrows":"to","to":200,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":139,"label":"StepsTo BoringStep"},{"arrows":"to","to":260,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":140,"label":"StepsTo CallStep"},{"arrows":"to","to":259,"from":140,"label":"SubTerm 2"},{"arrows":"to","to":305,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":142,"label":"StepsTo BoringStep"},{"arrows":"to","to":418,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":418,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":143,"label":"StepsTo CallStep"},{"arrows":"to","to":217,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":226,"from":144,"label":"StepsTo BoringStep"},{"arrows":"to","to":146,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":231,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":255,"from":145,"label":"SubTerm 2"},{"arrows":"to","to":420,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":550,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":564,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":150,"label":"SubTerm 2"},{"arrows":"to","to":570,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":587,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":153,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":546,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":118,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":154,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":155,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":155,"label":"StepsTo BoringStep"},{"arrows":"to","to":359,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":529,"from":157,"label":"SubTerm 2"},{"arrows":"to","to":602,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":159,"label":"SubTerm 0"},{"arrows":"to","to":408,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":161,"label":"SubTerm 2"},{"arrows":"to","to":85,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":156,"from":161,"label":"SubTerm 1"},{"arrows":"to","to":278,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":274,"from":162,"label":"StepsTo BoringStep"},{"arrows":"to","to":407,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":556,"from":163,"label":"SubTerm 1"},{"arrows":"to","to":600,"from":163,"label":"SubTerm 2"},{"arrows":"to","to":15,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":165,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":165,"label":"StepsTo CallStep"},{"arrows":"to","to":167,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":313,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":169,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":400,"from":168,"label":"StepsTo BoringStep"},{"arrows":"to","to":549,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":170,"label":"SubTerm 0"},{"arrows":"to","to":475,"from":170,"label":"StepsTo BoringStep"},{"arrows":"to","to":41,"from":171,"label":"SubTerm 2"},{"arrows":"to","to":64,"from":171,"label":"StepsTo BoringStep"},{"arrows":"to","to":244,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":332,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":172,"label":"StepsTo ReturnStep"},{"arrows":"to","to":173,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":173,"label":"StepsTo ReturnStep"},{"arrows":"to","to":500,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":174,"label":"SubTerm 2"},{"arrows":"to","to":596,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":178,"label":"StepsTo BoringStep"},{"arrows":"to","to":508,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":314,"from":179,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":180,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":301,"from":182,"label":"StepsTo BoringStep"},{"arrows":"to","to":365,"from":182,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":183,"label":"StepsTo BoringStep"},{"arrows":"to","to":187,"from":186,"label":"StepsTo BoringStep"},{"arrows":"to","to":340,"from":186,"label":"SubTerm 2"},{"arrows":"to","to":396,"from":186,"label":"SubTerm 1"},{"arrows":"to","to":547,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":187,"label":"StepsTo ReturnStep"},{"arrows":"to","to":340,"from":187,"label":"SubTerm 2"},{"arrows":"to","to":396,"from":187,"label":"SubTerm 1"},{"arrows":"to","to":548,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":188,"label":"SubTerm 2"},{"arrows":"to","to":19,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":188,"label":"StepsTo ReturnStep"},{"arrows":"to","to":212,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":190,"label":"StepsTo PrimStep"},{"arrows":"to","to":503,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":191,"label":"StepsTo PrimStep"},{"arrows":"to","to":272,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":478,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":527,"from":193,"label":"StepsTo BoringStep"},{"arrows":"to","to":360,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":456,"from":194,"label":"SubTerm 1"},{"arrows":"to","to":533,"from":194,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":195,"label":"StepsTo BoringStep"},{"arrows":"to","to":193,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":196,"label":"StepsTo CallStep"},{"arrows":"to","to":571,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":590,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":483,"from":197,"label":"StepsTo BoringStep"},{"arrows":"to","to":486,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":260,"from":200,"label":"StepsTo BoringStep"},{"arrows":"to","to":202,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":552,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":202,"label":"SubTerm 1"},{"arrows":"to","to":563,"from":202,"label":"SubTerm 0"},{"arrows":"to","to":284,"from":203,"label":"SubTerm 1"},{"arrows":"to","to":565,"from":203,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":204,"label":"StepsTo BoringStep"},{"arrows":"to","to":321,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":585,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":206,"label":"SubTerm 1"},{"arrows":"to","to":515,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":207,"label":"SubTerm 2"},{"arrows":"to","to":61,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":207,"label":"SubTerm 1"},{"arrows":"to","to":308,"from":207,"label":"StepsTo BoringStep"},{"arrows":"to","to":124,"from":208,"label":"StepsTo CallStep"},{"arrows":"to","to":501,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":209,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":210,"label":"StepsTo BoringStep"},{"arrows":"to","to":221,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":505,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":211,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":213,"from":212,"label":"StepsTo BoringStep"},{"arrows":"to","to":558,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":437,"from":213,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":217,"label":"StepsTo CallStep"},{"arrows":"to","to":368,"from":217,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":250,"from":218,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":219,"label":"SubTerm 2"},{"arrows":"to","to":168,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":219,"label":"StepsTo BoringStep"},{"arrows":"to","to":49,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":222,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":394,"from":221,"label":"StepsTo BoringStep"},{"arrows":"to","to":395,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":517,"from":221,"label":"SubTerm 2"},{"arrows":"to","to":15,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":309,"from":223,"label":"SubTerm 1"},{"arrows":"to","to":401,"from":223,"label":"StepsTo ReturnStep"},{"arrows":"to","to":31,"from":225,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":225,"label":"SubTerm 1"},{"arrows":"to","to":289,"from":225,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":459,"from":226,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":227,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":482,"from":228,"label":"StepsTo PrimStep"},{"arrows":"to","to":31,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":229,"label":"StepsTo CallStep"},{"arrows":"to","to":230,"from":229,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":508,"from":230,"label":"StepsTo CallStep"},{"arrows":"to","to":146,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":255,"from":231,"label":"SubTerm 2"},{"arrows":"to","to":306,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":421,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":232,"label":"StepsTo BoringStep"},{"arrows":"to","to":162,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":234,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":233,"label":"StepsTo CallStep"},{"arrows":"to","to":444,"from":233,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":235,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":235,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":237,"label":"StepsTo CallStep"},{"arrows":"to","to":394,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":242,"from":238,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":239,"label":"StepsTo CallStep"},{"arrows":"to","to":273,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":479,"from":242,"label":"StepsTo ReturnStep"},{"arrows":"to","to":15,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":397,"from":243,"label":"StepsTo ReturnStep"},{"arrows":"to","to":247,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":205,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":445,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":249,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":510,"from":248,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":250,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":250,"label":"SubTerm 1"},{"arrows":"to","to":251,"from":250,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":441,"from":251,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":252,"label":"StepsTo BoringStep"},{"arrows":"to","to":322,"from":252,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":253,"label":"StepsTo ReturnStep"},{"arrows":"to","to":254,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":553,"from":253,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":255,"label":"SubTerm 1"},{"arrows":"to","to":333,"from":255,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":258,"label":"SubTerm 0"},{"arrows":"to","to":335,"from":258,"label":"StepsTo ReturnStep"},{"arrows":"to","to":393,"from":258,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":260,"label":"SubTerm 1"},{"arrows":"to","to":321,"from":260,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":261,"label":"StepsTo ReturnStep"},{"arrows":"to","to":434,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":341,"from":262,"label":"StepsTo PrimStep"},{"arrows":"to","to":138,"from":263,"label":"StepsTo ReturnStep"},{"arrows":"to","to":264,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":264,"label":"SubTerm 1"},{"arrows":"to","to":200,"from":264,"label":"StepsTo ReturnStep"},{"arrows":"to","to":266,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":152,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":592,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":269,"label":"SubTerm 1"},{"arrows":"to","to":407,"from":269,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":270,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":271,"label":"StepsTo BoringStep"},{"arrows":"to","to":119,"from":271,"label":"SubTerm 2"},{"arrows":"to","to":214,"from":271,"label":"SubTerm 1"},{"arrows":"to","to":469,"from":271,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":272,"label":"SubTerm 2"},{"arrows":"to","to":253,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":434,"from":272,"label":"StepsTo ReturnStep"},{"arrows":"to","to":3,"from":273,"label":"SubTerm 2"},{"arrows":"to","to":207,"from":273,"label":"StepsTo CallStep"},{"arrows":"to","to":212,"from":273,"label":"SubTerm 1"},{"arrows":"to","to":400,"from":273,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":269,"from":274,"label":"StepsTo BoringStep"},{"arrows":"to","to":407,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":275,"label":"StepsTo BoringStep"},{"arrows":"to","to":345,"from":275,"label":"SubTerm 1"},{"arrows":"to","to":574,"from":275,"label":"SubTerm 0"},{"arrows":"to","to":345,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":404,"from":276,"label":"StepsTo PrimStep"},{"arrows":"to","to":582,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":258,"from":277,"label":"StepsTo PrimStep"},{"arrows":"to","to":393,"from":277,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":278,"label":"StepsTo BoringStep"},{"arrows":"to","to":297,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":278,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":289,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":539,"from":279,"label":"StepsTo ReturnStep"},{"arrows":"to","to":10,"from":281,"label":"StepsTo CallStep"},{"arrows":"to","to":31,"from":281,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":281,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":466,"from":282,"label":"StepsTo CallStep"},{"arrows":"to","to":130,"from":283,"label":"StepsTo BoringStep"},{"arrows":"to","to":210,"from":283,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":286,"label":"SubTerm 1"},{"arrows":"to","to":440,"from":286,"label":"StepsTo CallStep"},{"arrows":"to","to":288,"from":287,"label":"SubTerm 1"},{"arrows":"to","to":449,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":593,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":599,"from":288,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":289,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":289,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":289,"label":"StepsTo ReturnStep"},{"arrows":"to","to":31,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":291,"label":"StepsTo BoringStep"},{"arrows":"to","to":326,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":293,"from":292,"label":"SubTerm 0"},{"arrows":"to","to":449,"from":292,"label":"SubTerm 1"},{"arrows":"to","to":528,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":555,"from":294,"label":"SubTerm 2"},{"arrows":"to","to":575,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":296,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":296,"label":"StepsTo ReturnStep"},{"arrows":"to","to":242,"from":296,"label":"SubTerm 1"},{"arrows":"to","to":112,"from":297,"label":"StepsTo BoringStep"},{"arrows":"to","to":298,"from":297,"label":"SubTerm 1"},{"arrows":"to","to":522,"from":297,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":301,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":301,"label":"StepsTo BoringStep"},{"arrows":"to","to":427,"from":301,"label":"SubTerm 1"},{"arrows":"to","to":159,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":303,"label":"SubTerm 0"},{"arrows":"to","to":304,"from":303,"label":"StepsTo BoringStep"},{"arrows":"to","to":553,"from":303,"label":"SubTerm 1"},{"arrows":"to","to":253,"from":304,"label":"StepsTo PrimStep"},{"arrows":"to","to":319,"from":304,"label":"SubTerm 0"},{"arrows":"to","to":553,"from":304,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":306,"label":"StepsTo BoringStep"},{"arrows":"to","to":307,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":315,"from":306,"label":"SubTerm 1"},{"arrows":"to","to":436,"from":307,"label":"SubTerm 1"},{"arrows":"to","to":497,"from":307,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":308,"label":"SubTerm 2"},{"arrows":"to","to":18,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":308,"label":"StepsTo PrimStep"},{"arrows":"to","to":212,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":309,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":309,"label":"StepsTo ReturnStep"},{"arrows":"to","to":326,"from":309,"label":"SubTerm 1"},{"arrows":"to","to":96,"from":310,"label":"StepsTo BoringStep"},{"arrows":"to","to":97,"from":310,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":310,"label":"SubTerm 2"},{"arrows":"to","to":419,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":312,"from":311,"label":"SubTerm 1"},{"arrows":"to","to":584,"from":311,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":281,"from":314,"label":"StepsTo BoringStep"},{"arrows":"to","to":475,"from":314,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":315,"label":"StepsTo BoringStep"},{"arrows":"to","to":63,"from":315,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":315,"label":"SubTerm 2"},{"arrows":"to","to":353,"from":315,"label":"SubTerm 1"},{"arrows":"to","to":588,"from":316,"label":"StepsTo BoringStep"},{"arrows":"to","to":318,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":356,"from":317,"label":"SubTerm 2"},{"arrows":"to","to":576,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":254,"from":319,"label":"StepsTo PrimStep"},{"arrows":"to","to":526,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":501,"from":321,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":322,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":322,"label":"SubTerm 1"},{"arrows":"to","to":334,"from":322,"label":"StepsTo BoringStep"},{"arrows":"to","to":324,"from":323,"label":"SubTerm 0"},{"arrows":"to","to":410,"from":323,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":326,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":326,"label":"SubTerm 2"},{"arrows":"to","to":156,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":328,"from":327,"label":"SubTerm 1"},{"arrows":"to","to":577,"from":327,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":329,"label":"SubTerm 1"},{"arrows":"to","to":229,"from":329,"label":"StepsTo BoringStep"},{"arrows":"to","to":331,"from":330,"label":"SubTerm 1"},{"arrows":"to","to":578,"from":330,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":332,"label":"StepsTo BoringStep"},{"arrows":"to","to":428,"from":333,"label":"SubTerm 1"},{"arrows":"to","to":496,"from":333,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":334,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":334,"label":"SubTerm 1"},{"arrows":"to","to":225,"from":334,"label":"StepsTo CallStep"},{"arrows":"to","to":15,"from":336,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":336,"label":"SubTerm 1"},{"arrows":"to","to":488,"from":336,"label":"StepsTo PrimStep"},{"arrows":"to","to":21,"from":338,"label":"SubTerm 0"},{"arrows":"to","to":468,"from":338,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":339,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":339,"label":"SubTerm 1"},{"arrows":"to","to":336,"from":339,"label":"StepsTo BoringStep"},{"arrows":"to","to":302,"from":340,"label":"SubTerm 1"},{"arrows":"to","to":408,"from":340,"label":"SubTerm 2"},{"arrows":"to","to":442,"from":340,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":341,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":341,"label":"SubTerm 1"},{"arrows":"to","to":342,"from":341,"label":"StepsTo ReturnStep"},{"arrows":"to","to":30,"from":342,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":342,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":342,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":346,"label":"SubTerm 1"},{"arrows":"to","to":520,"from":346,"label":"SubTerm 0"},{"arrows":"to","to":348,"from":347,"label":"SubTerm 1"},{"arrows":"to","to":516,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":350,"from":349,"label":"SubTerm 1"},{"arrows":"to","to":583,"from":349,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":352,"label":"SubTerm 0"},{"arrows":"to","to":225,"from":352,"label":"SubTerm 1"},{"arrows":"to","to":279,"from":352,"label":"StepsTo BoringStep"},{"arrows":"to","to":491,"from":353,"label":"StepsTo BoringStep"},{"arrows":"to","to":355,"from":354,"label":"SubTerm 1"},{"arrows":"to","to":512,"from":354,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":359,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":359,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":360,"label":"StepsTo BoringStep"},{"arrows":"to","to":363,"from":362,"label":"SubTerm 0"},{"arrows":"to","to":580,"from":362,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":365,"label":"SubTerm 0"},{"arrows":"to","to":338,"from":365,"label":"SubTerm 1"},{"arrows":"to","to":427,"from":365,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":366,"label":"StepsTo CallStep"},{"arrows":"to","to":15,"from":366,"label":"SubTerm 0"},{"arrows":"to","to":367,"from":366,"label":"SubTerm 1"},{"arrows":"to","to":310,"from":367,"label":"StepsTo CallStep"},{"arrows":"to","to":406,"from":367,"label":"SubTerm 1"},{"arrows":"to","to":478,"from":367,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":368,"label":"SubTerm 2"},{"arrows":"to","to":171,"from":368,"label":"StepsTo CallStep"},{"arrows":"to","to":369,"from":368,"label":"SubTerm 1"},{"arrows":"to","to":509,"from":368,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":372,"label":"StepsTo CallStep"},{"arrows":"to","to":81,"from":372,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":372,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":373,"label":"SubTerm 0"},{"arrows":"to","to":365,"from":373,"label":"StepsTo BoringStep"},{"arrows":"to","to":519,"from":373,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":376,"label":"SubTerm 1"},{"arrows":"to","to":303,"from":376,"label":"StepsTo CallStep"},{"arrows":"to","to":395,"from":376,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":377,"label":"SubTerm 1"},{"arrows":"to","to":467,"from":377,"label":"StepsTo CallStep"},{"arrows":"to","to":354,"from":378,"label":"SubTerm 0"},{"arrows":"to","to":379,"from":378,"label":"SubTerm 1"},{"arrows":"to","to":347,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":382,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":383,"label":"SubTerm 2"},{"arrows":"to","to":283,"from":383,"label":"SubTerm 1"},{"arrows":"to","to":303,"from":383,"label":"SubTerm 0"},{"arrows":"to","to":503,"from":383,"label":"StepsTo BoringStep"},{"arrows":"to","to":147,"from":384,"label":"SubTerm 0"},{"arrows":"to","to":236,"from":384,"label":"SubTerm 1"},{"arrows":"to","to":75,"from":385,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":386,"label":"SubTerm 0"},{"arrows":"to","to":329,"from":386,"label":"SubTerm 1"},{"arrows":"to","to":494,"from":386,"label":"StepsTo BoringStep"},{"arrows":"to","to":388,"from":387,"label":"SubTerm 1"},{"arrows":"to","to":484,"from":387,"label":"SubTerm 0"},{"arrows":"to","to":521,"from":387,"label":"SubTerm 2"},{"arrows":"to","to":27,"from":389,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":389,"label":"StepsTo PrimStep"},{"arrows":"to","to":487,"from":391,"label":"SubTerm 0"},{"arrows":"to","to":222,"from":394,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":394,"label":"StepsTo CallStep"},{"arrows":"to","to":395,"from":394,"label":"SubTerm 1"},{"arrows":"to","to":518,"from":394,"label":"SubTerm 2"},{"arrows":"to","to":15,"from":397,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":397,"label":"SubTerm 1"},{"arrows":"to","to":450,"from":397,"label":"StepsTo BoringStep"},{"arrows":"to","to":399,"from":398,"label":"SubTerm 1"},{"arrows":"to","to":477,"from":398,"label":"SubTerm 0"},{"arrows":"to","to":524,"from":398,"label":"SubTerm 2"},{"arrows":"to","to":61,"from":400,"label":"StepsTo CallStep"},{"arrows":"to","to":81,"from":400,"label":"SubTerm 1"},{"arrows":"to","to":169,"from":400,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":401,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":401,"label":"SubTerm 1"},{"arrows":"to","to":402,"from":401,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":402,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":402,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":402,"label":"StepsTo BoringStep"},{"arrows":"to","to":166,"from":406,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":406,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":407,"label":"SubTerm 0"},{"arrows":"to","to":423,"from":407,"label":"SubTerm 1"},{"arrows":"to","to":409,"from":408,"label":"SubTerm 2"},{"arrows":"to","to":568,"from":408,"label":"SubTerm 0"},{"arrows":"to","to":581,"from":408,"label":"SubTerm 1"},{"arrows":"to","to":374,"from":411,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":412,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":412,"label":"SubTerm 0"},{"arrows":"to","to":259,"from":414,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":415,"label":"SubTerm 0"},{"arrows":"to","to":416,"from":415,"label":"StepsTo BoringStep"},{"arrows":"to","to":440,"from":415,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":416,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":416,"label":"StepsTo PrimStep"},{"arrows":"to","to":190,"from":416,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":417,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":417,"label":"SubTerm 1"},{"arrows":"to","to":362,"from":419,"label":"StepsTo BoringStep"},{"arrows":"to","to":421,"from":420,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":422,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":422,"label":"SubTerm 1"},{"arrows":"to","to":443,"from":422,"label":"StepsTo ReturnStep"},{"arrows":"to","to":150,"from":423,"label":"SubTerm 0"},{"arrows":"to","to":489,"from":423,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":427,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":427,"label":"StepsTo BoringStep"},{"arrows":"to","to":468,"from":427,"label":"SubTerm 1"},{"arrows":"to","to":398,"from":428,"label":"SubTerm 0"},{"arrows":"to","to":567,"from":428,"label":"SubTerm 1"},{"arrows":"to","to":246,"from":431,"label":"StepsTo BoringStep"},{"arrows":"to","to":247,"from":431,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":432,"label":"SubTerm 0"},{"arrows":"to","to":433,"from":432,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":433,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":434,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":434,"label":"SubTerm 2"},{"arrows":"to","to":283,"from":434,"label":"StepsTo BoringStep"},{"arrows":"to","to":283,"from":434,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":435,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":435,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":435,"label":"StepsTo BoringStep"},{"arrows":"to","to":387,"from":436,"label":"SubTerm 0"},{"arrows":"to","to":562,"from":436,"label":"SubTerm 1"},{"arrows":"to","to":372,"from":437,"label":"SubTerm 0"},{"arrows":"to","to":540,"from":437,"label":"StepsTo CallStep"},{"arrows":"to","to":31,"from":440,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":440,"label":"StepsTo BoringStep"},{"arrows":"to","to":383,"from":440,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":441,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":441,"label":"SubTerm 1"},{"arrows":"to","to":227,"from":441,"label":"StepsTo CallStep"},{"arrows":"to","to":160,"from":442,"label":"SubTerm 1"},{"arrows":"to","to":581,"from":442,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":443,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":443,"label":"SubTerm 1"},{"arrows":"to","to":572,"from":443,"label":"StepsTo BoringStep"},{"arrows":"to","to":128,"from":445,"label":"SubTerm 0"},{"arrows":"to","to":447,"from":446,"label":"SubTerm 1"},{"arrows":"to","to":566,"from":446,"label":"SubTerm 0"},{"arrows":"to","to":323,"from":448,"label":"SubTerm 0"},{"arrows":"to","to":591,"from":448,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":450,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":450,"label":"SubTerm 1"},{"arrows":"to","to":252,"from":450,"label":"StepsTo BoringStep"},{"arrows":"to","to":320,"from":451,"label":"SubTerm 0"},{"arrows":"to","to":351,"from":451,"label":"SubTerm 1"},{"arrows":"to","to":453,"from":452,"label":"SubTerm 1"},{"arrows":"to","to":569,"from":452,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":455,"label":"SubTerm 2"},{"arrows":"to","to":292,"from":455,"label":"SubTerm 0"},{"arrows":"to","to":495,"from":455,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":456,"label":"StepsTo BoringStep"},{"arrows":"to","to":376,"from":458,"label":"StepsTo BoringStep"},{"arrows":"to","to":395,"from":458,"label":"SubTerm 0"},{"arrows":"to","to":505,"from":458,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":459,"label":"SubTerm 0"},{"arrows":"to","to":251,"from":459,"label":"SubTerm 1"},{"arrows":"to","to":460,"from":459,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":460,"label":"SubTerm 0"},{"arrows":"to","to":441,"from":460,"label":"SubTerm 1"},{"arrows":"to","to":530,"from":460,"label":"StepsTo CallStep"},{"arrows":"to","to":462,"from":461,"label":"SubTerm 1"},{"arrows":"to","to":514,"from":461,"label":"SubTerm 0"},{"arrows":"to","to":597,"from":461,"label":"SubTerm 2"},{"arrows":"to","to":464,"from":463,"label":"SubTerm 1"},{"arrows":"to","to":594,"from":463,"label":"SubTerm 0"},{"arrows":"to","to":463,"from":465,"label":"SubTerm 1"},{"arrows":"to","to":480,"from":465,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":466,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":466,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":467,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":467,"label":"StepsTo BoringStep"},{"arrows":"to","to":485,"from":467,"label":"SubTerm 1"},{"arrows":"to","to":368,"from":468,"label":"StepsTo BoringStep"},{"arrows":"to","to":369,"from":468,"label":"SubTerm 1"},{"arrows":"to","to":509,"from":468,"label":"SubTerm 0"},{"arrows":"to","to":586,"from":468,"label":"SubTerm 2"},{"arrows":"to","to":385,"from":469,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":470,"label":"StepsTo ReturnStep"},{"arrows":"to","to":81,"from":470,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":470,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":471,"label":"SubTerm 0"},{"arrows":"to","to":411,"from":471,"label":"StepsTo ReturnStep"},{"arrows":"to","to":473,"from":472,"label":"SubTerm 1"},{"arrows":"to","to":481,"from":472,"label":"SubTerm 2"},{"arrows":"to","to":511,"from":472,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":475,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":475,"label":"StepsTo BoringStep"},{"arrows":"to","to":201,"from":476,"label":"SubTerm 0"},{"arrows":"to","to":432,"from":476,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":479,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":479,"label":"StepsTo BoringStep"},{"arrows":"to","to":330,"from":479,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":482,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":482,"label":"SubTerm 1"},{"arrows":"to","to":309,"from":482,"label":"StepsTo PrimStep"},{"arrows":"to","to":15,"from":483,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":483,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":485,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":485,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":485,"label":"StepsTo BoringStep"},{"arrows":"to","to":465,"from":486,"label":"SubTerm 1"},{"arrows":"to","to":554,"from":486,"label":"SubTerm 0"},{"arrows":"to","to":417,"from":487,"label":"SubTerm 2"},{"arrows":"to","to":513,"from":487,"label":"SubTerm 0"},{"arrows":"to","to":603,"from":487,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":488,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":488,"label":"StepsTo BoringStep"},{"arrows":"to","to":373,"from":488,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":489,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":492,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":492,"label":"SubTerm 1"},{"arrows":"to","to":415,"from":492,"label":"StepsTo CallStep"},{"arrows":"to","to":15,"from":494,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":494,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":494,"label":"StepsTo CallStep"},{"arrows":"to","to":287,"from":495,"label":"SubTerm 0"},{"arrows":"to","to":446,"from":496,"label":"SubTerm 1"},{"arrows":"to","to":595,"from":496,"label":"SubTerm 0"},{"arrows":"to","to":452,"from":497,"label":"SubTerm 1"},{"arrows":"to","to":598,"from":497,"label":"SubTerm 0"},{"arrows":"to","to":448,"from":499,"label":"SubTerm 0"},{"arrows":"to","to":470,"from":500,"label":"SubTerm 0"},{"arrows":"to","to":471,"from":500,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":501,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":501,"label":"StepsTo CallStep"},{"arrows":"to","to":437,"from":501,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":503,"label":"SubTerm 2"},{"arrows":"to","to":272,"from":503,"label":"StepsTo PrimStep"},{"arrows":"to","to":283,"from":503,"label":"SubTerm 1"},{"arrows":"to","to":304,"from":503,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":504,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":504,"label":"SubTerm 1"},{"arrows":"to","to":435,"from":504,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":505,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":506,"label":"SubTerm 0"},{"arrows":"to","to":306,"from":506,"label":"SubTerm 1"},{"arrows":"to","to":339,"from":506,"label":"StepsTo BoringStep"},{"arrows":"to","to":170,"from":508,"label":"StepsTo BoringStep"},{"arrows":"to","to":270,"from":508,"label":"SubTerm 0"},{"arrows":"to","to":518,"from":517,"label":"StepsTo BoringStep"},{"arrows":"to","to":374,"from":518,"label":"SubTerm 0"},{"arrows":"to","to":523,"from":522,"label":"StepsTo BoringStep"},{"arrows":"to","to":526,"from":525,"label":"StepsTo BoringStep"},{"arrows":"to","to":367,"from":527,"label":"StepsTo BoringStep"},{"arrows":"to","to":478,"from":527,"label":"SubTerm 0"},{"arrows":"to","to":533,"from":527,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":530,"label":"SubTerm 0"},{"arrows":"to","to":227,"from":530,"label":"SubTerm 1"},{"arrows":"to","to":536,"from":530,"label":"StepsTo BoringStep"},{"arrows":"to","to":361,"from":533,"label":"SubTerm 0"},{"arrows":"to","to":406,"from":533,"label":"StepsTo BoringStep"},{"arrows":"to","to":456,"from":533,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":534,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":536,"label":"SubTerm 0"},{"arrows":"to","to":228,"from":536,"label":"SubTerm 1"},{"arrows":"to","to":537,"from":536,"label":"StepsTo PrimStep"},{"arrows":"to","to":15,"from":537,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":537,"label":"StepsTo PrimStep"},{"arrows":"to","to":482,"from":537,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":539,"label":"SubTerm 0"},{"arrows":"to","to":238,"from":539,"label":"SubTerm 1"},{"arrows":"to","to":296,"from":539,"label":"StepsTo ReturnStep"},{"arrows":"to","to":80,"from":540,"label":"SubTerm 0"},{"arrows":"to","to":500,"from":540,"label":"StepsTo BoringStep"},{"arrows":"to","to":548,"from":547,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":549,"label":"StepsTo BoringStep"},{"arrows":"to","to":2,"from":558,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":558,"label":"SubTerm 1"},{"arrows":"to","to":549,"from":558,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":559,"label":"SubTerm 0"},{"arrows":"to","to":378,"from":562,"label":"SubTerm 0"},{"arrows":"to","to":381,"from":567,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":572,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":572,"label":"SubTerm 1"},{"arrows":"to","to":386,"from":572,"label":"StepsTo BoringStep"},{"arrows":"to","to":582,"from":574,"label":"StepsTo BoringStep"},{"arrows":"to","to":106,"from":586,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":0,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":1,"label":"rest'"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[21,4,"Redex"]],"id":2,"label":"(0 , List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[16,4,"Redex"]],"id":3,"label":"List.filter f_2 ys_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[43,5,"Redex"]],"id":4,"label":"List.rev (let rest' =\n            0 :: (if f_2 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[44,1,"Redex"]],"id":5,"label":"List.rev (let rest' =\n            0 :: (if (i mod 2) = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[]"]],"annots":[[5,1,"Redex"]],"id":6,"label":"[] @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,7,"Redex"]],"id":7,"label":"[] @ []"},{"span":null,"env":[],"annots":[],"id":9,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[24,1,"Redex"]],"id":10,"label":"let rest' =\n  0 :: (if (i mod 2) = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[23,9,"Redex"]],"id":11,"label":"let rest' =\n  0 :: (if (0 mod 2) = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[6,1,"Redex"]],"id":12,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":13,"label":"l"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0 ; 0]"],["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,6,"Redex"]],"id":14,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":15,"label":"List.rev"},{"span":null,"env":[],"annots":[],"id":17,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":18,"label":"(0 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":19,"label":"0 = 0"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,343,"Redex"]],"id":20,"label":"List.rev (match [0 ; 0] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 0]"]],"annots":[[18,1,"Redex"]],"id":21,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":22,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"]],"annots":[[2,1,"Redex"]],"id":23,"label":"f y"},{"span":null,"env":[["y","1"]],"annots":[[0,1,"Redex"]],"id":24,"label":"y"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[9,1,"Redex"]],"id":26,"label":"(0 , if (i mod 2) = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[8,9,"Redex"]],"id":27,"label":"(0 , if (0 mod 2) = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"]],"annots":[[14,2,"Redex"]],"id":28,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":29,"label":"List.filter"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[20,3,"Redex"]],"id":30,"label":"let rest' =\n  0 :: (y_2 :: (List.filter f_2\n                            ys_2)) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[8,5,"Redex"]],"id":31,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[9,69,"Redex"]],"id":33,"label":"List.rev (let rest' =\n            [0 ; 0] in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"],["t_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[39,3,"Redex"]],"id":34,"label":"List.rev (let seen' =\n            [] @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,6,"Redex"]],"id":35,"label":"List.rev (let seen' =\n            [] @ 0 in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t_1) in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":36,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":37,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[0,1,"Redex"]],"id":39,"label":"l"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":40,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":41,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":42,"label":"List.filter f ys"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":43,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":44,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[18,1,"Redex"]],"id":45,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":46,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":49,"label":"(y , List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[6,1,"Redex"]],"id":51,"label":"([] , l)"},{"span":null,"env":[],"annots":[],"id":52,"label":"(0 , [])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[0 ; 0]"]],"annots":[[5,1,"Redex"]],"id":53,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[0 ; 0]"]],"annots":[[3,3,"Redex"]],"id":54,"label":"if f 1\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[0,3,"Redex"]],"id":55,"label":"h_1"},{"span":null,"env":[],"annots":[],"id":56,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[5,3,"Redex"]],"id":57,"label":"[] @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,6,"Redex"]],"id":58,"label":"[] @ 0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[]"],["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[17,1,"Redex"]],"id":59,"label":"let seen' = [] @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,7,"Redex"]],"id":60,"label":"let seen' = [] @ [] in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":61,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":62,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":63,"label":"(@)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,130,"Redex"]],"id":64,"label":"match [1 ; 0 ; 0] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":65,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":66,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":67,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":68,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,112,"Redex"]],"id":69,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":70,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,30,"Redex"]],"id":71,"label":"helper ([] , [[] ; 1 ; 0 ; 0])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":72,"label":"([] , [[] ; 1 ; 0 ; 0])"},{"span":null,"env":[],"annots":[],"id":75,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[43,9,"Redex"]],"id":76,"label":"List.rev (let rest' =\n            0 :: (if (0 mod 2) = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":77,"label":"List.filter f_2 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":78,"label":"ys"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":80,"label":"(0 , match xs_3 with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[],"annots":[],"id":81,"label":"0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,180,"Redex"]],"id":82,"label":"List.rev (let rest' =\n            match [0 ; 0] with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[41,3,"Redex"]],"id":83,"label":"List.rev (let rest' =\n            if f_1 y_1\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[0 ; 0]"]],"annots":[[23,5,"Redex"]],"id":84,"label":"List.rev (helper ([] , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"]],"annots":[[3,9,"Redex"]],"id":85,"label":"if (1 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"]],"annots":[[3,5,"Redex"]],"id":86,"label":"if 1 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,132,"Redex"]],"id":87,"label":"match [0 ; 0] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":88,"label":"[0 ; 0]"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[45,56,"Redex"]],"id":89,"label":"List.rev (let rest' =\n            0 :: (0 :: (List.filter f_2\n                                    [])) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":91,"label":"0"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[0,93,"Redex"]],"id":92,"label":"if true\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[],"annots":[],"id":93,"label":"true"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[]"],["h_1","0"]],"annots":[[0,6,"Redex"]],"id":94,"label":"seen_1 @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[]"]],"annots":[[0,6,"Redex"]],"id":95,"label":"seen_1"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,261,"Redex"]],"id":96,"label":"match [0 ; 0] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[]"]],"annots":[],"id":97,"label":"seen_1"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[28,2,"Redex"]],"id":98,"label":"let rest' =\n  List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,45,"Redex"]],"id":99,"label":"let rest' = List.filter f\n                        [0 ; 0] in helper (seen' , rest')"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[] ; 1 ; 0 ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,4,"Redex"]],"id":100,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,348,"Redex"]],"id":101,"label":"List.rev (match [[] ; 1 ; 0 ; 0] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":null,"env":[],"annots":[],"id":103,"label":"true"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,158,"Redex"]],"id":104,"label":"let rest' = if true\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1\n                             ys_1 in helper (seen' , rest')"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[14,3,"Redex"]],"id":105,"label":"let rest' =\n  y_1 :: (List.filter f_1\n                      ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":106,"label":"[1 ; 0 ; 0]"},{"span":null,"env":[],"annots":[],"id":107,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,21,"Redex"]],"id":108,"label":"List.filter f [0 ; 0]"},{"span":null,"env":[],"annots":[],"id":109,"label":"[0 ; 0]"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":112,"label":"1 mod 2"},{"span":null,"env":[],"annots":[],"id":113,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":114,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":115,"label":"2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[0]"]],"annots":[[7,3,"Redex"]],"id":116,"label":"if f_1 y_1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[0]"]],"annots":[[3,5,"Redex"]],"id":117,"label":"if f_1 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,128,"Redex"]],"id":118,"label":"match [0] with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":119,"label":"if f_2 y\nthen y :: (List.filter f_2 ys)\nelse List.filter f_2 ys"},{"span":null,"env":[],"annots":[],"id":121,"label":"0"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[18,4,"Redex"]],"id":124,"label":"0 :: (0 :: (match xs_3 with\n            | [] -> []\n            | y :: ys -> if f_3 y\n                         then y :: (List.filter f_3 ys)\n                         else List.filter f_3 ys))"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[17,4,"Redex"]],"id":125,"label":"(0 , 0 :: (match xs_3 with\n           | [] -> []\n           | y :: ys -> if f_3 y\n                        then y :: (List.filter f_3 ys)\n                        else List.filter f_3 ys))"},{"span":null,"env":[],"annots":[],"id":126,"label":"0 :: (0 :: [])"},{"span":null,"env":[],"annots":[],"id":127,"label":"(0 , 0 :: [])"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"]],"id":128,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"]],"id":129,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[22,4,"Redex"]],"id":130,"label":"0 :: (List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[21,4,"Redex"]],"id":131,"label":"(0 , List.filter f_1 ys_1)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":132,"label":"let seen' = seen_1 @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[[0,8,"Redex"]],"id":133,"label":"0 :: [0]"},{"span":null,"env":[],"annots":[],"id":134,"label":"(0 , [0])"},{"span":null,"env":[["xs_1","[0 ; 0]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":135,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[8,5,"Redex"]],"id":136,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":137,"label":"helper"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[5,113,"Redex"]],"id":138,"label":"0 :: (if true\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[6,3,"Redex"]],"id":139,"label":"0 :: (y_2 :: (List.filter f_2\n                          ys_2))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,18,"Redex"]],"id":140,"label":"List.filter f_2 []"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[13,1,"Redex"]],"id":142,"label":"helper ([] , l)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,53,"Redex"]],"id":143,"label":"List.rev (let rest' =\n            List.filter is_in\n                        [1 ; 0 ; 0] in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs","[1 ; 0 ; 0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[40,2,"Redex"]],"id":144,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[] ; 1 ; 0 ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,4,"Redex"]],"id":145,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":146,"label":"seen"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":147,"label":"f_2"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":148,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":149,"label":"(seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[0]"]],"annots":[],"id":150,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[0]"]],"annots":[],"id":151,"label":"t_1"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":152,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":153,"label":"2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,148,"Redex"]],"id":154,"label":"(0 , match [0] with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[12,3,"Redex"]],"id":155,"label":"(0 , if f_2 y_2\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"]],"annots":[],"id":156,"label":"y :: (List.filter f ys)"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":157,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":158,"label":"seen"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":159,"label":"(y , List.filter f_3 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":160,"label":"y"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"]],"annots":[[4,1,"Redex"]],"id":161,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[]"],["h_1","0"],["t_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,6,"Redex"]],"id":162,"label":"let seen' = seen_1 @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"]],"id":163,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":164,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,32,"Redex"]],"id":165,"label":"List.rev (helper ([] , [[] ; 1 ; 0 ; 0]))"},{"span":null,"env":[],"annots":[],"id":166,"label":"[0 ; 0]"},{"span":null,"env":[],"annots":[],"id":167,"label":"0"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"]],"annots":[[4,3,"Redex"]],"id":168,"label":"f_2 y_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":169,"label":"f_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,154,"Redex"]],"id":170,"label":"0 :: (match [0] with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":null,"env":[["xs","[1 ; 0 ; 0]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"]],"id":171,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[11,177,"Redex"]],"id":172,"label":"0 :: (0 :: (match [] with\n            | [] -> []\n            | y :: ys -> if f_3 y\n                         then y :: (List.filter f_3 ys)\n                         else List.filter f_3 ys))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[10,173,"Redex"]],"id":173,"label":"(0 , 0 :: (match [] with\n           | [] -> []\n           | y :: ys -> if f_3 y\n                        then y :: (List.filter f_3 ys)\n                        else List.filter f_3 ys))"},{"span":null,"env":[],"annots":[],"id":174,"label":"[1 ; 0 ; 0]"},{"span":null,"env":[],"annots":[],"id":175,"label":"1"},{"span":null,"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[26,4,"Redex"]],"id":178,"label":"let rest' =\n  0 :: (match xs_2 with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[19,162,"Redex"]],"id":179,"label":"let rest' =\n  0 :: (match [0] with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,222,"Redex"]],"id":180,"label":"let rest' = match [0 ; 0] with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,87,"Redex"]],"id":182,"label":"List.rev (let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[21,3,"Redex"]],"id":183,"label":"let rest' =\n  if f_1 y_1\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":186,"label":"match xs_3 with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":187,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[3,5,"Redex"]],"id":188,"label":"if 0 = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,9,"Redex"]],"id":190,"label":"let rest' =\n  if (0 mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":191,"label":"let rest' =\n  if 0 = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":192,"label":"(@)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"],["rest'","[0 ; 0]"]],"annots":[[8,5,"Redex"]],"id":193,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[]"],["rest'","[0 ; 0]"]],"annots":[[1,5,"Redex"]],"id":194,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"],["rest'","[0 ; 0]"]],"annots":[[18,5,"Redex"]],"id":195,"label":"List.rev (helper (seen' , rest'))"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[[0,33,"Redex"]],"id":196,"label":"removeDuplicates [[] ; 1 ; 0 ; 0]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[0,360,"Redex"]],"id":197,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[5,108,"Redex"]],"id":200,"label":"(0 , if true\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[8,5,"Redex"]],"id":201,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":202,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[]"]],"annots":[[1,5,"Redex"]],"id":203,"label":"(seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[52,4,"Redex"]],"id":204,"label":"0 :: (0 :: (List.filter f_2\n                        ys_2))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["List.rev","List.rev"]],"annots":[[23,1,"Redex"]],"id":205,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[13,1,"Redex"]],"id":206,"label":"helper ([] , l)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[4,1,"Redex"]],"id":207,"label":"if (i mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,44,"Redex"]],"id":208,"label":"0 :: (0 :: (List.filter f_2\n                        []))"},{"span":null,"env":[["xs_1","[0 ; 0]"]],"annots":[[0,4,"Redex"]],"id":209,"label":"xs_1"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[1,3,"Redex"]],"id":210,"label":"(y_1 , List.filter f_1 ys_1)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[47,3,"Redex"]],"id":211,"label":"List.rev (let rest' =\n            0 :: (if f_2 y_2\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[0,3,"Redex"]],"id":212,"label":"y_2 :: (List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[22,4,"Redex"]],"id":213,"label":"0 :: (List.filter f_2 ys_2)"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":214,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,53,"Redex"]],"id":217,"label":"let rest' = List.filter is_in\n                        [1 ; 0 ; 0] in helper (seen' , rest')"},{"span":null,"env":[["xs","[1 ; 0 ; 0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[20,2,"Redex"]],"id":218,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[7,3,"Redex"]],"id":219,"label":"if f_2 y_2\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":220,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[16,4,"Redex"]],"id":221,"label":"List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":222,"label":"List.filter"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":223,"label":"List.rev (let rest' =\n            if false\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[32,4,"Redex"]],"id":225,"label":"let rest' =\n  0 :: (0 :: (match xs_3 with\n              | [] -> []\n              | y :: ys -> if f_3 y\n                           then y :: (List.filter f_3 ys)\n                           else List.filter f_3 ys)) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,178,"Redex"]],"id":226,"label":"List.rev (let rest' =\n            match [1 ; 0 ; 0] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[18,1,"Redex"]],"id":227,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,9,"Redex"]],"id":228,"label":"let rest' =\n  if (1 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[19,21,"Redex"]],"id":229,"label":"let rest' =\n  0 :: (List.filter f_1 [0]) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,21,"Redex"]],"id":230,"label":"0 :: (List.filter f_1 [0])"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,266,"Redex"]],"id":231,"label":"match [[] ; 1 ; 0 ; 0] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[]"],["h_1","0"],["t_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,6,"Redex"]],"id":232,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":233,"label":"f 1"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":234,"label":"f"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":235,"label":"(y , List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":236,"label":"y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,19,"Redex"]],"id":237,"label":"(0 , List.filter f_1 [0])"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":238,"label":"let rest' = 0 :: (0 :: []) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[8,5,"Redex"]],"id":239,"label":"(0 , if f_2 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":242,"label":"let rest' = 0 :: [0] in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[43,5,"Redex"]],"id":243,"label":"List.rev (let rest' =\n            0 :: (if 0 = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":244,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":245,"label":"rest'"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":246,"label":"fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,360,"Redex"]],"id":247,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":248,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":249,"label":"seen'"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[14,138,"Redex"]],"id":250,"label":"let rest' =\n  match [1 ; 0 ; 0] with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[19,1,"Redex"]],"id":251,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[98,4,"Redex"]],"id":252,"label":"List.rev (let rest' =\n            0 :: (0 :: (List.filter f_2\n                                    ys_2)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":253,"label":"0 = 0"},{"span":null,"env":[],"annots":[],"id":254,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"]],"id":255,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":258,"label":"1 = 0"},{"span":null,"env":[],"annots":[],"id":259,"label":"[]"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[5,3,"Redex"]],"id":260,"label":"(0 , y_2 :: (List.filter f_2\n                         ys_2))"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":261,"label":"let rest' =\n  if true\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[23,5,"Redex"]],"id":262,"label":"let rest' =\n  0 :: (if 0 = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[9,5,"Redex"]],"id":263,"label":"0 :: (if 0 = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[8,5,"Redex"]],"id":264,"label":"(0 , if 0 = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":265,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":266,"label":"(i mod 2) = 0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,6,"Redex"]],"id":269,"label":"let seen' = [] @ 0 in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t_1) in helper (seen' , rest')"},{"span":null,"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":270,"label":"(0 , match xs_2 with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":271,"label":"match xs_2 with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[3,5,"Redex"]],"id":272,"label":"if 0 = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[3,5,"Redex"]],"id":273,"label":"if f_2 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"],["t_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[17,3,"Redex"]],"id":274,"label":"let seen' = [] @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":275,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":276,"label":"0 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":277,"label":"(1 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[1,1,"Redex"]],"id":278,"label":"(i mod 2) = 0"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[45,339,"Redex"]],"id":279,"label":"List.rev (let rest' =\n            0 :: (0 :: (match [] with\n                        | [] -> []\n                        | y :: ys -> if f_3 y\n                                     then y :: (List.filter f_3\n                                                            ys)\n                                     else List.filter f_3\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[23,5,"Redex"]],"id":281,"label":"let rest' =\n  0 :: (if f_2 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[9,5,"Redex"]],"id":282,"label":"0 :: (if f_2 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[0,3,"Redex"]],"id":283,"label":"y_1 :: (List.filter f_1 ys_1)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":284,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":285,"label":"rest'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":286,"label":"let rest' =\n  if f_1 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":287,"label":"(y , List.filter f_1 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":288,"label":"List.filter f_1 ys"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[25,185,"Redex"]],"id":289,"label":"let rest' =\n  0 :: (0 :: (match [] with\n              | [] -> []\n              | y :: ys -> if f_3 y\n                           then y :: (List.filter f_3 ys)\n                           else List.filter f_3 ys)) in\nhelper (seen' , rest')"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,112,"Redex"]],"id":291,"label":"let rest' = if false\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":292,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":293,"label":"f_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[]"]],"annots":[],"id":294,"label":"seen_1 @ h"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":295,"label":"ys"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":296,"label":"List.rev (let rest' =\n            0 :: [0] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":297,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":298,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":299,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[52,1,"Redex"]],"id":301,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":302,"label":"y :: (List.filter f_3 ys)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":303,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":304,"label":"(0 mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":305,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[]"],["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"]],"id":306,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":307,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[3,9,"Redex"]],"id":308,"label":"if (0 mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":309,"label":"let rest' =\n  if false\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0 ; 0]"],["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,6,"Redex"]],"id":310,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":311,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":312,"label":"2"},{"span":null,"env":[],"annots":[],"id":313,"label":"0"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[27,3,"Redex"]],"id":314,"label":"let rest' =\n  0 :: (if f_2 y_2\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[]"]],"annots":[[0,4,"Redex"]],"id":315,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[]"]],"annots":[[0,1,"Redex"]],"id":316,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":317,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":318,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":319,"label":"0 mod 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":320,"label":"f"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[50,4,"Redex"]],"id":321,"label":"(0 , 0 :: (List.filter f_2\n                       ys_2))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[68,4,"Redex"]],"id":322,"label":"let rest' =\n  0 :: (0 :: (List.filter f_2\n                          ys_2)) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":323,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":324,"label":"i"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":325,"label":"rest"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"]],"annots":[[0,59,"Redex"]],"id":326,"label":"if false\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":327,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":328,"label":"2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[36,4,"Redex"]],"id":329,"label":"let rest' =\n  0 :: (List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":330,"label":"[0 ; 0]"},{"span":null,"env":[],"annots":[],"id":331,"label":"0"},{"span":null,"env":[["xs","[1 ; 0 ; 0]"]],"annots":[[0,2,"Redex"]],"id":332,"label":"xs"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":333,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[25,46,"Redex"]],"id":334,"label":"let rest' =\n  0 :: (0 :: (List.filter f_2\n                          [])) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":335,"label":"false"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,7,"Redex"]],"id":336,"label":"List.rev (let seen' =\n            [] @ [] in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t) in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 0]"]],"annots":[[0,59,"Redex"]],"id":338,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[]"],["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[39,1,"Redex"]],"id":339,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":340,"label":"if f_3 y\nthen y :: (List.filter f_3 ys)\nelse List.filter f_3 ys"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":341,"label":"let rest' =\n  0 :: (if true\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,184,"Redex"]],"id":342,"label":"let rest' = 0 :: (if true\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2\n                                   ys_2) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":345,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":346,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":347,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":348,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":349,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":350,"label":"2"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":351,"label":"y"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[52,4,"Redex"]],"id":352,"label":"List.rev (let rest' =\n            0 :: (0 :: (match xs_3 with\n                        | [] -> []\n                        | y :: ys -> if f_3 y\n                                     then y :: (List.filter f_3\n                                                            ys)\n                                     else List.filter f_3\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":353,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":354,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":355,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":356,"label":"h"},{"span":null,"env":[],"annots":[],"id":357,"label":"0"},{"span":null,"env":[],"annots":[],"id":358,"label":"0"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"]],"annots":[],"id":359,"label":"(y , List.filter f ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[]"]],"annots":[[0,5,"Redex"]],"id":360,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":361,"label":"[]"},{"span":null,"env":[],"annots":[],"id":362,"label":"[0 ; 0]"},{"span":null,"env":[],"annots":[],"id":363,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,112,"Redex"]],"id":365,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,23,"Redex"]],"id":366,"label":"List.rev (helper ([] , [0 ; 0]))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,21,"Redex"]],"id":367,"label":"helper ([] , [0 ; 0])"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,29,"Redex"]],"id":368,"label":"List.filter is_in [1 ; 0 ; 0]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":369,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":371,"label":"0"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":372,"label":"(0 , List.filter f_2 [])"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,125,"Redex"]],"id":373,"label":"let seen' = [] in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":374,"label":"0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":376,"label":"f_1 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,21,"Redex"]],"id":377,"label":"List.rev (let rest' =\n            List.filter f [0 ; 0] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":378,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":379,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":381,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":382,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[4,1,"Redex"]],"id":383,"label":"if (i mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":384,"label":"f_2 y"},{"span":null,"env":[],"annots":[],"id":385,"label":"[0]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[56,4,"Redex"]],"id":386,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 0]"]],"annots":[[18,1,"Redex"]],"id":387,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":388,"label":"is_in"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[9,9,"Redex"]],"id":389,"label":"0 :: (if (0 mod 2) = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":391,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":393,"label":"0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,19,"Redex"]],"id":394,"label":"List.filter f_1 [0]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":395,"label":"f_1"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":396,"label":"[]"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[39,149,"Redex"]],"id":397,"label":"List.rev (let rest' =\n            0 :: (if true\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":398,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":399,"label":"is_in"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":400,"label":"f_2 0"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[22,142,"Redex"]],"id":401,"label":"List.rev (let rest' = if false\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[48,2,"Redex"]],"id":402,"label":"List.rev (let rest' =\n            List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":404,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":406,"label":"([] , [0 ; 0])"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":407,"label":"let rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":408,"label":"List.filter f_3 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":409,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":410,"label":"2"},{"span":null,"env":[],"annots":[],"id":411,"label":"[0]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":412,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["ys_2","[]"]],"annots":[[0,4,"Redex"]],"id":414,"label":"ys_2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[38,1,"Redex"]],"id":415,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,9,"Redex"]],"id":416,"label":"List.rev (let rest' =\n            if (0 mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[12,4,"Redex"]],"id":417,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":418,"label":"helper"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0 ; 0]"]],"annots":[[0,6,"Redex"]],"id":419,"label":"rest_1"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[] ; 1 ; 0 ; 0]"]],"annots":[[0,4,"Redex"]],"id":420,"label":"rest"},{"span":null,"env":[],"annots":[],"id":421,"label":"[[] ; 1 ; 0 ; 0]"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":422,"label":"List.rev (let rest' =\n            if true\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[0]"]],"annots":[],"id":423,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 0]"]],"annots":[[0,1,"Redex"]],"id":424,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":425,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[32,1,"Redex"]],"id":427,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":428,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":430,"label":"[[] ; 1 ; 0 ; 0]"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,481,"Redex"]],"id":431,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' =\n                             (let is_in =\n                                fun i -> (i mod 2) = 0 in\n                              List.filter is_in t) in\n                           helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":432,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":433,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[0,93,"Redex"]],"id":434,"label":"if true\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[39,256,"Redex"]],"id":435,"label":"List.rev (let rest' =\n            0 :: (match [0] with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 0]"]],"annots":[[0,59,"Redex"]],"id":436,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,20,"Redex"]],"id":437,"label":"0 :: (List.filter f_2 [])"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[18,1,"Redex"]],"id":440,"label":"let rest' =\n  if (i mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,3,"Redex"]],"id":441,"label":"let rest' =\n  if f 1\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":442,"label":"f_3 y"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[22,198,"Redex"]],"id":443,"label":"List.rev (let rest' = if true\n                      then y_1 :: (List.filter f_1\n                                               ys_1)\n                      else List.filter f_1\n                                       ys_1 in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":444,"label":"1"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":445,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":446,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":447,"label":"rest'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":448,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":449,"label":"y"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[40,3,"Redex"]],"id":450,"label":"List.rev (let rest' =\n            0 :: (y_2 :: (List.filter f_2\n                                      ys_2)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":451,"label":"f y"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":452,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":453,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":454,"label":"List.filter"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":455,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0 ; 0]"]],"annots":[[0,5,"Redex"]],"id":456,"label":"rest'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"]],"annots":[[4,3,"Redex"]],"id":458,"label":"f_1 y_1"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[39,1,"Redex"]],"id":459,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,3,"Redex"]],"id":460,"label":"List.rev (let rest' =\n            if f 1\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":461,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":462,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[6,1,"Redex"]],"id":463,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[0,1,"Redex"]],"id":464,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[13,1,"Redex"]],"id":465,"label":"helper ([] , l)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[10,1,"Redex"]],"id":466,"label":"0 :: (if (i mod 2) = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["xs_1","[0 ; 0]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[40,4,"Redex"]],"id":467,"label":"List.rev (let rest' =\n            match xs_1 with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 0 ; 0]"]],"annots":[[18,1,"Redex"]],"id":468,"label":"List.filter is_in t"},{"span":null,"env":[["xs_2","[0]"]],"annots":[[0,4,"Redex"]],"id":469,"label":"xs_2"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":470,"label":"(0 , match [] with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[],"annots":[[0,7,"Redex"]],"id":471,"label":"0 :: []"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":472,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":473,"label":"is_in"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[13,3,"Redex"]],"id":475,"label":"0 :: (if f_2 y_2\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,112,"Redex"]],"id":476,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":477,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":478,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[0,45,"Redex"]],"id":479,"label":"let rest' = [0 ; 0] in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":480,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":481,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":482,"label":"let rest' =\n  if 1 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[23,1,"Redex"]],"id":483,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":484,"label":"List.filter"},{"span":null,"env":[["xs_1","[0 ; 0]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[20,4,"Redex"]],"id":485,"label":"let rest' =\n  match xs_1 with\n  | [] -> []\n  | y :: ys -> if f_1 y\n               then y :: (List.filter f_1 ys)\n               else List.filter f_1 ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 0 ; 0]"]],"annots":[[23,1,"Redex"]],"id":486,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":487,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,177,"Redex"]],"id":488,"label":"List.rev (let seen' = [] in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":489,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":491,"label":"[]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":492,"label":"List.rev (let rest' =\n            if f_1 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[39,21,"Redex"]],"id":494,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 [0]) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":495,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":496,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":497,"label":"helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":498,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":499,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":500,"label":"0 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[10,43,"Redex"]],"id":501,"label":"(0 , 0 :: (List.filter f_2\n                       []))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[3,9,"Redex"]],"id":503,"label":"if (0 mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[46,4,"Redex"]],"id":504,"label":"List.rev (let rest' =\n            0 :: (match xs_2 with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_1","0"]],"annots":[[0,3,"Redex"]],"id":505,"label":"y_1"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[]"],["t","[1 ; 0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,4,"Redex"]],"id":506,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":507,"label":"[]"},{"span":null,"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":508,"label":"0 :: (match xs_2 with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":509,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":510,"label":"rest'"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":511,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":512,"label":"i"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":513,"label":"rest"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":514,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":515,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":516,"label":"i"},{"span":null,"env":[["ys_1","[0]"]],"annots":[[0,4,"Redex"]],"id":517,"label":"ys_1"},{"span":null,"env":[],"annots":[],"id":518,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":519,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":520,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 0]"]],"annots":[[0,1,"Redex"]],"id":521,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":522,"label":"i"},{"span":null,"env":[],"annots":[],"id":523,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":524,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":525,"label":"i"},{"span":null,"env":[],"annots":[],"id":526,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[0 ; 0]"]],"annots":[[13,5,"Redex"]],"id":527,"label":"helper ([] , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[]"]],"annots":[[0,6,"Redex"]],"id":528,"label":"seen_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":529,"label":"h"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[38,1,"Redex"]],"id":530,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":531,"label":"seen"},{"span":null,"env":[],"annots":[],"id":532,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0 ; 0]"]],"annots":[[6,5,"Redex"]],"id":533,"label":"([] , rest')"},{"span":null,"env":[["ys","[0 ; 0]"]],"annots":[[0,2,"Redex"]],"id":534,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,9,"Redex"]],"id":536,"label":"List.rev (let rest' =\n            if (1 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[0 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":537,"label":"List.rev (let rest' =\n            if 1 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":539,"label":"List.rev (let rest' =\n            0 :: (0 :: []) in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":540,"label":"0 :: (match xs_3 with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":null,"env":[],"annots":[],"id":541,"label":"[]"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":542,"label":"[]"},{"span":null,"env":[],"annots":[],"id":544,"label":"0"},{"span":null,"env":[],"annots":[],"id":545,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":546,"label":"i"},{"span":null,"env":[["xs_3","[]"]],"annots":[[0,4,"Redex"]],"id":547,"label":"xs_3"},{"span":null,"env":[],"annots":[],"id":548,"label":"[]"},{"span":null,"env":[["y_2","0"]],"annots":[[0,3,"Redex"]],"id":549,"label":"y_2"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":550,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":551,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":552,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":553,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":554,"label":"List.rev"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":555,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":556,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":557,"label":"List.filter"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[1,3,"Redex"]],"id":558,"label":"(y_2 , List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":559,"label":"y :: (List.filter f_2 ys)"},{"span":null,"env":[],"annots":[],"id":560,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":561,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":562,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":563,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":564,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[]"]],"annots":[[0,5,"Redex"]],"id":565,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":566,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":567,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":568,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":569,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":570,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":571,"label":"[[] ; 1 ; 0 ; 0]"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,3,"Redex"]],"id":572,"label":"List.rev (let rest' =\n            y_1 :: (List.filter f_1\n                                ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":573,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":574,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":575,"label":"(@)"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":576,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":577,"label":"i"},{"span":null,"env":[],"annots":[],"id":578,"label":"0"},{"span":null,"env":[],"annots":[],"id":579,"label":"0"},{"span":null,"env":[],"annots":[],"id":580,"label":"0"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":581,"label":"f_3"},{"span":null,"env":[],"annots":[],"id":582,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":583,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":584,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":585,"label":"List.rev"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 0]"]],"annots":[[0,1,"Redex"]],"id":586,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":587,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":588,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":589,"label":"seen'"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[],"id":590,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":591,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":592,"label":"0"},{"span":null,"env":[],"annots":[],"id":593,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":594,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":595,"label":"helper"},{"span":null,"env":[],"annots":[],"id":596,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":597,"label":"t"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":598,"label":"helper"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":599,"label":"ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":600,"label":"h"},{"span":null,"env":[],"annots":[],"id":601,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":602,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":603,"label":"seen"}]}