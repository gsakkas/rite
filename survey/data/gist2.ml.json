{"root":171,"result":"stuck","reason":"Type error : could not match int with 't99 list","bad":148,"stuck":151,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":313,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":119,"from":1,"label":"StepsTo BoringStep"},{"arrows":"to","to":153,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":357,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":3,"from":2,"label":"StepsTo CallStep"},{"arrows":"to","to":26,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":337,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":295,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":420,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":433,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":438,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":438,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":469,"from":7,"label":"StepsTo PrimStep"},{"arrows":"to","to":530,"from":7,"label":"SubTerm 2"},{"arrows":"to","to":5,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":210,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":384,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":12,"label":"SubTerm 2"},{"arrows":"to","to":195,"from":12,"label":"StepsTo BoringStep"},{"arrows":"to","to":493,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":491,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":15,"label":"StepsTo BoringStep"},{"arrows":"to","to":92,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":143,"from":15,"label":"SubTerm 2"},{"arrows":"to","to":443,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":16,"label":"SubTerm 2"},{"arrows":"to","to":148,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":340,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":443,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":455,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":19,"label":"StepsTo PrimStep"},{"arrows":"to","to":56,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":20,"label":"StepsTo ReturnStep"},{"arrows":"to","to":349,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":367,"from":21,"label":"SubTerm 2"},{"arrows":"to","to":506,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":202,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":203,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":499,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":203,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":483,"from":27,"label":"SubTerm 2"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":279,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":374,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":194,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":399,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":34,"label":"SubTerm 2"},{"arrows":"to","to":275,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":405,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":368,"from":37,"label":"SubTerm 2"},{"arrows":"to","to":511,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":299,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":42,"label":"StepsTo ReturnStep"},{"arrows":"to","to":44,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":403,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":45,"label":"StepsTo CallStep"},{"arrows":"to","to":226,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":49,"from":48,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":49,"label":"SubTerm 2"},{"arrows":"to","to":135,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":142,"from":49,"label":"StepsTo CallStep"},{"arrows":"to","to":202,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":51,"label":"StepsTo ReturnStep"},{"arrows":"to","to":423,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":53,"label":"StepsTo BoringStep"},{"arrows":"to","to":262,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":262,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":54,"label":"StepsTo PrimStep"},{"arrows":"to","to":19,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":56,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":58,"label":"SubTerm 2"},{"arrows":"to","to":48,"from":58,"label":"StepsTo BoringStep"},{"arrows":"to","to":159,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":211,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":60,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":268,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":117,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":232,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":413,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":350,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":124,"from":64,"label":"StepsTo CallStep"},{"arrows":"to","to":363,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":374,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":68,"label":"SubTerm 2"},{"arrows":"to","to":128,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":482,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":422,"from":70,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":72,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":442,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":75,"label":"StepsTo PrimStep"},{"arrows":"to","to":274,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":501,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":343,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":493,"from":76,"label":"StepsTo ReturnStep"},{"arrows":"to","to":501,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":77,"label":"SubTerm 2"},{"arrows":"to","to":78,"from":77,"label":"StepsTo PrimStep"},{"arrows":"to","to":135,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":78,"label":"SubTerm 2"},{"arrows":"to","to":135,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":224,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":78,"label":"StepsTo ReturnStep"},{"arrows":"to","to":80,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":406,"from":79,"label":"SubTerm 2"},{"arrows":"to","to":488,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":306,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":448,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":179,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":440,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":126,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":366,"from":84,"label":"StepsTo CallStep"},{"arrows":"to","to":402,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":85,"label":"SubTerm 2"},{"arrows":"to","to":86,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":187,"from":85,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":88,"label":"SubTerm 1"},{"arrows":"to","to":431,"from":88,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":89,"label":"StepsTo BoringStep"},{"arrows":"to","to":124,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":454,"from":90,"label":"StepsTo BoringStep"},{"arrows":"to","to":340,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":93,"label":"StepsTo ReturnStep"},{"arrows":"to","to":185,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":490,"from":94,"label":"SubTerm 2"},{"arrows":"to","to":509,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":96,"label":"StepsTo PrimStep"},{"arrows":"to","to":332,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":97,"label":"StepsTo ReturnStep"},{"arrows":"to","to":28,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":98,"label":"SubTerm 2"},{"arrows":"to","to":116,"from":98,"label":"StepsTo CallStep"},{"arrows":"to","to":203,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":489,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":542,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":101,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":102,"label":"StepsTo PrimStep"},{"arrows":"to","to":252,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":472,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":274,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":476,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":195,"from":106,"label":"SubTerm 2"},{"arrows":"to","to":410,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":107,"label":"SubTerm 2"},{"arrows":"to","to":317,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":325,"from":107,"label":"StepsTo CallStep"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 2"},{"arrows":"to","to":188,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":109,"label":"StepsTo BoringStep"},{"arrows":"to","to":328,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":110,"label":"SubTerm 2"},{"arrows":"to","to":326,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":508,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":217,"from":113,"label":"SubTerm 2"},{"arrows":"to","to":298,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":381,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":433,"from":113,"label":"StepsTo BoringStep"},{"arrows":"to","to":115,"from":114,"label":"SubTerm 2"},{"arrows":"to","to":277,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":481,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":146,"from":115,"label":"SubTerm 1"},{"arrows":"to","to":424,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":116,"label":"StepsTo BoringStep"},{"arrows":"to","to":178,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":406,"from":116,"label":"SubTerm 2"},{"arrows":"to","to":488,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":215,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":153,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":168,"from":119,"label":"StepsTo CallStep"},{"arrows":"to","to":225,"from":119,"label":"SubTerm 2"},{"arrows":"to","to":258,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":64,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":363,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":363,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":122,"label":"StepsTo CallStep"},{"arrows":"to","to":190,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":198,"from":123,"label":"StepsTo BoringStep"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":201,"from":124,"label":"StepsTo BoringStep"},{"arrows":"to","to":221,"from":124,"label":"SubTerm 2"},{"arrows":"to","to":364,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":402,"from":126,"label":"StepsTo BoringStep"},{"arrows":"to","to":0,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":380,"from":127,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":129,"label":"StepsTo BoringStep"},{"arrows":"to","to":308,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":130,"label":"StepsTo BoringStep"},{"arrows":"to","to":228,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":502,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":494,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":307,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":478,"from":136,"label":"SubTerm 2"},{"arrows":"to","to":543,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":139,"from":138,"label":"StepsTo ReturnStep"},{"arrows":"to","to":26,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":139,"label":"StepsTo BoringStep"},{"arrows":"to","to":141,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":351,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":142,"label":"SubTerm 2"},{"arrows":"to","to":77,"from":142,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":492,"from":143,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":208,"from":144,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":145,"label":"SubTerm 2"},{"arrows":"to","to":55,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":264,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":147,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":505,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":541,"from":146,"label":"SubTerm 2"},{"arrows":"to","to":340,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":443,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":492,"from":148,"label":"SubTerm 2"},{"arrows":"to","to":5,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":150,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":153,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":346,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":497,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":154,"label":"StepsTo BoringStep"},{"arrows":"to","to":192,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":155,"label":"StepsTo CallStep"},{"arrows":"to","to":265,"from":155,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":158,"label":"SubTerm 2"},{"arrows":"to","to":58,"from":158,"label":"StepsTo BoringStep"},{"arrows":"to","to":211,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":283,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":159,"label":"SubTerm 0"},{"arrows":"to","to":450,"from":159,"label":"SubTerm 2"},{"arrows":"to","to":537,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":162,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":161,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":161,"label":"SubTerm 2"},{"arrows":"to","to":26,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":163,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":163,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":255,"from":165,"label":"StepsTo BoringStep"},{"arrows":"to","to":310,"from":165,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":166,"label":"StepsTo BoringStep"},{"arrows":"to","to":169,"from":168,"label":"StepsTo BoringStep"},{"arrows":"to","to":291,"from":168,"label":"SubTerm 2"},{"arrows":"to","to":339,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":495,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":169,"label":"StepsTo ReturnStep"},{"arrows":"to","to":291,"from":169,"label":"SubTerm 2"},{"arrows":"to","to":339,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":496,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":170,"label":"SubTerm 2"},{"arrows":"to","to":20,"from":170,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":170,"label":"StepsTo ReturnStep"},{"arrows":"to","to":187,"from":170,"label":"SubTerm 1"},{"arrows":"to","to":172,"from":171,"label":"StepsTo CallStep"},{"arrows":"to","to":520,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":531,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":331,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":429,"from":172,"label":"StepsTo BoringStep"},{"arrows":"to","to":432,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":500,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":513,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":175,"label":"SubTerm 1"},{"arrows":"to","to":514,"from":175,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":528,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":177,"label":"SubTerm 1"},{"arrows":"to","to":462,"from":177,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":178,"label":"StepsTo BoringStep"},{"arrows":"to","to":180,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":447,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":515,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":181,"label":"StepsTo BoringStep"},{"arrows":"to","to":382,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":382,"from":182,"label":"SubTerm 1"},{"arrows":"to","to":474,"from":182,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":185,"label":"StepsTo ReturnStep"},{"arrows":"to","to":186,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":422,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":423,"from":186,"label":"StepsTo ReturnStep"},{"arrows":"to","to":127,"from":187,"label":"StepsTo BoringStep"},{"arrows":"to","to":507,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":190,"label":"StepsTo CallStep"},{"arrows":"to","to":311,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":219,"from":191,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":192,"label":"SubTerm 2"},{"arrows":"to","to":152,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":192,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":192,"label":"StepsTo BoringStep"},{"arrows":"to","to":39,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":196,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":337,"from":195,"label":"StepsTo BoringStep"},{"arrows":"to","to":338,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":466,"from":195,"label":"SubTerm 2"},{"arrows":"to","to":5,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":267,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":347,"from":197,"label":"StepsTo ReturnStep"},{"arrows":"to","to":5,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":411,"from":198,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":142,"from":199,"label":"SubTerm 1"},{"arrows":"to","to":200,"from":199,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":427,"from":200,"label":"StepsTo PrimStep"},{"arrows":"to","to":125,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":201,"label":"SubTerm 2"},{"arrows":"to","to":261,"from":201,"label":"StepsTo BoringStep"},{"arrows":"to","to":365,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":202,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":202,"label":"StepsTo CallStep"},{"arrows":"to","to":389,"from":202,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":204,"label":"StepsTo BoringStep"},{"arrows":"to","to":286,"from":204,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":208,"label":"StepsTo PrimStep"},{"arrows":"to","to":264,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":209,"label":"StepsTo PrimStep"},{"arrows":"to","to":170,"from":209,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":151,"from":210,"label":"StepsTo BoringStep"},{"arrows":"to","to":176,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":395,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":457,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":217,"label":"SubTerm 1"},{"arrows":"to","to":356,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":498,"from":218,"label":"SubTerm 2"},{"arrows":"to","to":525,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":220,"from":219,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":385,"from":220,"label":"StepsTo BoringStep"},{"arrows":"to","to":272,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":224,"label":"StepsTo ReturnStep"},{"arrows":"to","to":333,"from":224,"label":"SubTerm 1"},{"arrows":"to","to":113,"from":226,"label":"StepsTo CallStep"},{"arrows":"to","to":229,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":474,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":182,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":226,"from":228,"label":"StepsTo BoringStep"},{"arrows":"to","to":229,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":230,"label":"SubTerm 1"},{"arrows":"to","to":231,"from":230,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":370,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":233,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":533,"from":233,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":236,"label":"StepsTo BoringStep"},{"arrows":"to","to":294,"from":236,"label":"SubTerm 1"},{"arrows":"to","to":521,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":294,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":237,"label":"StepsTo PrimStep"},{"arrows":"to","to":526,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":224,"from":238,"label":"StepsTo PrimStep"},{"arrows":"to","to":333,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":239,"label":"StepsTo BoringStep"},{"arrows":"to","to":251,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":333,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":242,"from":241,"label":"StepsTo BoringStep"},{"arrows":"to","to":316,"from":241,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":373,"from":242,"label":"StepsTo BoringStep"},{"arrows":"to","to":407,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":383,"from":244,"label":"StepsTo CallStep"},{"arrows":"to","to":246,"from":245,"label":"SubTerm 1"},{"arrows":"to","to":398,"from":245,"label":"SubTerm 0"},{"arrows":"to","to":249,"from":246,"label":"SubTerm 1"},{"arrows":"to","to":534,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":540,"from":246,"label":"SubTerm 2"},{"arrows":"to","to":26,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":247,"label":"StepsTo BoringStep"},{"arrows":"to","to":278,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":249,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":398,"from":248,"label":"SubTerm 1"},{"arrows":"to","to":102,"from":251,"label":"StepsTo BoringStep"},{"arrows":"to","to":252,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":471,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":255,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":255,"label":"StepsTo BoringStep"},{"arrows":"to","to":371,"from":255,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":257,"label":"StepsTo BoringStep"},{"arrows":"to","to":104,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":501,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":260,"from":259,"label":"SubTerm 1"},{"arrows":"to","to":473,"from":259,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":261,"label":"StepsTo BoringStep"},{"arrows":"to","to":262,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":379,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":446,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":486,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":264,"label":"SubTerm 2"},{"arrows":"to","to":19,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":264,"label":"StepsTo PrimStep"},{"arrows":"to","to":187,"from":264,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":265,"label":"SubTerm 2"},{"arrows":"to","to":145,"from":265,"label":"StepsTo CallStep"},{"arrows":"to","to":187,"from":265,"label":"SubTerm 1"},{"arrows":"to","to":346,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":230,"from":266,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":267,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":267,"label":"StepsTo ReturnStep"},{"arrows":"to","to":278,"from":267,"label":"SubTerm 1"},{"arrows":"to","to":269,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":527,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":270,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":270,"label":"SubTerm 2"},{"arrows":"to","to":300,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":530,"from":271,"label":"StepsTo BoringStep"},{"arrows":"to","to":273,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":272,"label":"SubTerm 2"},{"arrows":"to","to":522,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":343,"from":274,"label":"StepsTo PrimStep"},{"arrows":"to","to":477,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":278,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":278,"label":"SubTerm 2"},{"arrows":"to","to":135,"from":278,"label":"SubTerm 1"},{"arrows":"to","to":285,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":280,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":523,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":159,"from":283,"label":"StepsTo BoringStep"},{"arrows":"to","to":372,"from":284,"label":"SubTerm 1"},{"arrows":"to","to":445,"from":284,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":286,"label":"StepsTo BoringStep"},{"arrows":"to","to":187,"from":286,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":287,"label":"SubTerm 1"},{"arrows":"to","to":436,"from":287,"label":"StepsTo PrimStep"},{"arrows":"to","to":21,"from":289,"label":"SubTerm 0"},{"arrows":"to","to":419,"from":289,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":290,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":290,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":290,"label":"StepsTo BoringStep"},{"arrows":"to","to":256,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":351,"from":291,"label":"SubTerm 2"},{"arrows":"to","to":388,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":295,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":295,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":295,"label":"StepsTo BoringStep"},{"arrows":"to","to":297,"from":296,"label":"SubTerm 1"},{"arrows":"to","to":463,"from":296,"label":"SubTerm 0"},{"arrows":"to","to":438,"from":300,"label":"StepsTo BoringStep"},{"arrows":"to","to":302,"from":301,"label":"SubTerm 1"},{"arrows":"to","to":459,"from":301,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":307,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":307,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":308,"label":"StepsTo BoringStep"},{"arrows":"to","to":229,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":289,"from":310,"label":"SubTerm 1"},{"arrows":"to","to":371,"from":310,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":311,"label":"SubTerm 2"},{"arrows":"to","to":158,"from":311,"label":"StepsTo CallStep"},{"arrows":"to","to":312,"from":311,"label":"SubTerm 1"},{"arrows":"to","to":456,"from":311,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":313,"label":"StepsTo CallStep"},{"arrows":"to","to":71,"from":313,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":313,"label":"SubTerm 1"},{"arrows":"to","to":262,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":310,"from":314,"label":"StepsTo BoringStep"},{"arrows":"to","to":469,"from":314,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":316,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":316,"label":"SubTerm 0"},{"arrows":"to","to":407,"from":316,"label":"StepsTo BoringStep"},{"arrows":"to","to":257,"from":317,"label":"StepsTo CallStep"},{"arrows":"to","to":338,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":484,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":318,"label":"SubTerm 1"},{"arrows":"to","to":418,"from":318,"label":"StepsTo CallStep"},{"arrows":"to","to":301,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":320,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":259,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":322,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":296,"from":323,"label":"SubTerm 0"},{"arrows":"to","to":324,"from":323,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":325,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":325,"label":"SubTerm 2"},{"arrows":"to","to":257,"from":325,"label":"SubTerm 0"},{"arrows":"to","to":344,"from":325,"label":"StepsTo BoringStep"},{"arrows":"to","to":128,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":327,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":327,"label":"StepsTo BoringStep"},{"arrows":"to","to":334,"from":327,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":328,"label":"SubTerm 0"},{"arrows":"to","to":330,"from":329,"label":"SubTerm 1"},{"arrows":"to","to":430,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":470,"from":329,"label":"SubTerm 2"},{"arrows":"to","to":435,"from":331,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":332,"label":"StepsTo ReturnStep"},{"arrows":"to","to":63,"from":332,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":332,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":332,"label":"SubTerm 2"},{"arrows":"to","to":26,"from":334,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":334,"label":"SubTerm 1"},{"arrows":"to","to":308,"from":334,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":335,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":335,"label":"SubTerm 1"},{"arrows":"to","to":241,"from":335,"label":"StepsTo ReturnStep"},{"arrows":"to","to":26,"from":336,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":336,"label":"StepsTo PrimStep"},{"arrows":"to","to":344,"from":336,"label":"SubTerm 1"},{"arrows":"to","to":196,"from":337,"label":"SubTerm 0"},{"arrows":"to","to":338,"from":337,"label":"SubTerm 1"},{"arrows":"to","to":420,"from":337,"label":"StepsTo CallStep"},{"arrows":"to","to":467,"from":337,"label":"SubTerm 2"},{"arrows":"to","to":342,"from":341,"label":"SubTerm 1"},{"arrows":"to","to":425,"from":341,"label":"SubTerm 0"},{"arrows":"to","to":475,"from":341,"label":"SubTerm 2"},{"arrows":"to","to":63,"from":344,"label":"SubTerm 1"},{"arrows":"to","to":75,"from":344,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":344,"label":"SubTerm 2"},{"arrows":"to","to":332,"from":344,"label":"StepsTo PrimStep"},{"arrows":"to","to":55,"from":346,"label":"StepsTo CallStep"},{"arrows":"to","to":71,"from":346,"label":"SubTerm 1"},{"arrows":"to","to":153,"from":346,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":347,"label":"SubTerm 1"},{"arrows":"to","to":348,"from":347,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":348,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":348,"label":"SubTerm 1"},{"arrows":"to","to":318,"from":348,"label":"StepsTo BoringStep"},{"arrows":"to","to":195,"from":350,"label":"SubTerm 1"},{"arrows":"to","to":453,"from":350,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":351,"label":"SubTerm 2"},{"arrows":"to","to":518,"from":351,"label":"SubTerm 0"},{"arrows":"to","to":524,"from":351,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":354,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":354,"label":"SubTerm 0"},{"arrows":"to","to":225,"from":357,"label":"StepsTo BoringStep"},{"arrows":"to","to":82,"from":358,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":358,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":359,"label":"SubTerm 0"},{"arrows":"to","to":360,"from":359,"label":"StepsTo BoringStep"},{"arrows":"to","to":383,"from":359,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":360,"label":"SubTerm 0"},{"arrows":"to","to":336,"from":360,"label":"SubTerm 1"},{"arrows":"to","to":465,"from":360,"label":"StepsTo PrimStep"},{"arrows":"to","to":61,"from":362,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":362,"label":"SubTerm 1"},{"arrows":"to","to":365,"from":364,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":366,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":366,"label":"StepsTo BoringStep"},{"arrows":"to","to":479,"from":366,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":370,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":370,"label":"SubTerm 1"},{"arrows":"to","to":392,"from":370,"label":"StepsTo PrimStep"},{"arrows":"to","to":26,"from":371,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":371,"label":"StepsTo BoringStep"},{"arrows":"to","to":419,"from":371,"label":"SubTerm 1"},{"arrows":"to","to":341,"from":372,"label":"SubTerm 0"},{"arrows":"to","to":517,"from":372,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":373,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":373,"label":"SubTerm 0"},{"arrows":"to","to":394,"from":373,"label":"StepsTo CallStep"},{"arrows":"to","to":214,"from":375,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":375,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":376,"label":"SubTerm 0"},{"arrows":"to","to":377,"from":376,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":329,"from":379,"label":"SubTerm 0"},{"arrows":"to","to":512,"from":379,"label":"SubTerm 1"},{"arrows":"to","to":313,"from":380,"label":"SubTerm 0"},{"arrows":"to","to":510,"from":380,"label":"StepsTo CallStep"},{"arrows":"to","to":386,"from":381,"label":"StepsTo BoringStep"},{"arrows":"to","to":428,"from":382,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":383,"label":"SubTerm 0"},{"arrows":"to","to":325,"from":383,"label":"SubTerm 1"},{"arrows":"to","to":336,"from":383,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":384,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":384,"label":"StepsTo BoringStep"},{"arrows":"to","to":82,"from":384,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":385,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":385,"label":"SubTerm 1"},{"arrows":"to","to":199,"from":385,"label":"StepsTo CallStep"},{"arrows":"to","to":387,"from":386,"label":"SubTerm 0"},{"arrows":"to","to":141,"from":388,"label":"SubTerm 1"},{"arrows":"to","to":524,"from":388,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":392,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":392,"label":"SubTerm 1"},{"arrows":"to","to":409,"from":392,"label":"StepsTo PrimStep"},{"arrows":"to","to":3,"from":394,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":394,"label":"SubTerm 0"},{"arrows":"to","to":451,"from":394,"label":"StepsTo BoringStep"},{"arrows":"to","to":114,"from":395,"label":"SubTerm 0"},{"arrows":"to","to":397,"from":396,"label":"SubTerm 1"},{"arrows":"to","to":516,"from":396,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":399,"label":"SubTerm 0"},{"arrows":"to","to":299,"from":399,"label":"SubTerm 1"},{"arrows":"to","to":401,"from":400,"label":"SubTerm 1"},{"arrows":"to","to":519,"from":400,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":402,"label":"SubTerm 0"},{"arrows":"to","to":380,"from":402,"label":"SubTerm 1"},{"arrows":"to","to":479,"from":402,"label":"StepsTo CallStep"},{"arrows":"to","to":404,"from":403,"label":"SubTerm 1"},{"arrows":"to","to":434,"from":403,"label":"SubTerm 2"},{"arrows":"to","to":464,"from":403,"label":"SubTerm 0"},{"arrows":"to","to":246,"from":406,"label":"SubTerm 2"},{"arrows":"to","to":248,"from":406,"label":"SubTerm 0"},{"arrows":"to","to":444,"from":406,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":407,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":407,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":407,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":409,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":409,"label":"SubTerm 1"},{"arrows":"to","to":468,"from":409,"label":"StepsTo ReturnStep"},{"arrows":"to","to":317,"from":410,"label":"StepsTo BoringStep"},{"arrows":"to","to":338,"from":410,"label":"SubTerm 0"},{"arrows":"to","to":453,"from":410,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":411,"label":"SubTerm 0"},{"arrows":"to","to":220,"from":411,"label":"SubTerm 1"},{"arrows":"to","to":412,"from":411,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":412,"label":"SubTerm 0"},{"arrows":"to","to":385,"from":412,"label":"SubTerm 1"},{"arrows":"to","to":480,"from":412,"label":"StepsTo CallStep"},{"arrows":"to","to":414,"from":413,"label":"SubTerm 1"},{"arrows":"to","to":461,"from":413,"label":"SubTerm 0"},{"arrows":"to","to":538,"from":413,"label":"SubTerm 2"},{"arrows":"to","to":416,"from":415,"label":"SubTerm 1"},{"arrows":"to","to":535,"from":415,"label":"SubTerm 0"},{"arrows":"to","to":415,"from":417,"label":"SubTerm 1"},{"arrows":"to","to":426,"from":417,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":418,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":418,"label":"StepsTo BoringStep"},{"arrows":"to","to":431,"from":418,"label":"SubTerm 1"},{"arrows":"to","to":311,"from":419,"label":"StepsTo BoringStep"},{"arrows":"to","to":312,"from":419,"label":"SubTerm 1"},{"arrows":"to","to":456,"from":419,"label":"SubTerm 0"},{"arrows":"to","to":529,"from":419,"label":"SubTerm 2"},{"arrows":"to","to":109,"from":420,"label":"StepsTo BoringStep"},{"arrows":"to","to":110,"from":420,"label":"SubTerm 2"},{"arrows":"to","to":188,"from":420,"label":"SubTerm 1"},{"arrows":"to","to":421,"from":420,"label":"SubTerm 0"},{"arrows":"to","to":328,"from":421,"label":"StepsTo BoringStep"},{"arrows":"to","to":47,"from":422,"label":"StepsTo ReturnStep"},{"arrows":"to","to":71,"from":422,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":422,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":423,"label":"StepsTo ReturnStep"},{"arrows":"to","to":47,"from":423,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":424,"label":"SubTerm 0"},{"arrows":"to","to":376,"from":424,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":427,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":427,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":427,"label":"StepsTo PrimStep"},{"arrows":"to","to":449,"from":428,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":429,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":429,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":431,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":431,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":431,"label":"StepsTo BoringStep"},{"arrows":"to","to":417,"from":432,"label":"SubTerm 1"},{"arrows":"to","to":503,"from":432,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":433,"label":"SubTerm 2"},{"arrows":"to","to":298,"from":433,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":433,"label":"StepsTo BoringStep"},{"arrows":"to","to":386,"from":433,"label":"SubTerm 0"},{"arrows":"to","to":362,"from":435,"label":"SubTerm 2"},{"arrows":"to","to":460,"from":435,"label":"SubTerm 0"},{"arrows":"to","to":544,"from":435,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":436,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":436,"label":"StepsTo BoringStep"},{"arrows":"to","to":314,"from":436,"label":"SubTerm 1"},{"arrows":"to","to":161,"from":440,"label":"SubTerm 0"},{"arrows":"to","to":441,"from":440,"label":"SubTerm 1"},{"arrows":"to","to":321,"from":441,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":442,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":442,"label":"SubTerm 1"},{"arrows":"to","to":359,"from":442,"label":"StepsTo CallStep"},{"arrows":"to","to":245,"from":444,"label":"SubTerm 0"},{"arrows":"to","to":396,"from":445,"label":"SubTerm 1"},{"arrows":"to","to":536,"from":445,"label":"SubTerm 0"},{"arrows":"to","to":400,"from":446,"label":"SubTerm 1"},{"arrows":"to","to":539,"from":446,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":451,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":451,"label":"StepsTo BoringStep"},{"arrows":"to","to":295,"from":451,"label":"SubTerm 1"},{"arrows":"to","to":484,"from":453,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":454,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":454,"label":"SubTerm 1"},{"arrows":"to","to":290,"from":454,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":465,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":465,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":465,"label":"StepsTo PrimStep"},{"arrows":"to","to":467,"from":466,"label":"StepsTo BoringStep"},{"arrows":"to","to":452,"from":467,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":468,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":468,"label":"SubTerm 1"},{"arrows":"to","to":204,"from":468,"label":"StepsTo BoringStep"},{"arrows":"to","to":472,"from":471,"label":"StepsTo BoringStep"},{"arrows":"to","to":207,"from":474,"label":"SubTerm 0"},{"arrows":"to","to":428,"from":474,"label":"SubTerm 1"},{"arrows":"to","to":477,"from":476,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":479,"label":"SubTerm 0"},{"arrows":"to","to":185,"from":479,"label":"StepsTo BoringStep"},{"arrows":"to","to":510,"from":479,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":480,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":480,"label":"SubTerm 1"},{"arrows":"to","to":485,"from":480,"label":"StepsTo BoringStep"},{"arrows":"to","to":99,"from":483,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":485,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":485,"label":"SubTerm 1"},{"arrows":"to","to":487,"from":485,"label":"StepsTo PrimStep"},{"arrows":"to","to":131,"from":486,"label":"SubTerm 0"},{"arrows":"to","to":532,"from":486,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":487,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":487,"label":"StepsTo PrimStep"},{"arrows":"to","to":427,"from":487,"label":"SubTerm 1"},{"arrows":"to","to":496,"from":495,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":497,"label":"StepsTo BoringStep"},{"arrows":"to","to":207,"from":504,"label":"StepsTo BoringStep"},{"arrows":"to","to":0,"from":507,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":507,"label":"SubTerm 1"},{"arrows":"to","to":497,"from":507,"label":"SubTerm 0"},{"arrows":"to","to":205,"from":508,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":510,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":510,"label":"StepsTo BoringStep"},{"arrows":"to","to":319,"from":512,"label":"SubTerm 0"},{"arrows":"to","to":323,"from":517,"label":"SubTerm 0"},{"arrows":"to","to":526,"from":521,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":529,"label":"StepsTo BoringStep"}],"nodes":[{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[21,4,"Redex"]],"id":0,"label":"(0 , List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[16,4,"Redex"]],"id":1,"label":"List.filter f_2 ys_2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,43,"Redex"]],"id":2,"label":"let rest' = List.filter f_1\n                        [0] in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[20,4,"Redex"]],"id":3,"label":"let rest' =\n  match xs_2 with\n  | [] -> []\n  | y :: ys -> if f_2 y\n               then y :: (List.filter f_2 ys)\n               else List.filter f_2 ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,393,"Redex"]],"id":4,"label":"List.rev (match [0] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":5,"label":"List.rev"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[]"]],"annots":[[5,1,"Redex"]],"id":6,"label":"[] @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,7,"Redex"]],"id":7,"label":"[] @ []"},{"span":null,"env":[],"annots":[],"id":9,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"],[43,3,"Redex"]],"id":10,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[0,94,"Redex"]],"id":12,"label":"if false\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":13,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":14,"label":"rest'"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[]"],["h_1","0"]],"annots":[[0,6,"Redex"],[9,3,"Redex"]],"id":15,"label":"seen_1 @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h_1","0"]],"annots":[[5,3,"Redex"]],"id":16,"label":"[] @ h_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":17,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":18,"label":"l"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":19,"label":"(0 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":20,"label":"0 = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 1 ; 0]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":21,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":22,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"]],"annots":[[2,1,"Redex"]],"id":23,"label":"f y"},{"span":null,"env":[["y","1"]],"annots":[[0,1,"Redex"]],"id":24,"label":"y"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":26,"label":"helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"]],"annots":[[14,2,"Redex"]],"id":27,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":28,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":29,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":30,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[0,1,"Redex"]],"id":32,"label":"l"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":33,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":34,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":35,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":36,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":37,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":38,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":39,"label":"(y , List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[6,1,"Redex"]],"id":41,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":42,"label":"List.rev (let rest' =\n            0 :: [] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":43,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":44,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,19,"Redex"]],"id":45,"label":"List.rev (helper ([] , [0]))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest_1","[0]"],["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,6,"Redex"]],"id":46,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":null,"env":[],"annots":[],"id":47,"label":"(0 , [])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[1 ; 0]"]],"annots":[[5,1,"Redex"]],"id":48,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[1 ; 0]"]],"annots":[[3,3,"Redex"]],"id":49,"label":"if f 1\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":51,"label":"let rest' = 0 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","[]"],["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"]],"id":53,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,7,"Redex"]],"id":54,"label":"let seen' = [] @ [] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":55,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":56,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":57,"label":"(@)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,130,"Redex"]],"id":58,"label":"match [1 ; 1 ; 0] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":59,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":60,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"]],"id":61,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":62,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":63,"label":"y_1 :: (List.filter f_1 ys_1)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,30,"Redex"]],"id":64,"label":"helper ([] , [[] ; 1 ; 1 ; 0])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":65,"label":"([] , [[] ; 1 ; 1 ; 0])"},{"span":null,"env":[],"annots":[],"id":67,"label":"0"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":68,"label":"List.filter f_2 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":69,"label":"ys"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":70,"label":"(0 , match xs_3 with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[],"annots":[],"id":71,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,180,"Redex"]],"id":72,"label":"List.rev (let rest' =\n            match [1 ; 0] with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[41,3,"Redex"]],"id":74,"label":"List.rev (let rest' =\n            if f_1 y_1\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":75,"label":"(1 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":76,"label":"1 = 0"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"]],"annots":[[3,9,"Redex"]],"id":77,"label":"if (1 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"]],"annots":[[3,5,"Redex"]],"id":78,"label":"if 1 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,132,"Redex"]],"id":79,"label":"match [1 ; 0] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":80,"label":"[1 ; 0]"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,3,"Redex"]],"id":81,"label":"let seen' = [] @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,109,"Redex"]],"id":82,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[56,4,"Redex"]],"id":83,"label":"List.rev (let rest' =\n            0 :: (List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[39,20,"Redex"]],"id":84,"label":"List.rev (let rest' =\n            0 :: (List.filter f_2 []) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[0,93,"Redex"]],"id":85,"label":"if true\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[],"annots":[],"id":86,"label":"true"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[28,2,"Redex"]],"id":87,"label":"let rest' =\n  List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,45,"Redex"]],"id":88,"label":"let rest' = List.filter f\n                        [1 ; 0] in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[] ; 1 ; 1 ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"]],"id":89,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,402,"Redex"]],"id":90,"label":"List.rev (match [[] ; 1 ; 1 ; 0] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[]"]],"annots":[[0,6,"Redex"]],"id":92,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[39,255,"Redex"]],"id":93,"label":"List.rev (let rest' =\n            0 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_3 y\n                               then y :: (List.filter f_3\n                                                      ys)\n                               else List.filter f_3 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":94,"label":"[1 ; 1 ; 0]"},{"span":null,"env":[],"annots":[],"id":95,"label":"1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":96,"label":"let rest' =\n  if 1 = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":97,"label":"let rest' =\n  if false\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,21,"Redex"]],"id":98,"label":"List.filter f [1 ; 0]"},{"span":null,"env":[],"annots":[],"id":99,"label":"[1 ; 0]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":100,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":101,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":102,"label":"1 mod 2"},{"span":null,"env":[],"annots":[],"id":103,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":104,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":105,"label":"2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[0]"]],"annots":[[7,3,"Redex"]],"id":106,"label":"if f_1 y_1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[0]"]],"annots":[[3,5,"Redex"]],"id":107,"label":"if f_1 1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,128,"Redex"]],"id":109,"label":"match [0] with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":110,"label":"if f_2 y\nthen y :: (List.filter f_2 ys)\nelse List.filter f_2 ys"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest_1","[0]"],["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,6,"Redex"]],"id":113,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"]],"id":114,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":115,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["xs_1","[1 ; 0]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":116,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":117,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":118,"label":"helper"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,18,"Redex"]],"id":119,"label":"List.filter f_2 []"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[13,1,"Redex"]],"id":121,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,53,"Redex"]],"id":122,"label":"List.rev (let rest' =\n            List.filter is_in\n                        [1 ; 1 ; 0] in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[1 ; 1 ; 0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[40,2,"Redex"]],"id":123,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[] ; 1 ; 1 ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"]],"id":124,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":125,"label":"seen"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[36,4,"Redex"]],"id":126,"label":"let rest' =\n  0 :: (List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[22,4,"Redex"]],"id":127,"label":"0 :: (List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":128,"label":"f_2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"],["rest'","[0]"]],"annots":[[18,5,"Redex"],[26,5,"Redex"]],"id":129,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[23,5,"Redex"]],"id":130,"label":"List.rev (helper ([] , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":131,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":132,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":133,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":134,"label":"2"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":135,"label":"y :: (List.filter f ys)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":136,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":137,"label":"seen"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":138,"label":"let rest' =\n  if true\n  then y_2 :: (List.filter f_2\n                           ys_2)\n  else List.filter f_2 ys_2 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,158,"Redex"]],"id":139,"label":"let rest' = if true\n            then y_2 :: (List.filter f_2\n                                     ys_2)\n            else List.filter f_2\n                             ys_2 in helper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":140,"label":"(y , List.filter f_3 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":141,"label":"y"},{"span":null,"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"]],"annots":[[4,1,"Redex"]],"id":142,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[0,3,"Redex"]],"id":143,"label":"h_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[18,1,"Redex"]],"id":144,"label":"let rest' =\n  if (i mod 2) = 0\n  then y_2 :: (List.filter f_2\n                           ys_2)\n  else List.filter f_2 ys_2 in\nhelper (seen' , rest')"},{"span":null,"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[4,1,"Redex"]],"id":145,"label":"if (i mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":146,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":147,"label":"(@)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,6,"Redex"]],"id":148,"label":"[] @ 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,32,"Redex"]],"id":150,"label":"List.rev (helper ([] , [[] ; 1 ; 1 ; 0]))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"]],"id":151,"label":"List.rev (let seen' =\n            [] @ 0 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"]],"annots":[[4,3,"Redex"]],"id":152,"label":"f_2 y_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":153,"label":"f_2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[21,3,"Redex"]],"id":154,"label":"let rest' =\n  if f_2 y_2\n  then y_2 :: (List.filter f_2\n                           ys_2)\n  else List.filter f_2 ys_2 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":155,"label":"let rest' =\n  if f_2 0\n  then y_2 :: (List.filter f_2\n                           ys_2)\n  else List.filter f_2 ys_2 in\nhelper (seen' , rest')"},{"span":null,"env":[["xs","[1 ; 1 ; 0]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"]],"id":158,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[],"annots":[],"id":159,"label":"[1 ; 1 ; 0]"},{"span":null,"env":[],"annots":[],"id":160,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[12,5,"Redex"],[18,3,"Redex"]],"id":161,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":162,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,222,"Redex"]],"id":163,"label":"let rest' = match [1 ; 0] with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,83,"Redex"]],"id":165,"label":"List.rev (let rest' =\n            let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[21,3,"Redex"]],"id":166,"label":"let rest' =\n  if f_1 y_1\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":168,"label":"match xs_3 with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":169,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[3,5,"Redex"]],"id":170,"label":"if 0 = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,33,"Redex"]],"id":171,"label":"removeDuplicates [[] ; 1 ; 1 ; 0]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[0,381,"Redex"]],"id":172,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":173,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":174,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":175,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":176,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":177,"label":"helper ([] , l)"},{"span":null,"env":[["xs_1","[1 ; 0]"]],"annots":[[0,4,"Redex"]],"id":178,"label":"xs_1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":179,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":180,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[]"],["rest'","[0]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":181,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[0]"]],"annots":[[6,5,"Redex"]],"id":182,"label":"([] , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[19,161,"Redex"]],"id":185,"label":"let rest' =\n  0 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f_3 y\n                     then y :: (List.filter f_3 ys)\n                     else List.filter f_3 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":186,"label":"0 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":187,"label":"y_2 :: (List.filter f_2 ys_2)"},{"span":null,"env":[],"annots":[],"id":188,"label":"[]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,53,"Redex"]],"id":190,"label":"let rest' = List.filter is_in\n                        [1 ; 1 ; 0] in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[1 ; 1 ; 0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[20,2,"Redex"]],"id":191,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[7,3,"Redex"]],"id":192,"label":"if f_2 y_2\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":194,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[16,4,"Redex"]],"id":195,"label":"List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":196,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":197,"label":"List.rev (let rest' =\n            if false\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,178,"Redex"]],"id":198,"label":"List.rev (let rest' =\n            match [1 ; 1 ; 0] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[18,1,"Redex"]],"id":199,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,9,"Redex"]],"id":200,"label":"let rest' =\n  if (1 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,291,"Redex"]],"id":201,"label":"match [[] ; 1 ; 1 ; 0] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":202,"label":"f 1"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":203,"label":"f"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,3,"Redex"],[90,4,"Redex"]],"id":204,"label":"List.rev (let rest' =\n            y_2 :: (List.filter f_2\n                                ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":205,"label":"(y , List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":206,"label":"y"},{"span":null,"env":[],"annots":[],"id":207,"label":"[]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,9,"Redex"]],"id":208,"label":"let rest' =\n  if (0 mod 2) = 0\n  then y_2 :: (List.filter f_2\n                           ys_2)\n  else List.filter f_2 ys_2 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":209,"label":"let rest' =\n  if 0 = 0\n  then y_2 :: (List.filter f_2\n                           ys_2)\n  else List.filter f_2 ys_2 in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,3,"Redex"]],"id":210,"label":"List.rev (let seen' =\n            [] @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":211,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":212,"label":"rest'"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,381,"Redex"]],"id":214,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":215,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":216,"label":"seen'"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,1,"Redex"]],"id":217,"label":"let seen' = seen_1 @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[]"]],"annots":[[0,6,"Redex"],[9,1,"Redex"]],"id":218,"label":"seen_1 @ h"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[14,138,"Redex"]],"id":219,"label":"let rest' =\n  match [1 ; 1 ; 0] with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[19,1,"Redex"]],"id":220,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":221,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":224,"label":"1 = 0"},{"span":null,"env":[],"annots":[],"id":225,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,17,"Redex"]],"id":226,"label":"helper ([] , [0])"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[13,5,"Redex"]],"id":228,"label":"helper ([] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":229,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":230,"label":"List.rev (let rest' =\n            if f_2 0\n            then y_2 :: (List.filter f_2\n                                     ys_2)\n            else List.filter f_2 ys_2 in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[38,1,"Redex"]],"id":231,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y_2 :: (List.filter f_2\n                                     ys_2)\n            else List.filter f_2 ys_2 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":232,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":233,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":236,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":237,"label":"0 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":238,"label":"(1 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","1"]],"annots":[[1,1,"Redex"]],"id":239,"label":"(i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":240,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[22,199,"Redex"]],"id":241,"label":"List.rev (let rest' = if false\n                      then y_1 :: (List.filter f_1\n                                               ys_1)\n                      else List.filter f_1\n                                       ys_1 in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[50,4,"Redex"]],"id":242,"label":"List.rev (let rest' =\n            List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":243,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":244,"label":"let rest' =\n  if f_1 1\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":245,"label":"(y , List.filter f_1 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":246,"label":"List.filter f_1 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,112,"Redex"]],"id":247,"label":"let rest' = if false\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":248,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":249,"label":"f_1"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":250,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":251,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":252,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":253,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[52,1,"Redex"]],"id":255,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":256,"label":"y :: (List.filter f_3 ys)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","1"]],"annots":[[1,1,"Redex"]],"id":257,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":258,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":259,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":260,"label":"2"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","[]"],["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":261,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":262,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":263,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[3,9,"Redex"]],"id":264,"label":"if (0 mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"]],"annots":[[3,5,"Redex"]],"id":265,"label":"if f_2 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[41,3,"Redex"]],"id":266,"label":"List.rev (let rest' =\n            if f_2 y_2\n            then y_2 :: (List.filter f_2\n                                     ys_2)\n            else List.filter f_2 ys_2 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":267,"label":"let rest' =\n  if false\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":268,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":269,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":270,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[]"]],"annots":[[0,1,"Redex"]],"id":271,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":272,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":273,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":274,"label":"1 mod 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":275,"label":"f"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":277,"label":"rest"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"]],"annots":[[0,59,"Redex"]],"id":278,"label":"if false\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":279,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":280,"label":"2"},{"span":null,"env":[["xs","[1 ; 1 ; 0]"]],"annots":[[0,2,"Redex"]],"id":283,"label":"xs"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":284,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":285,"label":"false"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[14,3,"Redex"],[60,4,"Redex"]],"id":286,"label":"let rest' =\n  y_2 :: (List.filter f_2\n                      ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,7,"Redex"]],"id":287,"label":"List.rev (let seen' =\n            [] @ [] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 1 ; 0]"]],"annots":[[0,59,"Redex"]],"id":289,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","[]"],["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"]],"id":290,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":291,"label":"if f_3 y\nthen y :: (List.filter f_3 ys)\nelse List.filter f_3 ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":294,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,218,"Redex"]],"id":295,"label":"let rest' = match [0] with\n            | [] -> []\n            | y :: ys -> if f_2 y\n                         then y :: (List.filter f_2 ys)\n                         else List.filter f_2\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":296,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":297,"label":"2"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[]"]],"annots":[[0,6,"Redex"]],"id":298,"label":"seen_1"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":299,"label":"y"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":300,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":301,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":302,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":305,"label":"h"},{"span":null,"env":[],"annots":[],"id":306,"label":"0"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":307,"label":"(y , List.filter f ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"],["rest'","[0]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":308,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,107,"Redex"]],"id":310,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,29,"Redex"]],"id":311,"label":"List.filter is_in [1 ; 1 ; 0]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":312,"label":"is_in"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":313,"label":"(0 , List.filter f_2 [])"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,163,"Redex"]],"id":314,"label":"let seen' = [] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[12,159,"Redex"]],"id":316,"label":"let rest' = if false\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1\n                             ys_1 in helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":317,"label":"f_1 1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,21,"Redex"]],"id":318,"label":"List.rev (let rest' =\n            List.filter f [1 ; 0] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":319,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":320,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":321,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":322,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":323,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":324,"label":"0"},{"span":null,"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[4,1,"Redex"]],"id":325,"label":"if (i mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":326,"label":"f_2 y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[9,53,"Redex"]],"id":327,"label":"List.rev (let rest' = [0] in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":328,"label":"[0]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 1 ; 0]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":329,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":330,"label":"is_in"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":331,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[3,5,"Redex"]],"id":332,"label":"if 1 = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":333,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[0,41,"Redex"]],"id":334,"label":"let rest' = [0] in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":335,"label":"List.rev (let rest' =\n            if false\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,9,"Redex"]],"id":336,"label":"let rest' =\n  if (1 mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,19,"Redex"]],"id":337,"label":"List.filter f_1 [0]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":338,"label":"f_1"},{"span":null,"env":[],"annots":[],"id":339,"label":"[]"},{"span":null,"env":[],"annots":[],"id":340,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":341,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":342,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":343,"label":"1"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[3,9,"Redex"]],"id":344,"label":"if (1 mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":346,"label":"f_2 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[22,142,"Redex"]],"id":347,"label":"List.rev (let rest' = if false\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[48,2,"Redex"]],"id":348,"label":"List.rev (let rest' =\n            List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":349,"label":"0"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":350,"label":"(y_1 , List.filter f_1 ys_1)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":351,"label":"List.filter f_3 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":352,"label":"ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[]"]],"annots":[[0,3,"Redex"]],"id":353,"label":"t_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":354,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[]"]],"annots":[[0,6,"Redex"]],"id":356,"label":"seen_1"},{"span":null,"env":[["ys_2","[]"]],"annots":[[0,4,"Redex"]],"id":357,"label":"ys_2"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"]],"id":358,"label":"let seen' = [] @ 0 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[38,1,"Redex"]],"id":359,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,9,"Redex"]],"id":360,"label":"List.rev (let rest' =\n            if (1 mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":362,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":363,"label":"helper"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[] ; 1 ; 1 ; 0]"]],"annots":[[0,4,"Redex"]],"id":364,"label":"rest"},{"span":null,"env":[],"annots":[],"id":365,"label":"[[] ; 1 ; 1 ; 0]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[46,4,"Redex"]],"id":366,"label":"List.rev (let rest' =\n            0 :: (match xs_3 with\n                  | [] -> []\n                  | y :: ys -> if f_3 y\n                               then y :: (List.filter f_3\n                                                      ys)\n                               else List.filter f_3 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 1 ; 0]"]],"annots":[[0,1,"Redex"]],"id":367,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":368,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,9,"Redex"]],"id":370,"label":"List.rev (let rest' =\n            if (0 mod 2) = 0\n            then y_2 :: (List.filter f_2\n                                     ys_2)\n            else List.filter f_2 ys_2 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[32,1,"Redex"]],"id":371,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":372,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,19,"Redex"]],"id":373,"label":"List.rev (let rest' =\n            List.filter f_1 [0] in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":374,"label":"[[] ; 1 ; 1 ; 0]"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":375,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":376,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":377,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 1 ; 0]"]],"annots":[[0,59,"Redex"]],"id":379,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,20,"Redex"]],"id":380,"label":"0 :: (List.filter f_2 [])"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"]],"annots":[[0,6,"Redex"]],"id":381,"label":"rest_1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0]"]],"annots":[[0,5,"Redex"]],"id":382,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[18,1,"Redex"]],"id":383,"label":"let rest' =\n  if (i mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,3,"Redex"]],"id":384,"label":"let seen' = seen_1 @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,3,"Redex"]],"id":385,"label":"let rest' =\n  if f 1\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":386,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":387,"label":"0"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":388,"label":"f_3 y"},{"span":null,"env":[],"annots":[],"id":389,"label":"1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":392,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y_2 :: (List.filter f_2\n                                     ys_2)\n            else List.filter f_2 ys_2 in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":393,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[40,4,"Redex"]],"id":394,"label":"List.rev (let rest' =\n            match xs_2 with\n            | [] -> []\n            | y :: ys -> if f_2 y\n                         then y :: (List.filter f_2 ys)\n                         else List.filter f_2 ys in\n          helper (seen' , rest'))"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":395,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":396,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":397,"label":"rest'"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":398,"label":"y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":399,"label":"f y"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":400,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":401,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[19,20,"Redex"]],"id":402,"label":"let rest' =\n  0 :: (List.filter f_2 []) in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":403,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":404,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":405,"label":"List.filter"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":406,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[30,4,"Redex"]],"id":407,"label":"let rest' =\n  List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[],"id":409,"label":"List.rev (let rest' =\n            if true\n            then y_2 :: (List.filter f_2\n                                     ys_2)\n            else List.filter f_2 ys_2 in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"]],"annots":[[4,3,"Redex"]],"id":410,"label":"f_1 y_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[39,1,"Redex"]],"id":411,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,3,"Redex"]],"id":412,"label":"List.rev (let rest' =\n            if f 1\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":413,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":414,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[6,1,"Redex"]],"id":415,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[0,1,"Redex"]],"id":416,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":417,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_1","[1 ; 0]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[40,4,"Redex"]],"id":418,"label":"List.rev (let rest' =\n            match xs_1 with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 1 ; 0]"]],"annots":[[18,1,"Redex"]],"id":419,"label":"List.filter is_in t"},{"span":null,"env":[["xs_2","[0]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":420,"label":"match xs_2 with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[["xs_2","[0]"]],"annots":[[0,4,"Redex"]],"id":421,"label":"xs_2"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":422,"label":"(0 , match [] with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[],"annots":[],"id":423,"label":"0 :: []"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,107,"Redex"]],"id":424,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":425,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":426,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[17,5,"Redex"]],"id":427,"label":"let rest' =\n  if 1 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":428,"label":"[0]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[23,1,"Redex"]],"id":429,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":430,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_1","[1 ; 0]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[20,4,"Redex"]],"id":431,"label":"let rest' =\n  match xs_1 with\n  | [] -> []\n  | y :: ys -> if f_1 y\n               then y :: (List.filter f_1 ys)\n               else List.filter f_1 ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[] ; 1 ; 1 ; 0]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":432,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,282,"Redex"]],"id":433,"label":"match [0] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":434,"label":"t"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"]],"id":435,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,205,"Redex"]],"id":436,"label":"List.rev (let seen' = [] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":438,"label":"[]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[0,61,"Redex"]],"id":440,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":441,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":442,"label":"List.rev (let rest' =\n            if f_1 1\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":443,"label":"(@)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":444,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":445,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":446,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":447,"label":"helper"},{"span":null,"env":[],"annots":[],"id":448,"label":"1"},{"span":null,"env":[],"annots":[],"id":449,"label":"0"},{"span":null,"env":[],"annots":[],"id":450,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[34,176,"Redex"]],"id":451,"label":"List.rev (let rest' =\n            match [0] with\n            | [] -> []\n            | y :: ys -> if f_2 y\n                         then y :: (List.filter f_2 ys)\n                         else List.filter f_2 ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":452,"label":"0"},{"span":null,"env":[["y_1","1"]],"annots":[[0,3,"Redex"]],"id":453,"label":"y_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","[]"],["t","[1 ; 1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"]],"id":454,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":455,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":456,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":457,"label":"rest'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":459,"label":"i"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":460,"label":"rest"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":461,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":462,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":463,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":464,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":465,"label":"List.rev (let rest' =\n            if 1 = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":null,"env":[["ys_1","[0]"]],"annots":[[0,4,"Redex"]],"id":466,"label":"ys_1"},{"span":null,"env":[],"annots":[],"id":467,"label":"[0]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[22,198,"Redex"]],"id":468,"label":"List.rev (let rest' = if true\n                      then y_2 :: (List.filter f_2\n                                               ys_2)\n                      else List.filter f_2\n                                       ys_2 in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":469,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 1 ; 0]"]],"annots":[[0,1,"Redex"]],"id":470,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":471,"label":"i"},{"span":null,"env":[],"annots":[],"id":472,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":473,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":474,"label":"([] , [0])"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":475,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":476,"label":"i"},{"span":null,"env":[],"annots":[],"id":477,"label":"1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":478,"label":"h"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[26,4,"Redex"]],"id":479,"label":"let rest' =\n  0 :: (match xs_3 with\n        | [] -> []\n        | y :: ys -> if f_3 y\n                     then y :: (List.filter f_3 ys)\n                     else List.filter f_3 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[38,1,"Redex"]],"id":480,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":481,"label":"seen"},{"span":null,"env":[],"annots":[],"id":482,"label":"List.filter"},{"span":null,"env":[["ys","[1 ; 0]"]],"annots":[[0,2,"Redex"]],"id":483,"label":"ys"},{"span":null,"env":[],"annots":[],"id":484,"label":"1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,9,"Redex"]],"id":485,"label":"List.rev (let rest' =\n            if (1 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":486,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[1 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[]"]],"annots":[[37,5,"Redex"]],"id":487,"label":"List.rev (let rest' =\n            if 1 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":488,"label":"[]"},{"span":null,"env":[],"annots":[],"id":489,"label":"0"},{"span":null,"env":[],"annots":[],"id":490,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":491,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":492,"label":"0"},{"span":null,"env":[],"annots":[],"id":493,"label":"false"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":494,"label":"i"},{"span":null,"env":[["xs_3","[]"]],"annots":[[0,4,"Redex"]],"id":495,"label":"xs_3"},{"span":null,"env":[],"annots":[],"id":496,"label":"[]"},{"span":null,"env":[["y_2","0"]],"annots":[[0,3,"Redex"]],"id":497,"label":"y_2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":498,"label":"h"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":499,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":500,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":501,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":502,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":503,"label":"List.rev"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[]"]],"annots":[[0,5,"Redex"]],"id":504,"label":"seen'"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":505,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":506,"label":"List.filter"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":507,"label":"(y_2 , List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":508,"label":"y :: (List.filter f_2 ys)"},{"span":null,"env":[],"annots":[],"id":509,"label":"1"},{"span":null,"env":[["xs_3","[]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":510,"label":"0 :: (match xs_3 with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":511,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":512,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":513,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[]"]],"annots":[[0,5,"Redex"]],"id":514,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":515,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":516,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":517,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":518,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":519,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":520,"label":"[[] ; 1 ; 1 ; 0]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":521,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":522,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":523,"label":"i"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":524,"label":"f_3"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":525,"label":"(@)"},{"span":null,"env":[],"annots":[],"id":526,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":527,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":528,"label":"List.rev"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 1 ; 0]"]],"annots":[[0,1,"Redex"]],"id":529,"label":"t"},{"span":null,"env":[],"annots":[],"id":530,"label":"[]"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":531,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":532,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":533,"label":"0"},{"span":null,"env":[],"annots":[],"id":534,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":535,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":536,"label":"helper"},{"span":null,"env":[],"annots":[],"id":537,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":538,"label":"t"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":539,"label":"helper"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":540,"label":"ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":541,"label":"h"},{"span":null,"env":[],"annots":[],"id":542,"label":"1"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":543,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":544,"label":"seen"}]}