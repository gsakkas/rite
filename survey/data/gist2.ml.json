{"root":125,"result":"stuck","reason":"Type error : could not match int with 't86 list","bad":324,"stuck":387,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":108,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":376,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":129,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":422,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":5,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":138,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":157,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":229,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":255,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":268,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":306,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":307,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":8,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":249,"from":7,"label":"StepsTo BoringStep"},{"arrows":"to","to":396,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":464,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":336,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":393,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":254,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":374,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":19,"label":"StepsTo BoringStep"},{"arrows":"to","to":88,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":20,"label":"StepsTo CallStep"},{"arrows":"to","to":380,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":21,"label":"StepsTo PrimStep"},{"arrows":"to","to":22,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":22,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":184,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":303,"from":23,"label":"SubTerm 2"},{"arrows":"to","to":428,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":333,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":453,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":331,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":31,"label":"StepsTo CallStep"},{"arrows":"to","to":142,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":156,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":332,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":14,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":35,"label":"StepsTo BoringStep"},{"arrows":"to","to":321,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":144,"from":36,"label":"StepsTo CallStep"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":309,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":139,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":341,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":202,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":226,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":343,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":43,"label":"SubTerm 2"},{"arrows":"to","to":430,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":247,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":29,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":49,"from":48,"label":"StepsTo BoringStep"},{"arrows":"to","to":104,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":49,"label":"SubTerm 2"},{"arrows":"to","to":104,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":49,"label":"StepsTo CallStep"},{"arrows":"to","to":149,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":218,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":55,"label":"StepsTo CallStep"},{"arrows":"to","to":119,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":56,"label":"StepsTo CallStep"},{"arrows":"to","to":295,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":309,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":58,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":416,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":60,"label":"StepsTo BoringStep"},{"arrows":"to","to":61,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":61,"label":"StepsTo BoringStep"},{"arrows":"to","to":345,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":62,"label":"SubTerm 2"},{"arrows":"to","to":63,"from":62,"label":"StepsTo PrimStep"},{"arrows":"to","to":104,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":63,"label":"SubTerm 2"},{"arrows":"to","to":104,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":177,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":63,"label":"StepsTo ReturnStep"},{"arrows":"to","to":382,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":404,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":67,"label":"StepsTo BoringStep"},{"arrows":"to","to":93,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":148,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":71,"label":"StepsTo ReturnStep"},{"arrows":"to","to":154,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":209,"from":72,"label":"StepsTo ReturnStep"},{"arrows":"to","to":210,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":73,"label":"StepsTo BoringStep"},{"arrows":"to","to":320,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":190,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":75,"label":"StepsTo BoringStep"},{"arrows":"to","to":182,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":76,"label":"StepsTo BoringStep"},{"arrows":"to","to":117,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":346,"from":77,"label":"StepsTo BoringStep"},{"arrows":"to","to":370,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":78,"label":"StepsTo PrimStep"},{"arrows":"to","to":206,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":408,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":224,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":412,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":82,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":82,"label":"SubTerm 2"},{"arrows":"to","to":190,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":347,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":83,"label":"SubTerm 2"},{"arrows":"to","to":190,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":260,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":265,"from":83,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":84,"label":"StepsTo BoringStep"},{"arrows":"to","to":248,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":193,"from":85,"label":"StepsTo BoringStep"},{"arrows":"to","to":87,"from":86,"label":"SubTerm 2"},{"arrows":"to","to":230,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":415,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":359,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":380,"from":88,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":295,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":295,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":148,"from":93,"label":"StepsTo BoringStep"},{"arrows":"to","to":173,"from":93,"label":"SubTerm 2"},{"arrows":"to","to":298,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":95,"label":"StepsTo BoringStep"},{"arrows":"to","to":264,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":419,"from":96,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":360,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":327,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":436,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":420,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":426,"from":103,"label":"StepsTo PrimStep"},{"arrows":"to","to":251,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":414,"from":105,"label":"SubTerm 2"},{"arrows":"to","to":466,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":107,"label":"SubTerm 2"},{"arrows":"to","to":62,"from":107,"label":"StepsTo BoringStep"},{"arrows":"to","to":104,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":188,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":289,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":427,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":465,"from":109,"label":"SubTerm 2"},{"arrows":"to","to":14,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":111,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":112,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":113,"label":"SubTerm 2"},{"arrows":"to","to":48,"from":113,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":114,"label":"SubTerm 2"},{"arrows":"to","to":113,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":370,"from":117,"label":"StepsTo BoringStep"},{"arrows":"to","to":120,"from":119,"label":"SubTerm 2"},{"arrows":"to","to":141,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":119,"label":"StepsTo CallStep"},{"arrows":"to","to":348,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":242,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":0,"from":122,"label":"SubTerm 2"},{"arrows":"to","to":4,"from":122,"label":"StepsTo BoringStep"},{"arrows":"to","to":137,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":123,"label":"StepsTo PrimStep"},{"arrows":"to","to":390,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":124,"label":"StepsTo PrimStep"},{"arrows":"to","to":183,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":125,"label":"StepsTo CallStep"},{"arrows":"to","to":441,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":450,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":367,"from":126,"label":"StepsTo BoringStep"},{"arrows":"to","to":369,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":423,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":159,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":432,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":433,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":446,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":402,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":132,"label":"StepsTo BoringStep"},{"arrows":"to","to":344,"from":132,"label":"SubTerm 2"},{"arrows":"to","to":437,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":354,"from":133,"label":"StepsTo BoringStep"},{"arrows":"to","to":54,"from":134,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":391,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":252,"from":135,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":136,"label":"StepsTo BoringStep"},{"arrows":"to","to":138,"from":137,"label":"StepsTo BoringStep"},{"arrows":"to","to":440,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":140,"label":"StepsTo BoringStep"},{"arrows":"to","to":141,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":140,"label":"SubTerm 2"},{"arrows":"to","to":348,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":142,"label":"StepsTo CallStep"},{"arrows":"to","to":143,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":373,"from":142,"label":"SubTerm 2"},{"arrows":"to","to":410,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":144,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":243,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":147,"from":146,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":364,"from":147,"label":"StepsTo PrimStep"},{"arrows":"to","to":61,"from":148,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":173,"from":148,"label":"SubTerm 2"},{"arrows":"to","to":299,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":149,"label":"StepsTo CallStep"},{"arrows":"to","to":331,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":154,"label":"StepsTo ReturnStep"},{"arrows":"to","to":172,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":154,"label":"SubTerm 2"},{"arrows":"to","to":439,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":328,"from":156,"label":"StepsTo BoringStep"},{"arrows":"to","to":228,"from":157,"label":"StepsTo BoringStep"},{"arrows":"to","to":229,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":306,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":130,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":337,"from":161,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":397,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":165,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":166,"label":"StepsTo CallStep"},{"arrows":"to","to":150,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":167,"from":166,"label":"SubTerm 2"},{"arrows":"to","to":168,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":169,"label":"StepsTo ReturnStep"},{"arrows":"to","to":170,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":424,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":172,"from":171,"label":"StepsTo BoringStep"},{"arrows":"to","to":220,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":176,"label":"StepsTo BoringStep"},{"arrows":"to","to":79,"from":177,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":177,"label":"StepsTo ReturnStep"},{"arrows":"to","to":275,"from":177,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":178,"label":"StepsTo ReturnStep"},{"arrows":"to","to":320,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":452,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":182,"label":"StepsTo BoringStep"},{"arrows":"to","to":171,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":182,"label":"SubTerm 2"},{"arrows":"to","to":439,"from":182,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":183,"label":"SubTerm 2"},{"arrows":"to","to":169,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":320,"from":183,"label":"StepsTo ReturnStep"},{"arrows":"to","to":185,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":184,"label":"SubTerm 2"},{"arrows":"to","to":316,"from":184,"label":"SubTerm 1"},{"arrows":"to","to":374,"from":184,"label":"StepsTo PrimStep"},{"arrows":"to","to":78,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":186,"label":"StepsTo PrimStep"},{"arrows":"to","to":275,"from":186,"label":"SubTerm 1"},{"arrows":"to","to":184,"from":187,"label":"StepsTo BoringStep"},{"arrows":"to","to":185,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":284,"from":187,"label":"SubTerm 2"},{"arrows":"to","to":316,"from":187,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":188,"label":"StepsTo BoringStep"},{"arrows":"to","to":205,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":134,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":192,"label":"SubTerm 1"},{"arrows":"to","to":264,"from":192,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":326,"from":193,"label":"StepsTo CallStep"},{"arrows":"to","to":7,"from":194,"label":"StepsTo BoringStep"},{"arrows":"to","to":195,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":396,"from":194,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":195,"label":"StepsTo BoringStep"},{"arrows":"to","to":197,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":340,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":455,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":463,"from":197,"label":"SubTerm 2"},{"arrows":"to","to":3,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":199,"label":"StepsTo BoringStep"},{"arrows":"to","to":231,"from":199,"label":"SubTerm 1"},{"arrows":"to","to":201,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":340,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":204,"from":203,"label":"SubTerm 1"},{"arrows":"to","to":406,"from":203,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":205,"label":"StepsTo BoringStep"},{"arrows":"to","to":206,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":407,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":209,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":211,"label":"StepsTo BoringStep"},{"arrows":"to","to":424,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":169,"from":212,"label":"StepsTo PrimStep"},{"arrows":"to","to":224,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":424,"from":212,"label":"SubTerm 1"},{"arrows":"to","to":209,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":246,"from":213,"label":"StepsTo ReturnStep"},{"arrows":"to","to":3,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":215,"label":"StepsTo ReturnStep"},{"arrows":"to","to":231,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":216,"label":"StepsTo ReturnStep"},{"arrows":"to","to":366,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":219,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":445,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":250,"from":220,"label":"SubTerm 2"},{"arrows":"to","to":442,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":222,"label":"SubTerm 0"},{"arrows":"to","to":444,"from":222,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":224,"label":"SubTerm 1"},{"arrows":"to","to":170,"from":224,"label":"StepsTo PrimStep"},{"arrows":"to","to":413,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":227,"label":"StepsTo BoringStep"},{"arrows":"to","to":326,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":229,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":324,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":276,"from":229,"label":"SubTerm 1"},{"arrows":"to","to":362,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":231,"label":"SubTerm 2"},{"arrows":"to","to":104,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":443,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":447,"from":234,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":237,"label":"StepsTo BoringStep"},{"arrows":"to","to":254,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":308,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":378,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":356,"from":241,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":381,"from":242,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":272,"from":243,"label":"StepsTo BoringStep"},{"arrows":"to","to":328,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":245,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":403,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":279,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":248,"label":"StepsTo BoringStep"},{"arrows":"to","to":344,"from":248,"label":"SubTerm 2"},{"arrows":"to","to":354,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":437,"from":248,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":252,"label":"SubTerm 1"},{"arrows":"to","to":304,"from":252,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":241,"from":254,"label":"SubTerm 1"},{"arrows":"to","to":321,"from":254,"label":"StepsTo BoringStep"},{"arrows":"to","to":257,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":421,"from":256,"label":"SubTerm 2"},{"arrows":"to","to":434,"from":256,"label":"SubTerm 1"},{"arrows":"to","to":203,"from":258,"label":"SubTerm 0"},{"arrows":"to","to":259,"from":258,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":260,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":260,"label":"StepsTo CallStep"},{"arrows":"to","to":348,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":261,"label":"StepsTo BoringStep"},{"arrows":"to","to":246,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":264,"label":"StepsTo BoringStep"},{"arrows":"to","to":132,"from":264,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":265,"label":"SubTerm 2"},{"arrows":"to","to":190,"from":265,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":390,"from":265,"label":"StepsTo BoringStep"},{"arrows":"to","to":58,"from":266,"label":"SubTerm 2"},{"arrows":"to","to":267,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":429,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":98,"from":267,"label":"SubTerm 0"},{"arrows":"to","to":152,"from":267,"label":"SubTerm 1"},{"arrows":"to","to":269,"from":268,"label":"StepsTo BoringStep"},{"arrows":"to","to":365,"from":269,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":411,"from":270,"label":"SubTerm 2"},{"arrows":"to","to":468,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":329,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":372,"from":272,"label":"StepsTo CallStep"},{"arrows":"to","to":118,"from":273,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":273,"label":"StepsTo CallStep"},{"arrows":"to","to":249,"from":273,"label":"SubTerm 1"},{"arrows":"to","to":371,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":256,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":401,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":277,"label":"SubTerm 1"},{"arrows":"to","to":227,"from":277,"label":"StepsTo CallStep"},{"arrows":"to","to":281,"from":280,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":280,"label":"SubTerm 0"},{"arrows":"to","to":409,"from":280,"label":"SubTerm 2"},{"arrows":"to","to":14,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":282,"label":"StepsTo BoringStep"},{"arrows":"to","to":261,"from":282,"label":"SubTerm 1"},{"arrows":"to","to":283,"from":284,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":285,"label":"StepsTo BoringStep"},{"arrows":"to","to":75,"from":285,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":287,"label":"SubTerm 1"},{"arrows":"to","to":366,"from":287,"label":"StepsTo ReturnStep"},{"arrows":"to","to":270,"from":289,"label":"SubTerm 0"},{"arrows":"to","to":290,"from":289,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":290,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":293,"label":"SubTerm 0"},{"arrows":"to","to":215,"from":293,"label":"SubTerm 1"},{"arrows":"to","to":357,"from":293,"label":"StepsTo ReturnStep"},{"arrows":"to","to":52,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":296,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":296,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":296,"label":"StepsTo BoringStep"},{"arrows":"to","to":299,"from":298,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":301,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":301,"label":"SubTerm 1"},{"arrows":"to","to":302,"from":301,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":302,"label":"SubTerm 1"},{"arrows":"to","to":296,"from":302,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":304,"label":"SubTerm 0"},{"arrows":"to","to":216,"from":304,"label":"StepsTo ReturnStep"},{"arrows":"to","to":287,"from":304,"label":"SubTerm 1"},{"arrows":"to","to":255,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":306,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":306,"label":"SubTerm 2"},{"arrows":"to","to":324,"from":306,"label":"StepsTo BoringStep"},{"arrows":"to","to":325,"from":307,"label":"StepsTo BoringStep"},{"arrows":"to","to":280,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":438,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":161,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":315,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":318,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":320,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":320,"label":"SubTerm 2"},{"arrows":"to","to":190,"from":320,"label":"StepsTo BoringStep"},{"arrows":"to","to":190,"from":320,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":321,"label":"StepsTo BoringStep"},{"arrows":"to","to":356,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":255,"from":324,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":324,"label":"SubTerm 1"},{"arrows":"to","to":325,"from":324,"label":"SubTerm 2"},{"arrows":"to","to":3,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":326,"label":"StepsTo BoringStep"},{"arrows":"to","to":265,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":328,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":328,"label":"SubTerm 1"},{"arrows":"to","to":329,"from":328,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":329,"label":"SubTerm 1"},{"arrows":"to","to":146,"from":329,"label":"StepsTo CallStep"},{"arrows":"to","to":167,"from":332,"label":"StepsTo BoringStep"},{"arrows":"to","to":334,"from":333,"label":"SubTerm 1"},{"arrows":"to","to":417,"from":333,"label":"SubTerm 0"},{"arrows":"to","to":461,"from":333,"label":"SubTerm 2"},{"arrows":"to","to":9,"from":335,"label":"StepsTo BoringStep"},{"arrows":"to","to":86,"from":337,"label":"SubTerm 0"},{"arrows":"to","to":339,"from":338,"label":"SubTerm 1"},{"arrows":"to","to":435,"from":338,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":341,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":341,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":344,"label":"SubTerm 2"},{"arrows":"to","to":200,"from":344,"label":"SubTerm 0"},{"arrows":"to","to":377,"from":344,"label":"SubTerm 1"},{"arrows":"to","to":185,"from":345,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":345,"label":"StepsTo BoringStep"},{"arrows":"to","to":284,"from":345,"label":"SubTerm 2"},{"arrows":"to","to":315,"from":345,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":346,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":346,"label":"StepsTo CallStep"},{"arrows":"to","to":273,"from":346,"label":"SubTerm 1"},{"arrows":"to","to":260,"from":347,"label":"StepsTo BoringStep"},{"arrows":"to","to":348,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":347,"label":"SubTerm 1"},{"arrows":"to","to":350,"from":349,"label":"SubTerm 1"},{"arrows":"to","to":399,"from":349,"label":"SubTerm 0"},{"arrows":"to","to":462,"from":349,"label":"SubTerm 2"},{"arrows":"to","to":352,"from":351,"label":"SubTerm 1"},{"arrows":"to","to":458,"from":351,"label":"SubTerm 0"},{"arrows":"to","to":351,"from":353,"label":"SubTerm 1"},{"arrows":"to","to":363,"from":353,"label":"SubTerm 0"},{"arrows":"to","to":355,"from":354,"label":"SubTerm 0"},{"arrows":"to","to":142,"from":356,"label":"StepsTo BoringStep"},{"arrows":"to","to":143,"from":356,"label":"SubTerm 1"},{"arrows":"to","to":392,"from":356,"label":"SubTerm 2"},{"arrows":"to","to":410,"from":356,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":357,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":357,"label":"SubTerm 1"},{"arrows":"to","to":358,"from":357,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":358,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":358,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":358,"label":"StepsTo BoringStep"},{"arrows":"to","to":127,"from":359,"label":"SubTerm 0"},{"arrows":"to","to":317,"from":359,"label":"SubTerm 1"},{"arrows":"to","to":388,"from":362,"label":"SubTerm 1"},{"arrows":"to","to":418,"from":362,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":364,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":364,"label":"SubTerm 1"},{"arrows":"to","to":215,"from":364,"label":"StepsTo PrimStep"},{"arrows":"to","to":3,"from":366,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":366,"label":"SubTerm 1"},{"arrows":"to","to":261,"from":366,"label":"StepsTo ReturnStep"},{"arrows":"to","to":14,"from":367,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":367,"label":"StepsTo BoringStep"},{"arrows":"to","to":353,"from":369,"label":"SubTerm 1"},{"arrows":"to","to":425,"from":369,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":370,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":370,"label":"SubTerm 0"},{"arrows":"to","to":273,"from":370,"label":"StepsTo BoringStep"},{"arrows":"to","to":294,"from":371,"label":"SubTerm 2"},{"arrows":"to","to":398,"from":371,"label":"SubTerm 0"},{"arrows":"to","to":467,"from":371,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":372,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":372,"label":"SubTerm 1"},{"arrows":"to","to":394,"from":372,"label":"StepsTo BoringStep"},{"arrows":"to","to":330,"from":373,"label":"SubTerm 1"},{"arrows":"to","to":386,"from":373,"label":"SubTerm 0"},{"arrows":"to","to":375,"from":374,"label":"SubTerm 0"},{"arrows":"to","to":196,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":338,"from":378,"label":"SubTerm 1"},{"arrows":"to","to":460,"from":378,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":379,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":379,"label":"SubTerm 1"},{"arrows":"to","to":387,"from":379,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":380,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":380,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":379,"from":381,"label":"StepsTo BoringStep"},{"arrows":"to","to":383,"from":382,"label":"SubTerm 1"},{"arrows":"to","to":448,"from":382,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":384,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":384,"label":"StepsTo CallStep"},{"arrows":"to","to":192,"from":384,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":387,"label":"SubTerm 0"},{"arrows":"to","to":228,"from":387,"label":"SubTerm 1"},{"arrows":"to","to":389,"from":388,"label":"SubTerm 1"},{"arrows":"to","to":457,"from":388,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":390,"label":"SubTerm 2"},{"arrows":"to","to":183,"from":390,"label":"StepsTo PrimStep"},{"arrows":"to","to":190,"from":390,"label":"SubTerm 1"},{"arrows":"to","to":212,"from":390,"label":"SubTerm 0"},{"arrows":"to","to":210,"from":391,"label":"StepsTo BoringStep"},{"arrows":"to","to":373,"from":392,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":394,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":394,"label":"SubTerm 1"},{"arrows":"to","to":405,"from":394,"label":"StepsTo PrimStep"},{"arrows":"to","to":164,"from":396,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":400,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":400,"label":"SubTerm 1"},{"arrows":"to","to":301,"from":400,"label":"StepsTo ReturnStep"},{"arrows":"to","to":449,"from":401,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":405,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":405,"label":"StepsTo PrimStep"},{"arrows":"to","to":364,"from":405,"label":"SubTerm 1"},{"arrows":"to","to":408,"from":407,"label":"StepsTo BoringStep"},{"arrows":"to","to":413,"from":412,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":419,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":419,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":419,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":426,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":426,"label":"SubTerm 1"},{"arrows":"to","to":400,"from":426,"label":"StepsTo PrimStep"},{"arrows":"to","to":151,"from":429,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":438,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":449,"label":"SubTerm 0"},{"arrows":"to","to":459,"from":449,"label":"SubTerm 1"},{"arrows":"to","to":454,"from":453,"label":"SubTerm 0"},{"arrows":"to","to":222,"from":454,"label":"SubTerm 0"},{"arrows":"to","to":456,"from":454,"label":"SubTerm 1"}],"nodes":[{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,1,"Redex"],[38,107,"Redex"],[157,5,"Redex"],[165,5,"Redex"]],"id":0,"label":"let seen' = seen_1 @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"],[9,1,"Redex"]],"id":1,"label":"seen_1 @ h"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":3,"label":"helper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,282,"Redex"]],"id":4,"label":"match [0] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,3,"Redex"],[40,109,"Redex"],[161,5,"Redex"],[169,5,"Redex"]],"id":5,"label":"let seen' = seen_1 @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_]"],["h_1","0"]],"annots":[[0,6,"Redex"],[9,3,"Redex"]],"id":6,"label":"seen_1 @ h_1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[0]"]],"annots":[[7,5,"Redex"]],"id":7,"label":"([_] , rest')"},{"span":null,"env":[],"annots":[],"id":8,"label":"[_]"},{"span":null,"env":[],"annots":[],"id":9,"label":"[3 ; 0]"},{"span":null,"env":[],"annots":[],"id":10,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":11,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":12,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":14,"label":"List.rev"},{"span":null,"env":[],"annots":[],"id":16,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,206,"Redex"]],"id":17,"label":"List.rev (let seen' = [_] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,164,"Redex"]],"id":18,"label":"let seen' = [_] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[36,4,"Redex"],[53,5,"Redex"],[61,5,"Redex"]],"id":19,"label":"let rest' =\n  0 :: (List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,20,"Redex"],[51,5,"Redex"],[59,5,"Redex"]],"id":20,"label":"let rest' =\n  0 :: (List.filter f_1 []) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,8,"Redex"],[68,137,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":21,"label":"List.rev (let seen' =\n            [] @ [_] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,8,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":22,"label":"let seen' = [] @ [_] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[3 ; 0]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":23,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":24,"label":"is_in"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":25,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[3 ; 0]"]],"annots":[[0,59,"Redex"]],"id":26,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","[_]"],["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"],[66,137,"Redex"],[215,5,"Redex"],[223,5,"Redex"]],"id":27,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","[_]"],["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"],[34,107,"Redex"],[153,5,"Redex"],[161,5,"Redex"]],"id":28,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","3"]],"annots":[[2,1,"Redex"]],"id":29,"label":"f y"},{"span":null,"env":[["y","3"]],"annots":[[0,1,"Redex"]],"id":30,"label":"y"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,49,"Redex"],[73,5,"Redex"],[81,5,"Redex"]],"id":31,"label":"let rest' = List.filter is_in\n                        [3 ; 0] in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[3 ; 0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[20,2,"Redex"],[61,1,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":32,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[0]"]],"annots":[[14,2,"Redex"]],"id":33,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":34,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[52,1,"Redex"],[75,5,"Redex"],[83,5,"Redex"]],"id":35,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,25,"Redex"],[81,5,"Redex"],[89,5,"Redex"]],"id":36,"label":"List.rev (let rest' =\n            List.filter is_in [3 ; 0] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":37,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":38,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_] ; 3 ; 0]"]],"annots":[[0,1,"Redex"]],"id":40,"label":"l"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":41,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":42,"label":"List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":43,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":44,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":45,"label":"(y , List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_] ; 3 ; 0]"]],"annots":[[6,1,"Redex"]],"id":47,"label":"([] , l)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","3"],["ys","[0]"]],"annots":[[5,1,"Redex"]],"id":48,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","3"],["ys","[0]"]],"annots":[[3,3,"Redex"]],"id":49,"label":"if f 3\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":50,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":51,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":52,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":53,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[21,4,"Redex"]],"id":54,"label":"(0 , List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":55,"label":"(0 , List.filter f_1 [])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,27,"Redex"]],"id":56,"label":"helper ([] , [[_] ; 3 ; 0])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":57,"label":"([] , [[_] ; 3 ; 0])"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":58,"label":"List.filter f_2 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":59,"label":"ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","[_]"],["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"],[68,137,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":60,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","[_]"],["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":61,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"]],"annots":[[3,9,"Redex"]],"id":62,"label":"if (3 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"]],"annots":[[3,5,"Redex"]],"id":63,"label":"if 1 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":66,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[_] ; 3 ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[156,215,"Redex"],[383,5,"Redex"],[391,5,"Redex"]],"id":67,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,399,"Redex"]],"id":68,"label":"List.rev (match [[_] ; 3 ; 0] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":null,"env":[],"annots":[],"id":70,"label":"true"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":71,"label":"0 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":72,"label":"(0 , match [] with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,158,"Redex"],[182,5,"Redex"],[190,5,"Redex"]],"id":73,"label":"let rest' = if true\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1\n                             ys_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[14,3,"Redex"],[60,4,"Redex"],[77,5,"Redex"],[85,5,"Redex"]],"id":74,"label":"let rest' =\n  y_1 :: (List.filter f_1\n                      ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"],[62,1,"Redex"]],"id":75,"label":"(0 , match xs_2 with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"],["rest'","[0]"]],"annots":[[18,5,"Redex"],[26,5,"Redex"]],"id":76,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[24,5,"Redex"]],"id":77,"label":"List.rev (helper ([_] , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":78,"label":"3 mod 2"},{"span":null,"env":[],"annots":[],"id":79,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":80,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":81,"label":"2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[]"]],"annots":[[7,3,"Redex"]],"id":82,"label":"if f_1 y_1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[]"]],"annots":[[3,5,"Redex"]],"id":83,"label":"if f_1 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,218,"Redex"],[242,5,"Redex"],[250,5,"Redex"]],"id":84,"label":"let rest' = match [0] with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[21,3,"Redex"],[128,5,"Redex"],[136,5,"Redex"]],"id":85,"label":"let rest' =\n  if f_1 y_1\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":86,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":87,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[22,4,"Redex"]],"id":88,"label":"0 :: (List.filter f_1 ys_1)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":89,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":90,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_] ; 3 ; 0]"]],"annots":[[13,1,"Redex"]],"id":92,"label":"helper ([] , l)"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[_] ; 3 ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":93,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":94,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_1","[0]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[40,4,"Redex"],[105,1,"Redex"],[233,5,"Redex"],[241,5,"Redex"]],"id":95,"label":"List.rev (let rest' =\n            match xs_1 with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,176,"Redex"],[232,5,"Redex"],[240,5,"Redex"]],"id":96,"label":"List.rev (let rest' =\n            match [0] with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":98,"label":"f_2"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":99,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":100,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":101,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":102,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,9,"Redex"],[194,5,"Redex"],[202,5,"Redex"]],"id":103,"label":"List.rev (let rest' =\n            if (0 mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":104,"label":"y :: (List.filter f ys)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":105,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":106,"label":"seen"},{"span":null,"env":[["i","3"],["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"]],"annots":[[4,1,"Redex"]],"id":107,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":108,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":109,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":110,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,29,"Redex"]],"id":111,"label":"List.rev (helper ([] , [[_] ; 3 ; 0]))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[26,4,"Redex"],[83,1,"Redex"],[194,5,"Redex"],[202,5,"Redex"]],"id":112,"label":"let rest' =\n  0 :: (match xs_2 with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,126,"Redex"]],"id":113,"label":"match [3 ; 0] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["xs","[3 ; 0]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":114,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"],["rest'","[0]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":117,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":118,"label":"helper"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,18,"Redex"]],"id":119,"label":"List.filter f_1 []"},{"span":null,"env":[],"annots":[],"id":120,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest_1","[0]"],["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,6,"Redex"],[46,6,"Redex"],[113,6,"Redex"],[122,1,"Redex"],[162,215,"Redex"],[389,5,"Redex"],[397,5,"Redex"]],"id":121,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest_1","[0]"],["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,6,"Redex"],[26,6,"Redex"],[73,6,"Redex"],[82,1,"Redex"],[112,146,"Redex"],[270,5,"Redex"],[278,5,"Redex"]],"id":122,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,9,"Redex"],[134,5,"Redex"],[142,5,"Redex"]],"id":123,"label":"let rest' =\n  if (0 mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,5,"Redex"],[126,5,"Redex"],[134,5,"Redex"]],"id":124,"label":"let rest' =\n  if 0 = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,30,"Redex"]],"id":125,"label":"removeDuplicates [[_] ; 3 ; 0]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_] ; 3 ; 0]"]],"annots":[[0,381,"Redex"]],"id":126,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":127,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":128,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":129,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":130,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":131,"label":"helper ([] , l)"},{"span":null,"env":[["xs_1","[0]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":132,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[["xs_1","[0]"]],"annots":[[0,4,"Redex"]],"id":133,"label":"xs_1"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":134,"label":"(y_1 , List.filter f_1 ys_1)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,20,"Redex"],[81,5,"Redex"],[89,5,"Redex"]],"id":135,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 []) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[28,2,"Redex"],[42,5,"Redex"],[50,5,"Redex"]],"id":136,"label":"let rest' =\n  List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"]],"annots":[[0,6,"Redex"]],"id":137,"label":"rest_1"},{"span":null,"env":[],"annots":[],"id":138,"label":"[0]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":139,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[16,4,"Redex"]],"id":140,"label":"List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":141,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,25,"Redex"]],"id":142,"label":"List.filter is_in [3 ; 0]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":143,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[3 ; 0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[40,2,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":144,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,174,"Redex"],[230,5,"Redex"],[238,5,"Redex"]],"id":145,"label":"List.rev (let rest' =\n            match [3 ; 0] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","3"],["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[18,1,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":146,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,9,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":147,"label":"let rest' =\n  if (3 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,288,"Redex"]],"id":148,"label":"match [[_] ; 3 ; 0] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":149,"label":"f 3"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":150,"label":"f"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":151,"label":"(y , List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":152,"label":"y"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":154,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,216,"Redex"],[240,5,"Redex"],[248,5,"Redex"]],"id":156,"label":"let rest' = match [3 ; 0] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[18,3,"Redex"],[37,109,"Redex"],[158,5,"Redex"],[166,5,"Redex"]],"id":157,"label":"let seen' = [_] @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":158,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":159,"label":"rest'"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,381,"Redex"]],"id":161,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":162,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":163,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":164,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":165,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,17,"Redex"]],"id":166,"label":"List.filter f [0]"},{"span":null,"env":[],"annots":[],"id":167,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":168,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":169,"label":"0 = 0"},{"span":null,"env":[],"annots":[],"id":170,"label":"0"},{"span":null,"env":[["xs_2","[]"]],"annots":[[0,4,"Redex"]],"id":171,"label":"xs_2"},{"span":null,"env":[],"annots":[],"id":172,"label":"[]"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":173,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["ys_1","[]"]],"annots":[[0,4,"Redex"]],"id":176,"label":"ys_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":177,"label":"1 = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[125,5,"Redex"],[133,5,"Redex"]],"id":178,"label":"let rest' =\n  if true\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":180,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":181,"label":"(i mod 2) = 0"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":182,"label":"match xs_2 with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[3,5,"Redex"]],"id":183,"label":"if 0 = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,8,"Redex"]],"id":184,"label":"[] @ [_]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":185,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":186,"label":"(3 mod 2) = 0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[_]"]],"annots":[[5,1,"Redex"]],"id":187,"label":"[] @ h"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","3"]],"annots":[[1,1,"Redex"]],"id":188,"label":"(i mod 2) = 0"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"]],"id":189,"label":"seen_1"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":190,"label":"y_1 :: (List.filter f_1 ys_1)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":191,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,41,"Redex"],[65,5,"Redex"],[73,5,"Redex"]],"id":192,"label":"let rest' = List.filter f\n                        [0] in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,5,"Redex"],[126,5,"Redex"],[134,5,"Redex"]],"id":193,"label":"let rest' =\n  if f_1 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_]"],["rest'","[0]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":194,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_]"]],"annots":[[0,5,"Redex"]],"id":195,"label":"seen'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":196,"label":"(y , List.filter f_1 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":197,"label":"List.filter f_1 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,112,"Redex"],[136,5,"Redex"],[144,5,"Redex"]],"id":199,"label":"let rest' = if false\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":200,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":201,"label":"f_1"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":202,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":203,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":204,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":205,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":206,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":207,"label":"[]"},{"span":null,"env":[],"annots":[],"id":209,"label":"(0 , [])"},{"span":null,"env":[],"annots":[],"id":210,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":211,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":212,"label":"(0 mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":213,"label":"0 :: []"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[89,5,"Redex"],[97,5,"Redex"]],"id":215,"label":"let rest' =\n  if false\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[63,5,"Redex"],[71,5,"Redex"]],"id":216,"label":"List.rev (let rest' =\n            0 :: [] in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":217,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":218,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":219,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":220,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":221,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":222,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":223,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":224,"label":"0 mod 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":226,"label":"f"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","0"],["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[38,1,"Redex"],[194,5,"Redex"],[202,5,"Redex"]],"id":227,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,7,"Redex"],[35,109,"Redex"],[156,5,"Redex"],[164,5,"Redex"]],"id":228,"label":"let seen' = [_] @ 0 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,109,"Redex"],[133,5,"Redex"],[141,5,"Redex"]],"id":229,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":230,"label":"rest"},{"span":null,"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"]],"annots":[[0,59,"Redex"]],"id":231,"label":"if false\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":232,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":233,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":234,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":235,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,83,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":237,"label":"List.rev (let rest' =\n            let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":238,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":239,"label":"false"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[3 ; 0]"]],"annots":[[0,59,"Redex"]],"id":241,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,393,"Redex"]],"id":242,"label":"List.rev (match [0] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","3"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,1,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":243,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":244,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":245,"label":"2"},{"span":null,"env":[],"annots":[],"id":246,"label":"[0]"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":247,"label":"y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,128,"Redex"]],"id":248,"label":"match [0] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":249,"label":"([_] , [0])"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":250,"label":"h"},{"span":null,"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":251,"label":"(y , List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[46,4,"Redex"],[123,1,"Redex"],[318,5,"Redex"],[326,5,"Redex"]],"id":252,"label":"List.rev (let rest' =\n            0 :: (match xs_2 with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":254,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":255,"label":"(@)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[12,5,"Redex"],[18,3,"Redex"]],"id":256,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":257,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":258,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":259,"label":"0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":260,"label":"f_1 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[0,41,"Redex"]],"id":261,"label":"let rest' = [0] in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":262,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":263,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_1","[0]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[20,4,"Redex"],[65,1,"Redex"],[163,5,"Redex"],[171,5,"Redex"]],"id":264,"label":"let rest' =\n  match xs_1 with\n  | [] -> []\n  | y :: ys -> if f_1 y\n               then y :: (List.filter f_1 ys)\n               else List.filter f_1 ys in\nhelper (seen' , rest')"},{"span":null,"env":[["i","0"],["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[4,1,"Redex"]],"id":265,"label":"if (i mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":266,"label":"if f_2 y\nthen y :: (List.filter f_2 ys)\nelse List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":267,"label":"f_2 y"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"]],"id":268,"label":"seen_1"},{"span":null,"env":[],"annots":[],"id":269,"label":"[_]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":270,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":271,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","3"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,3,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":272,"label":"List.rev (let rest' =\n            if f 3\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,18,"Redex"]],"id":273,"label":"helper ([_] , [0])"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":274,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":275,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[0,61,"Redex"]],"id":276,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,5,"Redex"],[186,5,"Redex"],[194,5,"Redex"]],"id":277,"label":"List.rev (let rest' =\n            if f_1 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":279,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":280,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":281,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[9,53,"Redex"]],"id":282,"label":"List.rev (let rest' = [0] in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":283,"label":"[_]"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_]"]],"annots":[[0,1,"Redex"]],"id":284,"label":"h"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"],[65,1,"Redex"]],"id":285,"label":"0 :: (match xs_2 with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,161,"Redex"],[192,5,"Redex"],[200,5,"Redex"]],"id":287,"label":"let rest' =\n  0 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":288,"label":"h"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":289,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":290,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":291,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[139,5,"Redex"],[147,5,"Redex"]],"id":293,"label":"List.rev (let rest' =\n            if false\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":294,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":295,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[56,4,"Redex"],[83,5,"Redex"],[91,5,"Redex"]],"id":296,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_] ; 3 ; 0]"]],"annots":[[0,4,"Redex"]],"id":298,"label":"rest"},{"span":null,"env":[],"annots":[],"id":299,"label":"[[_] ; 3 ; 0]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[22,198,"Redex"],[232,5,"Redex"],[240,5,"Redex"]],"id":301,"label":"List.rev (let rest' = if true\n                      then y_1 :: (List.filter f_1\n                                               ys_1)\n                      else List.filter f_1\n                                       ys_1 in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,3,"Redex"],[90,4,"Redex"],[117,5,"Redex"],[125,5,"Redex"]],"id":302,"label":"List.rev (let rest' =\n            y_1 :: (List.filter f_1\n                                ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[3 ; 0]"]],"annots":[[0,1,"Redex"]],"id":303,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,255,"Redex"],[316,5,"Redex"],[324,5,"Redex"]],"id":304,"label":"List.rev (let rest' =\n            0 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":305,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h_1","0"]],"annots":[[6,3,"Redex"]],"id":306,"label":"[_] @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[0,3,"Redex"]],"id":307,"label":"h_1"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":308,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":309,"label":"[[_] ; 3 ; 0]"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":314,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":315,"label":"seen"},{"span":null,"env":[],"annots":[],"id":316,"label":"[]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":317,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":318,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[0,93,"Redex"]],"id":320,"label":"if true\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[3 ; 0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[32,1,"Redex"],[45,5,"Redex"],[53,5,"Redex"]],"id":321,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,7,"Redex"]],"id":324,"label":"[_] @ 0"},{"span":null,"env":[],"annots":[],"id":325,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","0"],["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[18,1,"Redex"],[134,5,"Redex"],[142,5,"Redex"]],"id":326,"label":"let rest' =\n  if (i mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":327,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","3"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,1,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":328,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","3"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,3,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":329,"label":"let rest' =\n  if f 3\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":330,"label":"0"},{"span":null,"env":[],"annots":[],"id":331,"label":"3"},{"span":null,"env":[["ys","[0]"]],"annots":[[0,2,"Redex"]],"id":332,"label":"ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[3 ; 0]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":333,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":334,"label":"is_in"},{"span":null,"env":[["xs","[3 ; 0]"]],"annots":[[0,2,"Redex"]],"id":335,"label":"xs"},{"span":null,"env":[],"annots":[],"id":336,"label":"3"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":337,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":338,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":339,"label":"rest'"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":340,"label":"y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":341,"label":"f y"},{"span":null,"env":[],"annots":[],"id":343,"label":"List.filter"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":344,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[_]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":345,"label":"seen @ h"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,20,"Redex"]],"id":346,"label":"List.rev (helper ([_] , [0]))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"]],"annots":[[4,3,"Redex"]],"id":347,"label":"f_1 y_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":348,"label":"f_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":349,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":350,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_] ; 3 ; 0]"]],"annots":[[6,1,"Redex"]],"id":351,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_] ; 3 ; 0]"]],"annots":[[0,1,"Redex"]],"id":352,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[_] ; 3 ; 0]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":353,"label":"helper ([] , l)"},{"span":null,"env":[],"annots":[],"id":354,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":355,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[3 ; 0]"]],"annots":[[18,1,"Redex"]],"id":356,"label":"List.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[22,142,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":357,"label":"List.rev (let rest' = if false\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[48,2,"Redex"],[72,5,"Redex"],[80,5,"Redex"]],"id":358,"label":"List.rev (let rest' =\n            List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":359,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":360,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":361,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":362,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":363,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,5,"Redex"],[89,5,"Redex"],[97,5,"Redex"]],"id":364,"label":"let rest' =\n  if 1 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":365,"label":"_"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[31,5,"Redex"],[39,5,"Redex"]],"id":366,"label":"let rest' = 0 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_] ; 3 ; 0]"]],"annots":[[23,1,"Redex"]],"id":367,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_] ; 3 ; 0]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":369,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[14,5,"Redex"]],"id":370,"label":"helper ([_] , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":371,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","3"],["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[38,1,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":372,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":373,"label":"[3 ; 0]"},{"span":null,"env":[],"annots":[],"id":374,"label":"[_]"},{"span":null,"env":[],"annots":[],"id":375,"label":"_"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"]],"id":376,"label":"seen_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":377,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":378,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[40,3,"Redex"],[69,139,"Redex"],[220,5,"Redex"],[228,5,"Redex"]],"id":379,"label":"List.rev (let seen' =\n            [_] @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,20,"Redex"]],"id":380,"label":"0 :: (List.filter f_1 [])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"],[43,3,"Redex"],[72,139,"Redex"],[223,5,"Redex"],[231,5,"Redex"]],"id":381,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":382,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":383,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,17,"Redex"],[73,5,"Redex"],[81,5,"Redex"]],"id":384,"label":"List.rev (let rest' =\n            List.filter f [0] in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":386,"label":"3"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,7,"Redex"],[67,139,"Redex"],[218,5,"Redex"],[226,5,"Redex"]],"id":387,"label":"List.rev (let seen' =\n            [_] @ 0 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":388,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":389,"label":"rest'"},{"span":null,"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[3,9,"Redex"]],"id":390,"label":"if (0 mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["y_1","0"]],"annots":[[0,3,"Redex"]],"id":391,"label":"y_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[3 ; 0]"]],"annots":[[0,1,"Redex"]],"id":392,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":393,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,9,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":394,"label":"List.rev (let rest' =\n            if (3 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0]"]],"annots":[[0,5,"Redex"]],"id":396,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":397,"label":"rest'"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":398,"label":"rest"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":399,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[185,5,"Redex"],[193,5,"Redex"]],"id":400,"label":"List.rev (let rest' =\n            if true\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":401,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":402,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":403,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":404,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","3"],["f","fun i -> (i mod 2) = 0"],["ys","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,5,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":405,"label":"List.rev (let rest' =\n            if 1 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":406,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":407,"label":"i"},{"span":null,"env":[],"annots":[],"id":408,"label":"3"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":409,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":410,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":411,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":412,"label":"i"},{"span":null,"env":[],"annots":[],"id":413,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":414,"label":"h"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":415,"label":"seen"},{"span":null,"env":[],"annots":[],"id":416,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":417,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":418,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[41,3,"Redex"],[188,5,"Redex"],[196,5,"Redex"]],"id":419,"label":"List.rev (let rest' =\n            if f_1 y_1\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":420,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[]"]],"annots":[[0,3,"Redex"]],"id":421,"label":"t_1"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":422,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":423,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":424,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":425,"label":"List.rev"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","0"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,5,"Redex"],[186,5,"Redex"],[194,5,"Redex"]],"id":426,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":427,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":428,"label":"List.filter"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":429,"label":"y :: (List.filter f_2 ys)"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":430,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":432,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_]"]],"annots":[[0,5,"Redex"]],"id":433,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":434,"label":"is_in"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":435,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":436,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":437,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":438,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":439,"label":"[]"},{"span":null,"env":[],"annots":[],"id":440,"label":"0"},{"span":null,"env":[],"annots":[],"id":441,"label":"[[_] ; 3 ; 0]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":442,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":443,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":444,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":445,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":446,"label":"List.rev"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":447,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":448,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":449,"label":"(i mod 2) = 0"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":450,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":452,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":453,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":454,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":455,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":456,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":457,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":458,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":459,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":460,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[3 ; 0]"]],"annots":[[0,1,"Redex"]],"id":461,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":462,"label":"t"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":463,"label":"ys"},{"span":null,"env":[],"annots":[],"id":464,"label":"_"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":465,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":466,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":467,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":468,"label":"List.filter"}]}