{"root":129,"result":"stuck","reason":"Type error: stuck because int is incompatible with 'a list","bad":270,"stuck":7,"edges":[{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":229,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":230,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":387,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":246,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":315,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":324,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":198,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":15,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":276,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":133,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":354,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":325,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":238,"from":20,"label":"StepsTo PrimStep"},{"arrows":"to","to":17,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":21,"label":"StepsTo PrimStep"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":22,"label":"SubTerm 2"},{"arrows":"to","to":360,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":390,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":151,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":151,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":281,"from":28,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":30,"label":"StepsTo CallStep"},{"arrows":"to","to":42,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":152,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":45,"from":32,"label":"SubTerm 2"},{"arrows":"to","to":155,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":346,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":58,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":155,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":225,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":35,"label":"StepsTo BoringStep"},{"arrows":"to","to":16,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":299,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":37,"label":"StepsTo ReturnStep"},{"arrows":"to","to":8,"from":38,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":40,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":207,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":167,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":269,"from":44,"label":"StepsTo BoringStep"},{"arrows":"to","to":46,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":144,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":291,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":46,"label":"SubTerm 2"},{"arrows":"to","to":203,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":292,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":47,"label":"SubTerm 2"},{"arrows":"to","to":363,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":50,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":50,"label":"StepsTo ReturnStep"},{"arrows":"to","to":154,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":51,"label":"StepsTo ReturnStep"},{"arrows":"to","to":30,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":53,"label":"StepsTo BoringStep"},{"arrows":"to","to":297,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":56,"label":"SubTerm 2"},{"arrows":"to","to":358,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":58,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":58,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":59,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":59,"label":"StepsTo CallStep"},{"arrows":"to","to":150,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":62,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":62,"label":"StepsTo PrimStep"},{"arrows":"to","to":171,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":196,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":300,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":98,"from":69,"label":"StepsTo CallStep"},{"arrows":"to","to":261,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":72,"label":"StepsTo BoringStep"},{"arrows":"to","to":187,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":73,"label":"StepsTo CallStep"},{"arrows":"to","to":24,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":77,"label":"StepsTo CallStep"},{"arrows":"to","to":143,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":143,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":79,"label":"StepsTo ReturnStep"},{"arrows":"to","to":306,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":84,"label":"StepsTo CallStep"},{"arrows":"to","to":213,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":280,"from":84,"label":"SubTerm 2"},{"arrows":"to","to":305,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":85,"label":"StepsTo BoringStep"},{"arrows":"to","to":98,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":251,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":91,"from":90,"label":"SubTerm 2"},{"arrows":"to","to":204,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":347,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":159,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":94,"label":"StepsTo BoringStep"},{"arrows":"to","to":183,"from":94,"label":"SubTerm 2"},{"arrows":"to","to":351,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":261,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":166,"from":98,"label":"SubTerm 2"},{"arrows":"to","to":262,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":110,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":111,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":170,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":101,"label":"SubTerm 2"},{"arrows":"to","to":266,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":102,"label":"SubTerm 2"},{"arrows":"to","to":255,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":386,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":352,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":345,"from":107,"label":"SubTerm 2"},{"arrows":"to","to":396,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":109,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":62,"from":109,"label":"StepsTo BoringStep"},{"arrows":"to","to":172,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":110,"label":"StepsTo BoringStep"},{"arrows":"to","to":111,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":111,"label":"SubTerm 2"},{"arrows":"to","to":113,"from":112,"label":"SubTerm 2"},{"arrows":"to","to":121,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":270,"from":112,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":113,"label":"StepsTo BoringStep"},{"arrows":"to","to":115,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":359,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":395,"from":114,"label":"SubTerm 2"},{"arrows":"to","to":42,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":85,"from":116,"label":"StepsTo CallStep"},{"arrows":"to","to":17,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":117,"label":"StepsTo ReturnStep"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":118,"label":"StepsTo ReturnStep"},{"arrows":"to","to":176,"from":118,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":350,"from":119,"label":"StepsTo CallStep"},{"arrows":"to","to":77,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":120,"label":"StepsTo CallStep"},{"arrows":"to","to":123,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":362,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":364,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":328,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":338,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":127,"label":"StepsTo BoringStep"},{"arrows":"to","to":237,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":128,"label":"StepsTo BoringStep"},{"arrows":"to","to":278,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":130,"from":129,"label":"StepsTo CallStep"},{"arrows":"to","to":372,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":380,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":241,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":310,"from":130,"label":"StepsTo BoringStep"},{"arrows":"to","to":312,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":355,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":365,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":366,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":379,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":334,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":136,"label":"StepsTo BoringStep"},{"arrows":"to","to":294,"from":136,"label":"SubTerm 2"},{"arrows":"to","to":368,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":330,"from":137,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":138,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":140,"label":"SubTerm 2"},{"arrows":"to","to":286,"from":140,"label":"StepsTo BoringStep"},{"arrows":"to","to":339,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":146,"label":"StepsTo CallStep"},{"arrows":"to","to":151,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":282,"from":146,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":148,"from":147,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":148,"label":"StepsTo PrimStep"},{"arrows":"to","to":62,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":149,"label":"SubTerm 2"},{"arrows":"to","to":252,"from":149,"label":"StepsTo BoringStep"},{"arrows":"to","to":263,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":151,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":150,"label":"StepsTo CallStep"},{"arrows":"to","to":16,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":153,"label":"StepsTo PrimStep"},{"arrows":"to","to":191,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":342,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":287,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":160,"from":159,"label":"SubTerm 0"},{"arrows":"to","to":327,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":161,"label":"SubTerm 1"},{"arrows":"to","to":162,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":20,"from":162,"label":"StepsTo PrimStep"},{"arrows":"to","to":42,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":164,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":209,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":167,"label":"StepsTo CallStep"},{"arrows":"to","to":195,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":169,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":382,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":171,"label":"StepsTo PrimStep"},{"arrows":"to","to":153,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":172,"label":"StepsTo BoringStep"},{"arrows":"to","to":190,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":173,"label":"StepsTo BoringStep"},{"arrows":"to","to":41,"from":174,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":315,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":143,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":306,"from":176,"label":"StepsTo ReturnStep"},{"arrows":"to","to":179,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":290,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":383,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":394,"from":179,"label":"SubTerm 2"},{"arrows":"to","to":112,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":246,"from":180,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":272,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":344,"from":182,"label":"SubTerm 1"},{"arrows":"to","to":357,"from":182,"label":"SubTerm 2"},{"arrows":"to","to":184,"from":183,"label":"StepsTo BoringStep"},{"arrows":"to","to":186,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":290,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":112,"from":187,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":187,"label":"SubTerm 2"},{"arrows":"to","to":121,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":332,"from":187,"label":"SubTerm 1"},{"arrows":"to","to":294,"from":188,"label":"SubTerm 2"},{"arrows":"to","to":296,"from":188,"label":"StepsTo ReturnStep"},{"arrows":"to","to":330,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":368,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":153,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":191,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":341,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":101,"from":195,"label":"StepsTo CallStep"},{"arrows":"to","to":237,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":378,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":373,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":222,"from":200,"label":"SubTerm 2"},{"arrows":"to","to":375,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":264,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":207,"label":"SubTerm 1"},{"arrows":"to","to":376,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":268,"from":209,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":254,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":254,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":297,"from":211,"label":"StepsTo BoringStep"},{"arrows":"to","to":215,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":337,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":217,"label":"StepsTo PrimStep"},{"arrows":"to","to":42,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":217,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":218,"label":"StepsTo BoringStep"},{"arrows":"to","to":353,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":240,"from":219,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":220,"label":"StepsTo BoringStep"},{"arrows":"to","to":350,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":221,"label":"StepsTo ReturnStep"},{"arrows":"to","to":42,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":224,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":374,"from":223,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":225,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":225,"label":"SubTerm 1"},{"arrows":"to","to":227,"from":225,"label":"StepsTo BoringStep"},{"arrows":"to","to":120,"from":226,"label":"StepsTo BoringStep"},{"arrows":"to","to":227,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":227,"label":"StepsTo BoringStep"},{"arrows":"to","to":143,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":256,"from":229,"label":"SubTerm 1"},{"arrows":"to","to":231,"from":230,"label":"SubTerm 1"},{"arrows":"to","to":298,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":232,"label":"StepsTo CallStep"},{"arrows":"to","to":233,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":233,"label":"SubTerm 1"},{"arrows":"to","to":147,"from":233,"label":"StepsTo CallStep"},{"arrows":"to","to":214,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":234,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":236,"label":"StepsTo BoringStep"},{"arrows":"to","to":226,"from":236,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":238,"label":"StepsTo ReturnStep"},{"arrows":"to","to":239,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":239,"label":"StepsTo ReturnStep"},{"arrows":"to","to":42,"from":240,"label":"SubTerm 0"},{"arrows":"to","to":236,"from":240,"label":"SubTerm 1"},{"arrows":"to","to":326,"from":240,"label":"StepsTo BoringStep"},{"arrows":"to","to":313,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":242,"label":"StepsTo BoringStep"},{"arrows":"to","to":243,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":229,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":243,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":244,"label":"StepsTo PrimStep"},{"arrows":"to","to":229,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":246,"label":"SubTerm 1"},{"arrows":"to","to":248,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":388,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":308,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":343,"from":249,"label":"SubTerm 2"},{"arrows":"to","to":42,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":242,"from":251,"label":"StepsTo BoringStep"},{"arrows":"to","to":252,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":252,"label":"SubTerm 1"},{"arrows":"to","to":229,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":252,"label":"StepsTo BoringStep"},{"arrows":"to","to":65,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":257,"from":256,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":259,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":259,"label":"SubTerm 1"},{"arrows":"to","to":263,"from":262,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":266,"label":"StepsTo BoringStep"},{"arrows":"to","to":249,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":370,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":271,"from":270,"label":"SubTerm 2"},{"arrows":"to","to":157,"from":273,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":273,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":275,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":233,"from":276,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":277,"label":"StepsTo BoringStep"},{"arrows":"to","to":278,"from":277,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":278,"label":"StepsTo BoringStep"},{"arrows":"to","to":280,"from":279,"label":"StepsTo BoringStep"},{"arrows":"to","to":348,"from":280,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":281,"label":"StepsTo BoringStep"},{"arrows":"to","to":284,"from":283,"label":"SubTerm 1"},{"arrows":"to","to":340,"from":283,"label":"SubTerm 0"},{"arrows":"to","to":392,"from":283,"label":"SubTerm 2"},{"arrows":"to","to":28,"from":285,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":285,"label":"StepsTo BoringStep"},{"arrows":"to","to":35,"from":285,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":285,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":184,"from":286,"label":"SubTerm 2"},{"arrows":"to","to":230,"from":286,"label":"StepsTo PrimStep"},{"arrows":"to","to":339,"from":286,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":289,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":367,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":216,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":102,"from":293,"label":"SubTerm 0"},{"arrows":"to","to":371,"from":293,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":294,"label":"SubTerm 2"},{"arrows":"to","to":185,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":84,"from":297,"label":"StepsTo BoringStep"},{"arrows":"to","to":213,"from":297,"label":"SubTerm 0"},{"arrows":"to","to":279,"from":297,"label":"SubTerm 2"},{"arrows":"to","to":305,"from":297,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":299,"label":"SubTerm 0"},{"arrows":"to","to":232,"from":299,"label":"StepsTo BoringStep"},{"arrows":"to","to":276,"from":299,"label":"SubTerm 1"},{"arrows":"to","to":301,"from":300,"label":"SubTerm 1"},{"arrows":"to","to":333,"from":300,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":300,"label":"SubTerm 2"},{"arrows":"to","to":303,"from":302,"label":"SubTerm 1"},{"arrows":"to","to":385,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":302,"from":304,"label":"SubTerm 1"},{"arrows":"to","to":309,"from":304,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":296,"from":306,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":307,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":307,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":310,"label":"StepsTo BoringStep"},{"arrows":"to","to":304,"from":312,"label":"SubTerm 1"},{"arrows":"to","to":356,"from":312,"label":"SubTerm 0"},{"arrows":"to","to":259,"from":313,"label":"SubTerm 2"},{"arrows":"to","to":331,"from":313,"label":"SubTerm 0"},{"arrows":"to","to":397,"from":313,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":118,"from":314,"label":"StepsTo BoringStep"},{"arrows":"to","to":127,"from":315,"label":"StepsTo BoringStep"},{"arrows":"to","to":237,"from":315,"label":"SubTerm 0"},{"arrows":"to","to":277,"from":315,"label":"SubTerm 1"},{"arrows":"to","to":178,"from":316,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":391,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":205,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":320,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":220,"from":326,"label":"StepsTo CallStep"},{"arrows":"to","to":329,"from":328,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":328,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":332,"label":"StepsTo BoringStep"},{"arrows":"to","to":336,"from":335,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":335,"label":"SubTerm 0"},{"arrows":"to","to":349,"from":336,"label":"SubTerm 1"},{"arrows":"to","to":369,"from":336,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":341,"label":"StepsTo BoringStep"},{"arrows":"to","to":10,"from":346,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":350,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":350,"label":"StepsTo BoringStep"},{"arrows":"to","to":314,"from":350,"label":"SubTerm 1"},{"arrows":"to","to":339,"from":351,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":353,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":353,"label":"StepsTo BoringStep"},{"arrows":"to","to":285,"from":353,"label":"SubTerm 1"},{"arrows":"to","to":234,"from":370,"label":"SubTerm 0"},{"arrows":"to","to":319,"from":371,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":381,"from":387,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,194,"Redex"]],"id":2,"label":"List.rev (let seen' =\n            [_ ; _] in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,130,"Redex"]],"id":3,"label":"let seen' = [_ ; _] in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":4,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":5,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[44,3,"Redex"]],"id":6,"label":"List.rev (let seen' =\n            [_ ; _] @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,11,"Redex"]],"id":7,"label":"List.rev (let seen' =\n            [_ ; _] @ 0 in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t_1) in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[0,41,"Redex"]],"id":8,"label":"let rest' = [0] in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":9,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":10,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":11,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":12,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":13,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,87,"Redex"]],"id":14,"label":"List.rev (let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,112,"Redex"]],"id":15,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,212,"Redex"]],"id":16,"label":"let rest' = match [0] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[8,5,"Redex"]],"id":17,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[6,1,"Redex"]],"id":18,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":19,"label":"l"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,5,"Redex"]],"id":20,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,5,"Redex"]],"id":21,"label":"let rest' =\n  if 0 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0]"]],"annots":[[18,1,"Redex"]],"id":22,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":23,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":24,"label":"[_ ; _]"},{"span":null,"env":[],"annots":[],"id":25,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"]],"annots":[[2,1,"Redex"]],"id":26,"label":"f y"},{"span":null,"env":[["y","0"]],"annots":[[0,1,"Redex"]],"id":27,"label":"y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[14,2,"Redex"]],"id":28,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":29,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,21,"Redex"]],"id":30,"label":"List.rev (let rest' =\n            List.filter is_in [0] in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs","[0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[40,2,"Redex"]],"id":31,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs","[0]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"]],"id":32,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,122,"Redex"]],"id":33,"label":"match [0] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,1,"Redex"]],"id":35,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,170,"Redex"]],"id":36,"label":"List.rev (let rest' =\n            match [0] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":37,"label":"List.rev (let rest' =\n            0 :: [] in\n          helper (seen' , rest'))"},{"span":null,"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":38,"label":"let rest' = 0 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":39,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":40,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[28,5,"Redex"]],"id":41,"label":"List.rev (helper ([_ ; _] , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":42,"label":"List.rev"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 0]"]],"annots":[[0,1,"Redex"]],"id":44,"label":"l"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":45,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":46,"label":"List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[18,1,"Redex"]],"id":47,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":48,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"]],"id":49,"label":"(y , List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,5,"Redex"]],"id":50,"label":"if 0 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":51,"label":"0 = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[52,1,"Redex"]],"id":52,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[32,1,"Redex"]],"id":53,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 0]"]],"annots":[[6,1,"Redex"]],"id":55,"label":"([] , l)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0]"]],"annots":[[18,1,"Redex"]],"id":56,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":57,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[]"]],"annots":[[5,1,"Redex"]],"id":58,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[]"]],"annots":[[3,3,"Redex"]],"id":59,"label":"if f 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,9,"Redex"]],"id":62,"label":"if (0 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":63,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":64,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":65,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":66,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,112,"Redex"]],"id":67,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":68,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,27,"Redex"]],"id":69,"label":"helper ([] , [[_ ; _] ; 0])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":70,"label":"([] , [[_ ; _] ; 0])"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,6,"Redex"]],"id":71,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,6,"Redex"]],"id":72,"label":"let seen' = seen_1 @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,45,"Redex"]],"id":73,"label":"let rest' = List.filter is_in\n                        [0] in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":74,"label":"([_ ; _] , [0])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,16,"Redex"]],"id":77,"label":"(0 , List.filter f [])"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":78,"label":"(0 , match xs_1 with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":null,"env":[],"annots":[[0,7,"Redex"]],"id":79,"label":"0 :: []"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[0,5,"Redex"]],"id":81,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,21,"Redex"]],"id":84,"label":"List.filter is_in [0]"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _] ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,4,"Redex"]],"id":85,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,345,"Redex"]],"id":86,"label":"List.rev (match [[_ ; _] ; 0] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"]],"id":90,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"]],"id":91,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[8,5,"Redex"]],"id":92,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":93,"label":"helper"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _]"]],"annots":[[0,4,"Redex"]],"id":94,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":95,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[_ ; _] ; 0]"]],"annots":[[13,1,"Redex"]],"id":97,"label":"helper ([] , l)"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _] ; 0]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,4,"Redex"]],"id":98,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":99,"label":"seen"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"],["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[16,6,"Redex"]],"id":100,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"],["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[6,6,"Redex"]],"id":101,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[],"id":102,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[]"]],"annots":[],"id":103,"label":"t_1"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":104,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":105,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":107,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":108,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[4,1,"Redex"]],"id":109,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,339,"Redex"]],"id":110,"label":"List.rev (match [0] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' =\n                         (let is_in =\n                            fun i -> (i mod 2) = 0 in\n                          List.filter is_in t) in\n                       helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,257,"Redex"]],"id":111,"label":"match [0] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[10,3,"Redex"]],"id":112,"label":"[_ ; _] @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[0,3,"Redex"]],"id":113,"label":"h_1"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"]],"id":114,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":115,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,29,"Redex"]],"id":116,"label":"List.rev (helper ([] , [[_ ; _] ; 0]))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,161,"Redex"]],"id":117,"label":"let rest' =\n  0 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":118,"label":"0 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,18,"Redex"]],"id":119,"label":"let rest' =\n  0 :: (List.filter f []) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":120,"label":"0 :: (List.filter f [])"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":121,"label":"(@)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":122,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":123,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":126,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[18,5,"Redex"]],"id":127,"label":"helper ([_ ; _] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0]"]],"annots":[[11,5,"Redex"]],"id":128,"label":"([_ ; _] , rest')"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[[0,30,"Redex"]],"id":129,"label":"removeDuplicates [[_ ; _] ; 0]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_ ; _] ; 0]"]],"annots":[[0,360,"Redex"]],"id":130,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[8,5,"Redex"]],"id":131,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":132,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[1,5,"Redex"]],"id":133,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["List.rev","List.rev"]],"annots":[[23,1,"Redex"]],"id":134,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[13,1,"Redex"]],"id":135,"label":"helper ([] , l)"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":136,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[["xs_1","[]"]],"annots":[[0,4,"Redex"]],"id":137,"label":"xs_1"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[14,1,"Redex"]],"id":138,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"]],"annots":[[5,1,"Redex"]],"id":140,"label":"[] @ h"},{"span":null,"env":[],"annots":[],"id":143,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"]],"id":144,"label":"y :: (List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":145,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,16,"Redex"]],"id":146,"label":"List.filter f []"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[18,1,"Redex"]],"id":147,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,9,"Redex"]],"id":148,"label":"let rest' =\n  if (0 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,263,"Redex"]],"id":149,"label":"match [[_ ; _] ; 0] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":150,"label":"f 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":151,"label":"f"},{"span":null,"env":[["xs","[0]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[20,2,"Redex"]],"id":152,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":153,"label":"0 mod 2"},{"span":null,"env":[],"annots":[],"id":154,"label":"0"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":155,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":156,"label":"rest'"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":157,"label":"fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,360,"Redex"]],"id":158,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' =\n                   (let is_in =\n                      fun i -> (i mod 2) = 0 in\n                    List.filter is_in t) in\n                 helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":159,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":160,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[38,1,"Redex"]],"id":161,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,9,"Redex"]],"id":162,"label":"List.rev (let rest' =\n            if (0 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":163,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":164,"label":"0"},{"span":null,"env":[],"annots":[],"id":165,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"]],"id":166,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[9,24,"Redex"]],"id":167,"label":"List.rev (helper ([_ ; _] , [0]))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":168,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":169,"label":"(i mod 2) = 0"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[_ ; _]"]],"annots":[],"id":170,"label":"seen_1"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":171,"label":"(0 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":172,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[9,53,"Redex"]],"id":173,"label":"List.rev (let rest' = [0] in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"],["rest'","[0]"]],"annots":[[18,5,"Redex"]],"id":174,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":175,"label":"rest'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":176,"label":"(0 , match [] with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":177,"label":"rest'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":178,"label":"(y , List.filter f_1 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":179,"label":"List.filter f_1 ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[22,3,"Redex"]],"id":180,"label":"let seen' = [_ ; _] @ h_1 in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":181,"label":"let seen' = seen_1 @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[],"id":182,"label":"seen_1 @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"]],"annots":[[0,1,"Redex"]],"id":183,"label":"h"},{"span":null,"env":[],"annots":[],"id":184,"label":"[_ ; _]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":185,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":186,"label":"f_1"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"],["h_1","0"]],"annots":[[0,6,"Redex"]],"id":187,"label":"seen_1 @ h_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":188,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":189,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":190,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":191,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":192,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[0,22,"Redex"]],"id":195,"label":"helper ([_ ; _] , [0])"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":196,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":197,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":198,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":199,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":200,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":201,"label":"seen"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":203,"label":"f"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":204,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":205,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":206,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":207,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":208,"label":"2"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":209,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0]"]],"annots":[[0,59,"Redex"]],"id":211,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":213,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":214,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":215,"label":"2"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":216,"label":"y"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,12,"Redex"]],"id":217,"label":"List.rev (let seen' =\n            [] @ [_ ; _] in\n          let rest' = (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in\n                                   t) in helper (seen' , rest'))"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[22,141,"Redex"]],"id":218,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,1,"Redex"]],"id":219,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[46,4,"Redex"]],"id":220,"label":"List.rev (let rest' =\n            0 :: (match xs_1 with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,255,"Redex"]],"id":221,"label":"List.rev (let rest' =\n            0 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":222,"label":"h"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":223,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":224,"label":"i"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[1,1,"Redex"]],"id":225,"label":"(y , List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[20,2,"Redex"]],"id":226,"label":"0 :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[19,2,"Redex"]],"id":227,"label":"(0 , List.filter f ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":228,"label":"let rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,112,"Redex"]],"id":229,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":230,"label":"[_ ; _]"},{"span":null,"env":[],"annots":[],"id":231,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,3,"Redex"]],"id":232,"label":"List.rev (let rest' =\n            if f 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,3,"Redex"]],"id":233,"label":"let rest' =\n  if f 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":234,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":235,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,2,"Redex"]],"id":236,"label":"let rest' =\n  0 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":237,"label":"helper"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":238,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":239,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[54,2,"Redex"]],"id":240,"label":"List.rev (let rest' =\n            0 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":241,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"],["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[39,1,"Redex"]],"id":242,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"],["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[17,1,"Redex"]],"id":243,"label":"let seen' = [] @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,12,"Redex"]],"id":244,"label":"let seen' = [] @ [_ ; _] in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":245,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,11,"Redex"]],"id":246,"label":"let seen' = [_ ; _] @ 0 in\nlet rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t_1) in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":247,"label":"[_ ; _]"},{"span":null,"env":[],"annots":[],"id":248,"label":"_"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":249,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":250,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _]"],["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[34,4,"Redex"]],"id":251,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' =\n            (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"],["h","[_ ; _]"],["t","[0]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[12,4,"Redex"]],"id":252,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":254,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":255,"label":"List.filter"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0]"]],"annots":[[0,59,"Redex"]],"id":256,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":257,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0]"]],"annots":[[0,1,"Redex"]],"id":258,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[12,4,"Redex"]],"id":259,"label":"let seen' = seen @ h in\nlet rest' =\n  (let is_in =\n     fun i -> (i mod 2) = 0 in\n   List.filter is_in t) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":261,"label":"helper"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _] ; 0]"]],"annots":[[0,4,"Redex"]],"id":262,"label":"rest"},{"span":null,"env":[],"annots":[],"id":263,"label":"[[_ ; _] ; 0]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":264,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0]"]],"annots":[[0,1,"Redex"]],"id":265,"label":"t"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"]],"annots":[[0,6,"Redex"]],"id":266,"label":"rest_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":267,"label":"t"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":268,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":269,"label":"[[_ ; _] ; 0]"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,11,"Redex"]],"id":270,"label":"[_ ; _] @ 0"},{"span":null,"env":[],"annots":[],"id":271,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":272,"label":"(@)"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,481,"Redex"]],"id":273,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' =\n                             (let is_in =\n                                fun i -> (i mod 2) = 0 in\n                              List.filter is_in t) in\n                           helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":274,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":275,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,1,"Redex"]],"id":276,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"],["rest'","[0]"]],"annots":[[1,5,"Redex"]],"id":277,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0]"]],"annots":[[0,5,"Redex"]],"id":278,"label":"rest'"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0]"]],"annots":[[0,1,"Redex"]],"id":279,"label":"t"},{"span":null,"env":[],"annots":[],"id":280,"label":"[0]"},{"span":null,"env":[["ys","[]"]],"annots":[[0,2,"Redex"]],"id":281,"label":"ys"},{"span":null,"env":[],"annots":[],"id":282,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":283,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":284,"label":"is_in"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,58,"Redex"]],"id":285,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,12,"Redex"]],"id":286,"label":"[] @ [_ ; _]"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":287,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":288,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":289,"label":"rest'"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":290,"label":"y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":291,"label":"f y"},{"span":null,"env":[],"annots":[],"id":292,"label":"List.filter"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[],"id":293,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":294,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":296,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0]"]],"annots":[[18,1,"Redex"]],"id":297,"label":"List.filter is_in t"},{"span":null,"env":[],"annots":[],"id":298,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,1,"Redex"]],"id":299,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[18,1,"Redex"]],"id":300,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":301,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 0]"]],"annots":[[6,1,"Redex"]],"id":302,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 0]"]],"annots":[[0,1,"Redex"]],"id":303,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 0]"]],"annots":[[13,1,"Redex"]],"id":304,"label":"helper ([] , l)"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":305,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":306,"label":"(0 , [])"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,112,"Redex"]],"id":307,"label":"let rest' = (let is_in =\n               fun i -> (i mod 2) = 0 in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":308,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":309,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["l","[[_ ; _] ; 0]"]],"annots":[[23,1,"Redex"]],"id":310,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 0]"]],"annots":[[23,1,"Redex"]],"id":312,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":313,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' =\n               (let is_in =\n                  fun i -> (i mod 2) = 0 in\n                List.filter is_in t) in\n             helper (seen' , rest'))"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":314,"label":"0 :: (match xs_1 with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"],["rest'","[0]"]],"annots":[[8,5,"Redex"]],"id":315,"label":"helper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":316,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":317,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":319,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":320,"label":"0"},{"span":null,"env":[],"annots":[],"id":323,"label":"0"},{"span":null,"env":[],"annots":[],"id":324,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":325,"label":"[]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,18,"Redex"]],"id":326,"label":"List.rev (let rest' =\n            0 :: (List.filter f []) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":327,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":328,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":329,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":330,"label":"[]"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":331,"label":"rest"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"]],"id":332,"label":"seen_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":333,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[],"id":334,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[[8,5,"Redex"]],"id":335,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[1,5,"Redex"]],"id":336,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":337,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":338,"label":"helper"},{"span":null,"env":[],"annots":[],"id":339,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":340,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":341,"label":"i"},{"span":null,"env":[],"annots":[],"id":342,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":343,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"]],"id":344,"label":"seen_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":345,"label":"h"},{"span":null,"env":[["xs","[0]"]],"annots":[[0,2,"Redex"]],"id":346,"label":"xs"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":347,"label":"seen"},{"span":null,"env":[],"annots":[],"id":348,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":349,"label":"rest'"},{"span":null,"env":[["xs_1","[]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[26,4,"Redex"]],"id":350,"label":"let rest' =\n  0 :: (match xs_1 with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":351,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":352,"label":"i"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,111,"Redex"]],"id":353,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":354,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[],"id":355,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":356,"label":"List.rev"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":357,"label":"h"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":358,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":359,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":360,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":361,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":362,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":363,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":364,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":365,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[0,5,"Redex"]],"id":366,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":367,"label":"seen'"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":368,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":369,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":370,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":371,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":372,"label":"[[_ ; _] ; 0]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":373,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":374,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":375,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":376,"label":"i"},{"span":null,"env":[],"annots":[],"id":377,"label":"true"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":378,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":379,"label":"List.rev"},{"span":null,"env":[["removeDuplicates","fun l ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      seen @ h in\n                    let rest' =\n                      (let is_in =\n                         fun i -> (i mod 2) = 0 in\n                       List.filter is_in t) in\n                    helper (seen' , rest')) in\n   List.rev (helper ([] , l)))"]],"annots":[],"id":380,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":381,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":382,"label":"0"},{"span":null,"env":[],"annots":[],"id":383,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":384,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[[0,2,"Redex"]],"id":385,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[],"id":386,"label":"is_in"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[[0,22,"Redex"]],"id":387,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":388,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":389,"label":"0"},{"span":null,"env":[],"annots":[],"id":390,"label":"_"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' =\n                 (let is_in =\n                    fun i -> (i mod 2) = 0 in\n                  List.filter is_in t) in\n               helper (seen' , rest'))"]],"annots":[],"id":391,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":392,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":393,"label":"t"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":394,"label":"ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":395,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":396,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[],"id":397,"label":"seen"}]}