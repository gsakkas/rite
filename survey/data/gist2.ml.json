{"root":144,"result":"stuck","reason":"Type error : could not match int with 't86 list","bad":294,"stuck":317,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":400,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":329,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":272,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":332,"from":5,"label":"SubTerm 2"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":416,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":490,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":357,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":157,"from":11,"label":"SubTerm 2"},{"arrows":"to","to":157,"from":11,"label":"StepsTo BoringStep"},{"arrows":"to","to":446,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":413,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":22,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":397,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":18,"label":"StepsTo PrimStep"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":19,"label":"StepsTo PrimStep"},{"arrows":"to","to":22,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":330,"from":20,"label":"SubTerm 2"},{"arrows":"to","to":454,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":353,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":479,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":25,"label":"StepsTo BoringStep"},{"arrows":"to","to":22,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":425,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":170,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":171,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":31,"label":"StepsTo CallStep"},{"arrows":"to","to":73,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":159,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":178,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":188,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":350,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":262,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":267,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":38,"label":"StepsTo CallStep"},{"arrows":"to","to":40,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":241,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":42,"label":"StepsTo BoringStep"},{"arrows":"to","to":44,"from":43,"label":"SubTerm 2"},{"arrows":"to","to":154,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":363,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":44,"label":"SubTerm 2"},{"arrows":"to","to":239,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":366,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":331,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":456,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":259,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":48,"label":"StepsTo ReturnStep"},{"arrows":"to","to":181,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":297,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":470,"from":49,"label":"StepsTo ReturnStep"},{"arrows":"to","to":42,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":54,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":55,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":119,"from":55,"label":"StepsTo CallStep"},{"arrows":"to","to":170,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":56,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":56,"label":"StepsTo PrimStep"},{"arrows":"to","to":203,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":230,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":198,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":372,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":313,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":98,"from":64,"label":"StepsTo CallStep"},{"arrows":"to","to":322,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":66,"label":"SubTerm 2"},{"arrows":"to","to":100,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":438,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":68,"label":"StepsTo PrimStep"},{"arrows":"to","to":236,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":451,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":446,"from":69,"label":"StepsTo ReturnStep"},{"arrows":"to","to":451,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":70,"label":"StepsTo CallStep"},{"arrows":"to","to":188,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":151,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":148,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":449,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":75,"label":"StepsTo BoringStep"},{"arrows":"to","to":369,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":76,"label":"StepsTo PrimStep"},{"arrows":"to","to":306,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":77,"label":"StepsTo ReturnStep"},{"arrows":"to","to":296,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":405,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":423,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":98,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":82,"label":"StepsTo BoringStep"},{"arrows":"to","to":168,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":85,"label":"StepsTo BoringStep"},{"arrows":"to","to":134,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":424,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":88,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":433,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":89,"label":"StepsTo BoringStep"},{"arrows":"to","to":157,"from":89,"label":"SubTerm 2"},{"arrows":"to","to":370,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":157,"from":90,"label":"SubTerm 2"},{"arrows":"to","to":277,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":90,"label":"StepsTo CallStep"},{"arrows":"to","to":92,"from":91,"label":"SubTerm 2"},{"arrows":"to","to":240,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":437,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":383,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":64,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":322,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":322,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":168,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":193,"from":98,"label":"SubTerm 2"},{"arrows":"to","to":323,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":426,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":344,"from":102,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":106,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":345,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":461,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":328,"from":107,"label":"StepsTo BoringStep"},{"arrows":"to","to":79,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":108,"label":"StepsTo BoringStep"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":447,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":399,"from":111,"label":"StepsTo CallStep"},{"arrows":"to","to":237,"from":112,"label":"StepsTo CallStep"},{"arrows":"to","to":329,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":113,"label":"StepsTo CallStep"},{"arrows":"to","to":335,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":295,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":115,"label":"StepsTo ReturnStep"},{"arrows":"to","to":302,"from":115,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":435,"from":117,"label":"SubTerm 2"},{"arrows":"to","to":492,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":119,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":119,"label":"StepsTo BoringStep"},{"arrows":"to","to":205,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":315,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":218,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":123,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":453,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":491,"from":122,"label":"SubTerm 2"},{"arrows":"to","to":53,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":127,"label":"StepsTo CallStep"},{"arrows":"to","to":73,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":287,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":291,"from":128,"label":"StepsTo ReturnStep"},{"arrows":"to","to":8,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":131,"label":"SubTerm 2"},{"arrows":"to","to":54,"from":131,"label":"StepsTo BoringStep"},{"arrows":"to","to":182,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":132,"label":"SubTerm 2"},{"arrows":"to","to":131,"from":132,"label":"StepsTo BoringStep"},{"arrows":"to","to":182,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":355,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":215,"from":133,"label":"StepsTo CallStep"},{"arrows":"to","to":135,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":391,"from":134,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":136,"label":"StepsTo BoringStep"},{"arrows":"to","to":439,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":137,"label":"SubTerm 1"},{"arrows":"to","to":167,"from":137,"label":"StepsTo BoringStep"},{"arrows":"to","to":139,"from":138,"label":"SubTerm 2"},{"arrows":"to","to":158,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":299,"from":138,"label":"StepsTo CallStep"},{"arrows":"to","to":371,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":141,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":381,"from":140,"label":"StepsTo BoringStep"},{"arrows":"to","to":0,"from":141,"label":"SubTerm 2"},{"arrows":"to","to":245,"from":141,"label":"StepsTo BoringStep"},{"arrows":"to","to":278,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":468,"from":141,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":426,"from":142,"label":"StepsTo CallStep"},{"arrows":"to","to":70,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":395,"from":143,"label":"StepsTo CallStep"},{"arrows":"to","to":145,"from":144,"label":"StepsTo CallStep"},{"arrows":"to","to":466,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":477,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":292,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":389,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":390,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":450,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":457,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":458,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":473,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":421,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":152,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":151,"label":"StepsTo BoringStep"},{"arrows":"to","to":367,"from":151,"label":"SubTerm 2"},{"arrows":"to","to":462,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":378,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":36,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":281,"from":153,"label":"StepsTo BoringStep"},{"arrows":"to","to":47,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":157,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":196,"from":157,"label":"SubTerm 2"},{"arrows":"to","to":371,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":159,"label":"StepsTo CallStep"},{"arrows":"to","to":160,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":396,"from":159,"label":"SubTerm 2"},{"arrows":"to","to":431,"from":159,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":161,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":254,"from":162,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":163,"label":"SubTerm 1"},{"arrows":"to","to":164,"from":163,"label":"StepsTo BoringStep"},{"arrows":"to","to":56,"from":164,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":356,"from":164,"label":"StepsTo PrimStep"},{"arrows":"to","to":3,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":166,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":281,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":167,"label":"StepsTo BoringStep"},{"arrows":"to","to":75,"from":168,"label":"StepsTo BoringStep"},{"arrows":"to","to":99,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":193,"from":168,"label":"SubTerm 2"},{"arrows":"to","to":324,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":169,"label":"StepsTo ReturnStep"},{"arrows":"to","to":53,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":301,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":170,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":170,"label":"SubTerm 0"},{"arrows":"to","to":205,"from":170,"label":"StepsTo CallStep"},{"arrows":"to","to":66,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":173,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":253,"from":174,"label":"StepsTo ReturnStep"},{"arrows":"to","to":192,"from":175,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":175,"label":"SubTerm 2"},{"arrows":"to","to":351,"from":175,"label":"StepsTo ReturnStep"},{"arrows":"to","to":464,"from":175,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":176,"label":"StepsTo ReturnStep"},{"arrows":"to","to":393,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":346,"from":178,"label":"StepsTo BoringStep"},{"arrows":"to","to":272,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":327,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":179,"label":"StepsTo BoringStep"},{"arrows":"to","to":181,"from":180,"label":"StepsTo PrimStep"},{"arrows":"to","to":223,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":429,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":187,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":417,"from":186,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":188,"label":"StepsTo CallStep"},{"arrows":"to","to":171,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":189,"from":188,"label":"SubTerm 2"},{"arrows":"to","to":190,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":192,"from":191,"label":"StepsTo BoringStep"},{"arrows":"to","to":232,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":249,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":194,"label":"StepsTo PrimStep"},{"arrows":"to","to":77,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":287,"from":195,"label":"StepsTo ReturnStep"},{"arrows":"to","to":139,"from":196,"label":"StepsTo BoringStep"},{"arrows":"to","to":199,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":478,"from":199,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":399,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":415,"from":200,"label":"StepsTo BoringStep"},{"arrows":"to","to":202,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":307,"from":201,"label":"SubTerm 2"},{"arrows":"to","to":339,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":397,"from":201,"label":"StepsTo PrimStep"},{"arrows":"to","to":49,"from":203,"label":"StepsTo PrimStep"},{"arrows":"to","to":180,"from":203,"label":"SubTerm 0"},{"arrows":"to","to":297,"from":203,"label":"SubTerm 1"},{"arrows":"to","to":201,"from":204,"label":"StepsTo BoringStep"},{"arrows":"to","to":202,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":308,"from":204,"label":"SubTerm 2"},{"arrows":"to","to":339,"from":204,"label":"SubTerm 1"},{"arrows":"to","to":203,"from":205,"label":"StepsTo BoringStep"},{"arrows":"to","to":222,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":297,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":174,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":206,"label":"StepsTo ReturnStep"},{"arrows":"to","to":6,"from":208,"label":"StepsTo BoringStep"},{"arrows":"to","to":209,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":416,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":209,"label":"StepsTo BoringStep"},{"arrows":"to","to":211,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":362,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":481,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":489,"from":211,"label":"SubTerm 2"},{"arrows":"to","to":53,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":212,"label":"StepsTo ReturnStep"},{"arrows":"to","to":216,"from":212,"label":"SubTerm 1"},{"arrows":"to","to":214,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":362,"from":213,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":215,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":302,"from":216,"label":"StepsTo ReturnStep"},{"arrows":"to","to":253,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":217,"label":"StepsTo ReturnStep"},{"arrows":"to","to":73,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":218,"label":"StepsTo BoringStep"},{"arrows":"to","to":275,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":427,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":222,"label":"StepsTo BoringStep"},{"arrows":"to","to":223,"from":222,"label":"SubTerm 1"},{"arrows":"to","to":428,"from":222,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":226,"label":"StepsTo BoringStep"},{"arrows":"to","to":87,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":451,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":113,"from":227,"label":"StepsTo BoringStep"},{"arrows":"to","to":228,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":228,"label":"StepsTo BoringStep"},{"arrows":"to","to":231,"from":230,"label":"SubTerm 1"},{"arrows":"to","to":472,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":261,"from":232,"label":"SubTerm 2"},{"arrows":"to","to":467,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":471,"from":234,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":236,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":236,"label":"StepsTo PrimStep"},{"arrows":"to","to":434,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":237,"label":"StepsTo BoringStep"},{"arrows":"to","to":238,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":238,"label":"StepsTo BoringStep"},{"arrows":"to","to":282,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":242,"from":241,"label":"SubTerm 1"},{"arrows":"to","to":469,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":474,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":245,"label":"SubTerm 2"},{"arrows":"to","to":4,"from":245,"label":"StepsTo BoringStep"},{"arrows":"to","to":246,"from":245,"label":"SubTerm 0"},{"arrows":"to","to":468,"from":245,"label":"SubTerm 1"},{"arrows":"to","to":465,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":248,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":248,"label":"SubTerm 1"},{"arrows":"to","to":333,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":402,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":380,"from":252,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":351,"from":253,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":290,"from":254,"label":"StepsTo BoringStep"},{"arrows":"to","to":346,"from":254,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":255,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":255,"label":"SubTerm 0"},{"arrows":"to","to":141,"from":255,"label":"StepsTo CallStep"},{"arrows":"to","to":258,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":422,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":260,"label":"StepsTo BoringStep"},{"arrows":"to","to":367,"from":260,"label":"SubTerm 2"},{"arrows":"to","to":378,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":462,"from":260,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":268,"from":262,"label":"StepsTo BoringStep"},{"arrows":"to","to":2,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":263,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":252,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":342,"from":266,"label":"StepsTo BoringStep"},{"arrows":"to","to":143,"from":267,"label":"StepsTo BoringStep"},{"arrows":"to","to":268,"from":267,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":268,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":448,"from":270,"label":"SubTerm 2"},{"arrows":"to","to":459,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":298,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":386,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":220,"from":273,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":273,"label":"SubTerm 1"},{"arrows":"to","to":276,"from":275,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":277,"label":"StepsTo CallStep"},{"arrows":"to","to":371,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":442,"from":277,"label":"SubTerm 1"},{"arrows":"to","to":246,"from":278,"label":"StepsTo BoringStep"},{"arrows":"to","to":257,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":280,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":281,"label":"SubTerm 0"},{"arrows":"to","to":142,"from":281,"label":"StepsTo BoringStep"},{"arrows":"to","to":267,"from":281,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":282,"label":"SubTerm 1"},{"arrows":"to","to":157,"from":282,"label":"SubTerm 2"},{"arrows":"to","to":226,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":306,"from":282,"label":"StepsTo BoringStep"},{"arrows":"to","to":66,"from":283,"label":"SubTerm 2"},{"arrows":"to","to":284,"from":283,"label":"SubTerm 0"},{"arrows":"to","to":455,"from":283,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":284,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":284,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":285,"label":"StepsTo BoringStep"},{"arrows":"to","to":388,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":227,"from":287,"label":"StepsTo BoringStep"},{"arrows":"to","to":289,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":432,"from":288,"label":"SubTerm 2"},{"arrows":"to","to":494,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":290,"label":"SubTerm 0"},{"arrows":"to","to":347,"from":290,"label":"SubTerm 1"},{"arrows":"to","to":394,"from":290,"label":"StepsTo CallStep"},{"arrows":"to","to":73,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":287,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":425,"from":291,"label":"StepsTo BoringStep"},{"arrows":"to","to":392,"from":292,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":293,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":293,"label":"SubTerm 1"},{"arrows":"to","to":410,"from":293,"label":"StepsTo CallStep"},{"arrows":"to","to":269,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":403,"from":294,"label":"SubTerm 2"},{"arrows":"to","to":3,"from":295,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":295,"label":"StepsTo BoringStep"},{"arrows":"to","to":299,"from":295,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":296,"label":"StepsTo ReturnStep"},{"arrows":"to","to":63,"from":296,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":296,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":296,"label":"SubTerm 2"},{"arrows":"to","to":270,"from":298,"label":"SubTerm 0"},{"arrows":"to","to":420,"from":298,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":299,"label":"StepsTo BoringStep"},{"arrows":"to","to":191,"from":299,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":299,"label":"SubTerm 2"},{"arrows":"to","to":464,"from":299,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":300,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":300,"label":"SubTerm 1"},{"arrows":"to","to":301,"from":300,"label":"StepsTo PrimStep"},{"arrows":"to","to":73,"from":301,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":301,"label":"StepsTo PrimStep"},{"arrows":"to","to":195,"from":301,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":302,"label":"SubTerm 1"},{"arrows":"to","to":218,"from":302,"label":"StepsTo ReturnStep"},{"arrows":"to","to":304,"from":303,"label":"SubTerm 1"},{"arrows":"to","to":385,"from":303,"label":"SubTerm 0"},{"arrows":"to","to":430,"from":303,"label":"SubTerm 2"},{"arrows":"to","to":63,"from":306,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":306,"label":"SubTerm 2"},{"arrows":"to","to":296,"from":306,"label":"StepsTo PrimStep"},{"arrows":"to","to":307,"from":308,"label":"StepsTo BoringStep"},{"arrows":"to","to":157,"from":313,"label":"SubTerm 1"},{"arrows":"to","to":411,"from":313,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":315,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":315,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":316,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":377,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":320,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":320,"label":"SubTerm 1"},{"arrows":"to","to":200,"from":320,"label":"StepsTo CallStep"},{"arrows":"to","to":61,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":324,"from":323,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":326,"label":"StepsTo PrimStep"},{"arrows":"to","to":356,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":269,"from":327,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":327,"label":"SubTerm 1"},{"arrows":"to","to":294,"from":327,"label":"StepsTo BoringStep"},{"arrows":"to","to":332,"from":327,"label":"SubTerm 2"},{"arrows":"to","to":73,"from":328,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":328,"label":"StepsTo BoringStep"},{"arrows":"to","to":263,"from":328,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":329,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":329,"label":"StepsTo CallStep"},{"arrows":"to","to":403,"from":332,"label":"StepsTo BoringStep"},{"arrows":"to","to":303,"from":333,"label":"SubTerm 0"},{"arrows":"to","to":463,"from":333,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":335,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":335,"label":"SubTerm 1"},{"arrows":"to","to":295,"from":335,"label":"StepsTo CallStep"},{"arrows":"to","to":185,"from":337,"label":"SubTerm 0"},{"arrows":"to","to":185,"from":337,"label":"SubTerm 0"},{"arrows":"to","to":339,"from":338,"label":"StepsTo BoringStep"},{"arrows":"to","to":45,"from":340,"label":"SubTerm 0"},{"arrows":"to","to":341,"from":340,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":341,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":342,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":342,"label":"SubTerm 0"},{"arrows":"to","to":380,"from":342,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":344,"label":"SubTerm 0"},{"arrows":"to","to":320,"from":344,"label":"StepsTo BoringStep"},{"arrows":"to","to":328,"from":344,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":346,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":346,"label":"SubTerm 0"},{"arrows":"to","to":347,"from":346,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":347,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":347,"label":"StepsTo CallStep"},{"arrows":"to","to":53,"from":349,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":349,"label":"StepsTo CallStep"},{"arrows":"to","to":142,"from":349,"label":"SubTerm 1"},{"arrows":"to","to":189,"from":350,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":352,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":352,"label":"StepsTo BoringStep"},{"arrows":"to","to":36,"from":352,"label":"SubTerm 1"},{"arrows":"to","to":470,"from":352,"label":"SubTerm 0"},{"arrows":"to","to":354,"from":353,"label":"SubTerm 1"},{"arrows":"to","to":440,"from":353,"label":"SubTerm 0"},{"arrows":"to","to":487,"from":353,"label":"SubTerm 2"},{"arrows":"to","to":8,"from":355,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":356,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":356,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":356,"label":"StepsTo PrimStep"},{"arrows":"to","to":91,"from":358,"label":"SubTerm 0"},{"arrows":"to","to":360,"from":359,"label":"SubTerm 1"},{"arrows":"to","to":460,"from":359,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":363,"label":"SubTerm 0"},{"arrows":"to","to":259,"from":363,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":367,"label":"SubTerm 2"},{"arrows":"to","to":213,"from":367,"label":"SubTerm 0"},{"arrows":"to","to":401,"from":367,"label":"SubTerm 1"},{"arrows":"to","to":202,"from":369,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":369,"label":"StepsTo BoringStep"},{"arrows":"to","to":308,"from":369,"label":"SubTerm 2"},{"arrows":"to","to":338,"from":369,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":370,"label":"StepsTo BoringStep"},{"arrows":"to","to":371,"from":370,"label":"SubTerm 0"},{"arrows":"to","to":411,"from":370,"label":"SubTerm 1"},{"arrows":"to","to":373,"from":372,"label":"SubTerm 1"},{"arrows":"to","to":419,"from":372,"label":"SubTerm 0"},{"arrows":"to","to":488,"from":372,"label":"SubTerm 2"},{"arrows":"to","to":375,"from":374,"label":"SubTerm 1"},{"arrows":"to","to":484,"from":374,"label":"SubTerm 0"},{"arrows":"to","to":374,"from":376,"label":"SubTerm 1"},{"arrows":"to","to":387,"from":376,"label":"SubTerm 0"},{"arrows":"to","to":272,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":294,"from":377,"label":"SubTerm 1"},{"arrows":"to","to":379,"from":378,"label":"SubTerm 0"},{"arrows":"to","to":159,"from":380,"label":"StepsTo BoringStep"},{"arrows":"to","to":160,"from":380,"label":"SubTerm 1"},{"arrows":"to","to":412,"from":380,"label":"SubTerm 2"},{"arrows":"to","to":431,"from":380,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":444,"from":381,"label":"StepsTo BoringStep"},{"arrows":"to","to":146,"from":383,"label":"SubTerm 0"},{"arrows":"to","to":340,"from":383,"label":"SubTerm 1"},{"arrows":"to","to":408,"from":386,"label":"SubTerm 1"},{"arrows":"to","to":441,"from":386,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":389,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":389,"label":"StepsTo BoringStep"},{"arrows":"to","to":376,"from":390,"label":"SubTerm 1"},{"arrows":"to","to":452,"from":390,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":391,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":391,"label":"SubTerm 0"},{"arrows":"to","to":255,"from":391,"label":"StepsTo BoringStep"},{"arrows":"to","to":321,"from":392,"label":"SubTerm 2"},{"arrows":"to","to":418,"from":392,"label":"SubTerm 0"},{"arrows":"to","to":493,"from":392,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":393,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":393,"label":"SubTerm 1"},{"arrows":"to","to":439,"from":393,"label":"StepsTo ReturnStep"},{"arrows":"to","to":53,"from":394,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":394,"label":"SubTerm 1"},{"arrows":"to","to":414,"from":394,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":395,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":395,"label":"StepsTo BoringStep"},{"arrows":"to","to":364,"from":396,"label":"SubTerm 0"},{"arrows":"to","to":443,"from":396,"label":"SubTerm 1"},{"arrows":"to","to":398,"from":397,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":399,"label":"SubTerm 0"},{"arrows":"to","to":237,"from":399,"label":"SubTerm 1"},{"arrows":"to","to":300,"from":399,"label":"StepsTo BoringStep"},{"arrows":"to","to":210,"from":401,"label":"SubTerm 0"},{"arrows":"to","to":359,"from":402,"label":"SubTerm 1"},{"arrows":"to","to":486,"from":402,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":404,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":404,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":404,"label":"StepsTo BoringStep"},{"arrows":"to","to":406,"from":405,"label":"SubTerm 1"},{"arrows":"to","to":475,"from":405,"label":"SubTerm 0"},{"arrows":"to","to":409,"from":408,"label":"SubTerm 1"},{"arrows":"to","to":483,"from":408,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":410,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":410,"label":"StepsTo BoringStep"},{"arrows":"to","to":215,"from":410,"label":"SubTerm 1"},{"arrows":"to","to":442,"from":411,"label":"StepsTo BoringStep"},{"arrows":"to","to":396,"from":412,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":414,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":414,"label":"SubTerm 1"},{"arrows":"to","to":326,"from":414,"label":"StepsTo PrimStep"},{"arrows":"to","to":53,"from":415,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":415,"label":"StepsTo PrimStep"},{"arrows":"to","to":300,"from":415,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":416,"label":"StepsTo BoringStep"},{"arrows":"to","to":476,"from":420,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":424,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":424,"label":"StepsTo CallStep"},{"arrows":"to","to":255,"from":424,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":425,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":425,"label":"StepsTo BoringStep"},{"arrows":"to","to":227,"from":425,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":426,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":426,"label":"StepsTo BoringStep"},{"arrows":"to","to":395,"from":426,"label":"SubTerm 1"},{"arrows":"to","to":429,"from":428,"label":"StepsTo BoringStep"},{"arrows":"to","to":434,"from":433,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":439,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":439,"label":"StepsTo BoringStep"},{"arrows":"to","to":352,"from":439,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":444,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":444,"label":"SubTerm 0"},{"arrows":"to","to":404,"from":444,"label":"StepsTo BoringStep"},{"arrows":"to","to":172,"from":455,"label":"SubTerm 0"},{"arrows":"to","to":279,"from":463,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":476,"label":"SubTerm 0"},{"arrows":"to","to":485,"from":476,"label":"SubTerm 1"},{"arrows":"to","to":480,"from":479,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":480,"label":"SubTerm 0"},{"arrows":"to","to":482,"from":480,"label":"SubTerm 1"}],"nodes":[{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,1,"Redex"]],"id":0,"label":"let seen' = seen_1 @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"],[9,1,"Redex"]],"id":1,"label":"seen_1 @ h"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"]],"annots":[[12,3,"Redex"]],"id":2,"label":"(0 , if f_1 y_1\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[],"annots":[],"id":3,"label":"0"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,3,"Redex"]],"id":4,"label":"let seen' = seen_1 @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_]"],["h_1","0"]],"annots":[[0,6,"Redex"],[9,3,"Redex"]],"id":5,"label":"seen_1 @ h_1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[0]"]],"annots":[[7,5,"Redex"]],"id":6,"label":"([_] , rest')"},{"span":null,"env":[],"annots":[],"id":7,"label":"[_]"},{"span":null,"env":[],"annots":[],"id":8,"label":"[0 ; 1]"},{"span":null,"env":[],"annots":[],"id":9,"label":"1"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[0,94,"Redex"]],"id":11,"label":"if false\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":12,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":13,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,206,"Redex"]],"id":16,"label":"List.rev (let seen' = [_] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,164,"Redex"]],"id":17,"label":"let seen' = [_] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,8,"Redex"]],"id":18,"label":"List.rev (let seen' =\n            [] @ [_] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,8,"Redex"]],"id":19,"label":"let seen' = [] @ [_] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 1]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":20,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":21,"label":"is_in"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":22,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 1]"]],"annots":[[0,59,"Redex"]],"id":23,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","[_]"],["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"]],"id":24,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","[_]"],["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"]],"id":25,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,150,"Redex"]],"id":26,"label":"List.rev (let rest' =\n            0 :: (if false\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[56,4,"Redex"]],"id":27,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"]],"annots":[[2,1,"Redex"]],"id":28,"label":"f y"},{"span":null,"env":[["y","0"]],"annots":[[0,1,"Redex"]],"id":29,"label":"y"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,49,"Redex"]],"id":31,"label":"let rest' = List.filter is_in\n                        [0 ; 1] in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[0 ; 1]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[20,2,"Redex"]],"id":32,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[14,2,"Redex"]],"id":33,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":34,"label":"List.filter"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":36,"label":"y :: (List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[52,1,"Redex"]],"id":37,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,25,"Redex"]],"id":38,"label":"List.rev (let rest' =\n            List.filter is_in [0 ; 1] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":39,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":40,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_] ; 0 ; 1]"]],"annots":[[0,1,"Redex"]],"id":42,"label":"l"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":43,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":44,"label":"List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":45,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":46,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":47,"label":"(y , List.filter f ys)"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[3,5,"Redex"]],"id":48,"label":"if 0 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":49,"label":"0 = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_] ; 0 ; 1]"]],"annots":[[6,1,"Redex"]],"id":51,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":53,"label":"List.rev"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[1]"]],"annots":[[5,1,"Redex"]],"id":54,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[1]"]],"annots":[[3,3,"Redex"]],"id":55,"label":"if f 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[3,9,"Redex"]],"id":56,"label":"if (0 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":57,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":58,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"]],"id":61,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":62,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":63,"label":"y_1 :: (List.filter f_1 ys_1)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,27,"Redex"]],"id":64,"label":"helper ([] , [[_] ; 0 ; 1])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":65,"label":"([] , [[_] ; 0 ; 1])"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":66,"label":"List.filter f_2 ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":67,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":68,"label":"(1 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":69,"label":"1 = 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,17,"Redex"]],"id":70,"label":"(0 , List.filter f [1])"},{"span":null,"env":[["xs_1","[1]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":71,"label":"(0 , match xs_1 with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":73,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","[_]"],["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"]],"id":74,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","[_]"],["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":75,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[8,9,"Redex"]],"id":76,"label":"(0 , if (1 mod 2) = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[8,5,"Redex"]],"id":77,"label":"(0 , if 1 = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,148,"Redex"]],"id":79,"label":"(0 , match [1] with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":80,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[_] ; 0 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"]],"id":81,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,399,"Redex"]],"id":82,"label":"List.rev (match [[_] ; 0 ; 1] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"],["rest'","[0]"]],"annots":[[18,5,"Redex"],[26,5,"Redex"]],"id":85,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[24,5,"Redex"]],"id":86,"label":"List.rev (helper ([_] , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":87,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":88,"label":"2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"]],"annots":[[7,3,"Redex"]],"id":89,"label":"if f_1 y_1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"]],"annots":[[3,5,"Redex"]],"id":90,"label":"if f_1 1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"]],"id":91,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":92,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":94,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":95,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_] ; 0 ; 1]"]],"annots":[[13,1,"Redex"]],"id":97,"label":"helper ([] , l)"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[_] ; 0 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"]],"id":98,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":99,"label":"seen"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":100,"label":"f_2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_1","[1]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[46,4,"Redex"]],"id":101,"label":"List.rev (let rest' =\n            0 :: (match xs_1 with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,256,"Redex"]],"id":102,"label":"List.rev (let rest' =\n            0 :: (match [1] with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":104,"label":"([_] , [0])"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":105,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":106,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,162,"Redex"]],"id":107,"label":"let rest' =\n  0 :: (match [1] with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,154,"Redex"]],"id":108,"label":"0 :: (match [1] with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":109,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":110,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[23,5,"Redex"]],"id":111,"label":"let rest' =\n  0 :: (if f_1 1\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"]],"annots":[[9,5,"Redex"]],"id":112,"label":"0 :: (if f_1 1\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,20,"Redex"]],"id":113,"label":"0 :: (List.filter f_1 [])"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":114,"label":"0 :: (match xs_2 with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[],"id":115,"label":"List.rev (let rest' =\n            0 :: [] in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":117,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":118,"label":"seen"},{"span":null,"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[4,1,"Redex"]],"id":119,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":120,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[9,53,"Redex"]],"id":121,"label":"List.rev (let rest' = [0] in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":122,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":123,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,29,"Redex"]],"id":127,"label":"List.rev (helper ([] , [[_] ; 0 ; 1]))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[],"id":128,"label":"let rest' =\n  0 :: (if false\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,126,"Redex"]],"id":131,"label":"match [0 ; 1] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["xs","[0 ; 1]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"]],"id":132,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,20,"Redex"]],"id":133,"label":"let rest' =\n  0 :: (List.filter f_1 []) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"],["rest'","[0]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":134,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":135,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[22,141,"Redex"]],"id":136,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,1,"Redex"],[54,2,"Redex"]],"id":137,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,18,"Redex"]],"id":138,"label":"List.filter f_1 []"},{"span":null,"env":[],"annots":[],"id":139,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest_1","[0]"],["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,6,"Redex"]],"id":140,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest_1","[0]"],["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,6,"Redex"]],"id":141,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,19,"Redex"]],"id":142,"label":"let rest' =\n  0 :: (List.filter f [1]) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,19,"Redex"]],"id":143,"label":"0 :: (List.filter f [1])"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,30,"Redex"]],"id":144,"label":"removeDuplicates [[_] ; 0 ; 1]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_] ; 0 ; 1]"]],"annots":[[0,381,"Redex"]],"id":145,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":146,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":147,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":148,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":149,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":150,"label":"helper ([] , l)"},{"span":null,"env":[["xs_1","[1]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":151,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[["xs_1","[1]"]],"annots":[[0,4,"Redex"]],"id":152,"label":"xs_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[14,1,"Redex"],[34,2,"Redex"]],"id":153,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":154,"label":"y :: (List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":155,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":156,"label":"0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[16,4,"Redex"]],"id":157,"label":"List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":158,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,25,"Redex"]],"id":159,"label":"List.filter is_in [0 ; 1]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":160,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[0 ; 1]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[40,2,"Redex"]],"id":161,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,174,"Redex"]],"id":162,"label":"List.rev (let rest' =\n            match [0 ; 1] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[18,1,"Redex"]],"id":163,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,9,"Redex"]],"id":164,"label":"let rest' =\n  if (0 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[5,109,"Redex"]],"id":166,"label":"(0 , if false\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[54,2,"Redex"]],"id":167,"label":"List.rev (let rest' =\n            0 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,288,"Redex"]],"id":168,"label":"match [[_] ; 0 ; 1] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[43,5,"Redex"]],"id":169,"label":"List.rev (let rest' =\n            0 :: (if 1 = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":170,"label":"f 0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":171,"label":"f"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":172,"label":"(y , List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":173,"label":"y"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":174,"label":"(0 , match [] with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":175,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[],"id":176,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,216,"Redex"]],"id":178,"label":"let rest' = match [0 ; 1] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[18,3,"Redex"]],"id":179,"label":"let seen' = [_] @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":180,"label":"0 mod 2"},{"span":null,"env":[],"annots":[],"id":181,"label":"0"},{"span":null,"env":[],"annots":[],"id":182,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":183,"label":"rest'"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,381,"Redex"]],"id":185,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":186,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":187,"label":"seen'"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,17,"Redex"]],"id":188,"label":"List.filter f [1]"},{"span":null,"env":[],"annots":[],"id":189,"label":"[1]"},{"span":null,"env":[],"annots":[],"id":190,"label":"1"},{"span":null,"env":[["xs_2","[]"]],"annots":[[0,4,"Redex"]],"id":191,"label":"xs_2"},{"span":null,"env":[],"annots":[],"id":192,"label":"[]"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":193,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[9,9,"Redex"]],"id":194,"label":"0 :: (if (1 mod 2) = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[9,5,"Redex"]],"id":195,"label":"0 :: (if 1 = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["ys_1","[]"]],"annots":[[0,4,"Redex"]],"id":196,"label":"ys_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":198,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":199,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[44,1,"Redex"]],"id":200,"label":"List.rev (let rest' =\n            0 :: (if (i mod 2) = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,8,"Redex"]],"id":201,"label":"[] @ [_]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":202,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":203,"label":"(0 mod 2) = 0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[_]"]],"annots":[[5,1,"Redex"]],"id":204,"label":"[] @ h"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":205,"label":"(i mod 2) = 0"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":206,"label":"0 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":207,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_]"],["rest'","[0]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":208,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_]"]],"annots":[[0,5,"Redex"]],"id":209,"label":"seen'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":210,"label":"(y , List.filter f_1 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":211,"label":"List.filter f_1 ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,255,"Redex"]],"id":212,"label":"List.rev (let rest' =\n            0 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":213,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":214,"label":"f_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[26,4,"Redex"]],"id":215,"label":"let rest' =\n  0 :: (match xs_2 with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,161,"Redex"]],"id":216,"label":"let rest' =\n  0 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":217,"label":"0 :: []"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[0,41,"Redex"]],"id":218,"label":"let rest' = [0] in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":219,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":220,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":221,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":222,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":223,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":224,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","1"]],"annots":[[1,1,"Redex"]],"id":226,"label":"(i mod 2) = 0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[22,4,"Redex"]],"id":227,"label":"0 :: (List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[21,4,"Redex"]],"id":228,"label":"(0 , List.filter f_1 ys_1)"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":229,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":230,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":231,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":232,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":233,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":234,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":235,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":236,"label":"1 mod 2"},{"span":null,"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[10,1,"Redex"]],"id":237,"label":"0 :: (if (i mod 2) = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[9,1,"Redex"]],"id":238,"label":"(0 , if (i mod 2) = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":239,"label":"f"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":240,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":241,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":242,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":243,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":244,"label":"i"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,282,"Redex"]],"id":245,"label":"match [0] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":246,"label":"[0]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,83,"Redex"]],"id":248,"label":"List.rev (let rest' =\n            let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":249,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 1]"]],"annots":[[0,59,"Redex"]],"id":252,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":253,"label":"(0 , [])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,1,"Redex"]],"id":254,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,18,"Redex"]],"id":255,"label":"helper ([_] , [0])"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":257,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":258,"label":"2"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":259,"label":"y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,128,"Redex"]],"id":260,"label":"match [1] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":261,"label":"h"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":262,"label":"(y , List.filter f ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"]],"annots":[[13,3,"Redex"]],"id":263,"label":"0 :: (if f_1 y_1\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,107,"Redex"]],"id":266,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[20,2,"Redex"]],"id":267,"label":"0 :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[19,2,"Redex"]],"id":268,"label":"(0 , List.filter f ys)"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":269,"label":"(@)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[12,5,"Redex"],[18,3,"Redex"]],"id":270,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":271,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,109,"Redex"]],"id":272,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":273,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":274,"label":"0"},{"span":null,"env":[],"annots":[],"id":275,"label":"[0]"},{"span":null,"env":[],"annots":[],"id":276,"label":"0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":277,"label":"f_1 1"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[0]"]],"annots":[[0,6,"Redex"]],"id":278,"label":"rest_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":279,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":280,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[34,2,"Redex"]],"id":281,"label":"let rest' =\n  0 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[4,1,"Redex"]],"id":282,"label":"if (i mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":283,"label":"if f_2 y\nthen y :: (List.filter f_2 ys)\nelse List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":284,"label":"f_2 y"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"]],"id":285,"label":"seen_1"},{"span":null,"env":[],"annots":[],"id":286,"label":"[_]"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[5,114,"Redex"]],"id":287,"label":"0 :: (if false\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":288,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":289,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,3,"Redex"]],"id":290,"label":"List.rev (let rest' =\n            if f 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,185,"Redex"]],"id":291,"label":"let rest' = 0 :: (if false\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1\n                                   ys_1) in helper (seen' , rest')"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":292,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,20,"Redex"]],"id":293,"label":"List.rev (let rest' =\n            0 :: (List.filter f_1 []) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,7,"Redex"]],"id":294,"label":"[_] @ 0"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":295,"label":"(0 , match xs_2 with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[3,5,"Redex"]],"id":296,"label":"if 1 = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":297,"label":"0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[0,61,"Redex"]],"id":298,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":null,"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":299,"label":"match xs_2 with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[23,9,"Redex"]],"id":300,"label":"let rest' =\n  0 :: (if (1 mod 2) = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[23,5,"Redex"]],"id":301,"label":"let rest' =\n  0 :: (if 1 = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[],"id":302,"label":"let rest' = 0 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":303,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":304,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":305,"label":"1"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[3,9,"Redex"]],"id":306,"label":"if (1 mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":307,"label":"[_]"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_]"]],"annots":[[0,1,"Redex"]],"id":308,"label":"h"},{"span":null,"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":313,"label":"(y_1 , List.filter f_1 ys_1)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":314,"label":"h"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":315,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":316,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,7,"Redex"]],"id":317,"label":"List.rev (let seen' =\n            [_] @ 0 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":318,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[43,5,"Redex"]],"id":320,"label":"List.rev (let rest' =\n            0 :: (if f_1 1\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":321,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":322,"label":"helper"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_] ; 0 ; 1]"]],"annots":[[0,4,"Redex"]],"id":323,"label":"rest"},{"span":null,"env":[],"annots":[],"id":324,"label":"[[_] ; 0 ; 1]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,5,"Redex"]],"id":326,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h_1","0"]],"annots":[[6,3,"Redex"]],"id":327,"label":"[_] @ h_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[27,3,"Redex"]],"id":328,"label":"let rest' =\n  0 :: (if f_1 y_1\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"]],"annots":[[8,5,"Redex"]],"id":329,"label":"(0 , if f_1 1\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 1]"]],"annots":[[0,1,"Redex"]],"id":330,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":331,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","0"]],"annots":[[0,3,"Redex"]],"id":332,"label":"h_1"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":333,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":334,"label":"[[_] ; 0 ; 1]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":335,"label":"(0 , List.filter f_1 [])"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":337,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":338,"label":"seen"},{"span":null,"env":[],"annots":[],"id":339,"label":"[]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":340,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":341,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0 ; 1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[32,1,"Redex"]],"id":342,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[47,3,"Redex"]],"id":344,"label":"List.rev (let rest' =\n            0 :: (if f_1 y_1\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":345,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[19,1,"Redex"]],"id":346,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,3,"Redex"]],"id":347,"label":"let rest' =\n  if f 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[39,19,"Redex"]],"id":349,"label":"List.rev (let rest' =\n            0 :: (List.filter f [1]) in\n          helper (seen' , rest'))"},{"span":null,"env":[["ys","[1]"]],"annots":[[0,2,"Redex"]],"id":350,"label":"ys"},{"span":null,"env":[],"annots":[],"id":351,"label":"[]"},{"span":null,"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"]],"annots":[[0,58,"Redex"]],"id":352,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[0 ; 1]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":353,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":354,"label":"is_in"},{"span":null,"env":[["xs","[0 ; 1]"]],"annots":[[0,2,"Redex"]],"id":355,"label":"xs"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[17,5,"Redex"]],"id":356,"label":"let rest' =\n  if 0 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":357,"label":"0"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":358,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":359,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":360,"label":"rest'"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":362,"label":"y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":363,"label":"f y"},{"span":null,"env":[],"annots":[],"id":364,"label":"0"},{"span":null,"env":[],"annots":[],"id":366,"label":"List.filter"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":367,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[_]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":369,"label":"seen @ h"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","1"]],"annots":[[4,3,"Redex"]],"id":370,"label":"f_1 y_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":371,"label":"f_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":372,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":373,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_] ; 0 ; 1]"]],"annots":[[6,1,"Redex"]],"id":374,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_] ; 0 ; 1]"]],"annots":[[0,1,"Redex"]],"id":375,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[_] ; 0 ; 1]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":376,"label":"helper ([] , l)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,7,"Redex"]],"id":377,"label":"let seen' = [_] @ 0 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":378,"label":"[1]"},{"span":null,"env":[],"annots":[],"id":379,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[0 ; 1]"]],"annots":[[18,1,"Redex"]],"id":380,"label":"List.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,393,"Redex"]],"id":381,"label":"List.rev (match [0] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,107,"Redex"]],"id":383,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":384,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":385,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":386,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":387,"label":"helper"},{"span":null,"env":[],"annots":[],"id":388,"label":"_"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_] ; 0 ; 1]"]],"annots":[[23,1,"Redex"]],"id":389,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_] ; 0 ; 1]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":390,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[0]"]],"annots":[[14,5,"Redex"]],"id":391,"label":"helper ([_] , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"]],"id":392,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[],"id":393,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","0"],["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[38,1,"Redex"]],"id":394,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_1","[1]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":395,"label":"0 :: (match xs_1 with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":null,"env":[],"annots":[],"id":396,"label":"[0 ; 1]"},{"span":null,"env":[],"annots":[],"id":397,"label":"[_]"},{"span":null,"env":[],"annots":[],"id":398,"label":"_"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","1"],["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[24,1,"Redex"]],"id":399,"label":"let rest' =\n  0 :: (if (i mod 2) = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"]],"id":400,"label":"seen_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":401,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":402,"label":"helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":403,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[40,3,"Redex"]],"id":404,"label":"List.rev (let seen' =\n            [_] @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":405,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":406,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":408,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":409,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_2","[]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[46,4,"Redex"]],"id":410,"label":"List.rev (let rest' =\n            0 :: (match xs_2 with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_1","1"]],"annots":[[0,3,"Redex"]],"id":411,"label":"y_1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 1]"]],"annots":[[0,1,"Redex"]],"id":412,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":413,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[37,9,"Redex"]],"id":414,"label":"List.rev (let rest' =\n            if (0 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","1"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[43,9,"Redex"]],"id":415,"label":"List.rev (let rest' =\n            0 :: (if (1 mod 2) = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0]"]],"annots":[[0,5,"Redex"]],"id":416,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":417,"label":"rest'"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":418,"label":"rest"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":419,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":420,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":421,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":422,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":423,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,20,"Redex"]],"id":424,"label":"List.rev (helper ([_] , [0]))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[36,4,"Redex"]],"id":425,"label":"let rest' =\n  0 :: (List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_1","[1]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[26,4,"Redex"]],"id":426,"label":"let rest' =\n  0 :: (match xs_1 with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":427,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":428,"label":"i"},{"span":null,"env":[],"annots":[],"id":429,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":430,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":431,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":432,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":433,"label":"i"},{"span":null,"env":[],"annots":[],"id":434,"label":"1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":435,"label":"h"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":437,"label":"seen"},{"span":null,"env":[],"annots":[],"id":438,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","0"],["f","fun i -> (i mod 2) = 0"],["ys","[1]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_]"]],"annots":[[12,111,"Redex"]],"id":439,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":440,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":441,"label":"helper"},{"span":null,"env":[],"annots":[],"id":442,"label":"1"},{"span":null,"env":[],"annots":[],"id":443,"label":"1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_]"],["h_1","0"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"],[43,3,"Redex"]],"id":444,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":446,"label":"false"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":447,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[]"]],"annots":[[0,3,"Redex"]],"id":448,"label":"t_1"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":449,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":450,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":451,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":452,"label":"List.rev"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":453,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":454,"label":"List.filter"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":455,"label":"y :: (List.filter f_2 ys)"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":456,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":457,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_]"]],"annots":[[0,5,"Redex"]],"id":458,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":459,"label":"is_in"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":460,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":461,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":462,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":463,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":464,"label":"[]"},{"span":null,"env":[],"annots":[],"id":465,"label":"0"},{"span":null,"env":[],"annots":[],"id":466,"label":"[[_] ; 0 ; 1]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":467,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[_]"]],"annots":[[0,6,"Redex"]],"id":468,"label":"seen_1"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":469,"label":"i"},{"span":null,"env":[],"annots":[],"id":470,"label":"true"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":471,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":472,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":473,"label":"List.rev"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":474,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":475,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":476,"label":"(i mod 2) = 0"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":477,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":478,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":479,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":480,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":481,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":482,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":483,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":484,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":485,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":486,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[0 ; 1]"]],"annots":[[0,1,"Redex"]],"id":487,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":488,"label":"t"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":489,"label":"ys"},{"span":null,"env":[],"annots":[],"id":490,"label":"_"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":491,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":492,"label":"(@)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":493,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":494,"label":"List.filter"}]}