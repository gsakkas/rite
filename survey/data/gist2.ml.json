{"root":257,"result":"stuck","reason":"Type error: stuck because `int' is incompatible with `list'","bad":335,"stuck":282,"edges":[{"arrows":"to","to":1,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":16,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":0,"label":"SubTerm 2"},{"arrows":"to","to":406,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":293,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":406,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":442,"from":1,"label":"StepsTo PrimStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":658,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":162,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":465,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":9,"label":"StepsTo CallStep"},{"arrows":"to","to":25,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":546,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":11,"label":"SubTerm 2"},{"arrows":"to","to":91,"from":11,"label":"StepsTo BoringStep"},{"arrows":"to","to":116,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":12,"label":"StepsTo BoringStep"},{"arrows":"to","to":245,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":344,"from":12,"label":"SubTerm 2"},{"arrows":"to","to":14,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":15,"label":"StepsTo CallStep"},{"arrows":"to","to":132,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":631,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":191,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":614,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":17,"label":"SubTerm 2"},{"arrows":"to","to":226,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":325,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":574,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":525,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":576,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":20,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":561,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":21,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":580,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":22,"label":"StepsTo CallStep"},{"arrows":"to","to":595,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":395,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":599,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":613,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 2"},{"arrows":"to","to":30,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":551,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":600,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":30,"label":"SubTerm 2"},{"arrows":"to","to":531,"from":30,"label":"StepsTo PrimStep"},{"arrows":"to","to":551,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":600,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":473,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":288,"from":33,"label":"StepsTo PrimStep"},{"arrows":"to","to":37,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":507,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":120,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":390,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":550,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":601,"from":37,"label":"SubTerm 2"},{"arrows":"to","to":39,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":444,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":627,"from":38,"label":"SubTerm 2"},{"arrows":"to","to":7,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":44,"label":"StepsTo PrimStep"},{"arrows":"to","to":331,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":45,"label":"StepsTo PrimStep"},{"arrows":"to","to":305,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":354,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":452,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":490,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":277,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":351,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":482,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":216,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":451,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":52,"label":"SubTerm 2"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":209,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":53,"label":"StepsTo BoringStep"},{"arrows":"to","to":639,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":54,"label":"StepsTo ReturnStep"},{"arrows":"to","to":55,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":56,"label":"StepsTo CallStep"},{"arrows":"to","to":85,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":246,"from":57,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":490,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":645,"from":59,"label":"SubTerm 2"},{"arrows":"to","to":62,"from":61,"label":"StepsTo BoringStep"},{"arrows":"to","to":101,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":462,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":398,"from":63,"label":"StepsTo CallStep"},{"arrows":"to","to":461,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":639,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":419,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":586,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":68,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":474,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":612,"from":67,"label":"StepsTo ReturnStep"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":461,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":524,"from":73,"label":"StepsTo BoringStep"},{"arrows":"to","to":75,"from":74,"label":"StepsTo CallStep"},{"arrows":"to","to":76,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":580,"from":74,"label":"SubTerm 2"},{"arrows":"to","to":607,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":252,"from":75,"label":"StepsTo BoringStep"},{"arrows":"to","to":580,"from":75,"label":"SubTerm 2"},{"arrows":"to","to":514,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":292,"from":77,"label":"StepsTo BoringStep"},{"arrows":"to","to":374,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":432,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":292,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":554,"from":80,"label":"StepsTo CallStep"},{"arrows":"to","to":82,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":283,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":61,"from":84,"label":"StepsTo BoringStep"},{"arrows":"to","to":256,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":85,"label":"StepsTo CallStep"},{"arrows":"to","to":427,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":238,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":308,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":88,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":518,"from":87,"label":"SubTerm 2"},{"arrows":"to","to":675,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":90,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":91,"label":"SubTerm 2"},{"arrows":"to","to":92,"from":91,"label":"StepsTo PrimStep"},{"arrows":"to","to":163,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":92,"label":"SubTerm 2"},{"arrows":"to","to":94,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":459,"from":92,"label":"StepsTo ReturnStep"},{"arrows":"to","to":284,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":349,"from":94,"label":"StepsTo ReturnStep"},{"arrows":"to","to":433,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":96,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":495,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":97,"label":"StepsTo ReturnStep"},{"arrows":"to","to":276,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":276,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":655,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":362,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":536,"from":102,"label":"StepsTo BoringStep"},{"arrows":"to","to":636,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":486,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":549,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":165,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":107,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":335,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":199,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":593,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":432,"from":110,"label":"StepsTo BoringStep"},{"arrows":"to","to":145,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":198,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":369,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":572,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":176,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":311,"from":115,"label":"SubTerm 1"},{"arrows":"to","to":567,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":116,"label":"StepsTo BoringStep"},{"arrows":"to","to":278,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":433,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":193,"from":117,"label":"StepsTo CallStep"},{"arrows":"to","to":503,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":524,"from":118,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":119,"label":"StepsTo CallStep"},{"arrows":"to","to":122,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":654,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":451,"from":123,"label":"StepsTo BoringStep"},{"arrows":"to","to":493,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":125,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":408,"from":126,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":404,"from":127,"label":"StepsTo BoringStep"},{"arrows":"to","to":223,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":538,"from":128,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":133,"label":"StepsTo BoringStep"},{"arrows":"to","to":531,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":555,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":137,"label":"StepsTo PrimStep"},{"arrows":"to","to":192,"from":137,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":617,"from":140,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":141,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":141,"label":"StepsTo BoringStep"},{"arrows":"to","to":143,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":412,"from":142,"label":"StepsTo BoringStep"},{"arrows":"to","to":413,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":143,"label":"StepsTo BoringStep"},{"arrows":"to","to":517,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":653,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":424,"from":144,"label":"StepsTo PrimStep"},{"arrows":"to","to":466,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":491,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":409,"from":146,"label":"SubTerm 2"},{"arrows":"to","to":437,"from":146,"label":"StepsTo BoringStep"},{"arrows":"to","to":438,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":472,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":147,"label":"StepsTo CallStep"},{"arrows":"to","to":12,"from":147,"label":"SubTerm 2"},{"arrows":"to","to":182,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":241,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":150,"label":"StepsTo BoringStep"},{"arrows":"to","to":193,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":287,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":630,"from":151,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":153,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":427,"from":153,"label":"StepsTo BoringStep"},{"arrows":"to","to":155,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":242,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":540,"from":154,"label":"SubTerm 2"},{"arrows":"to","to":157,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":158,"from":156,"label":"StepsTo BoringStep"},{"arrows":"to","to":159,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":232,"from":156,"label":"SubTerm 2"},{"arrows":"to","to":197,"from":157,"label":"StepsTo BoringStep"},{"arrows":"to","to":159,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":158,"label":"SubTerm 2"},{"arrows":"to","to":335,"from":158,"label":"StepsTo BoringStep"},{"arrows":"to","to":161,"from":160,"label":"StepsTo BoringStep"},{"arrows":"to","to":270,"from":160,"label":"SubTerm 0"},{"arrows":"to","to":508,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":539,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":163,"label":"StepsTo PrimStep"},{"arrows":"to","to":279,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":433,"from":163,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":164,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":481,"from":164,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":165,"label":"StepsTo BoringStep"},{"arrows":"to","to":230,"from":165,"label":"SubTerm 1"},{"arrows":"to","to":167,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":663,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":168,"label":"SubTerm 2"},{"arrows":"to","to":370,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":642,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":220,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":578,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":383,"from":171,"label":"StepsTo BoringStep"},{"arrows":"to","to":173,"from":172,"label":"SubTerm 2"},{"arrows":"to","to":364,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":367,"from":172,"label":"SubTerm 3"},{"arrows":"to","to":535,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 2"},{"arrows":"to","to":175,"from":174,"label":"StepsTo BoringStep"},{"arrows":"to","to":406,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":512,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":175,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":175,"label":"StepsTo BoringStep"},{"arrows":"to","to":431,"from":175,"label":"SubTerm 2"},{"arrows":"to","to":615,"from":175,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":299,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":178,"label":"StepsTo ReturnStep"},{"arrows":"to","to":424,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":179,"label":"StepsTo CallStep"},{"arrows":"to","to":615,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":676,"from":179,"label":"SubTerm 2"},{"arrows":"to","to":253,"from":180,"label":"SubTerm 2"},{"arrows":"to","to":362,"from":180,"label":"StepsTo BoringStep"},{"arrows":"to","to":387,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":392,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":181,"label":"StepsTo CallStep"},{"arrows":"to","to":464,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":182,"label":"StepsTo CallStep"},{"arrows":"to","to":136,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":545,"from":182,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":303,"from":183,"label":"StepsTo BoringStep"},{"arrows":"to","to":187,"from":186,"label":"StepsTo BoringStep"},{"arrows":"to","to":310,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":336,"from":186,"label":"SubTerm 2"},{"arrows":"to","to":402,"from":186,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":187,"label":"SubTerm 1"},{"arrows":"to","to":389,"from":187,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":189,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":189,"label":"SubTerm 1"},{"arrows":"to","to":117,"from":189,"label":"StepsTo BoringStep"},{"arrows":"to","to":503,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":503,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":181,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":468,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":191,"label":"StepsTo BoringStep"},{"arrows":"to","to":192,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":193,"label":"StepsTo BoringStep"},{"arrows":"to","to":306,"from":193,"label":"SubTerm 2"},{"arrows":"to","to":509,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":584,"from":195,"label":"StepsTo ReturnStep"},{"arrows":"to","to":598,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":674,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":199,"label":"SubTerm 1"},{"arrows":"to","to":588,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":544,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":683,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":202,"label":"SubTerm 1"},{"arrows":"to","to":665,"from":202,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":204,"label":"StepsTo ReturnStep"},{"arrows":"to","to":355,"from":204,"label":"SubTerm 1"},{"arrows":"to","to":207,"from":206,"label":"SubTerm 1"},{"arrows":"to","to":669,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":473,"from":212,"label":"StepsTo CallStep"},{"arrows":"to","to":55,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":213,"label":"SubTerm 1"},{"arrows":"to","to":373,"from":213,"label":"StepsTo CallStep"},{"arrows":"to","to":215,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":637,"from":214,"label":"SubTerm 2"},{"arrows":"to","to":707,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":217,"from":216,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":217,"label":"StepsTo CallStep"},{"arrows":"to","to":549,"from":217,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":218,"label":"StepsTo BoringStep"},{"arrows":"to","to":608,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":142,"from":219,"label":"StepsTo BoringStep"},{"arrows":"to","to":413,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":622,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":671,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":705,"from":220,"label":"SubTerm 2"},{"arrows":"to","to":25,"from":222,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":222,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":222,"label":"StepsTo CallStep"},{"arrows":"to","to":12,"from":223,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":251,"from":223,"label":"StepsTo BoringStep"},{"arrows":"to","to":138,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":512,"from":224,"label":"StepsTo ReturnStep"},{"arrows":"to","to":614,"from":224,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":226,"label":"StepsTo ReturnStep"},{"arrows":"to","to":18,"from":226,"label":"SubTerm 2"},{"arrows":"to","to":326,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":574,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":229,"label":"StepsTo BoringStep"},{"arrows":"to","to":450,"from":229,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":230,"label":"SubTerm 2"},{"arrows":"to","to":231,"from":230,"label":"StepsTo BoringStep"},{"arrows":"to","to":239,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":406,"from":230,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":231,"label":"StepsTo CallStep"},{"arrows":"to","to":15,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":231,"label":"SubTerm 2"},{"arrows":"to","to":406,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":232,"label":"StepsTo BoringStep"},{"arrows":"to","to":234,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":520,"from":233,"label":"StepsTo PrimStep"},{"arrows":"to","to":1,"from":234,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":441,"from":234,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":235,"label":"SubTerm 0"},{"arrows":"to","to":142,"from":235,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":235,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":412,"from":236,"label":"SubTerm 1"},{"arrows":"to","to":543,"from":236,"label":"StepsTo CallStep"},{"arrows":"to","to":19,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":133,"from":237,"label":"StepsTo PrimStep"},{"arrows":"to","to":11,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":382,"from":238,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":239,"label":"StepsTo BoringStep"},{"arrows":"to","to":132,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":631,"from":240,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":243,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":245,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":341,"from":244,"label":"StepsTo CallStep"},{"arrows":"to","to":484,"from":244,"label":"SubTerm 2"},{"arrows":"to","to":7,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":308,"from":246,"label":"SubTerm 1"},{"arrows":"to","to":355,"from":246,"label":"StepsTo PrimStep"},{"arrows":"to","to":67,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":395,"from":247,"label":"StepsTo ReturnStep"},{"arrows":"to","to":580,"from":247,"label":"SubTerm 2"},{"arrows":"to","to":25,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":581,"from":249,"label":"StepsTo ReturnStep"},{"arrows":"to","to":55,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":340,"from":251,"label":"StepsTo CallStep"},{"arrows":"to","to":76,"from":252,"label":"SubTerm 1"},{"arrows":"to","to":247,"from":252,"label":"StepsTo PrimStep"},{"arrows":"to","to":486,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":580,"from":252,"label":"SubTerm 2"},{"arrows":"to","to":347,"from":253,"label":"SubTerm 1"},{"arrows":"to","to":428,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":618,"from":253,"label":"SubTerm 2"},{"arrows":"to","to":255,"from":254,"label":"SubTerm 1"},{"arrows":"to","to":673,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":256,"label":"StepsTo BoringStep"},{"arrows":"to","to":180,"from":256,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":257,"label":"StepsTo CallStep"},{"arrows":"to","to":685,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":695,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":454,"from":258,"label":"SubTerm 1"},{"arrows":"to","to":591,"from":258,"label":"StepsTo BoringStep"},{"arrows":"to","to":592,"from":258,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":259,"label":"SubTerm 1"},{"arrows":"to","to":667,"from":259,"label":"SubTerm 0"},{"arrows":"to","to":296,"from":260,"label":"SubTerm 1"},{"arrows":"to","to":680,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":261,"label":"StepsTo BoringStep"},{"arrows":"to","to":313,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":372,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":436,"from":262,"label":"StepsTo BoringStep"},{"arrows":"to","to":635,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":264,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":302,"from":263,"label":"SubTerm 1"},{"arrows":"to","to":492,"from":263,"label":"SubTerm 2"},{"arrows":"to","to":266,"from":265,"label":"SubTerm 1"},{"arrows":"to","to":692,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":624,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":268,"label":"StepsTo BoringStep"},{"arrows":"to","to":269,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":172,"from":269,"label":"SubTerm 0"},{"arrows":"to","to":374,"from":269,"label":"StepsTo BoringStep"},{"arrows":"to","to":445,"from":269,"label":"SubTerm 1"},{"arrows":"to","to":463,"from":269,"label":"SubTerm 2"},{"arrows":"to","to":55,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":508,"from":270,"label":"StepsTo BoringStep"},{"arrows":"to","to":108,"from":271,"label":"SubTerm 0"},{"arrows":"to","to":272,"from":271,"label":"SubTerm 1"},{"arrows":"to","to":555,"from":271,"label":"SubTerm 2"},{"arrows":"to","to":134,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":273,"label":"SubTerm 0"},{"arrows":"to","to":515,"from":273,"label":"StepsTo ReturnStep"},{"arrows":"to","to":55,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":405,"from":274,"label":"StepsTo ReturnStep"},{"arrows":"to","to":37,"from":276,"label":"SubTerm 2"},{"arrows":"to","to":277,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":276,"label":"StepsTo BoringStep"},{"arrows":"to","to":643,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":429,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":482,"from":277,"label":"StepsTo BoringStep"},{"arrows":"to","to":279,"from":278,"label":"StepsTo BoringStep"},{"arrows":"to","to":371,"from":278,"label":"SubTerm 1"},{"arrows":"to","to":633,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":284,"from":279,"label":"StepsTo PrimStep"},{"arrows":"to","to":371,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":644,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":281,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":281,"label":"StepsTo BoringStep"},{"arrows":"to","to":389,"from":281,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":282,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":283,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":283,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":283,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":285,"label":"SubTerm 0"},{"arrows":"to","to":415,"from":285,"label":"StepsTo ReturnStep"},{"arrows":"to","to":566,"from":285,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":286,"label":"SubTerm 1"},{"arrows":"to","to":281,"from":286,"label":"StepsTo BoringStep"},{"arrows":"to","to":194,"from":287,"label":"SubTerm 1"},{"arrows":"to","to":306,"from":287,"label":"SubTerm 2"},{"arrows":"to","to":496,"from":287,"label":"StepsTo BoringStep"},{"arrows":"to","to":510,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":319,"from":288,"label":"StepsTo PrimStep"},{"arrows":"to","to":520,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":291,"label":"StepsTo CallStep"},{"arrows":"to","to":539,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":292,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":292,"label":"StepsTo CallStep"},{"arrows":"to","to":548,"from":292,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":293,"label":"SubTerm 0"},{"arrows":"to","to":224,"from":293,"label":"StepsTo PrimStep"},{"arrows":"to","to":614,"from":293,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":298,"label":"SubTerm 0"},{"arrows":"to","to":553,"from":298,"label":"SubTerm 1"},{"arrows":"to","to":300,"from":299,"label":"SubTerm 0"},{"arrows":"to","to":616,"from":299,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":303,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":303,"label":"SubTerm 1"},{"arrows":"to","to":249,"from":303,"label":"StepsTo PrimStep"},{"arrows":"to","to":37,"from":305,"label":"SubTerm 2"},{"arrows":"to","to":276,"from":305,"label":"StepsTo ReturnStep"},{"arrows":"to","to":277,"from":305,"label":"SubTerm 1"},{"arrows":"to","to":526,"from":305,"label":"SubTerm 0"},{"arrows":"to","to":359,"from":306,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":273,"from":308,"label":"StepsTo PrimStep"},{"arrows":"to","to":382,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":310,"from":309,"label":"StepsTo BoringStep"},{"arrows":"to","to":657,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":312,"from":311,"label":"SubTerm 0"},{"arrows":"to","to":202,"from":312,"label":"SubTerm 0"},{"arrows":"to","to":699,"from":312,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":313,"label":"SubTerm 2"},{"arrows":"to","to":262,"from":313,"label":"SubTerm 0"},{"arrows":"to","to":277,"from":313,"label":"SubTerm 1"},{"arrows":"to","to":331,"from":313,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":315,"label":"StepsTo ReturnStep"},{"arrows":"to","to":55,"from":315,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":315,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":316,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":316,"label":"SubTerm 1"},{"arrows":"to","to":403,"from":316,"label":"StepsTo BoringStep"},{"arrows":"to","to":318,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":474,"from":317,"label":"StepsTo PrimStep"},{"arrows":"to","to":686,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":320,"from":319,"label":"StepsTo ReturnStep"},{"arrows":"to","to":7,"from":320,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":320,"label":"SubTerm 1"},{"arrows":"to","to":452,"from":320,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":321,"label":"StepsTo CallStep"},{"arrows":"to","to":7,"from":322,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":322,"label":"StepsTo ReturnStep"},{"arrows":"to","to":450,"from":322,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":323,"label":"SubTerm 0"},{"arrows":"to","to":252,"from":323,"label":"SubTerm 1"},{"arrows":"to","to":315,"from":323,"label":"StepsTo PrimStep"},{"arrows":"to","to":326,"from":325,"label":"StepsTo BoringStep"},{"arrows":"to","to":105,"from":327,"label":"StepsTo BoringStep"},{"arrows":"to","to":511,"from":327,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":328,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":328,"label":"SubTerm 1"},{"arrows":"to","to":323,"from":328,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":331,"label":"SubTerm 2"},{"arrows":"to","to":277,"from":331,"label":"SubTerm 1"},{"arrows":"to","to":305,"from":331,"label":"StepsTo PrimStep"},{"arrows":"to","to":436,"from":331,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":333,"label":"StepsTo BoringStep"},{"arrows":"to","to":159,"from":335,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":335,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":335,"label":"SubTerm 2"},{"arrows":"to","to":112,"from":336,"label":"SubTerm 0"},{"arrows":"to","to":337,"from":336,"label":"SubTerm 1"},{"arrows":"to","to":505,"from":337,"label":"SubTerm 1"},{"arrows":"to","to":664,"from":337,"label":"SubTerm 2"},{"arrows":"to","to":694,"from":337,"label":"SubTerm 0"},{"arrows":"to","to":339,"from":338,"label":"SubTerm 0"},{"arrows":"to","to":453,"from":338,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":340,"label":"SubTerm 0"},{"arrows":"to","to":341,"from":340,"label":"SubTerm 1"},{"arrows":"to","to":511,"from":340,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":341,"label":"SubTerm 2"},{"arrows":"to","to":582,"from":341,"label":"StepsTo BoringStep"},{"arrows":"to","to":585,"from":341,"label":"SubTerm 0"},{"arrows":"to","to":662,"from":341,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":342,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":342,"label":"StepsTo BoringStep"},{"arrows":"to","to":497,"from":342,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":343,"label":"StepsTo BoringStep"},{"arrows":"to","to":29,"from":343,"label":"SubTerm 2"},{"arrows":"to","to":551,"from":343,"label":"SubTerm 0"},{"arrows":"to","to":641,"from":343,"label":"SubTerm 1"},{"arrows":"to","to":484,"from":344,"label":"StepsTo BoringStep"},{"arrows":"to","to":357,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":350,"label":"SubTerm 0"},{"arrows":"to","to":351,"from":350,"label":"SubTerm 1"},{"arrows":"to","to":425,"from":350,"label":"StepsTo CallStep"},{"arrows":"to","to":7,"from":351,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":351,"label":"StepsTo CallStep"},{"arrows":"to","to":506,"from":351,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":352,"label":"SubTerm 1"},{"arrows":"to","to":517,"from":352,"label":"SubTerm 0"},{"arrows":"to","to":480,"from":353,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":354,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":354,"label":"SubTerm 1"},{"arrows":"to","to":394,"from":354,"label":"StepsTo CallStep"},{"arrows":"to","to":7,"from":355,"label":"SubTerm 0"},{"arrows":"to","to":273,"from":355,"label":"SubTerm 1"},{"arrows":"to","to":356,"from":355,"label":"StepsTo PrimStep"},{"arrows":"to","to":7,"from":356,"label":"SubTerm 0"},{"arrows":"to","to":497,"from":356,"label":"StepsTo ReturnStep"},{"arrows":"to","to":515,"from":356,"label":"SubTerm 1"},{"arrows":"to","to":358,"from":357,"label":"SubTerm 0"},{"arrows":"to","to":618,"from":357,"label":"SubTerm 1"},{"arrows":"to","to":360,"from":359,"label":"SubTerm 1"},{"arrows":"to","to":416,"from":359,"label":"SubTerm 2"},{"arrows":"to","to":689,"from":359,"label":"SubTerm 0"},{"arrows":"to","to":317,"from":361,"label":"StepsTo BoringStep"},{"arrows":"to","to":318,"from":361,"label":"SubTerm 1"},{"arrows":"to","to":684,"from":361,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":362,"label":"SubTerm 2"},{"arrows":"to","to":388,"from":362,"label":"SubTerm 0"},{"arrows":"to","to":392,"from":362,"label":"SubTerm 1"},{"arrows":"to","to":636,"from":362,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":368,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":368,"label":"SubTerm 1"},{"arrows":"to","to":559,"from":368,"label":"StepsTo PrimStep"},{"arrows":"to","to":648,"from":369,"label":"SubTerm 0"},{"arrows":"to","to":333,"from":372,"label":"SubTerm 0"},{"arrows":"to","to":379,"from":372,"label":"StepsTo BoringStep"},{"arrows":"to","to":690,"from":372,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":373,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":373,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":373,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":374,"label":"SubTerm 2"},{"arrows":"to","to":277,"from":374,"label":"SubTerm 1"},{"arrows":"to","to":439,"from":374,"label":"SubTerm 0"},{"arrows":"to","to":548,"from":374,"label":"StepsTo BoringStep"},{"arrows":"to","to":269,"from":375,"label":"StepsTo BoringStep"},{"arrows":"to","to":376,"from":375,"label":"SubTerm 0"},{"arrows":"to","to":445,"from":375,"label":"SubTerm 1"},{"arrows":"to","to":463,"from":375,"label":"SubTerm 2"},{"arrows":"to","to":172,"from":376,"label":"StepsTo BoringStep"},{"arrows":"to","to":378,"from":377,"label":"SubTerm 1"},{"arrows":"to","to":691,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":379,"label":"SubTerm 0"},{"arrows":"to","to":609,"from":379,"label":"StepsTo PrimStep"},{"arrows":"to","to":690,"from":379,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":380,"label":"SubTerm 0"},{"arrows":"to","to":381,"from":380,"label":"SubTerm 1"},{"arrows":"to","to":476,"from":380,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":268,"from":381,"label":"StepsTo BoringStep"},{"arrows":"to","to":375,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":382,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":382,"label":"SubTerm 1"},{"arrows":"to","to":274,"from":382,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":383,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":383,"label":"SubTerm 1"},{"arrows":"to","to":235,"from":383,"label":"StepsTo BoringStep"},{"arrows":"to","to":521,"from":384,"label":"SubTerm 1"},{"arrows":"to","to":603,"from":384,"label":"SubTerm 0"},{"arrows":"to","to":386,"from":385,"label":"SubTerm 1"},{"arrows":"to","to":646,"from":385,"label":"SubTerm 0"},{"arrows":"to","to":388,"from":387,"label":"StepsTo BoringStep"},{"arrows":"to","to":475,"from":388,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":389,"label":"StepsTo BoringStep"},{"arrows":"to","to":107,"from":389,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":389,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":390,"label":"SubTerm 1"},{"arrows":"to","to":146,"from":390,"label":"StepsTo CallStep"},{"arrows":"to","to":550,"from":390,"label":"SubTerm 0"},{"arrows":"to","to":628,"from":390,"label":"SubTerm 2"},{"arrows":"to","to":649,"from":391,"label":"SubTerm 0"},{"arrows":"to","to":152,"from":393,"label":"StepsTo BoringStep"},{"arrows":"to","to":491,"from":393,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":394,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":394,"label":"SubTerm 1"},{"arrows":"to","to":141,"from":394,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":395,"label":"SubTerm 1"},{"arrows":"to","to":580,"from":395,"label":"SubTerm 2"},{"arrows":"to","to":580,"from":395,"label":"StepsTo BoringStep"},{"arrows":"to","to":612,"from":395,"label":"SubTerm 0"},{"arrows":"to","to":397,"from":396,"label":"SubTerm 1"},{"arrows":"to","to":625,"from":396,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":398,"label":"SubTerm 0"},{"arrows":"to","to":399,"from":398,"label":"SubTerm 1"},{"arrows":"to","to":467,"from":398,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":399,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":399,"label":"StepsTo BoringStep"},{"arrows":"to","to":537,"from":399,"label":"SubTerm 1"},{"arrows":"to","to":652,"from":400,"label":"SubTerm 0"},{"arrows":"to","to":652,"from":400,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":401,"label":"StepsTo BoringStep"},{"arrows":"to","to":309,"from":401,"label":"SubTerm 0"},{"arrows":"to","to":336,"from":401,"label":"SubTerm 2"},{"arrows":"to","to":402,"from":401,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":403,"label":"SubTerm 0"},{"arrows":"to","to":404,"from":403,"label":"SubTerm 1"},{"arrows":"to","to":542,"from":403,"label":"StepsTo CallStep"},{"arrows":"to","to":7,"from":404,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":404,"label":"StepsTo CallStep"},{"arrows":"to","to":538,"from":404,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":405,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":405,"label":"StepsTo BoringStep"},{"arrows":"to","to":459,"from":405,"label":"SubTerm 1"},{"arrows":"to","to":407,"from":406,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":407,"label":"SubTerm 1"},{"arrows":"to","to":240,"from":407,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":408,"label":"SubTerm 0"},{"arrows":"to","to":421,"from":408,"label":"StepsTo BoringStep"},{"arrows":"to","to":586,"from":408,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":409,"label":"SubTerm 2"},{"arrows":"to","to":410,"from":409,"label":"SubTerm 1"},{"arrows":"to","to":443,"from":409,"label":"SubTerm 0"},{"arrows":"to","to":523,"from":410,"label":"SubTerm 0"},{"arrows":"to","to":352,"from":412,"label":"SubTerm 1"},{"arrows":"to","to":401,"from":412,"label":"StepsTo CallStep"},{"arrows":"to","to":413,"from":412,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":415,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":415,"label":"StepsTo ReturnStep"},{"arrows":"to","to":489,"from":415,"label":"SubTerm 1"},{"arrows":"to","to":375,"from":417,"label":"StepsTo CallStep"},{"arrows":"to","to":418,"from":417,"label":"SubTerm 1"},{"arrows":"to","to":488,"from":417,"label":"SubTerm 2"},{"arrows":"to","to":672,"from":417,"label":"SubTerm 0"},{"arrows":"to","to":547,"from":419,"label":"SubTerm 1"},{"arrows":"to","to":589,"from":419,"label":"SubTerm 2"},{"arrows":"to","to":632,"from":419,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":420,"label":"SubTerm 0"},{"arrows":"to","to":380,"from":420,"label":"StepsTo CallStep"},{"arrows":"to","to":421,"from":420,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":421,"label":"SubTerm 0"},{"arrows":"to","to":381,"from":421,"label":"StepsTo CallStep"},{"arrows":"to","to":417,"from":421,"label":"SubTerm 1"},{"arrows":"to","to":423,"from":422,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":423,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":423,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":424,"label":"SubTerm 0"},{"arrows":"to","to":322,"from":424,"label":"StepsTo PrimStep"},{"arrows":"to","to":469,"from":424,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":425,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":425,"label":"StepsTo BoringStep"},{"arrows":"to","to":110,"from":425,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":427,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":427,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":427,"label":"StepsTo CallStep"},{"arrows":"to","to":358,"from":428,"label":"SubTerm 1"},{"arrows":"to","to":668,"from":428,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":429,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":429,"label":"SubTerm 1"},{"arrows":"to","to":477,"from":429,"label":"SubTerm 0"},{"arrows":"to","to":676,"from":431,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":432,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":432,"label":"SubTerm 1"},{"arrows":"to","to":481,"from":432,"label":"StepsTo BoringStep"},{"arrows":"to","to":396,"from":434,"label":"SubTerm 0"},{"arrows":"to","to":435,"from":434,"label":"SubTerm 1"},{"arrows":"to","to":379,"from":436,"label":"SubTerm 0"},{"arrows":"to","to":526,"from":436,"label":"StepsTo PrimStep"},{"arrows":"to","to":635,"from":436,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":437,"label":"StepsTo BoringStep"},{"arrows":"to","to":154,"from":437,"label":"SubTerm 0"},{"arrows":"to","to":409,"from":437,"label":"SubTerm 2"},{"arrows":"to","to":438,"from":437,"label":"SubTerm 1"},{"arrows":"to","to":119,"from":439,"label":"StepsTo BoringStep"},{"arrows":"to","to":120,"from":439,"label":"SubTerm 0"},{"arrows":"to","to":477,"from":439,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":440,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":440,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":440,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":441,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":441,"label":"StepsTo ReturnStep"},{"arrows":"to","to":442,"from":441,"label":"SubTerm 1"},{"arrows":"to","to":174,"from":442,"label":"StepsTo ReturnStep"},{"arrows":"to","to":175,"from":442,"label":"SubTerm 2"},{"arrows":"to","to":224,"from":442,"label":"SubTerm 0"},{"arrows":"to","to":406,"from":442,"label":"SubTerm 1"},{"arrows":"to","to":444,"from":443,"label":"SubTerm 0"},{"arrows":"to","to":533,"from":443,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":448,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":448,"label":"SubTerm 1"},{"arrows":"to","to":606,"from":448,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":450,"label":"SubTerm 0"},{"arrows":"to","to":468,"from":450,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":451,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":451,"label":"StepsTo BoringStep"},{"arrows":"to","to":327,"from":451,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":452,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":452,"label":"SubTerm 1"},{"arrows":"to","to":291,"from":452,"label":"StepsTo BoringStep"},{"arrows":"to","to":597,"from":454,"label":"SubTerm 0"},{"arrows":"to","to":456,"from":455,"label":"SubTerm 1"},{"arrows":"to","to":607,"from":455,"label":"StepsTo BoringStep"},{"arrows":"to","to":687,"from":455,"label":"SubTerm 0"},{"arrows":"to","to":604,"from":456,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":459,"label":"SubTerm 2"},{"arrows":"to","to":12,"from":459,"label":"StepsTo BoringStep"},{"arrows":"to","to":209,"from":459,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":459,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":461,"label":"SubTerm 0"},{"arrows":"to","to":399,"from":461,"label":"StepsTo CallStep"},{"arrows":"to","to":462,"from":461,"label":"SubTerm 1"},{"arrows":"to","to":536,"from":462,"label":"SubTerm 0"},{"arrows":"to","to":537,"from":462,"label":"StepsTo CallStep"},{"arrows":"to","to":47,"from":463,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":463,"label":"SubTerm 2"},{"arrows":"to","to":422,"from":463,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":464,"label":"SubTerm 0"},{"arrows":"to","to":465,"from":464,"label":"StepsTo CallStep"},{"arrows":"to","to":243,"from":465,"label":"SubTerm 0"},{"arrows":"to","to":566,"from":465,"label":"StepsTo BoringStep"},{"arrows":"to","to":323,"from":466,"label":"SubTerm 0"},{"arrows":"to","to":469,"from":466,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":467,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":467,"label":"SubTerm 1"},{"arrows":"to","to":178,"from":467,"label":"StepsTo PrimStep"},{"arrows":"to","to":21,"from":468,"label":"SubTerm 0"},{"arrows":"to","to":464,"from":468,"label":"StepsTo BoringStep"},{"arrows":"to","to":315,"from":469,"label":"SubTerm 0"},{"arrows":"to","to":450,"from":469,"label":"StepsTo ReturnStep"},{"arrows":"to","to":385,"from":470,"label":"SubTerm 0"},{"arrows":"to","to":471,"from":470,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":472,"label":"StepsTo BoringStep"},{"arrows":"to","to":233,"from":473,"label":"StepsTo BoringStep"},{"arrows":"to","to":373,"from":473,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":476,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":476,"label":"StepsTo BoringStep"},{"arrows":"to","to":268,"from":476,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":477,"label":"StepsTo BoringStep"},{"arrows":"to","to":479,"from":478,"label":"SubTerm 1"},{"arrows":"to","to":583,"from":478,"label":"SubTerm 0"},{"arrows":"to","to":634,"from":478,"label":"SubTerm 2"},{"arrows":"to","to":7,"from":481,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":481,"label":"StepsTo BoringStep"},{"arrows":"to","to":152,"from":481,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":482,"label":"SubTerm 0"},{"arrows":"to","to":506,"from":482,"label":"StepsTo BoringStep"},{"arrows":"to","to":485,"from":484,"label":"SubTerm 1"},{"arrows":"to","to":552,"from":484,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":486,"label":"StepsTo PrimStep"},{"arrows":"to","to":68,"from":486,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":486,"label":"SubTerm 0"},{"arrows":"to","to":488,"from":487,"label":"StepsTo BoringStep"},{"arrows":"to","to":447,"from":488,"label":"SubTerm 0"},{"arrows":"to","to":534,"from":488,"label":"SubTerm 3"},{"arrows":"to","to":638,"from":488,"label":"SubTerm 1"},{"arrows":"to","to":706,"from":488,"label":"SubTerm 2"},{"arrows":"to","to":13,"from":489,"label":"SubTerm 0"},{"arrows":"to","to":608,"from":489,"label":"StepsTo ReturnStep"},{"arrows":"to","to":55,"from":491,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":491,"label":"StepsTo BoringStep"},{"arrows":"to","to":437,"from":491,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":493,"label":"StepsTo BoringStep"},{"arrows":"to","to":340,"from":493,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":496,"label":"SubTerm 0"},{"arrows":"to","to":343,"from":496,"label":"SubTerm 1"},{"arrows":"to","to":440,"from":496,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":497,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":497,"label":"StepsTo BoringStep"},{"arrows":"to","to":515,"from":497,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":501,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":501,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":504,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":504,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":504,"label":"SubTerm 1"},{"arrows":"to","to":111,"from":506,"label":"StepsTo CallStep"},{"arrows":"to","to":507,"from":506,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":507,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":507,"label":"StepsTo CallStep"},{"arrows":"to","to":390,"from":507,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":508,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":508,"label":"SubTerm 1"},{"arrows":"to","to":321,"from":508,"label":"StepsTo BoringStep"},{"arrows":"to","to":510,"from":509,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":511,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":511,"label":"StepsTo BoringStep"},{"arrows":"to","to":582,"from":511,"label":"SubTerm 1"},{"arrows":"to","to":456,"from":514,"label":"SubTerm 0"},{"arrows":"to","to":580,"from":514,"label":"SubTerm 1"},{"arrows":"to","to":128,"from":515,"label":"StepsTo BoringStep"},{"arrows":"to","to":405,"from":515,"label":"SubTerm 0"},{"arrows":"to","to":517,"from":516,"label":"StepsTo BoringStep"},{"arrows":"to","to":590,"from":517,"label":"SubTerm 1"},{"arrows":"to","to":708,"from":517,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":520,"label":"StepsTo ReturnStep"},{"arrows":"to","to":441,"from":520,"label":"SubTerm 0"},{"arrows":"to","to":478,"from":521,"label":"SubTerm 0"},{"arrows":"to","to":682,"from":521,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":523,"label":"SubTerm 1"},{"arrows":"to","to":533,"from":523,"label":"SubTerm 0"},{"arrows":"to","to":558,"from":525,"label":"SubTerm 0"},{"arrows":"to","to":609,"from":526,"label":"SubTerm 0"},{"arrows":"to","to":635,"from":526,"label":"SubTerm 1"},{"arrows":"to","to":643,"from":526,"label":"StepsTo ReturnStep"},{"arrows":"to","to":298,"from":528,"label":"SubTerm 0"},{"arrows":"to","to":298,"from":528,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":529,"label":"SubTerm 0"},{"arrows":"to","to":530,"from":529,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":530,"label":"SubTerm 0"},{"arrows":"to","to":532,"from":531,"label":"SubTerm 0"},{"arrows":"to","to":693,"from":531,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":536,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":536,"label":"SubTerm 1"},{"arrows":"to","to":328,"from":536,"label":"StepsTo CallStep"},{"arrows":"to","to":328,"from":537,"label":"SubTerm 0"},{"arrows":"to","to":466,"from":537,"label":"StepsTo BoringStep"},{"arrows":"to","to":251,"from":538,"label":"SubTerm 0"},{"arrows":"to","to":493,"from":538,"label":"StepsTo CallStep"},{"arrows":"to","to":84,"from":539,"label":"StepsTo CallStep"},{"arrows":"to","to":321,"from":539,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":542,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":542,"label":"StepsTo BoringStep"},{"arrows":"to","to":123,"from":542,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":543,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":543,"label":"StepsTo BoringStep"},{"arrows":"to","to":401,"from":543,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":546,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":546,"label":"StepsTo PrimStep"},{"arrows":"to","to":246,"from":546,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":548,"label":"SubTerm 2"},{"arrows":"to","to":119,"from":548,"label":"SubTerm 0"},{"arrows":"to","to":277,"from":548,"label":"SubTerm 1"},{"arrows":"to","to":313,"from":548,"label":"StepsTo CallStep"},{"arrows":"to","to":7,"from":549,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":549,"label":"StepsTo CallStep"},{"arrows":"to","to":212,"from":549,"label":"SubTerm 1"},{"arrows":"to","to":168,"from":553,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":554,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":554,"label":"SubTerm 1"},{"arrows":"to","to":611,"from":554,"label":"StepsTo BoringStep"},{"arrows":"to","to":109,"from":555,"label":"SubTerm 1"},{"arrows":"to","to":659,"from":555,"label":"SubTerm 2"},{"arrows":"to","to":704,"from":555,"label":"SubTerm 0"},{"arrows":"to","to":557,"from":556,"label":"SubTerm 1"},{"arrows":"to","to":681,"from":556,"label":"SubTerm 0"},{"arrows":"to","to":495,"from":558,"label":"SubTerm 0"},{"arrows":"to","to":576,"from":558,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":559,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":559,"label":"SubTerm 1"},{"arrows":"to","to":560,"from":559,"label":"StepsTo ReturnStep"},{"arrows":"to","to":25,"from":560,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":560,"label":"SubTerm 1"},{"arrows":"to","to":448,"from":560,"label":"StepsTo BoringStep"},{"arrows":"to","to":562,"from":561,"label":"SubTerm 1"},{"arrows":"to","to":579,"from":561,"label":"SubTerm 2"},{"arrows":"to","to":640,"from":561,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":564,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":564,"label":"SubTerm 0"},{"arrows":"to","to":237,"from":564,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":565,"label":"SubTerm 0"},{"arrows":"to","to":440,"from":565,"label":"SubTerm 1"},{"arrows":"to","to":564,"from":565,"label":"StepsTo BoringStep"},{"arrows":"to","to":54,"from":566,"label":"SubTerm 0"},{"arrows":"to","to":489,"from":566,"label":"StepsTo ReturnStep"},{"arrows":"to","to":568,"from":567,"label":"SubTerm 1"},{"arrows":"to","to":623,"from":567,"label":"SubTerm 0"},{"arrows":"to","to":702,"from":567,"label":"SubTerm 2"},{"arrows":"to","to":570,"from":569,"label":"SubTerm 1"},{"arrows":"to","to":700,"from":569,"label":"SubTerm 0"},{"arrows":"to","to":569,"from":571,"label":"SubTerm 1"},{"arrows":"to","to":587,"from":571,"label":"SubTerm 0"},{"arrows":"to","to":573,"from":572,"label":"SubTerm 1"},{"arrows":"to","to":577,"from":572,"label":"SubTerm 2"},{"arrows":"to","to":619,"from":572,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":576,"label":"SubTerm 1"},{"arrows":"to","to":620,"from":576,"label":"SubTerm 0"},{"arrows":"to","to":678,"from":576,"label":"SubTerm 2"},{"arrows":"to","to":259,"from":578,"label":"SubTerm 0"},{"arrows":"to","to":529,"from":578,"label":"SubTerm 1"},{"arrows":"to","to":595,"from":580,"label":"StepsTo BoringStep"},{"arrows":"to","to":660,"from":580,"label":"SubTerm 2"},{"arrows":"to","to":679,"from":580,"label":"SubTerm 0"},{"arrows":"to","to":687,"from":580,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":581,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":581,"label":"StepsTo BoringStep"},{"arrows":"to","to":320,"from":581,"label":"SubTerm 1"},{"arrows":"to","to":230,"from":582,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":582,"label":"SubTerm 2"},{"arrows":"to","to":338,"from":582,"label":"SubTerm 0"},{"arrows":"to","to":662,"from":582,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":584,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":584,"label":"StepsTo ReturnStep"},{"arrows":"to","to":415,"from":584,"label":"SubTerm 1"},{"arrows":"to","to":338,"from":585,"label":"StepsTo BoringStep"},{"arrows":"to","to":417,"from":586,"label":"StepsTo BoringStep"},{"arrows":"to","to":418,"from":586,"label":"SubTerm 1"},{"arrows":"to","to":487,"from":586,"label":"SubTerm 2"},{"arrows":"to","to":672,"from":586,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":591,"label":"SubTerm 0"},{"arrows":"to","to":222,"from":591,"label":"StepsTo BoringStep"},{"arrows":"to","to":571,"from":592,"label":"SubTerm 1"},{"arrows":"to","to":670,"from":592,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":593,"label":"SubTerm 0"},{"arrows":"to","to":594,"from":593,"label":"SubTerm 1"},{"arrows":"to","to":470,"from":594,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":595,"label":"StepsTo CallStep"},{"arrows":"to","to":661,"from":595,"label":"SubTerm 2"},{"arrows":"to","to":679,"from":595,"label":"SubTerm 0"},{"arrows":"to","to":687,"from":595,"label":"SubTerm 1"},{"arrows":"to","to":501,"from":597,"label":"SubTerm 2"},{"arrows":"to","to":621,"from":597,"label":"SubTerm 0"},{"arrows":"to","to":709,"from":597,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":599,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":599,"label":"SubTerm 1"},{"arrows":"to","to":703,"from":599,"label":"StepsTo BoringStep"},{"arrows":"to","to":628,"from":601,"label":"StepsTo BoringStep"},{"arrows":"to","to":556,"from":603,"label":"SubTerm 1"},{"arrows":"to","to":701,"from":603,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":605,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":605,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":605,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":606,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":606,"label":"SubTerm 1"},{"arrows":"to","to":350,"from":606,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":607,"label":"StepsTo CallStep"},{"arrows":"to","to":604,"from":607,"label":"SubTerm 1"},{"arrows":"to","to":687,"from":607,"label":"SubTerm 0"},{"arrows":"to","to":651,"from":608,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":610,"label":"SubTerm 0"},{"arrows":"to","to":181,"from":610,"label":"SubTerm 1"},{"arrows":"to","to":605,"from":610,"label":"StepsTo CallStep"},{"arrows":"to","to":25,"from":611,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":611,"label":"SubTerm 1"},{"arrows":"to","to":368,"from":611,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":617,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":617,"label":"SubTerm 1"},{"arrows":"to","to":610,"from":617,"label":"StepsTo BoringStep"},{"arrows":"to","to":656,"from":618,"label":"SubTerm 0"},{"arrows":"to","to":666,"from":618,"label":"SubTerm 2"},{"arrows":"to","to":668,"from":618,"label":"SubTerm 1"},{"arrows":"to","to":143,"from":622,"label":"StepsTo BoringStep"},{"arrows":"to","to":516,"from":622,"label":"SubTerm 0"},{"arrows":"to","to":653,"from":622,"label":"SubTerm 1"},{"arrows":"to","to":629,"from":628,"label":"SubTerm 2"},{"arrows":"to","to":647,"from":628,"label":"SubTerm 1"},{"arrows":"to","to":688,"from":628,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":630,"label":"SubTerm 0"},{"arrows":"to","to":496,"from":630,"label":"SubTerm 1"},{"arrows":"to","to":565,"from":630,"label":"StepsTo BoringStep"},{"arrows":"to","to":644,"from":633,"label":"StepsTo BoringStep"},{"arrows":"to","to":74,"from":636,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":636,"label":"SubTerm 1"},{"arrows":"to","to":455,"from":636,"label":"SubTerm 0"},{"arrows":"to","to":580,"from":636,"label":"SubTerm 2"},{"arrows":"to","to":545,"from":639,"label":"StepsTo BoringStep"},{"arrows":"to","to":600,"from":641,"label":"StepsTo BoringStep"},{"arrows":"to","to":254,"from":648,"label":"SubTerm 0"},{"arrows":"to","to":698,"from":648,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":649,"label":"SubTerm 0"},{"arrows":"to","to":696,"from":649,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":652,"label":"SubTerm 0"},{"arrows":"to","to":697,"from":652,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":653,"label":"StepsTo BoringStep"},{"arrows":"to","to":661,"from":660,"label":"StepsTo BoringStep"},{"arrows":"to","to":677,"from":676,"label":"SubTerm 0"},{"arrows":"to","to":434,"from":682,"label":"SubTerm 0"},{"arrows":"to","to":686,"from":684,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":703,"label":"SubTerm 0"},{"arrows":"to","to":408,"from":703,"label":"SubTerm 1"},{"arrows":"to","to":420,"from":703,"label":"StepsTo BoringStep"}],"nodes":[{"span":null,"env":[["i","1"],["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[4,1,"Redex"]],"id":0,"label":"if (i mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[3,9,"Redex"]],"id":1,"label":"if (1 mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":4,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":5,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":7,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_4","[]"],["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[26,4,"Redex"]],"id":8,"label":"let rest' =\n  2 :: (match xs_4 with\n        | [] -> []\n        | y :: ys -> if f_4 y\n                     then y :: (List.filter f_4 ys)\n                     else List.filter f_4 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,5,"Redex"]],"id":9,"label":"List.rev (let rest' =\n            2 :: (if f_1 3\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[44,1,"Redex"]],"id":10,"label":"List.rev (let rest' =\n            2 :: (if (i mod 2) = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[4,1,"Redex"]],"id":11,"label":"if (i mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[16,4,"Redex"]],"id":12,"label":"List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":13,"label":"(2 , [])"},{"span":null,"env":[],"annots":[],"id":14,"label":"[]"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":15,"label":"f_2 1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","1"]],"annots":[[1,1,"Redex"]],"id":16,"label":"(i mod 2) = 0"},{"span":null,"env":[["xs_4","[]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":17,"label":"match xs_4 with\n| [] -> []\n| y :: ys -> if f_4 y\n             then y :: (List.filter f_4 ys)\n             else List.filter f_4 ys"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":18,"label":"if f_4 y\nthen y :: (List.filter f_4 ys)\nelse List.filter f_4 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":19,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[0,59,"Redex"]],"id":20,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[21,4,"Redex"]],"id":21,"label":"(2 , List.filter f_3 ys_3)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":22,"label":"(2 , List.filter f_3 [])"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[5,109,"Redex"]],"id":23,"label":"(2 , if false\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,222,"Redex"]],"id":24,"label":"List.rev (let seen' =\n            [_ ; _] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":25,"label":"List.rev"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":26,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":27,"label":"l"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[_ ; _]"]],"annots":[[5,1,"Redex"]],"id":28,"label":"[] @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _]"]],"annots":[[0,1,"Redex"]],"id":29,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,12,"Redex"]],"id":30,"label":"[] @ [_ ; _]"},{"span":null,"env":[],"annots":[],"id":31,"label":"[_ ; _]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","1"],["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[24,1,"Redex"]],"id":32,"label":"let rest' =\n  2 :: (if (i mod 2) = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,9,"Redex"]],"id":33,"label":"let rest' =\n  2 :: (if (1 mod 2) = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[19,2,"Redex"]],"id":36,"label":"(2 , List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[14,2,"Redex"]],"id":37,"label":"List.filter f ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":38,"label":"List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":39,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,9,"Redex"]],"id":44,"label":"let rest' =\n  if (2 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,5,"Redex"]],"id":45,"label":"let rest' =\n  if 0 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[56,4,"Redex"]],"id":46,"label":"List.rev (let rest' =\n            2 :: (List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":47,"label":"f y"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":48,"label":"y"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[14,1,"Redex"],[34,2,"Redex"]],"id":49,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,2,"Redex"]],"id":50,"label":"let rest' =\n  2 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,260,"Redex"]],"id":51,"label":"List.rev (let rest' =\n            2 :: (match [1 ; 5] with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"]],"annots":[[7,3,"Redex"]],"id":52,"label":"if f_1 y_1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"]],"annots":[[4,3,"Redex"]],"id":53,"label":"f_1 y_1"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":54,"label":"(2 , match [] with\n     | [] -> []\n     | y :: ys -> if f_4 y\n                  then y :: (List.filter f_4 ys)\n                  else List.filter f_4 ys)"},{"span":null,"env":[],"annots":[],"id":55,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,5,"Redex"]],"id":56,"label":"let rest' =\n  2 :: (if f_1 3\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[24,1,"Redex"]],"id":57,"label":"let rest' =\n  2 :: (if (i mod 2) = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":59,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[],"id":60,"label":"List.filter"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,154,"Redex"]],"id":61,"label":"2 :: (match [5] with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"]],"annots":[[13,3,"Redex"]],"id":62,"label":"2 :: (if f_3 y_3\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,5,"Redex"]],"id":63,"label":"List.rev (let rest' =\n            2 :: (if f_3 5\n                  then y_3 :: (List.filter f_3\n                                           ys_3)\n                  else List.filter f_3 ys_3) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":64,"label":"(y_1 , List.filter f_1 ys_1)"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[0,59,"Redex"]],"id":66,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":67,"label":"1 = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":68,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":69,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":70,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[27,3,"Redex"]],"id":71,"label":"let rest' =\n  2 :: (if f_3 y_3\n        then y_3 :: (List.filter f_3\n                                 ys_3)\n        else List.filter f_3 ys_3) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[0,1,"Redex"]],"id":73,"label":"l"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"]],"annots":[[3,5,"Redex"]],"id":74,"label":"if f_3 5\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":null,"env":[["i","5"],["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[4,1,"Redex"]],"id":75,"label":"if (i mod 2) = 0\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":76,"label":"y_3 :: (List.filter f_3 ys_3)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,1,"Redex"]],"id":77,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,264,"Redex"]],"id":78,"label":"List.rev (let rest' =\n            2 :: (match [3 ; 1 ; 5] with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,1,"Redex"]],"id":79,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,3,"Redex"]],"id":80,"label":"List.rev (let rest' =\n            if f 2\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":81,"label":"i"},{"span":null,"env":[],"annots":[],"id":82,"label":"1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_3","[5]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[26,4,"Redex"]],"id":83,"label":"let rest' =\n  2 :: (match xs_3 with\n        | [] -> []\n        | y :: ys -> if f_3 y\n                     then y :: (List.filter f_3 ys)\n                     else List.filter f_3 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_3","[5]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":84,"label":"2 :: (match xs_3 with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"]],"annots":[[9,5,"Redex"]],"id":85,"label":"2 :: (if f_1 3\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[10,1,"Redex"]],"id":86,"label":"2 :: (if (i mod 2) = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":87,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":88,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[6,1,"Redex"]],"id":90,"label":"([] , l)"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[3,9,"Redex"]],"id":91,"label":"if (3 mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[3,5,"Redex"]],"id":92,"label":"if 1 = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":94,"label":"1 = 0"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":95,"label":"f_4 y"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[],"id":96,"label":"f_4"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":97,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,111,"Redex"]],"id":98,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":99,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":100,"label":"rest'"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,148,"Redex"]],"id":101,"label":"(2 , match [5] with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"]],"annots":[[12,3,"Redex"]],"id":102,"label":"(2 , if f_3 y_3\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","5"]],"annots":[[1,1,"Redex"]],"id":103,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[27,3,"Redex"]],"id":104,"label":"let rest' =\n  2 :: (if f_2 y_2\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"]],"annots":[[13,3,"Redex"]],"id":105,"label":"2 :: (if f_2 y_2\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,11,"Redex"]],"id":106,"label":"let seen' = [_ ; _] @ 2 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,109,"Redex"]],"id":107,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":108,"label":"f_2 y"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":109,"label":"f_2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_1","[3 ; 1 ; 5]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[26,4,"Redex"]],"id":110,"label":"let rest' =\n  2 :: (match xs_1 with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_1","[3 ; 1 ; 5]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":111,"label":"2 :: (match xs_1 with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":112,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":113,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"]],"id":114,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":115,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","3"]],"annots":[[1,1,"Redex"]],"id":116,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,39,"Redex"]],"id":117,"label":"helper ([] , [[_ ; _] ; 2 ; 3 ; 1 ; 5])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":118,"label":"([] , [[_ ; _] ; 2 ; 3 ; 1 ; 5])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":119,"label":"f 2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":120,"label":"f"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":121,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":122,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_2","[1 ; 5]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[26,4,"Redex"]],"id":123,"label":"let rest' =\n  2 :: (match xs_2 with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,393,"Redex"]],"id":125,"label":"List.rev (match [2] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,107,"Redex"]],"id":126,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[36,4,"Redex"]],"id":127,"label":"let rest' =\n  2 :: (List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[22,4,"Redex"]],"id":128,"label":"2 :: (List.filter f_1 ys_1)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":132,"label":"f_2"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,168,"Redex"]],"id":133,"label":"let seen' = [_ ; _] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":134,"label":"(y , List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":135,"label":"y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":136,"label":"f_1"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":137,"label":"1 mod 2"},{"span":null,"env":[],"annots":[],"id":138,"label":"1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,150,"Redex"]],"id":140,"label":"List.rev (let rest' =\n            2 :: (if false\n                  then y_3 :: (List.filter f_3\n                                           ys_3)\n                  else List.filter f_3 ys_3) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,256,"Redex"]],"id":141,"label":"List.rev (let rest' =\n            2 :: (match [5] with\n                  | [] -> []\n                  | y :: ys -> if f_3 y\n                               then y :: (List.filter f_3\n                                                      ys)\n                               else List.filter f_3 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2]"]],"annots":[[18,5,"Redex"]],"id":142,"label":"helper ([_ ; _] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[2]"]],"annots":[[11,5,"Redex"]],"id":143,"label":"([_ ; _] , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,9,"Redex"]],"id":144,"label":"let rest' =\n  2 :: (if (5 mod 2) = 0\n        then y_3 :: (List.filter f_3\n                                 ys_3)\n        else List.filter f_3 ys_3) in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_1","[3 ; 1 ; 5]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":145,"label":"(2 , match xs_1 with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":null,"env":[["xs_1","[3 ; 1 ; 5]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":146,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"]],"annots":[[3,5,"Redex"]],"id":147,"label":"if f_1 3\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":149,"label":"helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"]],"id":150,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,411,"Redex"]],"id":151,"label":"List.rev (match [[_ ; _] ; 2 ; 3 ; 1 ; 5] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"]],"annots":[[13,3,"Redex"]],"id":152,"label":"2 :: (if f_1 y_1\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"]],"annots":[[12,3,"Redex"]],"id":153,"label":"(2 , if f_1 y_1\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[],"annots":[],"id":154,"label":"[3 ; 1 ; 5]"},{"span":null,"env":[],"annots":[],"id":155,"label":"3"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_ ; _]"],["h_1","2"]],"annots":[[0,6,"Redex"],[9,3,"Redex"]],"id":156,"label":"seen_1 @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"]],"id":157,"label":"seen_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h_1","2"]],"annots":[[10,3,"Redex"]],"id":158,"label":"[_ ; _] @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":159,"label":"(@)"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[5,114,"Redex"]],"id":160,"label":"2 :: (if false\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[22,4,"Redex"]],"id":161,"label":"2 :: (List.filter f_2 ys_2)"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":162,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":163,"label":"(3 mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[47,3,"Redex"]],"id":164,"label":"List.rev (let rest' =\n            2 :: (if f_1 y_1\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"]],"annots":[[12,3,"Redex"]],"id":165,"label":"(2 , if f_2 y_2\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":166,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":167,"label":"2"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"]],"id":168,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":169,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[9,53,"Redex"]],"id":171,"label":"List.rev (let rest' = [2] in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":172,"label":"[2 ; 3 ; 1 ; 5]"},{"span":null,"env":[],"annots":[],"id":173,"label":"1"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[0,94,"Redex"]],"id":174,"label":"if false\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[16,4,"Redex"]],"id":175,"label":"List.filter f_2 ys_2"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":176,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":177,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,5,"Redex"]],"id":178,"label":"List.rev (let rest' =\n            2 :: (if 1 = 0\n                  then y_3 :: (List.filter f_3\n                                           ys_3)\n                  else List.filter f_3 ys_3) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,19,"Redex"]],"id":179,"label":"List.filter f_2 [5]"},{"span":null,"env":[["xs_3","[5]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":180,"label":"match xs_3 with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,20,"Redex"]],"id":181,"label":"let rest' =\n  2 :: (List.filter f_3 []) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":182,"label":"f_1 3"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","1"],["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[44,1,"Redex"]],"id":183,"label":"List.rev (let rest' =\n            2 :: (if (i mod 2) = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,282,"Redex"]],"id":186,"label":"match [2] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_ ; _]"],["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,3,"Redex"]],"id":187,"label":"let seen' = seen_1 @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[13,1,"Redex"]],"id":189,"label":"helper ([] , l)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[36,4,"Redex"]],"id":190,"label":"let rest' =\n  2 :: (List.filter f_3 ys_3) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":191,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":192,"label":"2"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"]],"id":193,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":194,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,255,"Redex"]],"id":195,"label":"List.rev (let rest' =\n            2 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_4 y\n                               then y :: (List.filter f_4\n                                                      ys)\n                               else List.filter f_4 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":197,"label":"[_ ; _]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":198,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":199,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":200,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":202,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":203,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,5,"Redex"]],"id":204,"label":"List.rev (let rest' =\n            2 :: (if 1 = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":206,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":207,"label":"2"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":209,"label":"y_1 :: (List.filter f_1 ys_1)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"]],"annots":[[9,5,"Redex"]],"id":212,"label":"2 :: (if f_2 1\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"]],"annots":[[8,5,"Redex"]],"id":213,"label":"(2 , if f_2 1\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":214,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":215,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[47,3,"Redex"]],"id":216,"label":"List.rev (let rest' =\n            2 :: (if f_2 y_2\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,5,"Redex"]],"id":217,"label":"List.rev (let rest' =\n            2 :: (if f_2 1\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[0,41,"Redex"]],"id":218,"label":"let rest' = [2] in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"],["rest'","[2]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":219,"label":"helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":220,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":221,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,41,"Redex"]],"id":222,"label":"List.rev (helper ([] , [[_ ; _] ; 2 ; 3 ; 1 ; 5]))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[21,4,"Redex"]],"id":223,"label":"(2 , List.filter f_1 ys_1)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":224,"label":"1 = 0"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":226,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_4 y\n             then y :: (List.filter f_4 ys)\n             else List.filter f_4 ys"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":228,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,185,"Redex"]],"id":229,"label":"let rest' = 2 :: (if false\n                  then y_3 :: (List.filter f_3\n                                           ys_3)\n                  else List.filter f_3\n                                   ys_3) in helper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"]],"annots":[[7,3,"Redex"]],"id":230,"label":"if f_2 y_2\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"]],"annots":[[3,5,"Redex"]],"id":231,"label":"if f_2 1\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":232,"label":"h_1"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[9,9,"Redex"]],"id":233,"label":"2 :: (if (1 mod 2) = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[8,9,"Redex"]],"id":234,"label":"(2 , if (1 mod 2) = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2]"]],"annots":[[28,5,"Redex"]],"id":235,"label":"List.rev (helper ([_ ; _] , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,24,"Redex"]],"id":236,"label":"List.rev (helper ([_ ; _] , [2]))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,12,"Redex"]],"id":237,"label":"let seen' = [] @ [_ ; _] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["i","3"],["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[9,1,"Redex"]],"id":238,"label":"(2 , if (i mod 2) = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"]],"annots":[[4,3,"Redex"]],"id":239,"label":"f_2 y_2"},{"span":null,"env":[["y_2","1"]],"annots":[[0,3,"Redex"]],"id":240,"label":"y_2"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":241,"label":"helper"},{"span":null,"env":[],"annots":[],"id":242,"label":"1"},{"span":null,"env":[["xs_4","[]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":243,"label":"(2 , match xs_4 with\n     | [] -> []\n     | y :: ys -> if f_4 y\n                  then y :: (List.filter f_4 ys)\n                  else List.filter f_4 ys)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,23,"Redex"]],"id":244,"label":"List.filter f_1 [1 ; 5]"},{"span":null,"env":[],"annots":[],"id":245,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,9,"Redex"]],"id":246,"label":"let rest' =\n  2 :: (if (3 mod 2) = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[3,5,"Redex"]],"id":247,"label":"if 1 = 0\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,5,"Redex"]],"id":249,"label":"List.rev (let rest' =\n            2 :: (if 1 = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,23,"Redex"]],"id":251,"label":"(2 , List.filter f_1 [1 ; 5])"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[3,9,"Redex"]],"id":252,"label":"if (5 mod 2) = 0\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":253,"label":"if f_3 y\nthen y :: (List.filter f_3 ys)\nelse List.filter f_3 ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":254,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":255,"label":"2"},{"span":null,"env":[["xs_3","[5]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":256,"label":"(2 , match xs_3 with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,42,"Redex"]],"id":257,"label":"removeDuplicates [[_ ; _] ; 2 ; 3 ; 1 ; 5]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[0,381,"Redex"]],"id":258,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":259,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":260,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[18,1,"Redex"]],"id":261,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","2"]],"annots":[[1,1,"Redex"]],"id":262,"label":"(i mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[12,5,"Redex"],[18,3,"Redex"]],"id":263,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":264,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":265,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":266,"label":"helper ([] , l)"},{"span":null,"env":[],"annots":[],"id":267,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[14,142,"Redex"]],"id":268,"label":"let rest' =\n  match [2 ; 3 ; 1 ; 5] with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,134,"Redex"]],"id":269,"label":"match [2 ; 3 ; 1 ; 5] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[5,109,"Redex"]],"id":270,"label":"(2 , if false\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":271,"label":"if f_2 y\nthen y :: (List.filter f_2 ys)\nelse List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":272,"label":"y :: (List.filter f_2 ys)"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[9,5,"Redex"]],"id":273,"label":"2 :: (if 1 = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[8,5,"Redex"]],"id":274,"label":"(2 , if 1 = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[0,58,"Redex"]],"id":276,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":277,"label":"y :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":278,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":279,"label":"3 mod 2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[44,3,"Redex"]],"id":281,"label":"List.rev (let seen' =\n            [_ ; _] @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,11,"Redex"]],"id":282,"label":"List.rev (let seen' =\n            [_ ; _] @ 2 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,162,"Redex"]],"id":283,"label":"let rest' =\n  2 :: (match [5] with\n        | [] -> []\n        | y :: ys -> if f_3 y\n                     then y :: (List.filter f_3 ys)\n                     else List.filter f_3 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":284,"label":"1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,161,"Redex"]],"id":285,"label":"let rest' =\n  2 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f_4 y\n                     then y :: (List.filter f_4 ys)\n                     else List.filter f_4 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_ ; _]"],["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"],[43,3,"Redex"]],"id":286,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,300,"Redex"]],"id":287,"label":"match [[_ ; _] ; 2 ; 3 ; 1 ; 5] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,5,"Redex"]],"id":288,"label":"let rest' =\n  2 :: (if 1 = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,21,"Redex"]],"id":291,"label":"let rest' =\n  2 :: (List.filter f_2 [5]) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,3,"Redex"]],"id":292,"label":"let rest' =\n  if f 2\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":293,"label":"(1 mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":296,"label":"rest'"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,381,"Redex"]],"id":298,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":299,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":300,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":302,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,9,"Redex"]],"id":303,"label":"List.rev (let rest' =\n            2 :: (if (1 mod 2) = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[3,5,"Redex"]],"id":305,"label":"if 0 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":306,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[9,9,"Redex"]],"id":308,"label":"2 :: (if (3 mod 2) = 0\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[2]"]],"annots":[[0,6,"Redex"]],"id":309,"label":"rest_1"},{"span":null,"env":[],"annots":[],"id":310,"label":"[2]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":311,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":312,"label":"(i mod 2) = 0"},{"span":null,"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[4,1,"Redex"]],"id":313,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[8,5,"Redex"]],"id":315,"label":"(2 , if 1 = 0\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[56,4,"Redex"]],"id":316,"label":"List.rev (let rest' =\n            2 :: (List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":317,"label":"5 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":318,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":319,"label":"let rest' =\n  2 :: (if false\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,185,"Redex"]],"id":320,"label":"let rest' = 2 :: (if false\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2\n                                   ys_2) in helper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,19,"Redex"]],"id":321,"label":"(2 , List.filter f_2 [5])"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":322,"label":"let rest' =\n  2 :: (if false\n        then y_3 :: (List.filter f_3\n                                 ys_3)\n        else List.filter f_3 ys_3) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[8,9,"Redex"]],"id":323,"label":"(2 , if (5 mod 2) = 0\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":null,"env":[["xs_4","[]"]],"annots":[[0,4,"Redex"]],"id":325,"label":"xs_4"},{"span":null,"env":[],"annots":[],"id":326,"label":"[]"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,158,"Redex"]],"id":327,"label":"2 :: (match [1 ; 5] with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":null,"env":[["i","5"],["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[9,1,"Redex"]],"id":328,"label":"(2 , if (i mod 2) = 0\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[3,9,"Redex"]],"id":331,"label":"if (2 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":333,"label":"i"},{"span":null,"env":[],"annots":[],"id":334,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,11,"Redex"]],"id":335,"label":"[_ ; _] @ 2"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,1,"Redex"]],"id":336,"label":"let seen' = seen_1 @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"],[9,1,"Redex"]],"id":337,"label":"seen_1 @ h"},{"span":null,"env":[],"annots":[],"id":338,"label":"[1 ; 5]"},{"span":null,"env":[],"annots":[],"id":339,"label":"1"},{"span":null,"env":[["xs_2","[1 ; 5]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"]],"id":340,"label":"(2 , match xs_2 with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["xs_2","[1 ; 5]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"]],"id":341,"label":"match xs_2 with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,150,"Redex"]],"id":342,"label":"List.rev (let rest' =\n            2 :: (if false\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[_ ; _]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":343,"label":"seen @ h"},{"span":null,"env":[["ys_1","[1 ; 5]"]],"annots":[[0,4,"Redex"]],"id":344,"label":"ys_1"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":345,"label":"[]"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":347,"label":"y :: (List.filter f_3 ys)"},{"span":null,"env":[],"annots":[],"id":349,"label":"false"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,57,"Redex"]],"id":350,"label":"List.rev (let rest' =\n            2 :: (List.filter f\n                              [3 ; 1 ; 5]) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,47,"Redex"]],"id":351,"label":"let rest' =\n  2 :: (List.filter f\n                    [3 ; 1 ; 5]) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":352,"label":"([_ ; _] , [2])"},{"span":null,"env":[],"annots":[],"id":353,"label":"[2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,21,"Redex"]],"id":354,"label":"List.rev (let rest' =\n            2 :: (List.filter f_2 [5]) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,5,"Redex"]],"id":355,"label":"let rest' =\n  2 :: (if 1 = 0\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":356,"label":"let rest' =\n  2 :: (if false\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":357,"label":"(y , List.filter f_3 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":358,"label":"y"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":359,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":360,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","5"]],"annots":[[0,1,"Redex"]],"id":361,"label":"i mod 2"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,128,"Redex"]],"id":362,"label":"match [5] with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":null,"env":[],"annots":[],"id":364,"label":"3"},{"span":null,"env":[],"annots":[],"id":367,"label":"5"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,5,"Redex"]],"id":368,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":369,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":370,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":371,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":372,"label":"i mod 2"},{"span":null,"env":[["i","1"],["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[9,1,"Redex"]],"id":373,"label":"(2 , if (i mod 2) = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[3 ; 1 ; 5]"]],"annots":[[5,1,"Redex"]],"id":374,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["xs","[2 ; 3 ; 1 ; 5]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"]],"id":375,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["xs","[2 ; 3 ; 1 ; 5]"]],"annots":[[0,2,"Redex"]],"id":376,"label":"xs"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":377,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":378,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":379,"label":"2 mod 2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[2 ; 3 ; 1 ; 5]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[40,2,"Redex"]],"id":380,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[2 ; 3 ; 1 ; 5]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[20,2,"Redex"]],"id":381,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[8,9,"Redex"]],"id":382,"label":"(2 , if (3 mod 2) = 0\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"],["rest'","[2]"]],"annots":[[18,5,"Redex"],[26,5,"Redex"]],"id":383,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"]],"id":384,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":385,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":386,"label":"2"},{"span":null,"env":[["xs_3","[5]"]],"annots":[[0,4,"Redex"]],"id":387,"label":"xs_3"},{"span":null,"env":[],"annots":[],"id":388,"label":"[5]"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h_1","2"],["t_1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[22,3,"Redex"]],"id":389,"label":"let seen' = [_ ; _] @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,25,"Redex"]],"id":390,"label":"List.filter f [3 ; 1 ; 5]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":391,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":392,"label":"[]"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,162,"Redex"]],"id":393,"label":"2 :: (match [3 ; 1 ; 5] with\n      | [] -> []\n      | y :: ys -> if f_1 y\n                   then y :: (List.filter f_1 ys)\n                   else List.filter f_1 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_3","[5]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[46,4,"Redex"]],"id":394,"label":"List.rev (let rest' =\n            2 :: (match xs_3 with\n                  | [] -> []\n                  | y :: ys -> if f_3 y\n                               then y :: (List.filter f_3\n                                                      ys)\n                               else List.filter f_3 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[0,94,"Redex"]],"id":395,"label":"if false\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":396,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":397,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","5"],["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[44,1,"Redex"]],"id":398,"label":"List.rev (let rest' =\n            2 :: (if (i mod 2) = 0\n                  then y_3 :: (List.filter f_3\n                                           ys_3)\n                  else List.filter f_3 ys_3) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","5"],["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[24,1,"Redex"]],"id":399,"label":"let rest' =\n  2 :: (if (i mod 2) = 0\n        then y_3 :: (List.filter f_3\n                                 ys_3)\n        else List.filter f_3 ys_3) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":400,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest_1","[2]"],["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,6,"Redex"]],"id":401,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"]],"id":402,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,55,"Redex"]],"id":403,"label":"List.rev (let rest' =\n            2 :: (List.filter f_1\n                              [1 ; 5]) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,45,"Redex"]],"id":404,"label":"let rest' =\n  2 :: (List.filter f_1\n                    [1 ; 5]) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[5,109,"Redex"]],"id":405,"label":"(2 , if false\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":406,"label":"y_2 :: (List.filter f_2 ys_2)"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":407,"label":"(y_2 , List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[32,1,"Redex"]],"id":408,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":409,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":410,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,22,"Redex"]],"id":412,"label":"helper ([_ ; _] , [2])"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":413,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":415,"label":"let rest' = 2 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":416,"label":"h"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,45,"Redex"]],"id":417,"label":"List.filter is_in\n            [2 ; 3 ; 1 ; 5]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":418,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":419,"label":"List.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,57,"Redex"]],"id":420,"label":"List.rev (let rest' =\n            List.filter is_in\n                        [2 ; 3 ; 1 ; 5] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[12,57,"Redex"]],"id":421,"label":"let rest' = List.filter is_in\n                        [2 ; 3 ; 1 ; 5] in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":422,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":423,"label":"(y , List.filter f ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,5,"Redex"]],"id":424,"label":"let rest' =\n  2 :: (if 1 = 0\n        then y_3 :: (List.filter f_3\n                                 ys_3)\n        else List.filter f_3 ys_3) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_1","[3 ; 1 ; 5]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[46,4,"Redex"]],"id":425,"label":"List.rev (let rest' =\n            2 :: (match xs_1 with\n                  | [] -> []\n                  | y :: ys -> if f_1 y\n                               then y :: (List.filter f_1\n                                                      ys)\n                               else List.filter f_1 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"]],"annots":[[8,5,"Redex"]],"id":427,"label":"(2 , if f_1 3\n     then y_1 :: (List.filter f_1\n                              ys_1)\n     else List.filter f_1 ys_1)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":428,"label":"f_3 y"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":429,"label":"(y , List.filter f ys)"},{"span":null,"env":[["ys_2","[5]"]],"annots":[[0,4,"Redex"]],"id":431,"label":"ys_2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,170,"Redex"]],"id":432,"label":"let rest' =\n  2 :: (match [3 ; 1 ; 5] with\n        | [] -> []\n        | y :: ys -> if f_1 y\n                     then y :: (List.filter f_1 ys)\n                     else List.filter f_1 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":433,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":434,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":435,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":436,"label":"(2 mod 2) = 0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,136,"Redex"]],"id":437,"label":"match [3 ; 1 ; 5] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":438,"label":"[]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"]],"annots":[[2,1,"Redex"]],"id":439,"label":"f y"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","[_ ; _]"],["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"]],"id":440,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[8,5,"Redex"]],"id":441,"label":"(2 , if 1 = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[3,5,"Redex"]],"id":442,"label":"if 1 = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":443,"label":"f_1 y"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":444,"label":"f_1"},{"span":null,"env":[],"annots":[],"id":445,"label":"[]"},{"span":null,"env":[],"annots":[],"id":447,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,1,"Redex"],[54,2,"Redex"]],"id":448,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[5,114,"Redex"]],"id":450,"label":"2 :: (if false\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[19,166,"Redex"]],"id":451,"label":"let rest' =\n  2 :: (match [1 ; 5] with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[36,4,"Redex"]],"id":452,"label":"let rest' =\n  2 :: (List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":453,"label":"5"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":454,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"]],"annots":[[4,3,"Redex"]],"id":455,"label":"f_3 y_3"},{"span":null,"env":[["y_3","5"]],"annots":[[0,3,"Redex"]],"id":456,"label":"y_3"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[0,94,"Redex"]],"id":459,"label":"if false\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,5,"Redex"]],"id":461,"label":"let rest' =\n  2 :: (if f_3 5\n        then y_3 :: (List.filter f_3\n                                 ys_3)\n        else List.filter f_3 ys_3) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"]],"annots":[[9,5,"Redex"]],"id":462,"label":"2 :: (if f_3 5\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":463,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,20,"Redex"]],"id":464,"label":"2 :: (List.filter f_3 [])"},{"span":null,"env":[["xs_4","[]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":465,"label":"2 :: (match xs_4 with\n      | [] -> []\n      | y :: ys -> if f_4 y\n                   then y :: (List.filter f_4 ys)\n                   else List.filter f_4 ys)"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[9,9,"Redex"]],"id":466,"label":"2 :: (if (5 mod 2) = 0\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,9,"Redex"]],"id":467,"label":"List.rev (let rest' =\n            2 :: (if (5 mod 2) = 0\n                  then y_3 :: (List.filter f_3\n                                           ys_3)\n                  else List.filter f_3 ys_3) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[22,4,"Redex"]],"id":468,"label":"2 :: (List.filter f_3 ys_3)"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[9,5,"Redex"]],"id":469,"label":"2 :: (if 1 = 0\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":470,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":471,"label":"0"},{"span":null,"env":[["xs_1","[3 ; 1 ; 5]"]],"annots":[[0,4,"Redex"]],"id":472,"label":"xs_1"},{"span":null,"env":[["i","1"],["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[10,1,"Redex"]],"id":473,"label":"2 :: (if (i mod 2) = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[],"annots":[],"id":474,"label":"1"},{"span":null,"env":[],"annots":[],"id":475,"label":"5"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,182,"Redex"]],"id":476,"label":"List.rev (let rest' =\n            match [2 ; 3 ; 1 ; 5] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","2"]],"annots":[[0,1,"Redex"]],"id":477,"label":"y"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":478,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":479,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":480,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","3"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[27,3,"Redex"]],"id":481,"label":"let rest' =\n  2 :: (if f_1 y_1\n        then y_1 :: (List.filter f_1\n                                 ys_1)\n        else List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"]],"annots":[[20,2,"Redex"]],"id":482,"label":"2 :: (List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":484,"label":"[1 ; 5]"},{"span":null,"env":[],"annots":[],"id":485,"label":"5"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":486,"label":"(5 mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[0,1,"Redex"]],"id":487,"label":"t"},{"span":null,"env":[],"annots":[],"id":488,"label":"[2 ; 3 ; 1 ; 5]"},{"span":null,"env":[],"annots":[],"id":489,"label":"2 :: []"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":490,"label":"f"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,156,"Redex"]],"id":491,"label":"(2 , match [3 ; 1 ; 5] with\n     | [] -> []\n     | y :: ys -> if f_1 y\n                  then y :: (List.filter f_1 ys)\n                  else List.filter f_1 ys)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[]"]],"annots":[[0,3,"Redex"]],"id":492,"label":"t_1"},{"span":null,"env":[["xs_2","[1 ; 5]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"]],"id":493,"label":"2 :: (match xs_2 with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":495,"label":"y"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","[_ ; _]"],["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":496,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[17,185,"Redex"]],"id":497,"label":"let rest' = 2 :: (if false\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1\n                                   ys_1) in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"]],"id":501,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":503,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[47,3,"Redex"]],"id":504,"label":"List.rev (let rest' =\n            2 :: (if f_3 y_3\n                  then y_3 :: (List.filter f_3\n                                           ys_3)\n                  else List.filter f_3 ys_3) in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _]"]],"annots":[[0,6,"Redex"]],"id":505,"label":"seen_1"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,45,"Redex"]],"id":506,"label":"2 :: (List.filter f\n                  [3 ; 1 ; 5])"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,42,"Redex"]],"id":507,"label":"(2 , List.filter f\n                 [3 ; 1 ; 5])"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[21,4,"Redex"]],"id":508,"label":"(2 , List.filter f_2 ys_2)"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[0,4,"Redex"]],"id":509,"label":"rest"},{"span":null,"env":[],"annots":[],"id":510,"label":"[[_ ; _] ; 2 ; 3 ; 1 ; 5]"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,152,"Redex"]],"id":511,"label":"(2 , match [1 ; 5] with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[],"annots":[],"id":512,"label":"false"},{"span":null,"env":[["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":514,"label":"(y_3 , List.filter f_3 ys_3)"},{"span":null,"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"]],"annots":[[5,114,"Redex"]],"id":515,"label":"2 :: (if false\n      then y_1 :: (List.filter f_1\n                               ys_1)\n      else List.filter f_1 ys_1)"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[0,5,"Redex"]],"id":516,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":517,"label":"[_ ; _]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":518,"label":"t"},{"span":null,"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"]],"annots":[[9,5,"Redex"]],"id":520,"label":"2 :: (if 1 = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":521,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":523,"label":"(y , List.filter f_1 ys)"},{"span":null,"env":[],"annots":[],"id":524,"label":"[[_ ; _] ; 2 ; 3 ; 1 ; 5]"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":525,"label":"y :: (List.filter f_4 ys)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":526,"label":"0 = 0"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":528,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":529,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":530,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":531,"label":"[_ ; _]"},{"span":null,"env":[],"annots":[],"id":532,"label":"_"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":533,"label":"y"},{"span":null,"env":[],"annots":[],"id":534,"label":"5"},{"span":null,"env":[],"annots":[],"id":535,"label":"2"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"]],"annots":[[8,5,"Redex"]],"id":536,"label":"(2 , if f_3 5\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":null,"env":[["i","5"],["y_3","5"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[10,1,"Redex"]],"id":537,"label":"2 :: (if (i mod 2) = 0\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,25,"Redex"]],"id":538,"label":"2 :: (List.filter f_1 [1 ; 5])"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,21,"Redex"]],"id":539,"label":"2 :: (List.filter f_2 [5])"},{"span":null,"env":[],"annots":[],"id":540,"label":"5"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_2","[1 ; 5]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[46,4,"Redex"]],"id":542,"label":"List.rev (let rest' =\n            2 :: (match xs_2 with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest_1","[2]"],["seen_1","[_ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,6,"Redex"]],"id":543,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":544,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":545,"label":"3"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","3"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[43,9,"Redex"]],"id":546,"label":"List.rev (let rest' =\n            2 :: (if (3 mod 2) = 0\n                  then y_1 :: (List.filter f_1\n                                           ys_1)\n                  else List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":547,"label":"is_in"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[3 ; 1 ; 5]"]],"annots":[[3,3,"Redex"]],"id":548,"label":"if f 2\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","1"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[23,5,"Redex"]],"id":549,"label":"let rest' =\n  2 :: (if f_2 1\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":550,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":551,"label":"(@)"},{"span":null,"env":[],"annots":[],"id":552,"label":"1"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":553,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[38,1,"Redex"]],"id":554,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":555,"label":"List.filter f_2 ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":556,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":557,"label":"rest'"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":558,"label":"(y , List.filter f_4 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":559,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[22,141,"Redex"]],"id":560,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":561,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":562,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,12,"Redex"]],"id":564,"label":"List.rev (let seen' =\n            [] @ [_ ; _] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","[_ ; _]"],["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"]],"id":565,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":566,"label":"2 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_4 y\n                   then y :: (List.filter f_4 ys)\n                   else List.filter f_4 ys)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":567,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":568,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[6,1,"Redex"]],"id":569,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[0,1,"Redex"]],"id":570,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":571,"label":"helper ([] , l)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":572,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":573,"label":"is_in"},{"span":null,"env":[],"annots":[],"id":574,"label":"[]"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":576,"label":"List.filter f_4 ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":577,"label":"t"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,107,"Redex"]],"id":578,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[0,1,"Redex"]],"id":579,"label":"t"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"]],"annots":[[16,4,"Redex"]],"id":580,"label":"List.filter f_3 ys_3"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","1"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,150,"Redex"]],"id":581,"label":"List.rev (let rest' =\n            2 :: (if false\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,132,"Redex"]],"id":582,"label":"match [1 ; 5] with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":583,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[],"id":584,"label":"List.rev (let rest' =\n            2 :: [] in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_2","[1 ; 5]"]],"annots":[[0,4,"Redex"]],"id":585,"label":"xs_2"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[18,1,"Redex"]],"id":586,"label":"List.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":587,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":588,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2 ; 3 ; 1 ; 5]"]],"annots":[[0,1,"Redex"]],"id":589,"label":"t"},{"span":null,"env":[],"annots":[],"id":590,"label":"_"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[23,1,"Redex"]],"id":591,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_ ; _] ; 2 ; 3 ; 1 ; 5]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":592,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[]"]],"annots":[[0,61,"Redex"]],"id":593,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":594,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,18,"Redex"]],"id":595,"label":"List.filter f_3 []"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"]],"id":597,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":598,"label":"_"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[34,83,"Redex"]],"id":599,"label":"List.rev (let rest' =\n            let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":600,"label":"[]"},{"span":null,"env":[["ys","[3 ; 1 ; 5]"]],"annots":[[0,2,"Redex"]],"id":601,"label":"ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":603,"label":"helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":604,"label":"5"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_4","[]"],["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[46,4,"Redex"]],"id":605,"label":"List.rev (let rest' =\n            2 :: (match xs_4 with\n                  | [] -> []\n                  | y :: ys -> if f_4 y\n                               then y :: (List.filter f_4\n                                                      ys)\n                               else List.filter f_4 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[54,2,"Redex"]],"id":606,"label":"List.rev (let rest' =\n            2 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":607,"label":"f_3 5"},{"span":null,"env":[],"annots":[],"id":608,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":609,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[39,20,"Redex"]],"id":610,"label":"List.rev (let rest' =\n            2 :: (List.filter f_3 []) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[37,9,"Redex"]],"id":611,"label":"List.rev (let rest' =\n            if (2 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":612,"label":"false"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":613,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":614,"label":"0"},{"span":null,"env":[],"annots":[],"id":615,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":616,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[56,4,"Redex"]],"id":617,"label":"List.rev (let rest' =\n            2 :: (List.filter f_3 ys_3) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":618,"label":"List.filter f_3 ys"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":619,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":620,"label":"List.filter"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":621,"label":"rest"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_ ; _]"],["rest'","[2]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":622,"label":"(seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":623,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":624,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":625,"label":"i"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":627,"label":"ys"},{"span":null,"env":[],"annots":[],"id":628,"label":"[3 ; 1 ; 5]"},{"span":null,"env":[],"annots":[],"id":629,"label":"5"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","[_ ; _]"],["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"]],"id":630,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":631,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":632,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":633,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":634,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":635,"label":"0"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","5"],["ys_3","[]"]],"annots":[[7,3,"Redex"]],"id":636,"label":"if f_3 y_3\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":637,"label":"h"},{"span":null,"env":[],"annots":[],"id":638,"label":"3"},{"span":null,"env":[["y_1","3"]],"annots":[[0,3,"Redex"]],"id":639,"label":"y_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":640,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":641,"label":"seen"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":642,"label":"seen"},{"span":null,"env":[],"annots":[],"id":643,"label":"true"},{"span":null,"env":[],"annots":[],"id":644,"label":"3"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":645,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":646,"label":"i"},{"span":null,"env":[],"annots":[],"id":647,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":648,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":649,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":651,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":652,"label":"(i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[2]"]],"annots":[[0,5,"Redex"]],"id":653,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":654,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":655,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":656,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":657,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _]"]],"annots":[[0,5,"Redex"]],"id":658,"label":"seen'"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":659,"label":"ys"},{"span":null,"env":[["ys_3","[]"]],"annots":[[0,4,"Redex"]],"id":660,"label":"ys_3"},{"span":null,"env":[],"annots":[],"id":661,"label":"[]"},{"span":null,"env":[],"annots":[],"id":662,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":663,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":664,"label":"h"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":665,"label":"i"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":666,"label":"ys"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":667,"label":"helper"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":668,"label":"f_3"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":669,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":670,"label":"List.rev"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":671,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":672,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":673,"label":"i"},{"span":null,"env":[],"annots":[],"id":674,"label":"_"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":675,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":676,"label":"[5]"},{"span":null,"env":[],"annots":[],"id":677,"label":"5"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":678,"label":"ys"},{"span":null,"env":[],"annots":[],"id":679,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":680,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":681,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":682,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":683,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","5"]],"annots":[[0,1,"Redex"]],"id":684,"label":"i"},{"span":null,"env":[],"annots":[],"id":685,"label":"[[_ ; _] ; 2 ; 3 ; 1 ; 5]"},{"span":null,"env":[],"annots":[],"id":686,"label":"5"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":687,"label":"f_3"},{"span":null,"env":[],"annots":[],"id":688,"label":"3"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":689,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":690,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":691,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":692,"label":"List.rev"},{"span":null,"env":[],"annots":[],"id":693,"label":"_"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":694,"label":"(@)"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":695,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":696,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":697,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":698,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":699,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":700,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":701,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":702,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2 ; 3 ; 1 ; 5]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _]"]],"annots":[[52,1,"Redex"]],"id":703,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":704,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":705,"label":"h"},{"span":null,"env":[],"annots":[],"id":706,"label":"1"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":707,"label":"(@)"},{"span":null,"env":[],"annots":[],"id":708,"label":"_"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":709,"label":"seen"}]}