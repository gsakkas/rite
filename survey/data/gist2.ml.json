{"root":331,"result":"stuck","reason":"Type error : could not match int with 't136 list","bad":203,"stuck":809,"edges":[{"arrows":"to","to":5,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":458,"from":1,"label":"StepsTo ReturnStep"},{"arrows":"to","to":698,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 2"},{"arrows":"to","to":592,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":674,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":517,"from":3,"label":"SubTerm 2"},{"arrows":"to","to":849,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":869,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":253,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":367,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":842,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":302,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":636,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":672,"from":15,"label":"StepsTo PrimStep"},{"arrows":"to","to":5,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":354,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":550,"from":16,"label":"StepsTo PrimStep"},{"arrows":"to","to":18,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":558,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":241,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":318,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":23,"label":"SubTerm 2"},{"arrows":"to","to":863,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":665,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":878,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":476,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":765,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":767,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":650,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":438,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":768,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":209,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":34,"label":"StepsTo BoringStep"},{"arrows":"to","to":502,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":528,"from":35,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":347,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":404,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":40,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":614,"from":39,"label":"SubTerm 2"},{"arrows":"to","to":697,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":635,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":41,"label":"StepsTo CallStep"},{"arrows":"to","to":378,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":282,"from":42,"label":"StepsTo PrimStep"},{"arrows":"to","to":460,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":658,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":254,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":483,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":406,"from":46,"label":"StepsTo CallStep"},{"arrows":"to","to":628,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":701,"from":48,"label":"StepsTo CallStep"},{"arrows":"to","to":50,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":598,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":599,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":641,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":216,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":597,"from":55,"label":"StepsTo PrimStep"},{"arrows":"to","to":5,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":477,"from":56,"label":"StepsTo PrimStep"},{"arrows":"to","to":544,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":62,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":814,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":439,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":475,"from":63,"label":"StepsTo ReturnStep"},{"arrows":"to","to":66,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":575,"from":65,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":684,"from":66,"label":"StepsTo CallStep"},{"arrows":"to","to":209,"from":67,"label":"StepsTo BoringStep"},{"arrows":"to","to":529,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":529,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":755,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":755,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":417,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":819,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":69,"label":"StepsTo PrimStep"},{"arrows":"to","to":418,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":819,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":71,"label":"StepsTo CallStep"},{"arrows":"to","to":719,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":294,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":443,"from":73,"label":"StepsTo BoringStep"},{"arrows":"to","to":75,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":356,"from":74,"label":"SubTerm 2"},{"arrows":"to","to":878,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":76,"label":"StepsTo ReturnStep"},{"arrows":"to","to":111,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":459,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":658,"from":80,"label":"SubTerm 2"},{"arrows":"to","to":70,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":667,"from":81,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":582,"from":82,"label":"StepsTo CallStep"},{"arrows":"to","to":600,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":473,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":84,"label":"StepsTo CallStep"},{"arrows":"to","to":699,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":738,"from":87,"label":"SubTerm 2"},{"arrows":"to","to":873,"from":87,"label":"SubTerm 3"},{"arrows":"to","to":902,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":908,"from":87,"label":"SubTerm 4"},{"arrows":"to","to":5,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":89,"label":"StepsTo BoringStep"},{"arrows":"to","to":111,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":90,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":91,"label":"StepsTo BoringStep"},{"arrows":"to","to":434,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":92,"label":"SubTerm 2"},{"arrows":"to","to":156,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":867,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":96,"from":95,"label":"SubTerm 3"},{"arrows":"to","to":202,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":596,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":622,"from":95,"label":"SubTerm 2"},{"arrows":"to","to":70,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":97,"label":"StepsTo CallStep"},{"arrows":"to","to":364,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":752,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":153,"from":99,"label":"StepsTo BoringStep"},{"arrows":"to","to":101,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":351,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":328,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":617,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":102,"label":"SubTerm 2"},{"arrows":"to","to":378,"from":102,"label":"StepsTo BoringStep"},{"arrows":"to","to":414,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":420,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":215,"from":103,"label":"SubTerm 2"},{"arrows":"to","to":600,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":743,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":213,"from":106,"label":"StepsTo CallStep"},{"arrows":"to","to":70,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":388,"from":107,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":108,"label":"StepsTo CallStep"},{"arrows":"to","to":222,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":111,"label":"SubTerm 2"},{"arrows":"to","to":103,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":420,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":858,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":112,"label":"SubTerm 2"},{"arrows":"to","to":156,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":112,"label":"StepsTo BoringStep"},{"arrows":"to","to":379,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":204,"from":113,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":119,"label":"StepsTo BoringStep"},{"arrows":"to","to":264,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":210,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":361,"from":120,"label":"StepsTo CallStep"},{"arrows":"to","to":94,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":369,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":653,"from":121,"label":"StepsTo PrimStep"},{"arrows":"to","to":73,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":122,"label":"StepsTo BoringStep"},{"arrows":"to","to":123,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":122,"label":"SubTerm 2"},{"arrows":"to","to":78,"from":124,"label":"StepsTo BoringStep"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":818,"from":125,"label":"SubTerm 2"},{"arrows":"to","to":843,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":845,"from":125,"label":"SubTerm 3"},{"arrows":"to","to":877,"from":125,"label":"SubTerm 4"},{"arrows":"to","to":884,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":536,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":130,"label":"StepsTo PrimStep"},{"arrows":"to","to":131,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":457,"from":130,"label":"SubTerm 2"},{"arrows":"to","to":788,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":133,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":530,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":134,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":456,"from":134,"label":"SubTerm 2"},{"arrows":"to","to":788,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":135,"label":"StepsTo ReturnStep"},{"arrows":"to","to":234,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":135,"label":"SubTerm 2"},{"arrows":"to","to":638,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":819,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":833,"from":136,"label":"StepsTo ReturnStep"},{"arrows":"to","to":74,"from":137,"label":"SubTerm 1"},{"arrows":"to","to":665,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":702,"from":139,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":142,"label":"StepsTo BoringStep"},{"arrows":"to","to":341,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":658,"from":142,"label":"SubTerm 2"},{"arrows":"to","to":94,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":290,"from":143,"label":"StepsTo CallStep"},{"arrows":"to","to":145,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":695,"from":144,"label":"SubTerm 2"},{"arrows":"to","to":870,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":146,"label":"StepsTo CallStep"},{"arrows":"to","to":386,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":316,"from":147,"label":"StepsTo BoringStep"},{"arrows":"to","to":357,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":696,"from":148,"label":"SubTerm 2"},{"arrows":"to","to":871,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":416,"from":150,"label":"StepsTo PrimStep"},{"arrows":"to","to":5,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":151,"label":"StepsTo PrimStep"},{"arrows":"to","to":741,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":664,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":724,"from":153,"label":"StepsTo BoringStep"},{"arrows":"to","to":155,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":730,"from":154,"label":"StepsTo CallStep"},{"arrows":"to","to":94,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":713,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":772,"from":157,"label":"StepsTo BoringStep"},{"arrows":"to","to":139,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":159,"label":"StepsTo BoringStep"},{"arrows":"to","to":46,"from":160,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":160,"label":"StepsTo CallStep"},{"arrows":"to","to":406,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":419,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":162,"label":"StepsTo BoringStep"},{"arrows":"to","to":896,"from":163,"label":"SubTerm 2"},{"arrows":"to","to":901,"from":163,"label":"SubTerm 1"},{"arrows":"to","to":916,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":797,"from":166,"label":"StepsTo ReturnStep"},{"arrows":"to","to":5,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":167,"label":"StepsTo ReturnStep"},{"arrows":"to","to":122,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":169,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":633,"from":168,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":169,"label":"StepsTo BoringStep"},{"arrows":"to","to":456,"from":169,"label":"SubTerm 2"},{"arrows":"to","to":568,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":170,"label":"SubTerm 0"},{"arrows":"to","to":171,"from":170,"label":"SubTerm 1"},{"arrows":"to","to":648,"from":170,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":171,"label":"StepsTo BoringStep"},{"arrows":"to","to":102,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":430,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":562,"from":176,"label":"StepsTo ReturnStep"},{"arrows":"to","to":178,"from":177,"label":"SubTerm 1"},{"arrows":"to","to":262,"from":177,"label":"SubTerm 0"},{"arrows":"to","to":425,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":757,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":478,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":577,"from":179,"label":"SubTerm 2"},{"arrows":"to","to":577,"from":179,"label":"StepsTo BoringStep"},{"arrows":"to","to":688,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":181,"label":"StepsTo PrimStep"},{"arrows":"to","to":182,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":182,"label":"StepsTo PrimStep"},{"arrows":"to","to":737,"from":182,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":184,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":576,"from":183,"label":"StepsTo BoringStep"},{"arrows":"to","to":577,"from":183,"label":"SubTerm 2"},{"arrows":"to","to":519,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":644,"from":184,"label":"StepsTo BoringStep"},{"arrows":"to","to":774,"from":184,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":271,"from":185,"label":"StepsTo CallStep"},{"arrows":"to","to":679,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":702,"from":186,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":187,"label":"StepsTo ReturnStep"},{"arrows":"to","to":180,"from":187,"label":"SubTerm 1"},{"arrows":"to","to":188,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":577,"from":187,"label":"SubTerm 2"},{"arrows":"to","to":478,"from":188,"label":"StepsTo ReturnStep"},{"arrows":"to","to":774,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":872,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":189,"label":"SubTerm 1"},{"arrows":"to","to":591,"from":189,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":241,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":723,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":192,"from":191,"label":"SubTerm 2"},{"arrows":"to","to":292,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":909,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":181,"from":193,"label":"StepsTo BoringStep"},{"arrows":"to","to":194,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":194,"label":"StepsTo BoringStep"},{"arrows":"to","to":729,"from":194,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":196,"from":195,"label":"StepsTo BoringStep"},{"arrows":"to","to":583,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":412,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":669,"from":196,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":197,"label":"StepsTo BoringStep"},{"arrows":"to","to":199,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":778,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":319,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":410,"from":200,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":201,"label":"StepsTo BoringStep"},{"arrows":"to","to":584,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":156,"from":203,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":203,"label":"SubTerm 2"},{"arrows":"to","to":379,"from":203,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":205,"label":"StepsTo BoringStep"},{"arrows":"to","to":295,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":208,"from":207,"label":"SubTerm 2"},{"arrows":"to","to":350,"from":207,"label":"StepsTo CallStep"},{"arrows":"to","to":445,"from":207,"label":"SubTerm 1"},{"arrows":"to","to":815,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":543,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":604,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":209,"label":"StepsTo BoringStep"},{"arrows":"to","to":212,"from":209,"label":"SubTerm 1"},{"arrows":"to","to":694,"from":209,"label":"SubTerm 2"},{"arrows":"to","to":825,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":374,"from":210,"label":"StepsTo CallStep"},{"arrows":"to","to":611,"from":210,"label":"SubTerm 2"},{"arrows":"to","to":825,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":587,"from":211,"label":"StepsTo CallStep"},{"arrows":"to","to":70,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":213,"label":"StepsTo BoringStep"},{"arrows":"to","to":361,"from":213,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":170,"from":214,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":215,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":205,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":216,"label":"SubTerm 2"},{"arrows":"to","to":222,"from":216,"label":"StepsTo BoringStep"},{"arrows":"to","to":206,"from":217,"label":"SubTerm 1"},{"arrows":"to","to":392,"from":217,"label":"StepsTo BoringStep"},{"arrows":"to","to":616,"from":217,"label":"SubTerm 0"},{"arrows":"to","to":855,"from":217,"label":"SubTerm 2"},{"arrows":"to","to":221,"from":220,"label":"SubTerm 2"},{"arrows":"to","to":376,"from":220,"label":"StepsTo BoringStep"},{"arrows":"to","to":471,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":856,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":463,"from":221,"label":"SubTerm 2"},{"arrows":"to","to":726,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":783,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":222,"label":"SubTerm 1"},{"arrows":"to","to":217,"from":222,"label":"SubTerm 2"},{"arrows":"to","to":244,"from":222,"label":"SubTerm 0"},{"arrows":"to","to":584,"from":222,"label":"StepsTo CallStep"},{"arrows":"to","to":160,"from":223,"label":"StepsTo BoringStep"},{"arrows":"to","to":291,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":225,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":225,"label":"StepsTo ReturnStep"},{"arrows":"to","to":175,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":603,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":228,"from":227,"label":"StepsTo BoringStep"},{"arrows":"to","to":234,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":386,"from":228,"label":"StepsTo BoringStep"},{"arrows":"to","to":230,"from":229,"label":"StepsTo CallStep"},{"arrows":"to","to":397,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":369,"from":230,"label":"StepsTo BoringStep"},{"arrows":"to","to":421,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":325,"from":232,"label":"StepsTo CallStep"},{"arrows":"to","to":617,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":234,"from":233,"label":"StepsTo BoringStep"},{"arrows":"to","to":234,"from":233,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":233,"label":"SubTerm 2"},{"arrows":"to","to":833,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":234,"label":"StepsTo BoringStep"},{"arrows":"to","to":307,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":236,"from":235,"label":"SubTerm 1"},{"arrows":"to","to":539,"from":235,"label":"SubTerm 0"},{"arrows":"to","to":778,"from":235,"label":"SubTerm 2"},{"arrows":"to","to":198,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":238,"from":237,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":330,"from":238,"label":"StepsTo BoringStep"},{"arrows":"to","to":339,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":239,"label":"StepsTo CallStep"},{"arrows":"to","to":247,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":240,"label":"SubTerm 0"},{"arrows":"to","to":220,"from":240,"label":"SubTerm 1"},{"arrows":"to","to":359,"from":240,"label":"StepsTo BoringStep"},{"arrows":"to","to":490,"from":241,"label":"StepsTo BoringStep"},{"arrows":"to","to":507,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":831,"from":242,"label":"SubTerm 2"},{"arrows":"to","to":919,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":585,"from":244,"label":"StepsTo CallStep"},{"arrows":"to","to":100,"from":245,"label":"StepsTo ReturnStep"},{"arrows":"to","to":246,"from":245,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":246,"label":"SubTerm 1"},{"arrows":"to","to":351,"from":246,"label":"StepsTo ReturnStep"},{"arrows":"to","to":220,"from":247,"label":"StepsTo CallStep"},{"arrows":"to","to":248,"from":247,"label":"SubTerm 2"},{"arrows":"to","to":763,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":886,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":848,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":864,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":255,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":435,"from":254,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":255,"label":"SubTerm 0"},{"arrows":"to","to":658,"from":255,"label":"SubTerm 1"},{"arrows":"to","to":742,"from":255,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":481,"from":256,"label":"SubTerm 1"},{"arrows":"to","to":492,"from":256,"label":"StepsTo ReturnStep"},{"arrows":"to","to":258,"from":257,"label":"SubTerm 2"},{"arrows":"to","to":524,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":832,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":298,"from":258,"label":"SubTerm 1"},{"arrows":"to","to":764,"from":258,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":259,"label":"SubTerm 1"},{"arrows":"to","to":261,"from":259,"label":"StepsTo BoringStep"},{"arrows":"to","to":445,"from":259,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":260,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":445,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":459,"from":261,"label":"StepsTo CallStep"},{"arrows":"to","to":263,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":399,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":264,"label":"StepsTo BoringStep"},{"arrows":"to","to":305,"from":264,"label":"SubTerm 2"},{"arrows":"to","to":373,"from":264,"label":"SubTerm 1"},{"arrows":"to","to":266,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":630,"from":265,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":360,"from":266,"label":"StepsTo BoringStep"},{"arrows":"to","to":159,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":159,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":185,"from":268,"label":"StepsTo BoringStep"},{"arrows":"to","to":679,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":679,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":269,"label":"SubTerm 1"},{"arrows":"to","to":577,"from":269,"label":"SubTerm 2"},{"arrows":"to","to":627,"from":269,"label":"StepsTo BoringStep"},{"arrows":"to","to":762,"from":269,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":411,"from":270,"label":"StepsTo BoringStep"},{"arrows":"to","to":272,"from":271,"label":"SubTerm 1"},{"arrows":"to","to":339,"from":271,"label":"StepsTo BoringStep"},{"arrows":"to","to":408,"from":271,"label":"SubTerm 2"},{"arrows":"to","to":685,"from":271,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":273,"label":"SubTerm 0"},{"arrows":"to","to":603,"from":273,"label":"StepsTo ReturnStep"},{"arrows":"to","to":232,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":274,"label":"StepsTo CallStep"},{"arrows":"to","to":325,"from":275,"label":"SubTerm 0"},{"arrows":"to","to":515,"from":275,"label":"StepsTo BoringStep"},{"arrows":"to","to":277,"from":276,"label":"SubTerm 1"},{"arrows":"to","to":859,"from":276,"label":"SubTerm 0"},{"arrows":"to","to":279,"from":278,"label":"SubTerm 1"},{"arrows":"to","to":829,"from":278,"label":"SubTerm 2"},{"arrows":"to","to":922,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":282,"label":"SubTerm 1"},{"arrows":"to","to":142,"from":282,"label":"StepsTo ReturnStep"},{"arrows":"to","to":365,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":658,"from":282,"label":"SubTerm 2"},{"arrows":"to","to":234,"from":283,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":283,"label":"SubTerm 2"},{"arrows":"to","to":398,"from":283,"label":"StepsTo BoringStep"},{"arrows":"to","to":718,"from":283,"label":"SubTerm 0"},{"arrows":"to","to":628,"from":284,"label":"StepsTo BoringStep"},{"arrows":"to","to":719,"from":284,"label":"SubTerm 1"},{"arrows":"to","to":720,"from":284,"label":"SubTerm 2"},{"arrows":"to","to":784,"from":284,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":285,"label":"SubTerm 0"},{"arrows":"to","to":265,"from":285,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":285,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":480,"from":286,"label":"StepsTo PrimStep"},{"arrows":"to","to":630,"from":286,"label":"SubTerm 1"},{"arrows":"to","to":289,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":854,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":290,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":290,"label":"SubTerm 1"},{"arrows":"to","to":514,"from":290,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":291,"label":"StepsTo BoringStep"},{"arrows":"to","to":284,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":293,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":293,"label":"SubTerm 1"},{"arrows":"to","to":657,"from":293,"label":"StepsTo ReturnStep"},{"arrows":"to","to":217,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":295,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":432,"from":294,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":295,"label":"StepsTo BoringStep"},{"arrows":"to","to":297,"from":296,"label":"SubTerm 2"},{"arrows":"to","to":787,"from":296,"label":"SubTerm 1"},{"arrows":"to","to":920,"from":296,"label":"SubTerm 0"},{"arrows":"to","to":299,"from":298,"label":"SubTerm 0"},{"arrows":"to","to":866,"from":298,"label":"SubTerm 1"},{"arrows":"to","to":921,"from":298,"label":"SubTerm 2"},{"arrows":"to","to":70,"from":300,"label":"SubTerm 0"},{"arrows":"to","to":185,"from":300,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":300,"label":"StepsTo CallStep"},{"arrows":"to","to":466,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":502,"from":302,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":303,"label":"SubTerm 0"},{"arrows":"to","to":227,"from":303,"label":"StepsTo BoringStep"},{"arrows":"to","to":233,"from":303,"label":"SubTerm 1"},{"arrows":"to","to":451,"from":305,"label":"SubTerm 2"},{"arrows":"to","to":559,"from":305,"label":"SubTerm 1"},{"arrows":"to","to":734,"from":305,"label":"SubTerm 0"},{"arrows":"to","to":284,"from":307,"label":"SubTerm 1"},{"arrows":"to","to":291,"from":307,"label":"StepsTo BoringStep"},{"arrows":"to","to":535,"from":307,"label":"SubTerm 0"},{"arrows":"to","to":309,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":518,"from":308,"label":"StepsTo BoringStep"},{"arrows":"to","to":796,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":392,"from":310,"label":"SubTerm 1"},{"arrows":"to","to":496,"from":310,"label":"StepsTo CallStep"},{"arrows":"to","to":6,"from":312,"label":"SubTerm 1"},{"arrows":"to","to":313,"from":312,"label":"SubTerm 0"},{"arrows":"to","to":315,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":831,"from":314,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":316,"label":"SubTerm 0"},{"arrows":"to","to":430,"from":316,"label":"StepsTo ReturnStep"},{"arrows":"to","to":175,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":375,"from":317,"label":"StepsTo ReturnStep"},{"arrows":"to","to":419,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":318,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":507,"from":318,"label":"StepsTo BoringStep"},{"arrows":"to","to":91,"from":319,"label":"StepsTo BoringStep"},{"arrows":"to","to":191,"from":319,"label":"SubTerm 0"},{"arrows":"to","to":320,"from":319,"label":"SubTerm 1"},{"arrows":"to","to":692,"from":319,"label":"SubTerm 2"},{"arrows":"to","to":47,"from":321,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":321,"label":"SubTerm 0"},{"arrows":"to","to":545,"from":321,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":322,"label":"StepsTo CallStep"},{"arrows":"to","to":323,"from":322,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":323,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":323,"label":"StepsTo CallStep"},{"arrows":"to","to":627,"from":323,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":325,"label":"SubTerm 0"},{"arrows":"to","to":516,"from":325,"label":"StepsTo BoringStep"},{"arrows":"to","to":710,"from":325,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":614,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":328,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":328,"label":"StepsTo BoringStep"},{"arrows":"to","to":577,"from":328,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":330,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":330,"label":"SubTerm 1"},{"arrows":"to","to":632,"from":330,"label":"StepsTo BoringStep"},{"arrows":"to","to":332,"from":331,"label":"StepsTo CallStep"},{"arrows":"to","to":894,"from":331,"label":"SubTerm 1"},{"arrows":"to","to":905,"from":331,"label":"SubTerm 0"},{"arrows":"to","to":629,"from":332,"label":"SubTerm 1"},{"arrows":"to","to":775,"from":332,"label":"StepsTo BoringStep"},{"arrows":"to","to":782,"from":332,"label":"SubTerm 0"},{"arrows":"to","to":334,"from":333,"label":"SubTerm 1"},{"arrows":"to","to":862,"from":333,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":334,"label":"SubTerm 1"},{"arrows":"to","to":876,"from":334,"label":"SubTerm 0"},{"arrows":"to","to":336,"from":335,"label":"SubTerm 1"},{"arrows":"to","to":861,"from":335,"label":"SubTerm 0"},{"arrows":"to","to":390,"from":336,"label":"SubTerm 1"},{"arrows":"to","to":875,"from":336,"label":"SubTerm 0"},{"arrows":"to","to":338,"from":337,"label":"SubTerm 1"},{"arrows":"to","to":899,"from":337,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":338,"label":"SubTerm 1"},{"arrows":"to","to":822,"from":338,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":339,"label":"StepsTo BoringStep"},{"arrows":"to","to":272,"from":339,"label":"SubTerm 1"},{"arrows":"to","to":408,"from":339,"label":"SubTerm 2"},{"arrows":"to","to":686,"from":339,"label":"SubTerm 0"},{"arrows":"to","to":346,"from":345,"label":"StepsTo BoringStep"},{"arrows":"to","to":639,"from":345,"label":"SubTerm 0"},{"arrows":"to","to":211,"from":346,"label":"SubTerm 0"},{"arrows":"to","to":767,"from":346,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":348,"from":347,"label":"StepsTo BoringStep"},{"arrows":"to","to":785,"from":347,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":348,"label":"SubTerm 0"},{"arrows":"to","to":362,"from":348,"label":"StepsTo BoringStep"},{"arrows":"to","to":680,"from":348,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":349,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":349,"label":"StepsTo BoringStep"},{"arrows":"to","to":637,"from":349,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":350,"label":"SubTerm 2"},{"arrows":"to","to":355,"from":350,"label":"SubTerm 0"},{"arrows":"to","to":551,"from":350,"label":"StepsTo BoringStep"},{"arrows":"to","to":841,"from":350,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":351,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":351,"label":"SubTerm 1"},{"arrows":"to","to":328,"from":351,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":352,"label":"SubTerm 0"},{"arrows":"to","to":353,"from":352,"label":"SubTerm 1"},{"arrows":"to","to":809,"from":352,"label":"StepsTo BoringStep"},{"arrows":"to","to":112,"from":353,"label":"SubTerm 1"},{"arrows":"to","to":433,"from":353,"label":"StepsTo BoringStep"},{"arrows":"to","to":434,"from":353,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":354,"label":"SubTerm 1"},{"arrows":"to","to":217,"from":354,"label":"SubTerm 2"},{"arrows":"to","to":405,"from":354,"label":"StepsTo PrimStep"},{"arrows":"to","to":670,"from":354,"label":"SubTerm 0"},{"arrows":"to","to":750,"from":355,"label":"StepsTo BoringStep"},{"arrows":"to","to":161,"from":357,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":357,"label":"SubTerm 0"},{"arrows":"to","to":317,"from":357,"label":"StepsTo BoringStep"},{"arrows":"to","to":359,"from":358,"label":"SubTerm 0"},{"arrows":"to","to":640,"from":358,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":359,"label":"SubTerm 0"},{"arrows":"to","to":376,"from":359,"label":"SubTerm 1"},{"arrows":"to","to":454,"from":359,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":360,"label":"SubTerm 0"},{"arrows":"to","to":246,"from":360,"label":"StepsTo PrimStep"},{"arrows":"to","to":576,"from":360,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":361,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":361,"label":"StepsTo BoringStep"},{"arrows":"to","to":374,"from":361,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":362,"label":"SubTerm 0"},{"arrows":"to","to":363,"from":362,"label":"StepsTo CallStep"},{"arrows":"to","to":601,"from":362,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":363,"label":"SubTerm 0"},{"arrows":"to","to":256,"from":363,"label":"StepsTo BoringStep"},{"arrows":"to","to":511,"from":363,"label":"SubTerm 1"},{"arrows":"to","to":467,"from":364,"label":"SubTerm 1"},{"arrows":"to","to":752,"from":364,"label":"StepsTo CallStep"},{"arrows":"to","to":790,"from":364,"label":"SubTerm 0"},{"arrows":"to","to":341,"from":365,"label":"StepsTo ReturnStep"},{"arrows":"to","to":366,"from":365,"label":"SubTerm 0"},{"arrows":"to","to":813,"from":365,"label":"SubTerm 1"},{"arrows":"to","to":368,"from":367,"label":"SubTerm 0"},{"arrows":"to","to":810,"from":367,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":369,"label":"SubTerm 0"},{"arrows":"to","to":654,"from":369,"label":"StepsTo PrimStep"},{"arrows":"to","to":264,"from":374,"label":"StepsTo BoringStep"},{"arrows":"to","to":305,"from":374,"label":"SubTerm 2"},{"arrows":"to","to":373,"from":374,"label":"SubTerm 1"},{"arrows":"to","to":465,"from":374,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":375,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":375,"label":"StepsTo ReturnStep"},{"arrows":"to","to":273,"from":375,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":376,"label":"SubTerm 2"},{"arrows":"to","to":283,"from":376,"label":"StepsTo BoringStep"},{"arrows":"to","to":377,"from":376,"label":"SubTerm 0"},{"arrows":"to","to":471,"from":376,"label":"SubTerm 1"},{"arrows":"to","to":747,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":378,"label":"SubTerm 2"},{"arrows":"to","to":154,"from":378,"label":"SubTerm 0"},{"arrows":"to","to":420,"from":378,"label":"SubTerm 1"},{"arrows":"to","to":729,"from":378,"label":"StepsTo CallStep"},{"arrows":"to","to":380,"from":379,"label":"SubTerm 4"},{"arrows":"to","to":394,"from":379,"label":"SubTerm 2"},{"arrows":"to","to":801,"from":379,"label":"SubTerm 1"},{"arrows":"to","to":839,"from":379,"label":"SubTerm 0"},{"arrows":"to","to":880,"from":379,"label":"SubTerm 3"},{"arrows":"to","to":8,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":382,"from":381,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":382,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":382,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":382,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":384,"label":"SubTerm 0"},{"arrows":"to","to":385,"from":384,"label":"SubTerm 1"},{"arrows":"to","to":407,"from":384,"label":"StepsTo PrimStep"},{"arrows":"to","to":69,"from":385,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":385,"label":"StepsTo PrimStep"},{"arrows":"to","to":234,"from":385,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":385,"label":"SubTerm 2"},{"arrows":"to","to":160,"from":386,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":386,"label":"SubTerm 0"},{"arrows":"to","to":357,"from":386,"label":"StepsTo CallStep"},{"arrows":"to","to":13,"from":387,"label":"StepsTo ReturnStep"},{"arrows":"to","to":14,"from":387,"label":"SubTerm 0"},{"arrows":"to","to":579,"from":387,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":388,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":388,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":388,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":392,"label":"SubTerm 1"},{"arrows":"to","to":242,"from":392,"label":"SubTerm 2"},{"arrows":"to","to":393,"from":392,"label":"StepsTo CallStep"},{"arrows":"to","to":616,"from":392,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":393,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":393,"label":"SubTerm 2"},{"arrows":"to","to":646,"from":393,"label":"StepsTo BoringStep"},{"arrows":"to","to":806,"from":393,"label":"SubTerm 1"},{"arrows":"to","to":337,"from":396,"label":"SubTerm 0"},{"arrows":"to","to":746,"from":396,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":397,"label":"SubTerm 0"},{"arrows":"to","to":398,"from":397,"label":"SubTerm 1"},{"arrows":"to","to":421,"from":397,"label":"StepsTo CallStep"},{"arrows":"to","to":71,"from":398,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":398,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":398,"label":"SubTerm 2"},{"arrows":"to","to":422,"from":398,"label":"StepsTo CallStep"},{"arrows":"to","to":400,"from":399,"label":"SubTerm 0"},{"arrows":"to","to":817,"from":399,"label":"SubTerm 1"},{"arrows":"to","to":249,"from":402,"label":"SubTerm 0"},{"arrows":"to","to":914,"from":402,"label":"SubTerm 1"},{"arrows":"to","to":349,"from":404,"label":"SubTerm 0"},{"arrows":"to","to":785,"from":404,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":405,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":405,"label":"StepsTo ReturnStep"},{"arrows":"to","to":217,"from":405,"label":"SubTerm 2"},{"arrows":"to","to":753,"from":405,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":406,"label":"SubTerm 0"},{"arrows":"to","to":387,"from":406,"label":"StepsTo BoringStep"},{"arrows":"to","to":567,"from":406,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":407,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":407,"label":"SubTerm 0"},{"arrows":"to","to":303,"from":407,"label":"StepsTo ReturnStep"},{"arrows":"to","to":508,"from":408,"label":"SubTerm 1"},{"arrows":"to","to":542,"from":408,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":409,"label":"SubTerm 0"},{"arrows":"to","to":348,"from":409,"label":"SubTerm 1"},{"arrows":"to","to":533,"from":409,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":410,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":410,"label":"SubTerm 1"},{"arrows":"to","to":352,"from":410,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":411,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":411,"label":"SubTerm 1"},{"arrows":"to","to":190,"from":411,"label":"StepsTo BoringStep"},{"arrows":"to","to":413,"from":412,"label":"StepsTo BoringStep"},{"arrows":"to","to":790,"from":412,"label":"SubTerm 0"},{"arrows":"to","to":803,"from":412,"label":"SubTerm 1"},{"arrows":"to","to":364,"from":413,"label":"StepsTo BoringStep"},{"arrows":"to","to":790,"from":413,"label":"SubTerm 0"},{"arrows":"to","to":804,"from":413,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":414,"label":"StepsTo BoringStep"},{"arrows":"to","to":155,"from":414,"label":"SubTerm 0"},{"arrows":"to","to":415,"from":414,"label":"SubTerm 1"},{"arrows":"to","to":389,"from":415,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":416,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":416,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":416,"label":"StepsTo ReturnStep"},{"arrows":"to","to":418,"from":417,"label":"StepsTo BoringStep"},{"arrows":"to","to":506,"from":417,"label":"SubTerm 0"},{"arrows":"to","to":827,"from":417,"label":"SubTerm 1"},{"arrows":"to","to":578,"from":418,"label":"SubTerm 0"},{"arrows":"to","to":638,"from":418,"label":"StepsTo PrimStep"},{"arrows":"to","to":827,"from":418,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":419,"label":"StepsTo ReturnStep"},{"arrows":"to","to":387,"from":419,"label":"SubTerm 0"},{"arrows":"to","to":879,"from":420,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":421,"label":"SubTerm 0"},{"arrows":"to","to":384,"from":421,"label":"StepsTo BoringStep"},{"arrows":"to","to":422,"from":421,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":422,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":422,"label":"SubTerm 1"},{"arrows":"to","to":284,"from":422,"label":"SubTerm 2"},{"arrows":"to","to":385,"from":422,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":423,"label":"SubTerm 2"},{"arrows":"to","to":424,"from":423,"label":"SubTerm 1"},{"arrows":"to","to":546,"from":423,"label":"StepsTo BoringStep"},{"arrows":"to","to":770,"from":423,"label":"SubTerm 0"},{"arrows":"to","to":426,"from":425,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":426,"label":"SubTerm 0"},{"arrows":"to","to":907,"from":426,"label":"SubTerm 1"},{"arrows":"to","to":429,"from":428,"label":"SubTerm 1"},{"arrows":"to","to":725,"from":428,"label":"SubTerm 0"},{"arrows":"to","to":872,"from":428,"label":"StepsTo PrimStep"},{"arrows":"to","to":225,"from":430,"label":"StepsTo ReturnStep"},{"arrows":"to","to":375,"from":430,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":432,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":432,"label":"SubTerm 1"},{"arrows":"to","to":310,"from":432,"label":"StepsTo BoringStep"},{"arrows":"to","to":203,"from":433,"label":"SubTerm 1"},{"arrows":"to","to":434,"from":433,"label":"SubTerm 0"},{"arrows":"to","to":312,"from":434,"label":"SubTerm 0"},{"arrows":"to","to":662,"from":434,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":435,"label":"StepsTo CallStep"},{"arrows":"to","to":742,"from":435,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":436,"label":"StepsTo PrimStep"},{"arrows":"to","to":5,"from":436,"label":"SubTerm 0"},{"arrows":"to","to":643,"from":436,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":437,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":437,"label":"SubTerm 0"},{"arrows":"to","to":547,"from":437,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":438,"label":"SubTerm 0"},{"arrows":"to","to":436,"from":438,"label":"StepsTo PrimStep"},{"arrows":"to","to":485,"from":438,"label":"SubTerm 1"},{"arrows":"to","to":447,"from":439,"label":"StepsTo ReturnStep"},{"arrows":"to","to":562,"from":439,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":441,"label":"SubTerm 0"},{"arrows":"to","to":442,"from":441,"label":"StepsTo BoringStep"},{"arrows":"to","to":495,"from":441,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":442,"label":"SubTerm 0"},{"arrows":"to","to":687,"from":442,"label":"StepsTo BoringStep"},{"arrows":"to","to":704,"from":442,"label":"SubTerm 1"},{"arrows":"to","to":432,"from":443,"label":"SubTerm 0"},{"arrows":"to","to":444,"from":443,"label":"StepsTo BoringStep"},{"arrows":"to","to":310,"from":444,"label":"SubTerm 0"},{"arrows":"to","to":495,"from":444,"label":"StepsTo CallStep"},{"arrows":"to","to":489,"from":447,"label":"SubTerm 0"},{"arrows":"to","to":589,"from":447,"label":"StepsTo ReturnStep"},{"arrows":"to","to":5,"from":448,"label":"SubTerm 0"},{"arrows":"to","to":441,"from":448,"label":"StepsTo CallStep"},{"arrows":"to","to":444,"from":448,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":449,"label":"SubTerm 0"},{"arrows":"to","to":321,"from":449,"label":"StepsTo BoringStep"},{"arrows":"to","to":458,"from":449,"label":"SubTerm 1"},{"arrows":"to","to":451,"from":450,"label":"SubTerm 1"},{"arrows":"to","to":808,"from":450,"label":"SubTerm 0"},{"arrows":"to","to":735,"from":451,"label":"SubTerm 1"},{"arrows":"to","to":816,"from":451,"label":"SubTerm 0"},{"arrows":"to","to":835,"from":451,"label":"SubTerm 2"},{"arrows":"to","to":70,"from":452,"label":"SubTerm 0"},{"arrows":"to","to":441,"from":452,"label":"SubTerm 1"},{"arrows":"to","to":453,"from":452,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":453,"label":"SubTerm 0"},{"arrows":"to","to":442,"from":453,"label":"SubTerm 1"},{"arrows":"to","to":615,"from":453,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":454,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":454,"label":"SubTerm 1"},{"arrows":"to","to":397,"from":454,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":455,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":455,"label":"SubTerm 0"},{"arrows":"to","to":474,"from":455,"label":"StepsTo BoringStep"},{"arrows":"to","to":457,"from":456,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":458,"label":"SubTerm 0"},{"arrows":"to","to":545,"from":458,"label":"StepsTo BoringStep"},{"arrows":"to","to":698,"from":458,"label":"SubTerm 1"},{"arrows":"to","to":308,"from":459,"label":"SubTerm 0"},{"arrows":"to","to":460,"from":459,"label":"StepsTo BoringStep"},{"arrows":"to","to":813,"from":459,"label":"SubTerm 1"},{"arrows":"to","to":365,"from":460,"label":"StepsTo PrimStep"},{"arrows":"to","to":518,"from":460,"label":"SubTerm 0"},{"arrows":"to","to":813,"from":460,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":461,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":461,"label":"SubTerm 1"},{"arrows":"to","to":323,"from":461,"label":"StepsTo BoringStep"},{"arrows":"to","to":464,"from":463,"label":"SubTerm 1"},{"arrows":"to","to":834,"from":463,"label":"SubTerm 0"},{"arrows":"to","to":887,"from":463,"label":"SubTerm 2"},{"arrows":"to","to":87,"from":465,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":466,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":466,"label":"SubTerm 1"},{"arrows":"to","to":231,"from":466,"label":"StepsTo BoringStep"},{"arrows":"to","to":609,"from":467,"label":"SubTerm 1"},{"arrows":"to","to":623,"from":467,"label":"SubTerm 0"},{"arrows":"to","to":474,"from":473,"label":"SubTerm 0"},{"arrows":"to","to":699,"from":473,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":474,"label":"SubTerm 0"},{"arrows":"to","to":254,"from":474,"label":"SubTerm 1"},{"arrows":"to","to":557,"from":474,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":475,"label":"SubTerm 0"},{"arrows":"to","to":447,"from":475,"label":"SubTerm 1"},{"arrows":"to","to":583,"from":475,"label":"StepsTo ReturnStep"},{"arrows":"to","to":70,"from":476,"label":"SubTerm 0"},{"arrows":"to","to":715,"from":476,"label":"StepsTo PrimStep"},{"arrows":"to","to":765,"from":476,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":477,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":477,"label":"StepsTo ReturnStep"},{"arrows":"to","to":479,"from":477,"label":"SubTerm 1"},{"arrows":"to","to":302,"from":479,"label":"StepsTo ReturnStep"},{"arrows":"to","to":480,"from":479,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":480,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":480,"label":"SubTerm 1"},{"arrows":"to","to":466,"from":480,"label":"StepsTo ReturnStep"},{"arrows":"to","to":514,"from":481,"label":"SubTerm 0"},{"arrows":"to","to":744,"from":481,"label":"StepsTo ReturnStep"},{"arrows":"to","to":5,"from":482,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":482,"label":"StepsTo BoringStep"},{"arrows":"to","to":548,"from":482,"label":"SubTerm 1"},{"arrows":"to","to":255,"from":483,"label":"StepsTo BoringStep"},{"arrows":"to","to":260,"from":483,"label":"SubTerm 0"},{"arrows":"to","to":658,"from":483,"label":"SubTerm 1"},{"arrows":"to","to":486,"from":485,"label":"SubTerm 0"},{"arrows":"to","to":643,"from":485,"label":"StepsTo PrimStep"},{"arrows":"to","to":42,"from":486,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":486,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":486,"label":"StepsTo PrimStep"},{"arrows":"to","to":5,"from":487,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":487,"label":"StepsTo CallStep"},{"arrows":"to","to":488,"from":487,"label":"SubTerm 1"},{"arrows":"to","to":503,"from":488,"label":"SubTerm 0"},{"arrows":"to","to":768,"from":488,"label":"StepsTo CallStep"},{"arrows":"to","to":94,"from":489,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":489,"label":"SubTerm 1"},{"arrows":"to","to":491,"from":490,"label":"SubTerm 0"},{"arrows":"to","to":548,"from":490,"label":"StepsTo CallStep"},{"arrows":"to","to":94,"from":491,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":491,"label":"StepsTo CallStep"},{"arrows":"to","to":322,"from":491,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":492,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":492,"label":"StepsTo ReturnStep"},{"arrows":"to","to":744,"from":492,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":493,"label":"SubTerm 0"},{"arrows":"to","to":345,"from":493,"label":"SubTerm 1"},{"arrows":"to","to":494,"from":493,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":494,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":494,"label":"StepsTo CallStep"},{"arrows":"to","to":346,"from":494,"label":"SubTerm 1"},{"arrows":"to","to":496,"from":495,"label":"SubTerm 0"},{"arrows":"to","to":704,"from":495,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":496,"label":"SubTerm 0"},{"arrows":"to","to":393,"from":496,"label":"SubTerm 1"},{"arrows":"to","to":647,"from":496,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":497,"label":"SubTerm 1"},{"arrows":"to","to":259,"from":497,"label":"SubTerm 0"},{"arrows":"to","to":620,"from":497,"label":"StepsTo BoringStep"},{"arrows":"to","to":658,"from":497,"label":"SubTerm 2"},{"arrows":"to","to":499,"from":498,"label":"SubTerm 1"},{"arrows":"to","to":649,"from":498,"label":"StepsTo BoringStep"},{"arrows":"to","to":793,"from":498,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":502,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":502,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":503,"label":"SubTerm 0"},{"arrows":"to","to":588,"from":503,"label":"StepsTo CallStep"},{"arrows":"to","to":620,"from":503,"label":"SubTerm 1"},{"arrows":"to","to":505,"from":504,"label":"SubTerm 0"},{"arrows":"to","to":828,"from":504,"label":"SubTerm 1"},{"arrows":"to","to":838,"from":505,"label":"SubTerm 1"},{"arrows":"to","to":857,"from":505,"label":"SubTerm 0"},{"arrows":"to","to":578,"from":506,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":507,"label":"SubTerm 0"},{"arrows":"to","to":491,"from":507,"label":"StepsTo BoringStep"},{"arrows":"to","to":641,"from":507,"label":"SubTerm 1"},{"arrows":"to","to":509,"from":508,"label":"SubTerm 1"},{"arrows":"to","to":569,"from":508,"label":"SubTerm 2"},{"arrows":"to","to":895,"from":508,"label":"SubTerm 0"},{"arrows":"to","to":290,"from":511,"label":"SubTerm 0"},{"arrows":"to","to":481,"from":511,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":514,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":514,"label":"StepsTo ReturnStep"},{"arrows":"to","to":316,"from":514,"label":"SubTerm 1"},{"arrows":"to","to":345,"from":515,"label":"StepsTo BoringStep"},{"arrows":"to","to":516,"from":515,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":516,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":516,"label":"SubTerm 1"},{"arrows":"to","to":639,"from":516,"label":"StepsTo BoringStep"},{"arrows":"to","to":309,"from":518,"label":"SubTerm 1"},{"arrows":"to","to":366,"from":518,"label":"StepsTo PrimStep"},{"arrows":"to","to":523,"from":518,"label":"SubTerm 0"},{"arrows":"to","to":428,"from":519,"label":"StepsTo BoringStep"},{"arrows":"to","to":429,"from":519,"label":"SubTerm 1"},{"arrows":"to","to":705,"from":519,"label":"SubTerm 0"},{"arrows":"to","to":522,"from":521,"label":"SubTerm 1"},{"arrows":"to","to":703,"from":521,"label":"SubTerm 0"},{"arrows":"to","to":526,"from":525,"label":"SubTerm 0"},{"arrows":"to","to":682,"from":525,"label":"SubTerm 1"},{"arrows":"to","to":740,"from":525,"label":"StepsTo PrimStep"},{"arrows":"to","to":70,"from":528,"label":"SubTerm 0"},{"arrows":"to","to":347,"from":528,"label":"SubTerm 1"},{"arrows":"to","to":409,"from":528,"label":"StepsTo BoringStep"},{"arrows":"to","to":402,"from":529,"label":"SubTerm 0"},{"arrows":"to","to":531,"from":530,"label":"SubTerm 1"},{"arrows":"to","to":897,"from":530,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":533,"label":"SubTerm 0"},{"arrows":"to","to":362,"from":533,"label":"SubTerm 1"},{"arrows":"to","to":626,"from":533,"label":"StepsTo CallStep"},{"arrows":"to","to":14,"from":535,"label":"StepsTo BoringStep"},{"arrows":"to","to":537,"from":536,"label":"SubTerm 1"},{"arrows":"to","to":898,"from":536,"label":"SubTerm 0"},{"arrows":"to","to":455,"from":538,"label":"SubTerm 0"},{"arrows":"to","to":473,"from":538,"label":"StepsTo BoringStep"},{"arrows":"to","to":199,"from":539,"label":"SubTerm 1"},{"arrows":"to","to":779,"from":539,"label":"SubTerm 0"},{"arrows":"to","to":541,"from":540,"label":"StepsTo BoringStep"},{"arrows":"to","to":700,"from":542,"label":"SubTerm 1"},{"arrows":"to","to":792,"from":542,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":544,"label":"SubTerm 0"},{"arrows":"to","to":479,"from":544,"label":"StepsTo PrimStep"},{"arrows":"to","to":5,"from":545,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":545,"label":"StepsTo BoringStep"},{"arrows":"to","to":538,"from":545,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":546,"label":"SubTerm 2"},{"arrows":"to","to":216,"from":546,"label":"StepsTo BoringStep"},{"arrows":"to","to":424,"from":546,"label":"SubTerm 1"},{"arrows":"to","to":621,"from":546,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":547,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":547,"label":"StepsTo BoringStep"},{"arrows":"to","to":546,"from":547,"label":"SubTerm 1"},{"arrows":"to","to":285,"from":548,"label":"SubTerm 0"},{"arrows":"to","to":544,"from":548,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":550,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":550,"label":"StepsTo PrimStep"},{"arrows":"to","to":405,"from":550,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":551,"label":"SubTerm 2"},{"arrows":"to","to":269,"from":551,"label":"StepsTo BoringStep"},{"arrows":"to","to":750,"from":551,"label":"SubTerm 0"},{"arrows":"to","to":841,"from":551,"label":"SubTerm 1"},{"arrows":"to","to":553,"from":552,"label":"SubTerm 0"},{"arrows":"to","to":860,"from":552,"label":"SubTerm 2"},{"arrows":"to","to":892,"from":552,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":555,"label":"SubTerm 1"},{"arrows":"to","to":556,"from":555,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":557,"label":"SubTerm 0"},{"arrows":"to","to":435,"from":557,"label":"SubTerm 1"},{"arrows":"to","to":558,"from":557,"label":"StepsTo CallStep"},{"arrows":"to","to":49,"from":558,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":558,"label":"SubTerm 0"},{"arrows":"to","to":318,"from":558,"label":"StepsTo BoringStep"},{"arrows":"to","to":450,"from":559,"label":"SubTerm 0"},{"arrows":"to","to":561,"from":560,"label":"SubTerm 1"},{"arrows":"to","to":824,"from":560,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":562,"label":"SubTerm 0"},{"arrows":"to","to":225,"from":562,"label":"SubTerm 1"},{"arrows":"to","to":489,"from":562,"label":"StepsTo ReturnStep"},{"arrows":"to","to":488,"from":564,"label":"StepsTo BoringStep"},{"arrows":"to","to":565,"from":564,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":565,"label":"SubTerm 0"},{"arrows":"to","to":497,"from":565,"label":"SubTerm 1"},{"arrows":"to","to":503,"from":565,"label":"StepsTo BoringStep"},{"arrows":"to","to":39,"from":567,"label":"SubTerm 2"},{"arrows":"to","to":540,"from":567,"label":"SubTerm 0"},{"arrows":"to","to":579,"from":567,"label":"StepsTo BoringStep"},{"arrows":"to","to":580,"from":567,"label":"SubTerm 1"},{"arrows":"to","to":788,"from":568,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":570,"label":"StepsTo CallStep"},{"arrows":"to","to":70,"from":570,"label":"SubTerm 0"},{"arrows":"to","to":494,"from":570,"label":"SubTerm 1"},{"arrows":"to","to":525,"from":571,"label":"StepsTo BoringStep"},{"arrows":"to","to":572,"from":571,"label":"SubTerm 0"},{"arrows":"to","to":682,"from":571,"label":"SubTerm 1"},{"arrows":"to","to":526,"from":572,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":573,"label":"SubTerm 0"},{"arrows":"to","to":492,"from":573,"label":"SubTerm 1"},{"arrows":"to","to":683,"from":573,"label":"StepsTo ReturnStep"},{"arrows":"to","to":70,"from":575,"label":"SubTerm 0"},{"arrows":"to","to":593,"from":575,"label":"StepsTo BoringStep"},{"arrows":"to","to":684,"from":575,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":576,"label":"SubTerm 1"},{"arrows":"to","to":187,"from":576,"label":"StepsTo PrimStep"},{"arrows":"to","to":577,"from":576,"label":"SubTerm 2"},{"arrows":"to","to":644,"from":576,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":577,"label":"StepsTo BoringStep"},{"arrows":"to","to":763,"from":577,"label":"SubTerm 1"},{"arrows":"to","to":795,"from":577,"label":"SubTerm 2"},{"arrows":"to","to":886,"from":577,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":579,"label":"SubTerm 2"},{"arrows":"to","to":541,"from":579,"label":"SubTerm 0"},{"arrows":"to","to":580,"from":579,"label":"SubTerm 1"},{"arrows":"to","to":636,"from":579,"label":"StepsTo ReturnStep"},{"arrows":"to","to":5,"from":582,"label":"SubTerm 0"},{"arrows":"to","to":423,"from":582,"label":"SubTerm 1"},{"arrows":"to","to":547,"from":582,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":583,"label":"SubTerm 0"},{"arrows":"to","to":412,"from":583,"label":"StepsTo BoringStep"},{"arrows":"to","to":589,"from":583,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":584,"label":"SubTerm 1"},{"arrows":"to","to":217,"from":584,"label":"SubTerm 2"},{"arrows":"to","to":354,"from":584,"label":"StepsTo BoringStep"},{"arrows":"to","to":585,"from":584,"label":"SubTerm 0"},{"arrows":"to","to":498,"from":585,"label":"SubTerm 0"},{"arrows":"to","to":634,"from":585,"label":"SubTerm 1"},{"arrows":"to","to":670,"from":585,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":587,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":587,"label":"StepsTo BoringStep"},{"arrows":"to","to":230,"from":587,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":588,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":588,"label":"SubTerm 0"},{"arrows":"to","to":486,"from":588,"label":"StepsTo BoringStep"},{"arrows":"to","to":590,"from":589,"label":"SubTerm 1"},{"arrows":"to","to":781,"from":589,"label":"SubTerm 0"},{"arrows":"to","to":844,"from":589,"label":"SubTerm 2"},{"arrows":"to","to":70,"from":591,"label":"SubTerm 0"},{"arrows":"to","to":666,"from":591,"label":"StepsTo CallStep"},{"arrows":"to","to":723,"from":591,"label":"SubTerm 1"},{"arrows":"to","to":556,"from":592,"label":"SubTerm 1"},{"arrows":"to","to":869,"from":592,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":593,"label":"SubTerm 0"},{"arrows":"to","to":594,"from":593,"label":"StepsTo BoringStep"},{"arrows":"to","to":668,"from":593,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":594,"label":"SubTerm 0"},{"arrows":"to","to":493,"from":594,"label":"SubTerm 1"},{"arrows":"to","to":570,"from":594,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":595,"label":"SubTerm 0"},{"arrows":"to","to":448,"from":595,"label":"SubTerm 1"},{"arrows":"to","to":452,"from":595,"label":"StepsTo CallStep"},{"arrows":"to","to":70,"from":597,"label":"SubTerm 0"},{"arrows":"to","to":381,"from":597,"label":"StepsTo ReturnStep"},{"arrows":"to","to":477,"from":597,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":598,"label":"SubTerm 0"},{"arrows":"to","to":350,"from":598,"label":"SubTerm 1"},{"arrows":"to","to":599,"from":598,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":599,"label":"SubTerm 0"},{"arrows":"to","to":461,"from":599,"label":"StepsTo BoringStep"},{"arrows":"to","to":551,"from":599,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":600,"label":"SubTerm 2"},{"arrows":"to","to":155,"from":600,"label":"SubTerm 1"},{"arrows":"to","to":423,"from":600,"label":"StepsTo CallStep"},{"arrows":"to","to":743,"from":600,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":601,"label":"SubTerm 0"},{"arrows":"to","to":511,"from":601,"label":"StepsTo CallStep"},{"arrows":"to","to":604,"from":603,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":605,"label":"SubTerm 0"},{"arrows":"to","to":606,"from":605,"label":"StepsTo PrimStep"},{"arrows":"to","to":631,"from":605,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":606,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":606,"label":"StepsTo BoringStep"},{"arrows":"to","to":124,"from":606,"label":"SubTerm 1"},{"arrows":"to","to":560,"from":607,"label":"SubTerm 0"},{"arrows":"to","to":608,"from":607,"label":"SubTerm 1"},{"arrows":"to","to":610,"from":609,"label":"SubTerm 1"},{"arrows":"to","to":732,"from":609,"label":"SubTerm 2"},{"arrows":"to","to":780,"from":609,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":611,"label":"SubTerm 4"},{"arrows":"to","to":802,"from":611,"label":"SubTerm 2"},{"arrows":"to","to":846,"from":611,"label":"SubTerm 1"},{"arrows":"to","to":850,"from":611,"label":"SubTerm 3"},{"arrows":"to","to":888,"from":611,"label":"SubTerm 0"},{"arrows":"to","to":635,"from":614,"label":"SubTerm 1"},{"arrows":"to","to":889,"from":614,"label":"SubTerm 0"},{"arrows":"to","to":900,"from":614,"label":"SubTerm 2"},{"arrows":"to","to":70,"from":615,"label":"SubTerm 0"},{"arrows":"to","to":673,"from":615,"label":"StepsTo BoringStep"},{"arrows":"to","to":687,"from":615,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":617,"label":"SubTerm 0"},{"arrows":"to","to":710,"from":617,"label":"StepsTo CallStep"},{"arrows":"to","to":43,"from":620,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":620,"label":"StepsTo CallStep"},{"arrows":"to","to":261,"from":620,"label":"SubTerm 0"},{"arrows":"to","to":658,"from":620,"label":"SubTerm 2"},{"arrows":"to","to":118,"from":621,"label":"SubTerm 3"},{"arrows":"to","to":882,"from":621,"label":"SubTerm 2"},{"arrows":"to","to":890,"from":621,"label":"SubTerm 1"},{"arrows":"to","to":891,"from":621,"label":"SubTerm 0"},{"arrows":"to","to":624,"from":623,"label":"SubTerm 3"},{"arrows":"to","to":733,"from":623,"label":"SubTerm 4"},{"arrows":"to","to":754,"from":623,"label":"SubTerm 2"},{"arrows":"to","to":805,"from":623,"label":"SubTerm 1"},{"arrows":"to","to":911,"from":623,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":626,"label":"SubTerm 0"},{"arrows":"to","to":363,"from":626,"label":"SubTerm 1"},{"arrows":"to","to":693,"from":626,"label":"StepsTo BoringStep"},{"arrows":"to","to":180,"from":627,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":627,"label":"StepsTo CallStep"},{"arrows":"to","to":577,"from":627,"label":"SubTerm 2"},{"arrows":"to","to":800,"from":627,"label":"SubTerm 0"},{"arrows":"to","to":567,"from":628,"label":"StepsTo CallStep"},{"arrows":"to","to":719,"from":628,"label":"SubTerm 1"},{"arrows":"to","to":721,"from":628,"label":"SubTerm 2"},{"arrows":"to","to":784,"from":628,"label":"SubTerm 0"},{"arrows":"to","to":786,"from":629,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":630,"label":"StepsTo PrimStep"},{"arrows":"to","to":360,"from":630,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":631,"label":"StepsTo PrimStep"},{"arrows":"to","to":130,"from":631,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":631,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":632,"label":"SubTerm 0"},{"arrows":"to","to":605,"from":632,"label":"StepsTo BoringStep"},{"arrows":"to","to":633,"from":632,"label":"SubTerm 1"},{"arrows":"to","to":134,"from":633,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":633,"label":"SubTerm 0"},{"arrows":"to","to":631,"from":633,"label":"StepsTo BoringStep"},{"arrows":"to","to":303,"from":637,"label":"SubTerm 0"},{"arrows":"to","to":713,"from":637,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":639,"label":"SubTerm 0"},{"arrows":"to","to":211,"from":639,"label":"StepsTo BoringStep"},{"arrows":"to","to":640,"from":639,"label":"SubTerm 1"},{"arrows":"to","to":229,"from":640,"label":"StepsTo BoringStep"},{"arrows":"to","to":454,"from":640,"label":"SubTerm 0"},{"arrows":"to","to":322,"from":641,"label":"StepsTo BoringStep"},{"arrows":"to","to":461,"from":641,"label":"SubTerm 0"},{"arrows":"to","to":293,"from":643,"label":"SubTerm 0"},{"arrows":"to","to":698,"from":643,"label":"StepsTo ReturnStep"},{"arrows":"to","to":188,"from":644,"label":"StepsTo PrimStep"},{"arrows":"to","to":428,"from":644,"label":"SubTerm 0"},{"arrows":"to","to":774,"from":644,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":646,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":646,"label":"SubTerm 2"},{"arrows":"to","to":497,"from":646,"label":"StepsTo BoringStep"},{"arrows":"to","to":806,"from":646,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":647,"label":"SubTerm 0"},{"arrows":"to","to":565,"from":647,"label":"StepsTo BoringStep"},{"arrows":"to","to":646,"from":647,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":648,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":648,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":648,"label":"StepsTo CallStep"},{"arrows":"to","to":499,"from":649,"label":"SubTerm 1"},{"arrows":"to","to":794,"from":649,"label":"SubTerm 0"},{"arrows":"to","to":823,"from":649,"label":"StepsTo PrimStep"},{"arrows":"to","to":70,"from":650,"label":"SubTerm 0"},{"arrows":"to","to":438,"from":650,"label":"SubTerm 1"},{"arrows":"to","to":651,"from":650,"label":"StepsTo PrimStep"},{"arrows":"to","to":70,"from":651,"label":"SubTerm 0"},{"arrows":"to","to":436,"from":651,"label":"SubTerm 1"},{"arrows":"to","to":449,"from":651,"label":"StepsTo ReturnStep"},{"arrows":"to","to":94,"from":653,"label":"SubTerm 0"},{"arrows":"to","to":349,"from":653,"label":"StepsTo ReturnStep"},{"arrows":"to","to":654,"from":653,"label":"SubTerm 1"},{"arrows":"to","to":407,"from":654,"label":"SubTerm 0"},{"arrows":"to","to":637,"from":654,"label":"StepsTo ReturnStep"},{"arrows":"to","to":94,"from":657,"label":"SubTerm 0"},{"arrows":"to","to":142,"from":657,"label":"SubTerm 1"},{"arrows":"to","to":455,"from":657,"label":"StepsTo BoringStep"},{"arrows":"to","to":207,"from":658,"label":"StepsTo BoringStep"},{"arrows":"to","to":445,"from":658,"label":"SubTerm 1"},{"arrows":"to","to":659,"from":658,"label":"SubTerm 2"},{"arrows":"to","to":815,"from":658,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":659,"label":"StepsTo BoringStep"},{"arrows":"to","to":661,"from":660,"label":"SubTerm 1"},{"arrows":"to","to":769,"from":660,"label":"SubTerm 0"},{"arrows":"to","to":826,"from":660,"label":"SubTerm 2"},{"arrows":"to","to":552,"from":662,"label":"SubTerm 0"},{"arrows":"to","to":671,"from":662,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":664,"label":"SubTerm 0"},{"arrows":"to","to":595,"from":664,"label":"StepsTo BoringStep"},{"arrows":"to","to":724,"from":664,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":666,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":666,"label":"SubTerm 0"},{"arrows":"to","to":482,"from":666,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":667,"label":"SubTerm 0"},{"arrows":"to","to":437,"from":667,"label":"StepsTo BoringStep"},{"arrows":"to","to":582,"from":667,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":668,"label":"SubTerm 0"},{"arrows":"to","to":493,"from":668,"label":"StepsTo BoringStep"},{"arrows":"to","to":515,"from":668,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":669,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":669,"label":"StepsTo BoringStep"},{"arrows":"to","to":413,"from":669,"label":"SubTerm 1"},{"arrows":"to","to":634,"from":670,"label":"SubTerm 1"},{"arrows":"to","to":649,"from":670,"label":"SubTerm 0"},{"arrows":"to","to":753,"from":670,"label":"StepsTo PrimStep"},{"arrows":"to","to":847,"from":671,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":672,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":672,"label":"StepsTo PrimStep"},{"arrows":"to","to":550,"from":672,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":673,"label":"StepsTo CallStep"},{"arrows":"to","to":70,"from":673,"label":"SubTerm 0"},{"arrows":"to","to":487,"from":673,"label":"SubTerm 1"},{"arrows":"to","to":555,"from":674,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":675,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":675,"label":"StepsTo ReturnStep"},{"arrows":"to","to":676,"from":675,"label":"SubTerm 1"},{"arrows":"to","to":404,"from":676,"label":"StepsTo ReturnStep"},{"arrows":"to","to":653,"from":676,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":678,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":678,"label":"SubTerm 1"},{"arrows":"to","to":601,"from":680,"label":"StepsTo BoringStep"},{"arrows":"to","to":772,"from":680,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":683,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":683,"label":"SubTerm 0"},{"arrows":"to","to":717,"from":683,"label":"StepsTo ReturnStep"},{"arrows":"to","to":5,"from":684,"label":"SubTerm 0"},{"arrows":"to","to":275,"from":684,"label":"SubTerm 1"},{"arrows":"to","to":668,"from":684,"label":"StepsTo BoringStep"},{"arrows":"to","to":686,"from":685,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":687,"label":"SubTerm 0"},{"arrows":"to","to":487,"from":687,"label":"StepsTo BoringStep"},{"arrows":"to","to":564,"from":687,"label":"SubTerm 1"},{"arrows":"to","to":577,"from":688,"label":"SubTerm 1"},{"arrows":"to","to":689,"from":688,"label":"SubTerm 0"},{"arrows":"to","to":807,"from":689,"label":"StepsTo BoringStep"},{"arrows":"to","to":296,"from":692,"label":"SubTerm 1"},{"arrows":"to","to":851,"from":692,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":693,"label":"SubTerm 0"},{"arrows":"to","to":256,"from":693,"label":"SubTerm 1"},{"arrows":"to","to":573,"from":693,"label":"StepsTo ReturnStep"},{"arrows":"to","to":611,"from":694,"label":"StepsTo BoringStep"},{"arrows":"to","to":326,"from":697,"label":"SubTerm 0"},{"arrows":"to","to":538,"from":698,"label":"StepsTo BoringStep"},{"arrows":"to","to":657,"from":698,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":699,"label":"StepsTo CallStep"},{"arrows":"to","to":557,"from":699,"label":"SubTerm 0"},{"arrows":"to","to":660,"from":700,"label":"SubTerm 0"},{"arrows":"to","to":885,"from":700,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":701,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":701,"label":"SubTerm 1"},{"arrows":"to","to":736,"from":701,"label":"StepsTo BoringStep"},{"arrows":"to","to":564,"from":704,"label":"StepsTo BoringStep"},{"arrows":"to","to":647,"from":704,"label":"SubTerm 0"},{"arrows":"to","to":725,"from":705,"label":"StepsTo BoringStep"},{"arrows":"to","to":148,"from":706,"label":"SubTerm 0"},{"arrows":"to","to":707,"from":706,"label":"SubTerm 1"},{"arrows":"to","to":128,"from":707,"label":"SubTerm 0"},{"arrows":"to","to":396,"from":708,"label":"SubTerm 0"},{"arrows":"to","to":396,"from":708,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":710,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":710,"label":"StepsTo BoringStep"},{"arrows":"to","to":144,"from":711,"label":"SubTerm 0"},{"arrows":"to","to":712,"from":711,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":712,"label":"SubTerm 0"},{"arrows":"to","to":227,"from":713,"label":"SubTerm 0"},{"arrows":"to","to":791,"from":713,"label":"StepsTo BoringStep"},{"arrows":"to","to":35,"from":715,"label":"StepsTo ReturnStep"},{"arrows":"to","to":70,"from":715,"label":"SubTerm 0"},{"arrows":"to","to":675,"from":715,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":717,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":717,"label":"StepsTo ReturnStep"},{"arrows":"to","to":475,"from":717,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":718,"label":"StepsTo BoringStep"},{"arrows":"to","to":535,"from":718,"label":"SubTerm 1"},{"arrows":"to","to":719,"from":718,"label":"SubTerm 0"},{"arrows":"to","to":721,"from":720,"label":"StepsTo BoringStep"},{"arrows":"to","to":609,"from":722,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":723,"label":"SubTerm 0"},{"arrows":"to","to":482,"from":723,"label":"StepsTo CallStep"},{"arrows":"to","to":490,"from":723,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":724,"label":"SubTerm 0"},{"arrows":"to","to":443,"from":724,"label":"SubTerm 1"},{"arrows":"to","to":448,"from":724,"label":"StepsTo BoringStep"},{"arrows":"to","to":464,"from":726,"label":"SubTerm 0"},{"arrows":"to","to":727,"from":726,"label":"SubTerm 1"},{"arrows":"to","to":463,"from":728,"label":"SubTerm 1"},{"arrows":"to","to":727,"from":728,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":729,"label":"SubTerm 2"},{"arrows":"to","to":420,"from":729,"label":"SubTerm 1"},{"arrows":"to","to":730,"from":729,"label":"SubTerm 0"},{"arrows":"to","to":737,"from":729,"label":"StepsTo BoringStep"},{"arrows":"to","to":571,"from":730,"label":"SubTerm 0"},{"arrows":"to","to":731,"from":730,"label":"StepsTo BoringStep"},{"arrows":"to","to":906,"from":730,"label":"SubTerm 1"},{"arrows":"to","to":525,"from":731,"label":"SubTerm 0"},{"arrows":"to","to":739,"from":731,"label":"StepsTo PrimStep"},{"arrows":"to","to":906,"from":731,"label":"SubTerm 1"},{"arrows":"to","to":735,"from":734,"label":"SubTerm 0"},{"arrows":"to","to":808,"from":734,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":736,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":736,"label":"StepsTo BoringStep"},{"arrows":"to","to":411,"from":736,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":737,"label":"SubTerm 2"},{"arrows":"to","to":420,"from":737,"label":"SubTerm 1"},{"arrows":"to","to":731,"from":737,"label":"SubTerm 0"},{"arrows":"to","to":741,"from":737,"label":"StepsTo PrimStep"},{"arrows":"to","to":740,"from":739,"label":"SubTerm 0"},{"arrows":"to","to":858,"from":739,"label":"StepsTo ReturnStep"},{"arrows":"to","to":906,"from":739,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":741,"label":"SubTerm 2"},{"arrows":"to","to":111,"from":741,"label":"StepsTo ReturnStep"},{"arrows":"to","to":420,"from":741,"label":"SubTerm 1"},{"arrows":"to","to":739,"from":741,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":742,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":742,"label":"SubTerm 1"},{"arrows":"to","to":598,"from":742,"label":"StepsTo CallStep"},{"arrows":"to","to":176,"from":744,"label":"SubTerm 0"},{"arrows":"to","to":439,"from":744,"label":"StepsTo ReturnStep"},{"arrows":"to","to":257,"from":746,"label":"SubTerm 0"},{"arrows":"to","to":749,"from":748,"label":"SubTerm 1"},{"arrows":"to","to":883,"from":748,"label":"SubTerm 0"},{"arrows":"to","to":652,"from":750,"label":"SubTerm 1"},{"arrows":"to","to":923,"from":750,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":751,"label":"StepsTo BoringStep"},{"arrows":"to","to":319,"from":752,"label":"StepsTo BoringStep"},{"arrows":"to","to":320,"from":752,"label":"SubTerm 1"},{"arrows":"to","to":692,"from":752,"label":"SubTerm 2"},{"arrows":"to","to":751,"from":752,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":753,"label":"StepsTo ReturnStep"},{"arrows":"to","to":634,"from":753,"label":"SubTerm 1"},{"arrows":"to","to":823,"from":753,"label":"SubTerm 0"},{"arrows":"to","to":756,"from":755,"label":"SubTerm 1"},{"arrows":"to","to":830,"from":755,"label":"SubTerm 0"},{"arrows":"to","to":925,"from":755,"label":"SubTerm 2"},{"arrows":"to","to":758,"from":757,"label":"SubTerm 1"},{"arrows":"to","to":821,"from":757,"label":"SubTerm 0"},{"arrows":"to","to":917,"from":757,"label":"SubTerm 2"},{"arrows":"to","to":760,"from":759,"label":"SubTerm 1"},{"arrows":"to","to":913,"from":759,"label":"SubTerm 0"},{"arrows":"to","to":759,"from":761,"label":"SubTerm 1"},{"arrows":"to","to":771,"from":761,"label":"SubTerm 0"},{"arrows":"to","to":689,"from":762,"label":"SubTerm 1"},{"arrows":"to","to":763,"from":762,"label":"SubTerm 0"},{"arrows":"to","to":800,"from":762,"label":"StepsTo BoringStep"},{"arrows":"to","to":333,"from":764,"label":"SubTerm 0"},{"arrows":"to","to":711,"from":764,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":765,"label":"SubTerm 0"},{"arrows":"to","to":675,"from":765,"label":"StepsTo PrimStep"},{"arrows":"to","to":766,"from":765,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":766,"label":"SubTerm 0"},{"arrows":"to","to":676,"from":766,"label":"StepsTo PrimStep"},{"arrows":"to","to":587,"from":767,"label":"SubTerm 0"},{"arrows":"to","to":766,"from":767,"label":"StepsTo BoringStep"},{"arrows":"to","to":485,"from":768,"label":"StepsTo BoringStep"},{"arrows":"to","to":588,"from":768,"label":"SubTerm 0"},{"arrows":"to","to":621,"from":770,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":772,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":772,"label":"StepsTo BoringStep"},{"arrows":"to","to":791,"from":772,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":775,"label":"SubTerm 0"},{"arrows":"to","to":300,"from":775,"label":"StepsTo BoringStep"},{"arrows":"to","to":779,"from":778,"label":"SubTerm 1"},{"arrows":"to","to":853,"from":778,"label":"SubTerm 2"},{"arrows":"to","to":918,"from":778,"label":"SubTerm 0"},{"arrows":"to","to":761,"from":782,"label":"SubTerm 1"},{"arrows":"to","to":865,"from":782,"label":"SubTerm 0"},{"arrows":"to","to":728,"from":783,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":785,"label":"SubTerm 0"},{"arrows":"to","to":680,"from":785,"label":"StepsTo BoringStep"},{"arrows":"to","to":678,"from":786,"label":"SubTerm 2"},{"arrows":"to","to":820,"from":786,"label":"SubTerm 0"},{"arrows":"to","to":924,"from":786,"label":"SubTerm 1"},{"arrows":"to","to":146,"from":791,"label":"StepsTo BoringStep"},{"arrows":"to","to":228,"from":791,"label":"SubTerm 0"},{"arrows":"to","to":748,"from":792,"label":"SubTerm 1"},{"arrows":"to","to":915,"from":792,"label":"SubTerm 0"},{"arrows":"to","to":794,"from":793,"label":"StepsTo BoringStep"},{"arrows":"to","to":248,"from":795,"label":"StepsTo BoringStep"},{"arrows":"to","to":523,"from":796,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":797,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":797,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":797,"label":"StepsTo BoringStep"},{"arrows":"to","to":799,"from":798,"label":"SubTerm 1"},{"arrows":"to","to":868,"from":798,"label":"SubTerm 0"},{"arrows":"to","to":893,"from":798,"label":"SubTerm 2"},{"arrows":"to","to":184,"from":800,"label":"StepsTo CallStep"},{"arrows":"to","to":763,"from":800,"label":"SubTerm 0"},{"arrows":"to","to":807,"from":800,"label":"SubTerm 1"},{"arrows":"to","to":722,"from":803,"label":"SubTerm 1"},{"arrows":"to","to":804,"from":803,"label":"StepsTo BoringStep"},{"arrows":"to","to":912,"from":803,"label":"SubTerm 0"},{"arrows":"to","to":467,"from":804,"label":"StepsTo BoringStep"},{"arrows":"to","to":623,"from":804,"label":"SubTerm 0"},{"arrows":"to","to":722,"from":804,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":809,"label":"SubTerm 0"},{"arrows":"to","to":433,"from":809,"label":"SubTerm 1"},{"arrows":"to","to":521,"from":811,"label":"SubTerm 0"},{"arrows":"to","to":812,"from":811,"label":"SubTerm 1"},{"arrows":"to","to":798,"from":828,"label":"SubTerm 0"},{"arrows":"to","to":881,"from":828,"label":"SubTerm 1"},{"arrows":"to","to":852,"from":838,"label":"SubTerm 1"},{"arrows":"to","to":874,"from":838,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":847,"label":"SubTerm 0"},{"arrows":"to","to":903,"from":847,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":851,"label":"SubTerm 0"},{"arrows":"to","to":706,"from":851,"label":"SubTerm 1"},{"arrows":"to","to":242,"from":855,"label":"StepsTo BoringStep"},{"arrows":"to","to":377,"from":856,"label":"StepsTo BoringStep"},{"arrows":"to","to":137,"from":863,"label":"SubTerm 0"},{"arrows":"to","to":379,"from":867,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":879,"label":"SubTerm 1"},{"arrows":"to","to":415,"from":879,"label":"SubTerm 0"},{"arrows":"to","to":811,"from":881,"label":"SubTerm 0"},{"arrows":"to","to":607,"from":885,"label":"SubTerm 0"},{"arrows":"to","to":623,"from":912,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[150,5,"Redex"],[158,5,"Redex"]],"id":1,"label":"let rest' =\n  2 :: (if true\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":2,"label":"if f_3 y\nthen y :: (List.filter f_3 ys)\nelse List.filter f_3 ys"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":3,"label":"List.filter f_3 ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":5,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":6,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":7,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[25,138,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":8,"label":"let rest' =\n  2 :: (0 :: (if false\n              then y_3 :: (List.filter f_3\n                                       ys_3)\n              else List.filter f_3 ys_3)) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":13,"label":"(2 , [])"},{"span":null,"env":[],"annots":[],"id":14,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[37,9,"Redex"],[194,5,"Redex"],[202,5,"Redex"]],"id":15,"label":"List.rev (let rest' =\n            if (2 mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[17,9,"Redex"],[134,5,"Redex"],[142,5,"Redex"]],"id":16,"label":"let rest' =\n  if (2 mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_3","[3 ; 2]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[18,4,"Redex"],[83,1,"Redex"]],"id":17,"label":"2 :: (0 :: (match xs_3 with\n            | [] -> []\n            | y :: ys -> if f_3 y\n                         then y :: (List.filter f_3 ys)\n                         else List.filter f_3 ys))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[11,182,"Redex"]],"id":18,"label":"2 :: (0 :: (match [3 ; 2] with\n            | [] -> []\n            | y :: ys -> if f_3 y\n                         then y :: (List.filter f_3 ys)\n                         else List.filter f_3 ys))"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":23,"label":"if f_1 y\nthen y :: (List.filter f_1 ys)\nelse List.filter f_1 ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":24,"label":"f_1 y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","2"],["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[50,1,"Redex"],[244,5,"Redex"],[252,5,"Redex"]],"id":27,"label":"List.rev (let rest' =\n            2 :: (0 :: (if (i mod 2) = 0\n                        then y_4 :: (List.filter f_4\n                                                 ys_4)\n                        else List.filter f_4 ys_4)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","2"],["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[30,1,"Redex"],[184,5,"Redex"],[192,5,"Redex"]],"id":28,"label":"let rest' =\n  2 :: (0 :: (if (i mod 2) = 0\n              then y_4 :: (List.filter f_4\n                                       ys_4)\n              else List.filter f_4 ys_4)) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[44,1,"Redex"],[219,5,"Redex"],[227,5,"Redex"]],"id":29,"label":"List.rev (let rest' =\n            2 :: (if (i mod 2) = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[24,1,"Redex"],[159,5,"Redex"],[167,5,"Redex"]],"id":30,"label":"let rest' =\n  2 :: (if (i mod 2) = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[32,1,"Redex"],[45,5,"Redex"],[53,5,"Redex"]],"id":31,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[68,4,"Redex"],[86,5,"Redex"],[94,5,"Redex"]],"id":34,"label":"let rest' =\n  2 :: (0 :: (List.filter f_3\n                          ys_3)) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[45,167,"Redex"],[235,5,"Redex"],[243,5,"Redex"]],"id":35,"label":"List.rev (let rest' =\n            2 :: (0 :: (if true\n                        then y_4 :: (List.filter f_4\n                                                 ys_4)\n                        else List.filter f_4 ys_4)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[25,137,"Redex"],[175,5,"Redex"],[183,5,"Redex"]],"id":36,"label":"let rest' =\n  2 :: (0 :: (if true\n              then y_4 :: (List.filter f_4\n                                       ys_4)\n              else List.filter f_4 ys_4)) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":39,"label":"if f_5 y\nthen y :: (List.filter f_5 ys)\nelse List.filter f_5 ys"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":40,"label":"f_5 y"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[17,3,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":41,"label":"let rest' =\n  if f 1\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[3,9,"Redex"]],"id":42,"label":"if (0 mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":43,"label":"y_2 :: (List.filter f_2 ys_2)"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":46,"label":"(2 , List.filter f_4 [])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[98,4,"Redex"],[126,5,"Redex"],[134,5,"Redex"]],"id":47,"label":"List.rev (let rest' =\n            2 :: (0 :: (List.filter f_2\n                                    ys_2)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[45,61,"Redex"],[129,5,"Redex"],[137,5,"Redex"]],"id":48,"label":"List.rev (let rest' =\n            2 :: (0 :: (List.filter f_2\n                                    [3 ; 2])) in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_3","[3 ; 2]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"],[65,1,"Redex"]],"id":49,"label":"0 :: (match xs_3 with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,158,"Redex"]],"id":50,"label":"0 :: (match [3 ; 2] with\n      | [] -> []\n      | y :: ys -> if f_3 y\n                   then y :: (List.filter f_3 ys)\n                   else List.filter f_3 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","2"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[41,3,"Redex"],[188,5,"Redex"],[196,5,"Redex"]],"id":51,"label":"List.rev (let rest' =\n            if f_1 y_1\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","2"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[21,3,"Redex"],[128,5,"Redex"],[136,5,"Redex"]],"id":52,"label":"let rest' =\n  if f_1 y_1\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[49,9,"Redex"],[244,5,"Redex"],[252,5,"Redex"]],"id":55,"label":"List.rev (let rest' =\n            2 :: (0 :: (if (3 mod 2) = 0\n                        then y_3 :: (List.filter f_3\n                                                 ys_3)\n                        else List.filter f_3 ys_3)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[29,9,"Redex"],[184,5,"Redex"],[192,5,"Redex"]],"id":56,"label":"let rest' =\n  2 :: (0 :: (if (3 mod 2) = 0\n              then y_3 :: (List.filter f_3\n                                       ys_3)\n              else List.filter f_3 ys_3)) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":60,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":61,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":62,"label":"l"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[39,5,"Redex"],[47,5,"Redex"]],"id":63,"label":"let rest' = 2 :: (0 :: [2]) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[45,57,"Redex"],[125,5,"Redex"],[133,5,"Redex"]],"id":65,"label":"List.rev (let rest' =\n            2 :: (0 :: (List.filter f_3\n                                    [2])) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[25,47,"Redex"],[85,5,"Redex"],[93,5,"Redex"]],"id":66,"label":"let rest' =\n  2 :: (0 :: (List.filter f_3\n                          [2])) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,59,"Redex"]],"id":67,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","2"]],"annots":[[1,1,"Redex"]],"id":68,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":69,"label":"(2 mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":70,"label":"List.rev"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":71,"label":"f_4 2"},{"span":null,"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":73,"label":"y_1 :: (List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":74,"label":"List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":75,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[89,5,"Redex"],[97,5,"Redex"]],"id":76,"label":"let rest' =\n  if false\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":78,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[4,1,"Redex"]],"id":80,"label":"if (i mod 2) = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[34,53,"Redex"],[109,5,"Redex"],[117,5,"Redex"]],"id":81,"label":"List.rev (let rest' =\n            List.filter f\n                        [2 ; 0 ; 3 ; 2] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[12,53,"Redex"],[77,5,"Redex"],[85,5,"Redex"]],"id":82,"label":"let rest' = List.filter f\n                        [2 ; 0 ; 3 ; 2] in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[68,4,"Redex"],[86,5,"Redex"],[94,5,"Redex"]],"id":83,"label":"let rest' =\n  2 :: (0 :: (List.filter f_2\n                          ys_2)) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[25,51,"Redex"],[89,5,"Redex"],[97,5,"Redex"]],"id":84,"label":"let rest' =\n  2 :: (0 :: (List.filter f_2\n                          [3 ; 2])) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":87,"label":"[1 ; 2 ; 0 ; 3 ; 2]"},{"span":null,"env":[],"annots":[],"id":88,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[12,112,"Redex"],[136,5,"Redex"],[144,5,"Redex"]],"id":89,"label":"let rest' = if false\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[28,2,"Redex"],[42,5,"Redex"],[50,5,"Redex"]],"id":90,"label":"let rest' =\n  List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"],["h_1","2"],["t_1","[0 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,3,"Redex"],[40,109,"Redex"],[161,5,"Redex"],[169,5,"Redex"]],"id":91,"label":"let seen' = seen_1 @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"],["h_1","2"]],"annots":[[0,6,"Redex"],[9,3,"Redex"]],"id":92,"label":"seen_1 @ h_1"},{"span":null,"env":[],"annots":[],"id":94,"label":"2"},{"span":null,"env":[],"annots":[],"id":95,"label":"[2 ; 0 ; 3 ; 2]"},{"span":null,"env":[],"annots":[],"id":96,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,44,"Redex"]],"id":97,"label":"List.rev (helper ([_ ; _ ; _ ; _ ; _] , [2 ; 0 ; 2]))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest_1","[2 ; 0 ; 2]"],["seen_1","[_ ; _ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,6,"Redex"],[46,6,"Redex"],[113,6,"Redex"],[122,1,"Redex"],[162,215,"Redex"],[389,5,"Redex"],[397,5,"Redex"]],"id":98,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[12,158,"Redex"],[182,5,"Redex"],[190,5,"Redex"]],"id":99,"label":"let rest' = if true\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1\n                             ys_1 in helper (seen' , rest')"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[5,114,"Redex"]],"id":100,"label":"0 :: (if false\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[22,4,"Redex"]],"id":101,"label":"0 :: (List.filter f_3 ys_3)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[5,1,"Redex"]],"id":102,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[14,2,"Redex"]],"id":103,"label":"List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[48,2,"Redex"],[72,5,"Redex"],[80,5,"Redex"]],"id":104,"label":"List.rev (let rest' =\n            List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[52,1,"Redex"],[75,5,"Redex"],[83,5,"Redex"]],"id":105,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[34,61,"Redex"],[117,5,"Redex"],[125,5,"Redex"]],"id":106,"label":"List.rev (let rest' =\n            List.filter is_in\n                        [1 ; 2 ; 0 ; 3 ; 2] in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","2"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[37,5,"Redex"],[186,5,"Redex"],[194,5,"Redex"]],"id":107,"label":"List.rev (let rest' =\n            if f_1 2\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","2"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[17,5,"Redex"],[126,5,"Redex"],[134,5,"Redex"]],"id":108,"label":"let rest' =\n  if f_1 2\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[0,59,"Redex"]],"id":111,"label":"if false\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h_1","2"]],"annots":[[22,3,"Redex"]],"id":112,"label":"[_ ; _ ; _ ; _ ; _] @ h_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":113,"label":"h_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[34,83,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":114,"label":"List.rev (let rest' =\n            let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":118,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[14,146,"Redex"],[172,5,"Redex"],[180,5,"Redex"]],"id":119,"label":"let rest' =\n  match [1 ; 2 ; 0 ; 3 ; 2] with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[12,61,"Redex"],[85,5,"Redex"],[93,5,"Redex"]],"id":120,"label":"let rest' = List.filter is_in\n                        [1 ; 2 ; 0 ; 3 ; 2] in helper (seen' , rest')"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[14,9,"Redex"]],"id":121,"label":"(2 , 0 :: (if (2 mod 2) = 0\n           then y_4 :: (List.filter f_4\n                                    ys_4)\n           else List.filter f_4 ys_4))"},{"span":null,"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[0,93,"Redex"]],"id":122,"label":"if true\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[],"annots":[],"id":123,"label":"true"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,182,"Redex"]],"id":124,"label":"let seen' =\n  [_ ; _ ; _ ; _ ; _] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":125,"label":"[_ ; _ ; _ ; _ ; _]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":128,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":129,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,24,"Redex"]],"id":130,"label":"[] @ [_ ; _ ; _ ; _ ; _]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":131,"label":"(@)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":132,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":133,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[_ ; _ ; _ ; _ ; _]"]],"annots":[[5,1,"Redex"]],"id":134,"label":"[] @ h"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[3,5,"Redex"]],"id":135,"label":"if 0 = 0\nthen y_4 :: (List.filter f_4\n                         ys_4)\nelse List.filter f_4 ys_4"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":136,"label":"0 = 0"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":137,"label":"(y , List.filter f_1 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,1,"Redex"]],"id":139,"label":"l"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[0,93,"Redex"]],"id":142,"label":"if true\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[16,49,"Redex"]],"id":143,"label":"(2 , 0 :: (2 :: (List.filter f_4\n                             [])))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":144,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":145,"label":"is_in"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[11,44,"Redex"]],"id":146,"label":"0 :: (2 :: (List.filter f_4\n                        []))"},{"span":null,"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"]],"annots":[[18,4,"Redex"],[83,1,"Redex"]],"id":147,"label":"0 :: (2 :: (match xs_5 with\n            | [] -> []\n            | y :: ys -> if f_5 y\n                         then y :: (List.filter f_5 ys)\n                         else List.filter f_5 ys))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":148,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":149,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[37,5,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":150,"label":"List.rev (let rest' =\n            if 1 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[17,5,"Redex"],[89,5,"Redex"],[97,5,"Redex"]],"id":151,"label":"let rest' =\n  if 1 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[34,3,"Redex"],[90,4,"Redex"],[117,5,"Redex"],[125,5,"Redex"]],"id":152,"label":"List.rev (let rest' =\n            y_1 :: (List.filter f_1\n                                ys_1) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[14,3,"Redex"],[60,4,"Redex"],[77,5,"Redex"],[85,5,"Redex"]],"id":153,"label":"let rest' =\n  y_1 :: (List.filter f_1\n                      ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":154,"label":"f 1"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":155,"label":"f"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":156,"label":"(@)"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[11,3,"Redex"],[66,4,"Redex"]],"id":157,"label":"(2 , 0 :: (y_4 :: (List.filter f_4\n                               ys_4)))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[6,1,"Redex"]],"id":159,"label":"([] , l)"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[5,20,"Redex"]],"id":160,"label":"2 :: (List.filter f_4 [])"},{"span":null,"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"],[65,1,"Redex"]],"id":161,"label":"2 :: (match xs_5 with\n      | [] -> []\n      | y :: ys -> if f_5 y\n                   then y :: (List.filter f_5 ys)\n                   else List.filter f_5 ys)"},{"span":null,"env":[["xs_2","[0 ; 3 ; 2]"]],"annots":[[0,4,"Redex"]],"id":162,"label":"xs_2"},{"span":null,"env":[],"annots":[],"id":163,"label":"[0 ; 3 ; 2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[185,5,"Redex"],[193,5,"Redex"]],"id":166,"label":"List.rev (let rest' =\n            if true\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[125,5,"Redex"],[133,5,"Redex"]],"id":167,"label":"let rest' =\n  if true\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","[_ ; _ ; _ ; _ ; _]"],["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":168,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":169,"label":"seen @ h"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[39,1,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":170,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[19,1,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":171,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":175,"label":"0"},{"span":null,"env":[],"annots":[],"id":176,"label":"(2 , 0 :: (2 :: []))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":177,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":178,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[0,94,"Redex"]],"id":179,"label":"if false\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":180,"label":"y_3 :: (List.filter f_3 ys_3)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[37,9,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":181,"label":"List.rev (let rest' =\n            if (1 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[17,9,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":182,"label":"let rest' =\n  if (1 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["i","3"],["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[4,1,"Redex"]],"id":183,"label":"if (i mod 2) = 0\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","3"]],"annots":[[1,1,"Redex"]],"id":184,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,55,"Redex"]],"id":185,"label":"helper ([] , [[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":186,"label":"([] , [[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2])"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[3,5,"Redex"]],"id":187,"label":"if 1 = 0\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":188,"label":"1 = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[53,3,"Redex"],[238,5,"Redex"],[246,5,"Redex"]],"id":189,"label":"List.rev (let rest' =\n            2 :: (0 :: (if f_3 y_3\n                        then y_3 :: (List.filter f_3\n                                                 ys_3)\n                        else List.filter f_3 ys_3)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[33,3,"Redex"],[178,5,"Redex"],[186,5,"Redex"]],"id":190,"label":"let rest' =\n  2 :: (0 :: (if f_3 y_3\n              then y_3 :: (List.filter f_3\n                                       ys_3)\n              else List.filter f_3 ys_3)) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":191,"label":"[2 ; 0 ; 2]"},{"span":null,"env":[],"annots":[],"id":192,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[38,1,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":193,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[18,1,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":194,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[9,73,"Redex"]],"id":195,"label":"List.rev (let rest' =\n            [2 ; 0 ; 2] in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"],["rest'","[2 ; 0 ; 2]"]],"annots":[[18,5,"Redex"],[26,5,"Redex"]],"id":196,"label":"List.rev (helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[22,142,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":197,"label":"List.rev (let rest' = if false\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":198,"label":"(y , List.filter f_2 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":199,"label":"y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,401,"Redex"]],"id":200,"label":"List.rev (match [2 ; 0 ; 2] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         seen_1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","2"],["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[18,1,"Redex"],[134,5,"Redex"],[142,5,"Redex"]],"id":201,"label":"let rest' =\n  if (i mod 2) = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":202,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,23,"Redex"]],"id":203,"label":"[_ ; _ ; _ ; _ ; _] @ 2"},{"span":null,"env":[],"annots":[],"id":204,"label":"2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","2"]],"annots":[[4,3,"Redex"]],"id":205,"label":"f_1 y_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":206,"label":"f_1"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,23,"Redex"]],"id":207,"label":"List.filter f_2 [3 ; 2]"},{"span":null,"env":[],"annots":[],"id":208,"label":"[3 ; 2]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[18,1,"Redex"]],"id":209,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,49,"Redex"]],"id":210,"label":"List.filter is_in\n            [1 ; 2 ; 0 ; 3 ; 2]"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[14,5,"Redex"]],"id":211,"label":"(2 , 0 :: (if f_4 2\n           then y_4 :: (List.filter f_4\n                                    ys_4)\n           else List.filter f_4 ys_4))"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":212,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[1 ; 2 ; 0 ; 3 ; 2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[40,2,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":213,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[34,186,"Redex"],[242,5,"Redex"],[250,5,"Redex"]],"id":214,"label":"List.rev (let rest' =\n            match [1 ; 2 ; 0 ; 3 ; 2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[0,2,"Redex"]],"id":215,"label":"ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","2"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[7,3,"Redex"]],"id":216,"label":"if f_1 y_1\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[16,4,"Redex"]],"id":217,"label":"List.filter f_1 ys_1"},{"span":null,"env":[["xs_4","[2]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":220,"label":"match xs_4 with\n| [] -> []\n| y :: ys -> if f_4 y\n             then y :: (List.filter f_4 ys)\n             else List.filter f_4 ys"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":221,"label":"if f_4 y\nthen y :: (List.filter f_4 ys)\nelse List.filter f_4 ys"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["y_1","2"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[3,5,"Redex"]],"id":222,"label":"if f_1 2\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[22,4,"Redex"]],"id":223,"label":"2 :: (List.filter f_4 ys_4)"},{"span":null,"env":[],"annots":[],"id":225,"label":"0 :: [2]"},{"span":null,"env":[],"annots":[],"id":226,"label":"(0 , [2])"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[5,3,"Redex"],[54,4,"Redex"]],"id":227,"label":"(0 , y_4 :: (List.filter f_4\n                         ys_4))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[50,4,"Redex"]],"id":228,"label":"(0 , 2 :: (List.filter f_4\n                       ys_4))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[9,5,"Redex"]],"id":229,"label":"0 :: (if f_4 2\n      then y_4 :: (List.filter f_4\n                               ys_4)\n      else List.filter f_4 ys_4)"},{"span":null,"env":[["i","2"],["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[10,1,"Redex"]],"id":230,"label":"0 :: (if (i mod 2) = 0\n      then y_4 :: (List.filter f_4\n                               ys_4)\n      else List.filter f_4 ys_4)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[50,4,"Redex"]],"id":231,"label":"(2 , 0 :: (List.filter f_3\n                       ys_3))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[10,44,"Redex"]],"id":232,"label":"(2 , 0 :: (List.filter f_3\n                       [2]))"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[0,93,"Redex"]],"id":233,"label":"if true\nthen y_4 :: (List.filter f_4\n                         ys_4)\nelse List.filter f_4 ys_4"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[0,3,"Redex"],[24,4,"Redex"]],"id":234,"label":"y_4 :: (List.filter f_4 ys_4)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":235,"label":"if f_2 y\nthen y :: (List.filter f_2 ys)\nelse List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":236,"label":"y :: (List.filter f_2 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[156,215,"Redex"],[383,5,"Redex"],[391,5,"Redex"]],"id":237,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,427,"Redex"]],"id":238,"label":"List.rev (match [[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,19,"Redex"]],"id":239,"label":"(0 , List.filter f_3 [2])"},{"span":null,"env":[["xs_4","[2]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"],[62,1,"Redex"]],"id":240,"label":"(0 , match xs_4 with\n     | [] -> []\n     | y :: ys -> if f_4 y\n                  then y :: (List.filter f_4 ys)\n                  else List.filter f_4 ys)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[19,3,"Redex"]],"id":241,"label":"2 :: (0 :: (if f_3 y_3\n            then y_3 :: (List.filter f_3\n                                     ys_3)\n            else List.filter f_3 ys_3))"},{"span":null,"env":[],"annots":[],"id":242,"label":"[0 ; 3 ; 2]"},{"span":null,"env":[],"annots":[],"id":243,"label":"3"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":244,"label":"f_1 2"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[9,5,"Redex"]],"id":245,"label":"0 :: (if 1 = 0\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[8,5,"Redex"]],"id":246,"label":"(0 , if 1 = 0\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,19,"Redex"]],"id":247,"label":"List.filter f_3 [2]"},{"span":null,"env":[],"annots":[],"id":248,"label":"[2]"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":249,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":250,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":253,"label":"helper"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[22,4,"Redex"]],"id":254,"label":"0 :: (List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[21,4,"Redex"]],"id":255,"label":"(0 , List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_5","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[31,315,"Redex"],[360,5,"Redex"],[368,5,"Redex"]],"id":256,"label":"let rest' =\n  2 :: (0 :: (2 :: (match [] with\n                    | [] -> []\n                    | y :: ys -> if f_5 y\n                                 then y :: (List.filter f_5\n                                                        ys)\n                                 else List.filter f_5\n                                                  ys))) in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":257,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":258,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"]],"annots":[[4,3,"Redex"]],"id":259,"label":"f_2 y_2"},{"span":null,"env":[["y_2","0"]],"annots":[[0,3,"Redex"]],"id":260,"label":"y_2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":261,"label":"f_2 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":262,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":263,"label":"helper"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,138,"Redex"]],"id":264,"label":"match [1 ; 2 ; 0 ; 3 ; 2] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["i","3"],["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[10,1,"Redex"]],"id":265,"label":"0 :: (if (i mod 2) = 0\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":null,"env":[["i","3"],["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[9,1,"Redex"]],"id":266,"label":"(0 , if (i mod 2) = 0\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[13,1,"Redex"]],"id":268,"label":"helper ([] , l)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[7,3,"Redex"]],"id":269,"label":"if f_3 y_3\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_3","[3 ; 2]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[32,4,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":270,"label":"let rest' =\n  2 :: (0 :: (match xs_3 with\n              | [] -> []\n              | y :: ys -> if f_3 y\n                           then y :: (List.filter f_3 ys)\n                           else List.filter f_3 ys)) in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":271,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":272,"label":"seen"},{"span":null,"env":[],"annots":[],"id":273,"label":"2 :: []"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[11,45,"Redex"]],"id":274,"label":"2 :: (0 :: (List.filter f_3\n                        [2]))"},{"span":null,"env":[["xs_4","[2]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[18,4,"Redex"],[83,1,"Redex"]],"id":275,"label":"2 :: (0 :: (match xs_4 with\n            | [] -> []\n            | y :: ys -> if f_4 y\n                         then y :: (List.filter f_4 ys)\n                         else List.filter f_4 ys))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":276,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":277,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":278,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":279,"label":"seen"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[3,5,"Redex"]],"id":282,"label":"if 0 = 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[7,3,"Redex"]],"id":283,"label":"if f_4 y_4\nthen y_4 :: (List.filter f_4\n                         ys_4)\nelse List.filter f_4 ys_4"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[16,4,"Redex"]],"id":284,"label":"List.filter f_4 ys_4"},{"span":null,"env":[["i","3"],["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[15,1,"Redex"]],"id":285,"label":"(2 , 0 :: (if (i mod 2) = 0\n           then y_3 :: (List.filter f_3\n                                    ys_3)\n           else List.filter f_3 ys_3))"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[14,9,"Redex"]],"id":286,"label":"(2 , 0 :: (if (3 mod 2) = 0\n           then y_3 :: (List.filter f_3\n                                    ys_3)\n           else List.filter f_3 ys_3))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":288,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":289,"label":"2"},{"span":null,"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"]],"annots":[[23,4,"Redex"],[98,1,"Redex"]],"id":290,"label":"(2 , 0 :: (2 :: (match xs_5 with\n                 | [] -> []\n                 | y :: ys -> if f_5 y\n                              then y :: (List.filter f_5 ys)\n                              else List.filter f_5 ys)))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[21,4,"Redex"]],"id":291,"label":"(2 , List.filter f_4 ys_4)"},{"span":null,"env":[],"annots":[],"id":292,"label":"2"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[8,5,"Redex"]],"id":293,"label":"(2 , if 0 = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":294,"label":"(y_1 , List.filter f_1 ys_1)"},{"span":null,"env":[["y_1","2"]],"annots":[[0,3,"Redex"]],"id":295,"label":"y_1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,6,"Redex"],[9,1,"Redex"]],"id":296,"label":"seen_1 @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":297,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["@","@"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":298,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[["@","@"]],"annots":[],"id":299,"label":"(@)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,57,"Redex"]],"id":300,"label":"List.rev (helper ([] , [[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]))"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[11,132,"Redex"]],"id":302,"label":"2 :: (0 :: (if false\n            then y_3 :: (List.filter f_3\n                                     ys_3)\n            else List.filter f_3 ys_3))"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[5,108,"Redex"]],"id":303,"label":"(0 , if true\n     then y_4 :: (List.filter f_4\n                              ys_4)\n     else List.filter f_4 ys_4)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":305,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":306,"label":"2"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":307,"label":"(y_4 , List.filter f_4 ys_4)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":308,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":309,"label":"2"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,44,"Redex"]],"id":310,"label":"(2 , List.filter f_1\n                 [0 ; 3 ; 2])"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":312,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":313,"label":"helper"},{"span":null,"env":[],"annots":[],"id":314,"label":"[0 ; 2]"},{"span":null,"env":[],"annots":[],"id":315,"label":"0"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[11,177,"Redex"]],"id":316,"label":"0 :: (2 :: (match [] with\n            | [] -> []\n            | y :: ys -> if f_5 y\n                         then y :: (List.filter f_5 ys)\n                         else List.filter f_5 ys))"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[10,173,"Redex"]],"id":317,"label":"(0 , 2 :: (match [] with\n           | [] -> []\n           | y :: ys -> if f_5 y\n                        then y :: (List.filter f_5 ys)\n                        else List.filter f_5 ys))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[10,178,"Redex"]],"id":318,"label":"(2 , 0 :: (match [3 ; 2] with\n           | [] -> []\n           | y :: ys -> if f_3 y\n                        then y :: (List.filter f_3 ys)\n                        else List.filter f_3 ys))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,290,"Redex"]],"id":319,"label":"match [2 ; 0 ; 2] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,6,"Redex"]],"id":320,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[40,3,"Redex"],[102,4,"Redex"],[130,5,"Redex"],[138,5,"Redex"]],"id":321,"label":"List.rev (let rest' =\n            2 :: (y_2 :: (List.filter f_2\n                                      ys_2)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[9,5,"Redex"]],"id":322,"label":"0 :: (if f_3 3\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[8,5,"Redex"]],"id":323,"label":"(0 , if f_3 3\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":null,"env":[["xs_4","[2]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[17,4,"Redex"],[80,1,"Redex"]],"id":325,"label":"(2 , 0 :: (match xs_4 with\n           | [] -> []\n           | y :: ys -> if f_4 y\n                        then y :: (List.filter f_4 ys)\n                        else List.filter f_4 ys))"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":326,"label":"(y , List.filter f_5 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":327,"label":"y"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[21,4,"Redex"]],"id":328,"label":"(0 , List.filter f_3 ys_3)"},{"span":null,"env":[],"annots":[],"id":329,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","[_ ; _ ; _ ; _ ; _]"],["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"],[68,137,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":330,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,58,"Redex"]],"id":331,"label":"removeDuplicates [[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,381,"Redex"]],"id":332,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":333,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":334,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":335,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":336,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":337,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":338,"label":"helper ([] , l)"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,316,"Redex"]],"id":339,"label":"match [[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":341,"label":"true"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[19,3,"Redex"]],"id":345,"label":"2 :: (0 :: (if f_4 y_4\n            then y_4 :: (List.filter f_4\n                                     ys_4)\n            else List.filter f_4 ys_4))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[15,5,"Redex"]],"id":346,"label":"2 :: (0 :: (if f_4 2\n            then y_4 :: (List.filter f_4\n                                     ys_4)\n            else List.filter f_4 ys_4))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[26,3,"Redex"],[84,4,"Redex"],[103,5,"Redex"],[111,5,"Redex"]],"id":347,"label":"let rest' =\n  2 :: (0 :: (y_4 :: (List.filter f_4\n                                  ys_4))) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[80,4,"Redex"],[99,5,"Redex"],[107,5,"Redex"]],"id":348,"label":"let rest' =\n  2 :: (0 :: (2 :: (List.filter f_4\n                                ys_4))) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[10,128,"Redex"]],"id":349,"label":"(2 , 0 :: (if true\n           then y_4 :: (List.filter f_4\n                                    ys_4)\n           else List.filter f_4 ys_4))"},{"span":null,"env":[["xs_3","[3 ; 2]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":350,"label":"match xs_3 with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[5,109,"Redex"]],"id":351,"label":"(0 , if false\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h_1","2"],["t_1","[0 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[56,3,"Redex"],[85,139,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":352,"label":"List.rev (let seen' =\n            [_ ; _ ; _ ; _ ; _] @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h_1","2"],["t_1","[0 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[36,3,"Redex"],[55,109,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":353,"label":"let seen' =\n  [_ ; _ ; _ ; _ ; _] @ h_1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":null,"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[3,9,"Redex"]],"id":354,"label":"if (2 mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["xs_3","[3 ; 2]"]],"annots":[[0,4,"Redex"]],"id":355,"label":"xs_3"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":356,"label":"ys"},{"span":null,"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"]],"annots":[[17,4,"Redex"],[80,1,"Redex"]],"id":357,"label":"(0 , 2 :: (match xs_5 with\n           | [] -> []\n           | y :: ys -> if f_5 y\n                        then y :: (List.filter f_5 ys)\n                        else List.filter f_5 ys))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[5,154,"Redex"]],"id":358,"label":"0 :: (match [2] with\n      | [] -> []\n      | y :: ys -> if f_4 y\n                   then y :: (List.filter f_4 ys)\n                   else List.filter f_4 ys)"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[5,148,"Redex"]],"id":359,"label":"(0 , match [2] with\n     | [] -> []\n     | y :: ys -> if f_4 y\n                  then y :: (List.filter f_4 ys)\n                  else List.filter f_4 ys)"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[8,9,"Redex"]],"id":360,"label":"(0 , if (3 mod 2) = 0\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[1 ; 2 ; 0 ; 3 ; 2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[20,2,"Redex"],[61,1,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":361,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[31,52,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":362,"label":"let rest' =\n  2 :: (0 :: (2 :: (List.filter f_4\n                                []))) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[38,4,"Redex"],[119,1,"Redex"],[362,5,"Redex"],[370,5,"Redex"]],"id":363,"label":"let rest' =\n  2 :: (0 :: (2 :: (match xs_5 with\n                    | [] -> []\n                    | y :: ys -> if f_5 y\n                                 then y :: (List.filter f_5\n                                                        ys)\n                                 else List.filter f_5\n                                                  ys))) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,42,"Redex"]],"id":364,"label":"helper ([_ ; _ ; _ ; _ ; _] , [2 ; 0 ; 2])"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":365,"label":"0 = 0"},{"span":null,"env":[],"annots":[],"id":366,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":367,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,5,"Redex"]],"id":368,"label":"seen'"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[9,9,"Redex"]],"id":369,"label":"0 :: (if (2 mod 2) = 0\n      then y_4 :: (List.filter f_4\n                               ys_4)\n      else List.filter f_4 ys_4)"},{"span":null,"env":[],"annots":[],"id":373,"label":"[]"},{"span":null,"env":[["xs","[1 ; 2 ; 0 ; 3 ; 2]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":374,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[],"annots":[],"id":375,"label":"(0 , 2 :: [])"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[0,128,"Redex"]],"id":376,"label":"match [2] with\n| [] -> []\n| y :: ys -> if f_4 y\n             then y :: (List.filter f_4 ys)\n             else List.filter f_4 ys"},{"span":null,"env":[],"annots":[],"id":377,"label":"[2]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[3,3,"Redex"]],"id":378,"label":"if f 1\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":379,"label":"[_ ; _ ; _ ; _ ; _]"},{"span":null,"env":[],"annots":[],"id":380,"label":"_"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[45,168,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":381,"label":"List.rev (let rest' =\n            2 :: (0 :: (if false\n                        then y_3 :: (List.filter f_3\n                                                 ys_3)\n                        else List.filter f_3 ys_3)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[98,4,"Redex"],[126,5,"Redex"],[134,5,"Redex"]],"id":382,"label":"List.rev (let rest' =\n            2 :: (0 :: (List.filter f_3\n                                    ys_3)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[8,9,"Redex"]],"id":384,"label":"(0 , if (2 mod 2) = 0\n     then y_4 :: (List.filter f_4\n                              ys_4)\n     else List.filter f_4 ys_4)"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[3,9,"Redex"]],"id":385,"label":"if (2 mod 2) = 0\nthen y_4 :: (List.filter f_4\n                         ys_4)\nelse List.filter f_4 ys_4"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[10,43,"Redex"]],"id":386,"label":"(0 , 2 :: (List.filter f_4\n                       []))"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":387,"label":"(2 , match [] with\n     | [] -> []\n     | y :: ys -> if f_5 y\n                  then y :: (List.filter f_5 ys)\n                  else List.filter f_5 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","2"],["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[38,1,"Redex"],[194,5,"Redex"],[202,5,"Redex"]],"id":388,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":389,"label":"1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":390,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":391,"label":"rest'"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,27,"Redex"]],"id":392,"label":"List.filter f_1 [0 ; 3 ; 2]"},{"span":null,"env":[["xs_2","[0 ; 3 ; 2]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":393,"label":"match xs_2 with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[],"annots":[],"id":394,"label":"_"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,381,"Redex"]],"id":396,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[8,5,"Redex"]],"id":397,"label":"(0 , if f_4 2\n     then y_4 :: (List.filter f_4\n                              ys_4)\n     else List.filter f_4 ys_4)"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[3,5,"Redex"]],"id":398,"label":"if f_4 2\nthen y_4 :: (List.filter f_4\n                         ys_4)\nelse List.filter f_4 ys_4"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":399,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":400,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":402,"label":"(i mod 2) = 0"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[11,131,"Redex"]],"id":404,"label":"2 :: (0 :: (if true\n            then y_4 :: (List.filter f_4\n                                     ys_4)\n            else List.filter f_4 ys_4))"},{"span":null,"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[3,5,"Redex"]],"id":405,"label":"if 0 = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":null,"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"],[62,1,"Redex"]],"id":406,"label":"(2 , match xs_5 with\n     | [] -> []\n     | y :: ys -> if f_5 y\n                  then y :: (List.filter f_5 ys)\n                  else List.filter f_5 ys)"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[8,5,"Redex"]],"id":407,"label":"(0 , if 0 = 0\n     then y_4 :: (List.filter f_4\n                              ys_4)\n     else List.filter f_4 ys_4)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":408,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[110,4,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":409,"label":"List.rev (let rest' =\n            2 :: (0 :: (2 :: (List.filter f_4\n                                          ys_4))) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"],["h_1","2"],["t_1","[0 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"],[43,3,"Redex"],[72,139,"Redex"],[223,5,"Redex"],[231,5,"Redex"]],"id":410,"label":"List.rev (let seen' =\n            seen_1 @ h_1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[25,190,"Redex"],[228,5,"Redex"],[236,5,"Redex"]],"id":411,"label":"let rest' =\n  2 :: (0 :: (match [3 ; 2] with\n              | [] -> []\n              | y :: ys -> if f_3 y\n                           then y :: (List.filter f_3 ys)\n                           else List.filter f_3 ys)) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"],["rest'","[2 ; 0 ; 2]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":412,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2 ; 0 ; 2]"]],"annots":[[30,5,"Redex"]],"id":413,"label":"helper ([_ ; _ ; _ ; _ ; _] , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","1"]],"annots":[[2,1,"Redex"]],"id":414,"label":"f y"},{"span":null,"env":[["y","1"]],"annots":[[0,1,"Redex"]],"id":415,"label":"y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[139,5,"Redex"],[147,5,"Redex"]],"id":416,"label":"List.rev (let rest' =\n            if false\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":417,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":418,"label":"2 mod 2"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":419,"label":"2 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f_5 y\n                   then y :: (List.filter f_5 ys)\n                   else List.filter f_5 ys)"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":420,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["i","2"],["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[9,1,"Redex"]],"id":421,"label":"(0 , if (i mod 2) = 0\n     then y_4 :: (List.filter f_4\n                              ys_4)\n     else List.filter f_4 ys_4)"},{"span":null,"env":[["i","2"],["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[4,1,"Redex"]],"id":422,"label":"if (i mod 2) = 0\nthen y_4 :: (List.filter f_4\n                         ys_4)\nelse List.filter f_4 ys_4"},{"span":null,"env":[["xs_1","[2 ; 0 ; 3 ; 2]"],["f_1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":423,"label":"match xs_1 with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":null,"env":[],"annots":[],"id":424,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":425,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":426,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":428,"label":"3 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":429,"label":"2"},{"span":null,"env":[],"annots":[],"id":430,"label":"0 :: (2 :: [])"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[21,4,"Redex"]],"id":432,"label":"(2 , List.filter f_1 ys_1)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[0 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[14,23,"Redex"],[53,109,"Redex"],[174,5,"Redex"],[182,5,"Redex"]],"id":433,"label":"let seen' =\n  [_ ; _ ; _ ; _ ; _] @ 2 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t_1","[0 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,109,"Redex"],[133,5,"Redex"],[141,5,"Redex"]],"id":434,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t_1 in helper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,25,"Redex"]],"id":435,"label":"0 :: (List.filter f_2 [3 ; 2])"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[23,5,"Redex"],[151,5,"Redex"],[159,5,"Redex"]],"id":436,"label":"let rest' =\n  2 :: (if 0 = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[34,188,"Redex"],[244,5,"Redex"],[252,5,"Redex"]],"id":437,"label":"List.rev (let rest' =\n            match [2 ; 0 ; 3 ; 2] with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[23,9,"Redex"],[159,5,"Redex"],[167,5,"Redex"]],"id":438,"label":"let rest' =\n  2 :: (if (0 mod 2) = 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":439,"label":"2 :: (0 :: [2])"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_2","[0 ; 3 ; 2]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[26,4,"Redex"],[83,1,"Redex"],[194,5,"Redex"],[202,5,"Redex"]],"id":441,"label":"let rest' =\n  2 :: (match xs_2 with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[19,170,"Redex"],[201,5,"Redex"],[209,5,"Redex"]],"id":442,"label":"let rest' =\n  2 :: (match [0 ; 3 ; 2] with\n        | [] -> []\n        | y :: ys -> if f_2 y\n                     then y :: (List.filter f_2 ys)\n                     else List.filter f_2 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[22,4,"Redex"]],"id":443,"label":"2 :: (List.filter f_1 ys_1)"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[5,47,"Redex"]],"id":444,"label":"2 :: (List.filter f_1\n                  [0 ; 3 ; 2])"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":445,"label":"f_2"},{"span":null,"env":[],"annots":[],"id":447,"label":"2 :: [0 ; 2]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[19,49,"Redex"],[80,5,"Redex"],[88,5,"Redex"]],"id":448,"label":"let rest' =\n  2 :: (List.filter f_1\n                    [0 ; 3 ; 2]) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[39,149,"Redex"],[210,5,"Redex"],[218,5,"Redex"]],"id":449,"label":"List.rev (let rest' =\n            2 :: (if true\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":450,"label":"(y , List.filter f ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":451,"label":"List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_2","[0 ; 3 ; 2]"],["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[46,4,"Redex"],[123,1,"Redex"],[318,5,"Redex"],[326,5,"Redex"]],"id":452,"label":"List.rev (let rest' =\n            2 :: (match xs_2 with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[39,264,"Redex"],[325,5,"Redex"],[333,5,"Redex"]],"id":453,"label":"List.rev (let rest' =\n            2 :: (match [0 ; 3 ; 2] with\n                  | [] -> []\n                  | y :: ys -> if f_2 y\n                               then y :: (List.filter f_2\n                                                      ys)\n                               else List.filter f_2 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[12,3,"Redex"]],"id":454,"label":"(0 , if f_4 y_4\n     then y_4 :: (List.filter f_4\n                              ys_4)\n     else List.filter f_4 ys_4)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[5,3,"Redex"],[54,4,"Redex"]],"id":455,"label":"(2 , y_2 :: (List.filter f_2\n                         ys_2))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,1,"Redex"]],"id":456,"label":"h"},{"span":null,"env":[],"annots":[],"id":457,"label":"[_ ; _ ; _ ; _ ; _]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[17,184,"Redex"],[213,5,"Redex"],[221,5,"Redex"]],"id":458,"label":"let rest' = 2 :: (if true\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2\n                                   ys_2) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":459,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":460,"label":"(0 mod 2) = 0"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[12,3,"Redex"]],"id":461,"label":"(0 , if f_3 y_3\n     then y_3 :: (List.filter f_3\n                              ys_3)\n     else List.filter f_3 ys_3)"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":463,"label":"List.filter f_4 ys"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[],"id":464,"label":"f_4"},{"span":null,"env":[["xs","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,2,"Redex"]],"id":465,"label":"xs"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[10,129,"Redex"]],"id":466,"label":"(2 , 0 :: (if false\n           then y_3 :: (List.filter f_3\n                                    ys_3)\n           else List.filter f_3 ys_3))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":467,"label":"([_ ; _ ; _ ; _ ; _] , [2 ; 0 ; 2])"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":469,"label":"[]"},{"span":null,"env":[],"annots":[],"id":471,"label":"[]"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[52,4,"Redex"]],"id":473,"label":"2 :: (0 :: (List.filter f_2\n                        ys_2))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[50,4,"Redex"]],"id":474,"label":"(2 , 0 :: (List.filter f_2\n                       ys_2))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[36,5,"Redex"],[44,5,"Redex"]],"id":475,"label":"let rest' = 2 :: [0 ; 2] in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[49,9,"Redex"],[244,5,"Redex"],[252,5,"Redex"]],"id":476,"label":"List.rev (let rest' =\n            2 :: (0 :: (if (2 mod 2) = 0\n                        then y_4 :: (List.filter f_4\n                                                 ys_4)\n                        else List.filter f_4 ys_4)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[29,5,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":477,"label":"let rest' =\n  2 :: (0 :: (if 1 = 0\n              then y_3 :: (List.filter f_3\n                                       ys_3)\n              else List.filter f_3 ys_3)) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":478,"label":"false"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[15,5,"Redex"]],"id":479,"label":"2 :: (0 :: (if 1 = 0\n            then y_3 :: (List.filter f_3\n                                     ys_3)\n            else List.filter f_3 ys_3))"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[14,5,"Redex"]],"id":480,"label":"(2 , 0 :: (if 1 = 0\n           then y_3 :: (List.filter f_3\n                                    ys_3)\n           else List.filter f_3 ys_3))"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[17,255,"Redex"]],"id":481,"label":"2 :: (0 :: (2 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f_5 y\n                               then y :: (List.filter f_5\n                                                      ys)\n                               else List.filter f_5 ys)))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","3"],["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[30,1,"Redex"],[184,5,"Redex"],[192,5,"Redex"]],"id":482,"label":"let rest' =\n  2 :: (0 :: (if (i mod 2) = 0\n              then y_3 :: (List.filter f_3\n                                       ys_3)\n              else List.filter f_3 ys_3)) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":483,"label":"(y_2 , List.filter f_2 ys_2)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[9,9,"Redex"]],"id":485,"label":"2 :: (if (0 mod 2) = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[8,9,"Redex"]],"id":486,"label":"(2 , if (0 mod 2) = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[23,5,"Redex"],[151,5,"Redex"],[159,5,"Redex"]],"id":487,"label":"let rest' =\n  2 :: (if f_2 0\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"]],"annots":[[9,5,"Redex"]],"id":488,"label":"2 :: (if f_2 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[],"annots":[],"id":489,"label":"(2 , [0 ; 2])"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[15,5,"Redex"]],"id":490,"label":"2 :: (0 :: (if f_3 3\n            then y_3 :: (List.filter f_3\n                                     ys_3)\n            else List.filter f_3 ys_3))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[14,5,"Redex"]],"id":491,"label":"(2 , 0 :: (if f_3 3\n           then y_3 :: (List.filter f_3\n                                    ys_3)\n           else List.filter f_3 ys_3))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[47,5,"Redex"],[55,5,"Redex"]],"id":492,"label":"let rest' =\n  2 :: (0 :: (2 :: [])) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[33,3,"Redex"],[178,5,"Redex"],[186,5,"Redex"]],"id":493,"label":"let rest' =\n  2 :: (0 :: (if f_4 y_4\n              then y_4 :: (List.filter f_4\n                                       ys_4)\n              else List.filter f_4 ys_4)) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[29,5,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":494,"label":"let rest' =\n  2 :: (0 :: (if f_4 2\n              then y_4 :: (List.filter f_4\n                                       ys_4)\n              else List.filter f_4 ys_4)) in\nhelper (seen' , rest')"},{"span":null,"env":[["xs_2","[0 ; 3 ; 2]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"],[65,1,"Redex"]],"id":495,"label":"2 :: (match xs_2 with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":null,"env":[["xs_2","[0 ; 3 ; 2]"],["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"],[62,1,"Redex"]],"id":496,"label":"(2 , match xs_2 with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"]],"annots":[[7,3,"Redex"]],"id":497,"label":"if f_2 y_2\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":498,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":499,"label":"2"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[52,4,"Redex"]],"id":502,"label":"2 :: (0 :: (List.filter f_3\n                        ys_3))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"]],"annots":[[8,5,"Redex"]],"id":503,"label":"(2 , if f_2 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":504,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":505,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":506,"label":"i"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[18,3,"Redex"]],"id":507,"label":"(2 , 0 :: (if f_3 y_3\n           then y_3 :: (List.filter f_3\n                                    ys_3)\n           else List.filter f_3 ys_3))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":508,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":509,"label":"seen"},{"span":null,"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"]],"annots":[[24,4,"Redex"],[101,1,"Redex"]],"id":511,"label":"2 :: (0 :: (2 :: (match xs_5 with\n                  | [] -> []\n                  | y :: ys -> if f_5 y\n                               then y :: (List.filter f_5\n                                                      ys)\n                               else List.filter f_5 ys)))"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[16,197,"Redex"]],"id":514,"label":"(2 , 0 :: (2 :: (match [] with\n                 | [] -> []\n                 | y :: ys -> if f_5 y\n                              then y :: (List.filter f_5 ys)\n                              else List.filter f_5 ys)))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[11,178,"Redex"]],"id":515,"label":"2 :: (0 :: (match [2] with\n            | [] -> []\n            | y :: ys -> if f_4 y\n                         then y :: (List.filter f_4 ys)\n                         else List.filter f_4 ys))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[10,174,"Redex"]],"id":516,"label":"(2 , 0 :: (match [2] with\n           | [] -> []\n           | y :: ys -> if f_4 y\n                        then y :: (List.filter f_4 ys)\n                        else List.filter f_4 ys))"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":517,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":518,"label":"0 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":519,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":521,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":522,"label":"2"},{"span":null,"env":[],"annots":[],"id":523,"label":"0"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":524,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":525,"label":"1 mod 2"},{"span":null,"env":[],"annots":[],"id":526,"label":"1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[46,3,"Redex"],[114,4,"Redex"],[143,5,"Redex"],[151,5,"Redex"]],"id":528,"label":"List.rev (let rest' =\n            2 :: (0 :: (y_4 :: (List.filter f_4\n                                            ys_4))) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":529,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":530,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":531,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[51,62,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":533,"label":"List.rev (let rest' =\n            2 :: (0 :: (2 :: (List.filter f_4\n                                          []))) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_4","2"]],"annots":[[0,3,"Redex"]],"id":535,"label":"y_4"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":536,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":537,"label":"2"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[6,3,"Redex"],[56,4,"Redex"]],"id":538,"label":"2 :: (y_2 :: (List.filter f_2\n                          ys_2))"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":539,"label":"f_2 y"},{"span":null,"env":[["xs_5","[]"]],"annots":[[0,4,"Redex"]],"id":540,"label":"xs_5"},{"span":null,"env":[],"annots":[],"id":541,"label":"[]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":542,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":543,"label":"3"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[15,9,"Redex"]],"id":544,"label":"2 :: (0 :: (if (3 mod 2) = 0\n            then y_3 :: (List.filter f_3\n                                     ys_3)\n            else List.filter f_3 ys_3))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[20,3,"Redex"],[72,4,"Redex"],[90,5,"Redex"],[98,5,"Redex"]],"id":545,"label":"let rest' =\n  2 :: (y_2 :: (List.filter f_2\n                            ys_2)) in\nhelper (seen' , rest')"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,140,"Redex"]],"id":546,"label":"match [2 ; 0 ; 3 ; 2] with\n| [] -> []\n| y :: ys -> if f_1 y\n             then y :: (List.filter f_1 ys)\n             else List.filter f_1 ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[14,148,"Redex"],[174,5,"Redex"],[182,5,"Redex"]],"id":547,"label":"let rest' =\n  match [2 ; 0 ; 3 ; 2] with\n  | [] -> []\n  | y :: ys -> if f_1 y\n               then y :: (List.filter f_1 ys)\n               else List.filter f_1 ys in\nhelper (seen' , rest')"},{"span":null,"env":[["i","3"],["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[16,1,"Redex"]],"id":548,"label":"2 :: (0 :: (if (i mod 2) = 0\n            then y_3 :: (List.filter f_3\n                                     ys_3)\n            else List.filter f_3 ys_3))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[17,5,"Redex"],[126,5,"Redex"],[134,5,"Redex"]],"id":550,"label":"let rest' =\n  if 0 = 0\n  then y_1 :: (List.filter f_1\n                           ys_1)\n  else List.filter f_1 ys_1 in\nhelper (seen' , rest')"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,132,"Redex"]],"id":551,"label":"match [3 ; 2] with\n| [] -> []\n| y :: ys -> if f_3 y\n             then y :: (List.filter f_3 ys)\n             else List.filter f_3 ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[0 ; 2]"]],"annots":[[12,5,"Redex"],[18,3,"Redex"]],"id":552,"label":"List.filter is_in t_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":553,"label":"List.filter"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":555,"label":"(y , List.filter f_3 ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":556,"label":"y"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[10,48,"Redex"]],"id":557,"label":"(2 , 0 :: (List.filter f_2\n                       [3 ; 2]))"},{"span":null,"env":[["xs_3","[3 ; 2]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[17,4,"Redex"],[80,1,"Redex"]],"id":558,"label":"(2 , 0 :: (match xs_3 with\n           | [] -> []\n           | y :: ys -> if f_3 y\n                        then y :: (List.filter f_3 ys)\n                        else List.filter f_3 ys))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":559,"label":"y :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":560,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":561,"label":"2"},{"span":null,"env":[],"annots":[],"id":562,"label":"(2 , 0 :: [2])"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"]],"annots":[[13,3,"Redex"]],"id":564,"label":"2 :: (if f_2 y_2\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"]],"annots":[[12,3,"Redex"]],"id":565,"label":"(2 , if f_2 y_2\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":567,"label":"match xs_5 with\n| [] -> []\n| y :: ys -> if f_5 y\n             then y :: (List.filter f_5 ys)\n             else List.filter f_5 ys"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":568,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":569,"label":"h"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[49,5,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":570,"label":"List.rev (let rest' =\n            2 :: (0 :: (if f_4 2\n                        then y_4 :: (List.filter f_4\n                                                 ys_4)\n                        else List.filter f_4 ys_4)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":571,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":572,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[77,5,"Redex"],[85,5,"Redex"]],"id":573,"label":"List.rev (let rest' =\n            2 :: (0 :: (2 :: [])) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_4","[2]"],["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[52,4,"Redex"],[141,1,"Redex"],[409,5,"Redex"],[417,5,"Redex"]],"id":575,"label":"List.rev (let rest' =\n            2 :: (0 :: (match xs_4 with\n                        | [] -> []\n                        | y :: ys -> if f_4 y\n                                     then y :: (List.filter f_4\n                                                            ys)\n                                     else List.filter f_4\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[3,9,"Redex"]],"id":576,"label":"if (3 mod 2) = 0\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[16,4,"Redex"]],"id":577,"label":"List.filter f_3 ys_3"},{"span":null,"env":[],"annots":[],"id":578,"label":"2"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":579,"label":"match [] with\n| [] -> []\n| y :: ys -> if f_5 y\n             then y :: (List.filter f_5 ys)\n             else List.filter f_5 ys"},{"span":null,"env":[],"annots":[],"id":580,"label":"[]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_1","[2 ; 0 ; 3 ; 2]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[20,4,"Redex"],[65,1,"Redex"],[163,5,"Redex"],[171,5,"Redex"]],"id":582,"label":"let rest' =\n  match xs_1 with\n  | [] -> []\n  | y :: ys -> if f_1 y\n               then y :: (List.filter f_1 ys)\n               else List.filter f_1 ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,49,"Redex"]],"id":583,"label":"let rest' = [2 ; 0 ; 2] in\nhelper (seen' , rest')"},{"span":null,"env":[["i","2"],["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"]],"annots":[[4,1,"Redex"]],"id":584,"label":"if (i mod 2) = 0\nthen y_1 :: (List.filter f_1\n                         ys_1)\nelse List.filter f_1 ys_1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","2"]],"annots":[[1,1,"Redex"]],"id":585,"label":"(i mod 2) = 0"},{"span":null,"env":[["i","2"],["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[15,1,"Redex"]],"id":587,"label":"(2 , 0 :: (if (i mod 2) = 0\n           then y_4 :: (List.filter f_4\n                                    ys_4)\n           else List.filter f_4 ys_4))"},{"span":null,"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[9,1,"Redex"]],"id":588,"label":"(2 , if (i mod 2) = 0\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[],"annots":[],"id":589,"label":"[2 ; 0 ; 2]"},{"span":null,"env":[],"annots":[],"id":590,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[49,5,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":591,"label":"List.rev (let rest' =\n            2 :: (0 :: (if f_3 3\n                        then y_3 :: (List.filter f_3\n                                                 ys_3)\n                        else List.filter f_3 ys_3)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":592,"label":"f_3 y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[45,340,"Redex"],[408,5,"Redex"],[416,5,"Redex"]],"id":593,"label":"List.rev (let rest' =\n            2 :: (0 :: (match [2] with\n                        | [] -> []\n                        | y :: ys -> if f_4 y\n                                     then y :: (List.filter f_4\n                                                            ys)\n                                     else List.filter f_4\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[53,3,"Redex"],[238,5,"Redex"],[246,5,"Redex"]],"id":594,"label":"List.rev (let rest' =\n            2 :: (0 :: (if f_4 y_4\n                        then y_4 :: (List.filter f_4\n                                                 ys_4)\n                        else List.filter f_4 ys_4)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[39,59,"Redex"],[120,5,"Redex"],[128,5,"Redex"]],"id":595,"label":"List.rev (let rest' =\n            2 :: (List.filter f_1\n                              [0 ; 3 ; 2]) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":596,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[49,5,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":597,"label":"List.rev (let rest' =\n            2 :: (0 :: (if 1 = 0\n                        then y_3 :: (List.filter f_3\n                                                 ys_3)\n                        else List.filter f_3 ys_3)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs_3","[3 ; 2]"],["f_3","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"],[62,1,"Redex"]],"id":598,"label":"(0 , match xs_3 with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,152,"Redex"]],"id":599,"label":"(0 , match [3 ; 2] with\n     | [] -> []\n     | y :: ys -> if f_3 y\n                  then y :: (List.filter f_3 ys)\n                  else List.filter f_3 ys)"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,29,"Redex"]],"id":600,"label":"List.filter f [2 ; 0 ; 3 ; 2]"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[17,50,"Redex"]],"id":601,"label":"2 :: (0 :: (2 :: (List.filter f_4\n                              [])))"},{"span":null,"env":[],"annots":[],"id":603,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":604,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,24,"Redex"],[84,137,"Redex"],[233,5,"Redex"],[241,5,"Redex"]],"id":605,"label":"List.rev (let seen' =\n            [] @ [_ ; _ ; _ ; _ ; _] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,234,"Redex"]],"id":606,"label":"List.rev (let seen' =\n            [_ ; _ ; _ ; _ ; _] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":607,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":608,"label":"0"},{"span":null,"env":[],"annots":[],"id":609,"label":"[2 ; 0 ; 2]"},{"span":null,"env":[],"annots":[],"id":610,"label":"0"},{"span":null,"env":[],"annots":[],"id":611,"label":"[1 ; 2 ; 0 ; 3 ; 2]"},{"span":null,"env":[],"annots":[],"id":613,"label":"0"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":614,"label":"List.filter f_5 ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[47,3,"Redex"],[213,5,"Redex"],[221,5,"Redex"]],"id":615,"label":"List.rev (let rest' =\n            2 :: (if f_2 y_2\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":616,"label":"List.filter"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[5,21,"Redex"]],"id":617,"label":"0 :: (List.filter f_3 [2])"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"]],"annots":[[3,5,"Redex"]],"id":620,"label":"if f_2 0\nthen y_2 :: (List.filter f_2\n                         ys_2)\nelse List.filter f_2 ys_2"},{"span":null,"env":[],"annots":[],"id":621,"label":"[2 ; 0 ; 3 ; 2]"},{"span":null,"env":[],"annots":[],"id":622,"label":"3"},{"span":null,"env":[],"annots":[],"id":623,"label":"[_ ; _ ; _ ; _ ; _]"},{"span":null,"env":[],"annots":[],"id":624,"label":"_"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_5","[]"],["f_5","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[58,4,"Redex"],[159,1,"Redex"],[452,5,"Redex"],[460,5,"Redex"]],"id":626,"label":"List.rev (let rest' =\n            2 :: (0 :: (2 :: (match xs_5 with\n                              | [] -> []\n                              | y :: ys -> if f_5 y\n                                           then y :: (List.filter f_5\n                                                                  ys)\n                                           else List.filter f_5\n                                                            ys))) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[3,5,"Redex"]],"id":627,"label":"if f_3 3\nthen y_3 :: (List.filter f_3\n                         ys_3)\nelse List.filter f_3 ys_3"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[0,18,"Redex"]],"id":628,"label":"List.filter f_4 []"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":629,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[9,9,"Redex"]],"id":630,"label":"0 :: (if (3 mod 2) = 0\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[14,24,"Redex"],[54,107,"Redex"],[173,5,"Redex"],[181,5,"Redex"]],"id":631,"label":"let seen' =\n  [] @ [_ ; _ ; _ ; _ ; _] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","[_ ; _ ; _ ; _ ; _]"],["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"],[66,137,"Redex"],[215,5,"Redex"],[223,5,"Redex"]],"id":632,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","[_ ; _ ; _ ; _ ; _]"],["t","[1 ; 2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"],[34,107,"Redex"],[153,5,"Redex"],[161,5,"Redex"]],"id":633,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":634,"label":"0"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[],"id":635,"label":"f_5"},{"span":null,"env":[],"annots":[],"id":636,"label":"[]"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[5,113,"Redex"]],"id":637,"label":"0 :: (if true\n      then y_4 :: (List.filter f_4\n                               ys_4)\n      else List.filter f_4 ys_4)"},{"span":null,"env":[],"annots":[],"id":638,"label":"0"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[18,3,"Redex"]],"id":639,"label":"(2 , 0 :: (if f_4 y_4\n           then y_4 :: (List.filter f_4\n                                    ys_4)\n           else List.filter f_4 ys_4))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"],["ys_4","[]"]],"annots":[[13,3,"Redex"]],"id":640,"label":"0 :: (if f_4 y_4\n      then y_4 :: (List.filter f_4\n                               ys_4)\n      else List.filter f_4 ys_4)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"]],"annots":[[13,3,"Redex"]],"id":641,"label":"0 :: (if f_3 y_3\n      then y_3 :: (List.filter f_3\n                               ys_3)\n      else List.filter f_3 ys_3)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[9,5,"Redex"]],"id":643,"label":"2 :: (if 0 = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":644,"label":"(3 mod 2) = 0"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[0,136,"Redex"]],"id":646,"label":"match [0 ; 3 ; 2] with\n| [] -> []\n| y :: ys -> if f_2 y\n             then y :: (List.filter f_2 ys)\n             else List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,156,"Redex"]],"id":647,"label":"(2 , match [0 ; 3 ; 2] with\n     | [] -> []\n     | y :: ys -> if f_2 y\n                  then y :: (List.filter f_2 ys)\n                  else List.filter f_2 ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","1"],["ys","[2 ; 0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[37,3,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":648,"label":"List.rev (let rest' =\n            if f 1\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":649,"label":"2 mod 2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[43,9,"Redex"],[219,5,"Redex"],[227,5,"Redex"]],"id":650,"label":"List.rev (let rest' =\n            2 :: (if (0 mod 2) = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[43,5,"Redex"],[211,5,"Redex"],[219,5,"Redex"]],"id":651,"label":"List.rev (let rest' =\n            2 :: (if 0 = 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":652,"label":"2"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[14,5,"Redex"]],"id":653,"label":"(2 , 0 :: (if 0 = 0\n           then y_4 :: (List.filter f_4\n                                    ys_4)\n           else List.filter f_4 ys_4))"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[9,5,"Redex"]],"id":654,"label":"0 :: (if 0 = 0\n      then y_4 :: (List.filter f_4\n                               ys_4)\n      else List.filter f_4 ys_4)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[5,108,"Redex"]],"id":657,"label":"(2 , if true\n     then y_2 :: (List.filter f_2\n                              ys_2)\n     else List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[16,4,"Redex"]],"id":658,"label":"List.filter f_2 ys_2"},{"span":null,"env":[["ys_2","[3 ; 2]"]],"annots":[[0,4,"Redex"]],"id":659,"label":"ys_2"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":660,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":661,"label":"is_in"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t_1","[0 ; 2]"]],"annots":[[0,61,"Redex"]],"id":662,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[56,4,"Redex"],[83,5,"Redex"],[91,5,"Redex"]],"id":664,"label":"List.rev (let rest' =\n            2 :: (List.filter f_1 ys_1) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":665,"label":"y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","3"],["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[50,1,"Redex"],[244,5,"Redex"],[252,5,"Redex"]],"id":666,"label":"List.rev (let rest' =\n            2 :: (0 :: (if (i mod 2) = 0\n                        then y_3 :: (List.filter f_3\n                                                 ys_3)\n                        else List.filter f_3 ys_3)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_1","[2 ; 0 ; 3 ; 2]"],["f_1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[40,4,"Redex"],[105,1,"Redex"],[233,5,"Redex"],[241,5,"Redex"]],"id":667,"label":"List.rev (let rest' =\n            match xs_1 with\n            | [] -> []\n            | y :: ys -> if f_1 y\n                         then y :: (List.filter f_1 ys)\n                         else List.filter f_1 ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[25,186,"Redex"],[224,5,"Redex"],[232,5,"Redex"]],"id":668,"label":"let rest' =\n  2 :: (0 :: (match [2] with\n              | [] -> []\n              | y :: ys -> if f_4 y\n                           then y :: (List.filter f_4 ys)\n                           else List.filter f_4 ys)) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2 ; 0 ; 2]"]],"annots":[[40,5,"Redex"]],"id":669,"label":"List.rev (helper ([_ ; _ ; _ ; _ ; _] , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":670,"label":"(2 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":671,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[37,5,"Redex"],[186,5,"Redex"],[194,5,"Redex"]],"id":672,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y_1 :: (List.filter f_1\n                                     ys_1)\n            else List.filter f_1 ys_1 in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[43,5,"Redex"],[211,5,"Redex"],[219,5,"Redex"]],"id":673,"label":"List.rev (let rest' =\n            2 :: (if f_2 0\n                  then y_2 :: (List.filter f_2\n                                           ys_2)\n                  else List.filter f_2 ys_2) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":674,"label":"y :: (List.filter f_3 ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[29,5,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":675,"label":"let rest' =\n  2 :: (0 :: (if 0 = 0\n              then y_4 :: (List.filter f_4\n                                       ys_4)\n              else List.filter f_4 ys_4)) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[15,5,"Redex"]],"id":676,"label":"2 :: (0 :: (if 0 = 0\n            then y_4 :: (List.filter f_4\n                                     ys_4)\n            else List.filter f_4 ys_4))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":678,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":679,"label":"helper"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[64,4,"Redex"]],"id":680,"label":"2 :: (0 :: (2 :: (List.filter f_4\n                              ys_4)))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":682,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[71,5,"Redex"],[79,5,"Redex"]],"id":683,"label":"List.rev (let rest' =\n            2 :: (0 :: [2]) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs_4","[2]"],["f_4","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[32,4,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":684,"label":"let rest' =\n  2 :: (0 :: (match xs_4 with\n              | [] -> []\n              | y :: ys -> if f_4 y\n                           then y :: (List.filter f_4 ys)\n                           else List.filter f_4 ys)) in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,4,"Redex"]],"id":685,"label":"rest"},{"span":null,"env":[],"annots":[],"id":686,"label":"[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_2","fun i -> (i mod 2) = 0"],["y_2","0"],["ys_2","[3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[27,3,"Redex"],[153,5,"Redex"],[161,5,"Redex"]],"id":687,"label":"let rest' =\n  2 :: (if f_2 y_2\n        then y_2 :: (List.filter f_2\n                                 ys_2)\n        else List.filter f_2 ys_2) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_3","3"],["f_3","fun i -> (i mod 2) = 0"],["ys_3","[2]"]],"annots":[[1,3,"Redex"],[23,4,"Redex"]],"id":688,"label":"(y_3 , List.filter f_3 ys_3)"},{"span":null,"env":[["y_3","3"]],"annots":[[0,3,"Redex"]],"id":689,"label":"y_3"},{"span":null,"env":[],"annots":[],"id":691,"label":"2"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,1,"Redex"],[38,107,"Redex"],[157,5,"Redex"],[165,5,"Redex"]],"id":692,"label":"let seen' = seen_1 @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_5","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[51,375,"Redex"],[450,5,"Redex"],[458,5,"Redex"]],"id":693,"label":"List.rev (let rest' =\n            2 :: (0 :: (2 :: (match [] with\n                              | [] -> []\n                              | y :: ys -> if f_5 y\n                                           then y :: (List.filter f_5\n                                                                  ys)\n                                           else List.filter f_5\n                                                            ys))) in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,1,"Redex"]],"id":694,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":695,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":696,"label":"t"},{"span":null,"env":[["f_5","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":697,"label":"y :: (List.filter f_5 ys)"},{"span":null,"env":[["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[5,113,"Redex"]],"id":698,"label":"2 :: (if true\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[11,49,"Redex"]],"id":699,"label":"2 :: (0 :: (List.filter f_2\n                        [3 ; 2]))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":700,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs_3","[3 ; 2]"],["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[52,4,"Redex"],[141,1,"Redex"],[409,5,"Redex"],[417,5,"Redex"]],"id":701,"label":"List.rev (let rest' =\n            2 :: (0 :: (match xs_3 with\n                        | [] -> []\n                        | y :: ys -> if f_3 y\n                                     then y :: (List.filter f_3\n                                                            ys)\n                                     else List.filter f_3\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":702,"label":"[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":703,"label":"i"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,162,"Redex"]],"id":704,"label":"2 :: (match [0 ; 3 ; 2] with\n      | [] -> []\n      | y :: ys -> if f_2 y\n                   then y :: (List.filter f_2 ys)\n                   else List.filter f_2 ys)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","3"]],"annots":[[0,1,"Redex"]],"id":705,"label":"i"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":706,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":707,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[["List.rev","List.rev"],["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":708,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":null,"env":[["xs_4","[2]"],["f_4","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"],[65,1,"Redex"]],"id":710,"label":"0 :: (match xs_4 with\n      | [] -> []\n      | y :: ys -> if f_4 y\n                   then y :: (List.filter f_4 ys)\n                   else List.filter f_4 ys)"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[0,59,"Redex"]],"id":711,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":712,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[6,3,"Redex"],[56,4,"Redex"]],"id":713,"label":"0 :: (y_4 :: (List.filter f_4\n                          ys_4))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[49,5,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":715,"label":"List.rev (let rest' =\n            2 :: (0 :: (if 0 = 0\n                        then y_4 :: (List.filter f_4\n                                                 ys_4)\n                        else List.filter f_4 ys_4)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[68,5,"Redex"],[76,5,"Redex"]],"id":717,"label":"List.rev (let rest' =\n            2 :: [0 ; 2] in\n          helper (seen' , rest'))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["y_4","2"]],"annots":[[4,3,"Redex"]],"id":718,"label":"f_4 y_4"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[],"id":719,"label":"f_4"},{"span":null,"env":[["ys_4","[]"]],"annots":[[0,4,"Redex"]],"id":720,"label":"ys_4"},{"span":null,"env":[],"annots":[],"id":721,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[2 ; 0 ; 2]"]],"annots":[[0,5,"Redex"]],"id":722,"label":"rest'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"],["ys_3","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[29,5,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":723,"label":"let rest' =\n  2 :: (0 :: (if f_3 3\n              then y_3 :: (List.filter f_3\n                                       ys_3)\n              else List.filter f_3 ys_3)) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[36,4,"Redex"],[53,5,"Redex"],[61,5,"Redex"]],"id":724,"label":"let rest' =\n  2 :: (List.filter f_1 ys_1) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":725,"label":"3"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":726,"label":"f_4 y"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":727,"label":"y"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":728,"label":"(y , List.filter f_4 ys)"},{"span":null,"env":[["i","1"],["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[4,1,"Redex"]],"id":729,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","1"]],"annots":[[1,1,"Redex"]],"id":730,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":731,"label":"(1 mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":732,"label":"2"},{"span":null,"env":[],"annots":[],"id":733,"label":"_"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":734,"label":"f y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":735,"label":"f"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f_3","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[45,344,"Redex"],[412,5,"Redex"],[420,5,"Redex"]],"id":736,"label":"List.rev (let rest' =\n            2 :: (0 :: (match [3 ; 2] with\n                        | [] -> []\n                        | y :: ys -> if f_3 y\n                                     then y :: (List.filter f_3\n                                                            ys)\n                                     else List.filter f_3\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[3,9,"Redex"]],"id":737,"label":"if (1 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":738,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":739,"label":"1 = 0"},{"span":null,"env":[],"annots":[],"id":740,"label":"1"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[3,5,"Redex"]],"id":741,"label":"if 1 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[5,23,"Redex"]],"id":742,"label":"(0 , List.filter f_2 [3 ; 2])"},{"span":null,"env":[],"annots":[],"id":743,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":744,"label":"2 :: (0 :: (2 :: []))"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[["@","@"],["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":746,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":747,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":748,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":749,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":750,"label":"[3 ; 2]"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 0 ; 2]"]],"annots":[[0,6,"Redex"]],"id":751,"label":"rest_1"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest_1","[2 ; 0 ; 2]"],["seen_1","[_ ; _ ; _ ; _ ; _]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,6,"Redex"],[26,6,"Redex"],[73,6,"Redex"],[82,1,"Redex"],[112,146,"Redex"],[270,5,"Redex"],[278,5,"Redex"]],"id":752,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               seen_1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":753,"label":"0 = 0"},{"span":null,"env":[],"annots":[],"id":754,"label":"_"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":755,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":756,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":757,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":758,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[6,1,"Redex"]],"id":759,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,1,"Redex"]],"id":760,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":761,"label":"helper ([] , l)"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"],["y_3","3"]],"annots":[[4,3,"Redex"]],"id":762,"label":"f_3 y_3"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":763,"label":"f_3"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":764,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[29,9,"Redex"],[184,5,"Redex"],[192,5,"Redex"]],"id":765,"label":"let rest' =\n  2 :: (0 :: (if (2 mod 2) = 0\n              then y_4 :: (List.filter f_4\n                                       ys_4)\n              else List.filter f_4 ys_4)) in\nhelper (seen' , rest')"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[15,9,"Redex"]],"id":766,"label":"2 :: (0 :: (if (2 mod 2) = 0\n            then y_4 :: (List.filter f_4\n                                     ys_4)\n            else List.filter f_4 ys_4))"},{"span":null,"env":[["i","2"],["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[16,1,"Redex"]],"id":767,"label":"2 :: (0 :: (if (i mod 2) = 0\n            then y_4 :: (List.filter f_4\n                                     ys_4)\n            else List.filter f_4 ys_4))"},{"span":null,"env":[["i","0"],["y_2","0"],["f_2","fun i -> (i mod 2) = 0"],["ys_2","[3 ; 2]"]],"annots":[[10,1,"Redex"]],"id":768,"label":"2 :: (if (i mod 2) = 0\n      then y_2 :: (List.filter f_2\n                               ys_2)\n      else List.filter f_2 ys_2)"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":769,"label":"List.filter"},{"span":null,"env":[["xs_1","[2 ; 0 ; 3 ; 2]"]],"annots":[[0,4,"Redex"]],"id":770,"label":"xs_1"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":771,"label":"helper"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[62,4,"Redex"]],"id":772,"label":"(2 , 0 :: (2 :: (List.filter f_4\n                             ys_4)))"},{"span":null,"env":[],"annots":[],"id":773,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":774,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[23,1,"Redex"]],"id":775,"label":"List.rev (helper ([] , l))"},{"span":null,"env":[],"annots":[],"id":776,"label":"2"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":778,"label":"List.filter f_2 ys"},{"span":null,"env":[["f_2","fun i -> (i mod 2) = 0"]],"annots":[],"id":779,"label":"f_2"},{"span":null,"env":[],"annots":[],"id":780,"label":"2"},{"span":null,"env":[],"annots":[],"id":781,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":782,"label":"List.rev (helper ([] , l))"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":783,"label":"y :: (List.filter f_4 ys)"},{"span":null,"env":[],"annots":[],"id":784,"label":"List.filter"},{"span":null,"env":[["y_4","2"],["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[12,3,"Redex"],[68,4,"Redex"]],"id":785,"label":"2 :: (0 :: (y_4 :: (List.filter f_4\n                                ys_4)))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":786,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,6,"Redex"]],"id":787,"label":"seen_1"},{"span":null,"env":[],"annots":[],"id":788,"label":"[]"},{"span":null,"env":[],"annots":[],"id":789,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":790,"label":"helper"},{"span":null,"env":[["f_4","fun i -> (i mod 2) = 0"],["ys_4","[]"]],"annots":[[52,4,"Redex"]],"id":791,"label":"0 :: (2 :: (List.filter f_4\n                        ys_4))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":792,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":793,"label":"i"},{"span":null,"env":[],"annots":[],"id":794,"label":"2"},{"span":null,"env":[["ys_3","[2]"]],"annots":[[0,4,"Redex"]],"id":795,"label":"ys_3"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":796,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y_1","2"],["f_1","fun i -> (i mod 2) = 0"],["ys_1","[0 ; 3 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[22,198,"Redex"],[232,5,"Redex"],[240,5,"Redex"]],"id":797,"label":"List.rev (let rest' = if true\n                      then y_1 :: (List.filter f_1\n                                               ys_1)\n                      else List.filter f_1\n                                       ys_1 in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":798,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":799,"label":"is_in"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[[0,5,"Redex"]],"id":800,"label":"f_3 3"},{"span":null,"env":[],"annots":[],"id":801,"label":"_"},{"span":null,"env":[],"annots":[],"id":802,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _ ; _]"],["rest'","[2 ; 0 ; 2]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":803,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[2 ; 0 ; 2]"]],"annots":[[23,5,"Redex"]],"id":804,"label":"([_ ; _ ; _ ; _ ; _] , rest')"},{"span":null,"env":[],"annots":[],"id":805,"label":"_"},{"span":null,"env":[],"annots":[],"id":806,"label":"[]"},{"span":null,"env":[],"annots":[],"id":807,"label":"3"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":808,"label":"y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t_1","[0 ; 2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,23,"Redex"],[83,139,"Redex"],[234,5,"Redex"],[242,5,"Redex"]],"id":809,"label":"List.rev (let seen' =\n            [_ ; _ ; _ ; _ ; _] @ 2 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t_1 in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":810,"label":"rest'"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":811,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":812,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":813,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":814,"label":"[]"},{"span":null,"env":[],"annots":[],"id":815,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":816,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":817,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":818,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":819,"label":"0"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":820,"label":"rest"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":821,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":822,"label":"helper"},{"span":null,"env":[],"annots":[],"id":823,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":824,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":825,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":826,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":827,"label":"2"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,59,"Redex"]],"id":828,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":829,"label":"h"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":830,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":831,"label":"2"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":832,"label":"seen"},{"span":null,"env":[],"annots":[],"id":833,"label":"true"},{"span":null,"env":[],"annots":[],"id":834,"label":"List.filter"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":835,"label":"ys"},{"span":null,"env":[],"annots":[],"id":836,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":838,"label":"(seen' , rest')"},{"span":null,"env":[],"annots":[],"id":839,"label":"_"},{"span":null,"env":[],"annots":[],"id":840,"label":"0"},{"span":null,"env":[],"annots":[],"id":841,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":842,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":843,"label":"_"},{"span":null,"env":[],"annots":[],"id":844,"label":"2"},{"span":null,"env":[],"annots":[],"id":845,"label":"_"},{"span":null,"env":[],"annots":[],"id":846,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":847,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":848,"label":"2"},{"span":null,"env":[],"annots":[],"id":849,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":850,"label":"3"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":851,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":852,"label":"rest'"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":853,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":854,"label":"i"},{"span":null,"env":[["ys_1","[0 ; 3 ; 2]"]],"annots":[[0,4,"Redex"]],"id":855,"label":"ys_1"},{"span":null,"env":[["xs_4","[2]"]],"annots":[[0,4,"Redex"]],"id":856,"label":"xs_4"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":857,"label":"helper"},{"span":null,"env":[],"annots":[],"id":858,"label":"false"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":859,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t_1","[0 ; 2]"]],"annots":[[0,3,"Redex"]],"id":860,"label":"t_1"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":861,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":862,"label":"helper"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":863,"label":"y :: (List.filter f_1 ys)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":864,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":865,"label":"List.rev"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":866,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen_1","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,6,"Redex"]],"id":867,"label":"seen_1"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":868,"label":"List.filter"},{"span":null,"env":[["f_3","fun i -> (i mod 2) = 0"]],"annots":[],"id":869,"label":"f_3"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[["List.filter","fun f ->\n  fun xs ->\n    match xs with\n    | [] -> []\n    | y :: ys -> if f y\n                 then y :: (List.filter f ys)\n                 else List.filter f ys"]],"annots":[],"id":870,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":871,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":872,"label":"1"},{"span":null,"env":[],"annots":[],"id":873,"label":"3"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":874,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":875,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":876,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":877,"label":"_"},{"span":null,"env":[["f_1","fun i -> (i mod 2) = 0"]],"annots":[],"id":878,"label":"f_1"},{"span":null,"env":[["y","1"],["f","fun i -> (i mod 2) = 0"],["ys","[2 ; 0 ; 3 ; 2]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":879,"label":"(y , List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":880,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":881,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":882,"label":"3"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":883,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":884,"label":"_"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":885,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":886,"label":"List.filter"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":887,"label":"ys"},{"span":null,"env":[],"annots":[],"id":888,"label":"1"},{"span":null,"env":[],"annots":[],"id":889,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":890,"label":"0"},{"span":null,"env":[],"annots":[],"id":891,"label":"2"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":892,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,1,"Redex"]],"id":893,"label":"t"},{"span":null,"env":[],"annots":[],"id":894,"label":"[[_ ; _ ; _ ; _ ; _] ; 1 ; 2 ; 0 ; 3 ; 2]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":895,"label":"(@)"},{"span":null,"env":[],"annots":[],"id":896,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":897,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":898,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[["List.rev","List.rev"]],"annots":[],"id":899,"label":"List.rev"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":900,"label":"ys"},{"span":null,"env":[],"annots":[],"id":901,"label":"3"},{"span":null,"env":[],"annots":[],"id":902,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":903,"label":"0"},{"span":null,"env":[],"annots":[],"id":904,"label":"0"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":905,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":906,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":907,"label":"0"},{"span":null,"env":[],"annots":[],"id":908,"label":"2"},{"span":null,"env":[],"annots":[],"id":909,"label":"0"},{"span":null,"env":[],"annots":[],"id":910,"label":"0"},{"span":null,"env":[],"annots":[],"id":911,"label":"_"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_ ; _ ; _ ; _ ; _]"]],"annots":[[0,5,"Redex"]],"id":912,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":913,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":914,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":915,"label":"helper"},{"span":null,"env":[],"annots":[],"id":916,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":917,"label":"t"},{"span":null,"env":[],"annots":[],"id":918,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":919,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":920,"label":"(@)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":921,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":922,"label":"(@)"},{"span":null,"env":[],"annots":[],"id":923,"label":"3"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":924,"label":"seen"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 2 ; 0 ; 3 ; 2]"]],"annots":[[0,1,"Redex"]],"id":925,"label":"t"}]}