{"root":40,"result":"stuck","reason":"Type error : could not match int with 't24 list","bad":73,"stuck":43,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 2"},{"arrows":"to","to":49,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"StepsTo CallStep"},{"arrows":"to","to":36,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":3,"label":"SubTerm 2"},{"arrows":"to","to":97,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":102,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":4,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":8,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":118,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":13,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":13,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":15,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":15,"label":"SubTerm 2"},{"arrows":"to","to":16,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":101,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":21,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":35,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":26,"label":"SubTerm 2"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":32,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":82,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":40,"label":"StepsTo CallStep"},{"arrows":"to","to":83,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":42,"label":"StepsTo BoringStep"},{"arrows":"to","to":44,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":44,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":46,"label":"SubTerm 2"},{"arrows":"to","to":112,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":48,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":111,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":64,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":119,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":73,"label":"SubTerm 2"},{"arrows":"to","to":76,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":77,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":91,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":86,"label":"SubTerm 2"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":97,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":97,"label":"SubTerm 2"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 2"},{"arrows":"to","to":105,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":102,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":0,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":1,"label":"h"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,21,"Redex"]],"id":2,"label":"helper ([] , [1 ; 2])"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[1 ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":3,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,23,"Redex"]],"id":4,"label":"List.rev (helper ([] , [1 ; 2]))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":5,"label":"List.rev"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[1 ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[156,215,"Redex"],[383,5,"Redex"],[391,5,"Redex"]],"id":6,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[1 ; 2]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":7,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":8,"label":"List.rev"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":9,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":10,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[1 ; 2]"]],"annots":[[6,1,"Redex"]],"id":11,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[1 ; 2]"]],"annots":[[0,1,"Redex"]],"id":12,"label":"l"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","1"]],"annots":[[5,1,"Redex"]],"id":13,"label":"[] @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":14,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","1"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":15,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":16,"label":"seen"},{"span":null,"env":[],"annots":[],"id":17,"label":"[]"},{"span":null,"env":[],"annots":[],"id":18,"label":"[1 ; 2]"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":19,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[1 ; 2]"]],"annots":[[6,1,"Redex"]],"id":21,"label":"([] , l)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":22,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":23,"label":"i"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","1"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":24,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":25,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":26,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":27,"label":"seen"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":28,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":29,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":30,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":31,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":32,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":33,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":34,"label":"t"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[0,59,"Redex"]],"id":35,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":36,"label":"([] , [1 ; 2])"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":37,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[1 ; 2]"]],"annots":[[13,1,"Redex"]],"id":38,"label":"helper ([] , l)"},{"span":{"startLine":12,"endLine":12,"endCol":31,"startCol":9},"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":40,"label":"removeDuplicates [1 ; 2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","1"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"],[66,137,"Redex"],[215,5,"Redex"],[223,5,"Redex"]],"id":42,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"],[66,137,"Redex"],[215,5,"Redex"],[223,5,"Redex"]],"id":43,"label":"List.rev (let seen' =\n            [] @ 1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","1"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"],[34,107,"Redex"],[153,5,"Redex"],[161,5,"Redex"]],"id":44,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[34,107,"Redex"],[153,5,"Redex"],[161,5,"Redex"]],"id":45,"label":"let seen' = [] @ 1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":46,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":47,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[1 ; 2]"]],"annots":[[0,1,"Redex"]],"id":48,"label":"l"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":49,"label":"@"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":50,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":51,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":52,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":53,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":54,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":55,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":56,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":57,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":58,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":59,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[1 ; 2]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":60,"label":"helper ([] , l)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":61,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":62,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":63,"label":"[1 ; 2]"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":64,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":66,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":67,"label":"i mod 2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","1"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"],[68,137,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":68,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":69,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":70,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":71,"label":"2"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":72,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,6,"Redex"]],"id":73,"label":"[] @ 1"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":74,"label":"1"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":76,"label":"@"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[1 ; 2]"]],"annots":[[23,1,"Redex"]],"id":77,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":78,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":79,"label":"seen'"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":80,"label":"rest"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[1 ; 2]"]],"annots":[[0,381,"Redex"]],"id":81,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":82,"label":"helper"},{"span":{"startLine":12,"endLine":12,"endCol":25,"startCol":9},"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":83,"label":"removeDuplicates"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":84,"label":"2"},{"span":null,"env":[],"annots":[],"id":85,"label":"[1 ; 2]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":86,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":87,"label":"is_in"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":88,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":89,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":90,"label":"(i mod 2) = 0"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":91,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,393,"Redex"]],"id":92,"label":"List.rev (match [1 ; 2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":93,"label":"List.filter"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":94,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":95,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":96,"label":"2"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,282,"Redex"]],"id":97,"label":"match [1 ; 2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":98,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":99,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":100,"label":"h"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":101,"label":"1"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2]"]],"annots":[[0,4,"Redex"]],"id":102,"label":"rest"},{"span":null,"env":[],"annots":[],"id":103,"label":"[]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":105,"label":"@"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":106,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":107,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":108,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":109,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":110,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":111,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":112,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":113,"label":"t"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":114,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":115,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":116,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":117,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":118,"label":"rest'"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":119,"label":"1"}]}