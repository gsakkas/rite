{"root":372,"result":"stuck","reason":"Type error : could not match int with 't103 list","bad":477,"stuck":290,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":382,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":1,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":328,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":237,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":487,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":276,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":271,"from":7,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":281,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":9,"label":"StepsTo CallStep"},{"arrows":"to","to":512,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 2"},{"arrows":"to","to":16,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":392,"from":10,"label":"StepsTo PrimStep"},{"arrows":"to","to":63,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":174,"from":11,"label":"StepsTo BoringStep"},{"arrows":"to","to":277,"from":11,"label":"SubTerm 2"},{"arrows":"to","to":598,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":305,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":13,"label":"StepsTo BoringStep"},{"arrows":"to","to":329,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":272,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":272,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":370,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":453,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":453,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":147,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":16,"label":"StepsTo PrimStep"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":398,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":482,"from":20,"label":"StepsTo CallStep"},{"arrows":"to","to":186,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":397,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":68,"from":22,"label":"SubTerm 2"},{"arrows":"to","to":325,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":411,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":23,"label":"SubTerm 2"},{"arrows":"to","to":281,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":325,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":366,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":64,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":270,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":338,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":478,"from":25,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":423,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":463,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":28,"label":"SubTerm 2"},{"arrows":"to","to":534,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":361,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":365,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":183,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":33,"label":"StepsTo PrimStep"},{"arrows":"to","to":57,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":77,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":34,"label":"SubTerm 2"},{"arrows":"to","to":76,"from":34,"label":"StepsTo ReturnStep"},{"arrows":"to","to":77,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":264,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":555,"from":38,"label":"StepsTo ReturnStep"},{"arrows":"to","to":40,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":44,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":40,"label":"StepsTo CallStep"},{"arrows":"to","to":154,"from":41,"label":"StepsTo CallStep"},{"arrows":"to","to":317,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":421,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":450,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":42,"label":"StepsTo PrimStep"},{"arrows":"to","to":43,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":297,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":328,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":44,"label":"StepsTo BoringStep"},{"arrows":"to","to":183,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":252,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":45,"label":"StepsTo CallStep"},{"arrows":"to","to":183,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":442,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":401,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":326,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":384,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":384,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":500,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":290,"from":56,"label":"StepsTo BoringStep"},{"arrows":"to","to":446,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":57,"label":"StepsTo BoringStep"},{"arrows":"to","to":421,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":450,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":525,"from":57,"label":"SubTerm 2"},{"arrows":"to","to":21,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":318,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":377,"from":59,"label":"StepsTo BoringStep"},{"arrows":"to","to":61,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":602,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":66,"from":65,"label":"StepsTo CallStep"},{"arrows":"to","to":224,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":528,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":67,"label":"StepsTo PrimStep"},{"arrows":"to","to":84,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":390,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":407,"from":68,"label":"SubTerm 2"},{"arrows":"to","to":21,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":101,"from":69,"label":"StepsTo PrimStep"},{"arrows":"to","to":20,"from":70,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":547,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":553,"from":71,"label":"SubTerm 2"},{"arrows":"to","to":42,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":381,"from":73,"label":"StepsTo PrimStep"},{"arrows":"to","to":382,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":551,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":552,"from":74,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":76,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":76,"label":"SubTerm 2"},{"arrows":"to","to":77,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":567,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":363,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":414,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":567,"from":80,"label":"StepsTo ReturnStep"},{"arrows":"to","to":21,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":82,"label":"StepsTo BoringStep"},{"arrows":"to","to":225,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":83,"label":"StepsTo PrimStep"},{"arrows":"to","to":85,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":86,"label":"SubTerm 2"},{"arrows":"to","to":541,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":90,"label":"SubTerm 2"},{"arrows":"to","to":280,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":559,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":183,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":202,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":93,"label":"StepsTo PrimStep"},{"arrows":"to","to":342,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":94,"label":"StepsTo CallStep"},{"arrows":"to","to":247,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":462,"from":94,"label":"SubTerm 2"},{"arrows":"to","to":97,"from":96,"label":"StepsTo BoringStep"},{"arrows":"to","to":526,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":604,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":455,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":459,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 2"},{"arrows":"to","to":306,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":496,"from":101,"label":"StepsTo ReturnStep"},{"arrows":"to","to":1,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":103,"label":"SubTerm 2"},{"arrows":"to","to":359,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":297,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":243,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":244,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":503,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":107,"label":"StepsTo BoringStep"},{"arrows":"to","to":195,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":324,"from":108,"label":"StepsTo BoringStep"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":425,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":405,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":93,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":424,"from":112,"label":"StepsTo PrimStep"},{"arrows":"to","to":114,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":113,"label":"StepsTo BoringStep"},{"arrows":"to","to":259,"from":113,"label":"SubTerm 2"},{"arrows":"to","to":410,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":369,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":115,"label":"SubTerm 1"},{"arrows":"to","to":443,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":406,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":118,"label":"SubTerm 2"},{"arrows":"to","to":445,"from":118,"label":"StepsTo BoringStep"},{"arrows":"to","to":574,"from":118,"label":"SubTerm 1"},{"arrows":"to","to":579,"from":118,"label":"SubTerm 0"},{"arrows":"to","to":395,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":408,"from":119,"label":"SubTerm 2"},{"arrows":"to","to":451,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":120,"label":"StepsTo BoringStep"},{"arrows":"to","to":418,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":121,"label":"StepsTo PrimStep"},{"arrows":"to","to":81,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":302,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":583,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":124,"label":"StepsTo BoringStep"},{"arrows":"to","to":214,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":255,"from":125,"label":"StepsTo CallStep"},{"arrows":"to","to":330,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":128,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":387,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":142,"from":129,"label":"StepsTo ReturnStep"},{"arrows":"to","to":400,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":160,"from":131,"label":"StepsTo ReturnStep"},{"arrows":"to","to":21,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":132,"label":"StepsTo ReturnStep"},{"arrows":"to","to":528,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":133,"label":"StepsTo BoringStep"},{"arrows":"to","to":504,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":220,"from":134,"label":"StepsTo BoringStep"},{"arrows":"to","to":221,"from":135,"label":"StepsTo BoringStep"},{"arrows":"to","to":230,"from":135,"label":"SubTerm 2"},{"arrows":"to","to":254,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":578,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":136,"label":"StepsTo CallStep"},{"arrows":"to","to":137,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":223,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":429,"from":136,"label":"SubTerm 2"},{"arrows":"to","to":139,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":599,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":141,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":298,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":499,"from":141,"label":"SubTerm 1"},{"arrows":"to","to":219,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":318,"from":142,"label":"StepsTo ReturnStep"},{"arrows":"to","to":211,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":426,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":146,"label":"StepsTo BoringStep"},{"arrows":"to","to":348,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":386,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":147,"label":"StepsTo PrimStep"},{"arrows":"to","to":344,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":386,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":441,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":304,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":606,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":150,"label":"SubTerm 2"},{"arrows":"to","to":404,"from":150,"label":"StepsTo BoringStep"},{"arrows":"to","to":153,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":380,"from":152,"label":"SubTerm 2"},{"arrows":"to","to":535,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":154,"label":"StepsTo BoringStep"},{"arrows":"to","to":259,"from":154,"label":"SubTerm 2"},{"arrows":"to","to":410,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":474,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":156,"label":"StepsTo BoringStep"},{"arrows":"to","to":82,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":158,"from":157,"label":"StepsTo BoringStep"},{"arrows":"to","to":183,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":158,"label":"StepsTo BoringStep"},{"arrows":"to","to":183,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":445,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":160,"label":"SubTerm 0"},{"arrows":"to","to":161,"from":160,"label":"SubTerm 1"},{"arrows":"to","to":548,"from":160,"label":"StepsTo ReturnStep"},{"arrows":"to","to":21,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":161,"label":"SubTerm 1"},{"arrows":"to","to":486,"from":161,"label":"StepsTo ReturnStep"},{"arrows":"to","to":163,"from":162,"label":"StepsTo PrimStep"},{"arrows":"to","to":258,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":532,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":164,"label":"SubTerm 1"},{"arrows":"to","to":198,"from":164,"label":"StepsTo ReturnStep"},{"arrows":"to","to":21,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":210,"from":165,"label":"StepsTo PrimStep"},{"arrows":"to","to":424,"from":165,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":166,"label":"StepsTo PrimStep"},{"arrows":"to","to":74,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":168,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":238,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":497,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":169,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":170,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":170,"label":"SubTerm 1"},{"arrows":"to","to":320,"from":170,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":431,"from":171,"label":"StepsTo ReturnStep"},{"arrows":"to","to":173,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":393,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":174,"label":"StepsTo CallStep"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 2"},{"arrows":"to","to":598,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":412,"from":175,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":178,"label":"StepsTo BoringStep"},{"arrows":"to","to":215,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":355,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":469,"from":179,"label":"StepsTo BoringStep"},{"arrows":"to","to":39,"from":182,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":185,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":593,"from":184,"label":"SubTerm 1"},{"arrows":"to","to":187,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":592,"from":186,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":188,"label":"StepsTo BoringStep"},{"arrows":"to","to":255,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":527,"from":189,"label":"SubTerm 1"},{"arrows":"to","to":538,"from":189,"label":"StepsTo PrimStep"},{"arrows":"to","to":183,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":343,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":426,"from":190,"label":"StepsTo ReturnStep"},{"arrows":"to","to":50,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":322,"from":192,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":193,"label":"StepsTo ReturnStep"},{"arrows":"to","to":194,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":404,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":124,"from":195,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":196,"label":"StepsTo CallStep"},{"arrows":"to","to":19,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":398,"from":197,"label":"StepsTo CallStep"},{"arrows":"to","to":19,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":198,"label":"StepsTo BoringStep"},{"arrows":"to","to":282,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":199,"label":"SubTerm 1"},{"arrows":"to","to":481,"from":199,"label":"StepsTo CallStep"},{"arrows":"to","to":21,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":539,"from":200,"label":"StepsTo CallStep"},{"arrows":"to","to":202,"from":201,"label":"StepsTo CallStep"},{"arrows":"to","to":253,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":201,"label":"SubTerm 2"},{"arrows":"to","to":449,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":202,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":202,"label":"SubTerm 2"},{"arrows":"to","to":342,"from":202,"label":"StepsTo BoringStep"},{"arrows":"to","to":351,"from":202,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":204,"label":"StepsTo PrimStep"},{"arrows":"to","to":205,"from":204,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":165,"from":205,"label":"StepsTo PrimStep"},{"arrows":"to","to":19,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":206,"label":"SubTerm 1"},{"arrows":"to","to":507,"from":206,"label":"StepsTo BoringStep"},{"arrows":"to","to":63,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":207,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":207,"label":"StepsTo CallStep"},{"arrows":"to","to":17,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":515,"from":208,"label":"StepsTo ReturnStep"},{"arrows":"to","to":21,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":282,"from":210,"label":"StepsTo ReturnStep"},{"arrows":"to","to":133,"from":211,"label":"StepsTo BoringStep"},{"arrows":"to","to":212,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":212,"label":"SubTerm 1"},{"arrows":"to","to":504,"from":212,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":214,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":330,"from":214,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":355,"from":215,"label":"StepsTo BoringStep"},{"arrows":"to","to":493,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":216,"label":"StepsTo BoringStep"},{"arrows":"to","to":226,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":376,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":555,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":221,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":417,"from":220,"label":"StepsTo BoringStep"},{"arrows":"to","to":0,"from":221,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":382,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":222,"label":"StepsTo BoringStep"},{"arrows":"to","to":137,"from":222,"label":"SubTerm 1"},{"arrows":"to","to":223,"from":222,"label":"SubTerm 0"},{"arrows":"to","to":228,"from":222,"label":"SubTerm 2"},{"arrows":"to","to":183,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":224,"label":"StepsTo CallStep"},{"arrows":"to","to":356,"from":224,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":225,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":225,"label":"SubTerm 2"},{"arrows":"to","to":77,"from":225,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":225,"label":"SubTerm 0"},{"arrows":"to","to":227,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":227,"label":"SubTerm 2"},{"arrows":"to","to":511,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":608,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":429,"from":228,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":229,"label":"StepsTo BoringStep"},{"arrows":"to","to":230,"from":229,"label":"SubTerm 2"},{"arrows":"to","to":254,"from":229,"label":"SubTerm 1"},{"arrows":"to","to":448,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":230,"label":"SubTerm 1"},{"arrows":"to","to":473,"from":230,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":193,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":194,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":600,"from":232,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":233,"label":"StepsTo BoringStep"},{"arrows":"to","to":381,"from":233,"label":"SubTerm 1"},{"arrows":"to","to":235,"from":234,"label":"SubTerm 1"},{"arrows":"to","to":549,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":554,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":333,"from":239,"label":"SubTerm 1"},{"arrows":"to","to":360,"from":239,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":241,"label":"SubTerm 1"},{"arrows":"to","to":529,"from":241,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":211,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":243,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":444,"from":244,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":245,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":245,"label":"StepsTo BoringStep"},{"arrows":"to","to":399,"from":245,"label":"SubTerm 1"},{"arrows":"to","to":247,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":449,"from":246,"label":"StepsTo BoringStep"},{"arrows":"to","to":466,"from":246,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":248,"label":"StepsTo ReturnStep"},{"arrows":"to","to":193,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":251,"from":250,"label":"SubTerm 1"},{"arrows":"to","to":340,"from":250,"label":"SubTerm 2"},{"arrows":"to","to":488,"from":250,"label":"SubTerm 0"},{"arrows":"to","to":518,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":252,"label":"StepsTo BoringStep"},{"arrows":"to","to":246,"from":252,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":252,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":252,"label":"SubTerm 2"},{"arrows":"to","to":315,"from":253,"label":"StepsTo BoringStep"},{"arrows":"to","to":543,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":255,"label":"SubTerm 0"},{"arrows":"to","to":339,"from":255,"label":"SubTerm 1"},{"arrows":"to","to":527,"from":255,"label":"StepsTo BoringStep"},{"arrows":"to","to":94,"from":256,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":256,"label":"SubTerm 1"},{"arrows":"to","to":461,"from":256,"label":"SubTerm 2"},{"arrows":"to","to":162,"from":257,"label":"StepsTo BoringStep"},{"arrows":"to","to":258,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":546,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":259,"label":"SubTerm 1"},{"arrows":"to","to":285,"from":259,"label":"SubTerm 2"},{"arrows":"to","to":291,"from":259,"label":"SubTerm 0"},{"arrows":"to","to":530,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":222,"from":261,"label":"StepsTo BoringStep"},{"arrows":"to","to":262,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":465,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":501,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":565,"from":262,"label":"SubTerm 2"},{"arrows":"to","to":183,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":296,"from":263,"label":"SubTerm 1"},{"arrows":"to","to":523,"from":263,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":265,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":265,"label":"StepsTo BoringStep"},{"arrows":"to","to":320,"from":265,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":266,"label":"StepsTo CallStep"},{"arrows":"to","to":385,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":267,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":267,"label":"SubTerm 1"},{"arrows":"to","to":146,"from":267,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":271,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":271,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":310,"from":272,"label":"StepsTo BoringStep"},{"arrows":"to","to":557,"from":273,"label":"StepsTo BoringStep"},{"arrows":"to","to":275,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":550,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":277,"label":"StepsTo BoringStep"},{"arrows":"to","to":8,"from":278,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":279,"from":278,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":279,"label":"StepsTo CallStep"},{"arrows":"to","to":57,"from":281,"label":"SubTerm 2"},{"arrows":"to","to":77,"from":281,"label":"SubTerm 1"},{"arrows":"to","to":467,"from":281,"label":"SubTerm 0"},{"arrows":"to","to":512,"from":281,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":282,"label":"SubTerm 1"},{"arrows":"to","to":243,"from":282,"label":"StepsTo BoringStep"},{"arrows":"to","to":284,"from":283,"label":"SubTerm 1"},{"arrows":"to","to":536,"from":283,"label":"SubTerm 0"},{"arrows":"to","to":292,"from":285,"label":"SubTerm 1"},{"arrows":"to","to":577,"from":285,"label":"SubTerm 2"},{"arrows":"to","to":584,"from":285,"label":"SubTerm 0"},{"arrows":"to","to":287,"from":286,"label":"SubTerm 1"},{"arrows":"to","to":519,"from":286,"label":"SubTerm 2"},{"arrows":"to","to":558,"from":286,"label":"SubTerm 0"},{"arrows":"to","to":289,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":542,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":290,"label":"SubTerm 0"},{"arrows":"to","to":506,"from":290,"label":"SubTerm 1"},{"arrows":"to","to":292,"from":291,"label":"SubTerm 0"},{"arrows":"to","to":479,"from":291,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":295,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":295,"label":"StepsTo BoringStep"},{"arrows":"to","to":222,"from":295,"label":"SubTerm 1"},{"arrows":"to","to":231,"from":296,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":296,"label":"StepsTo BoringStep"},{"arrows":"to","to":299,"from":298,"label":"SubTerm 1"},{"arrows":"to","to":556,"from":298,"label":"SubTerm 0"},{"arrows":"to","to":308,"from":299,"label":"SubTerm 0"},{"arrows":"to","to":323,"from":299,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":300,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":300,"label":"SubTerm 0"},{"arrows":"to","to":301,"from":300,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":301,"label":"SubTerm 0"},{"arrows":"to","to":389,"from":301,"label":"SubTerm 1"},{"arrows":"to","to":413,"from":301,"label":"StepsTo CallStep"},{"arrows":"to","to":303,"from":302,"label":"SubTerm 1"},{"arrows":"to","to":414,"from":302,"label":"StepsTo PrimStep"},{"arrows":"to","to":585,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":305,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":305,"label":"SubTerm 2"},{"arrows":"to","to":319,"from":305,"label":"SubTerm 1"},{"arrows":"to","to":329,"from":305,"label":"StepsTo BoringStep"},{"arrows":"to","to":557,"from":310,"label":"SubTerm 1"},{"arrows":"to","to":316,"from":315,"label":"SubTerm 0"},{"arrows":"to","to":356,"from":315,"label":"StepsTo BoringStep"},{"arrows":"to","to":194,"from":316,"label":"SubTerm 0"},{"arrows":"to","to":256,"from":316,"label":"SubTerm 1"},{"arrows":"to","to":357,"from":316,"label":"StepsTo BoringStep"},{"arrows":"to","to":492,"from":317,"label":"SubTerm 1"},{"arrows":"to","to":560,"from":317,"label":"SubTerm 0"},{"arrows":"to","to":345,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":581,"from":318,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":320,"label":"SubTerm 0"},{"arrows":"to","to":385,"from":320,"label":"StepsTo BoringStep"},{"arrows":"to","to":459,"from":320,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":322,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":324,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":324,"label":"SubTerm 1"},{"arrows":"to","to":188,"from":324,"label":"StepsTo CallStep"},{"arrows":"to","to":327,"from":326,"label":"SubTerm 1"},{"arrows":"to","to":513,"from":326,"label":"SubTerm 0"},{"arrows":"to","to":537,"from":327,"label":"SubTerm 0"},{"arrows":"to","to":580,"from":327,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":329,"label":"SubTerm 1"},{"arrows":"to","to":446,"from":329,"label":"StepsTo BoringStep"},{"arrows":"to","to":483,"from":329,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":330,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":330,"label":"SubTerm 1"},{"arrows":"to","to":207,"from":330,"label":"SubTerm 0"},{"arrows":"to","to":339,"from":330,"label":"StepsTo CallStep"},{"arrows":"to","to":332,"from":331,"label":"SubTerm 1"},{"arrows":"to","to":402,"from":331,"label":"SubTerm 0"},{"arrows":"to","to":286,"from":332,"label":"SubTerm 0"},{"arrows":"to","to":349,"from":332,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":338,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":338,"label":"SubTerm 2"},{"arrows":"to","to":270,"from":338,"label":"SubTerm 0"},{"arrows":"to","to":477,"from":338,"label":"StepsTo BoringStep"},{"arrows":"to","to":10,"from":339,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":339,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":339,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":339,"label":"SubTerm 0"},{"arrows":"to","to":341,"from":340,"label":"SubTerm 2"},{"arrows":"to","to":468,"from":340,"label":"SubTerm 1"},{"arrows":"to","to":595,"from":340,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":342,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":342,"label":"SubTerm 2"},{"arrows":"to","to":343,"from":342,"label":"StepsTo PrimStep"},{"arrows":"to","to":464,"from":342,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":343,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":343,"label":"SubTerm 2"},{"arrows":"to","to":436,"from":343,"label":"StepsTo ReturnStep"},{"arrows":"to","to":516,"from":343,"label":"SubTerm 0"},{"arrows":"to","to":344,"from":348,"label":"StepsTo BoringStep"},{"arrows":"to","to":350,"from":349,"label":"SubTerm 0"},{"arrows":"to","to":419,"from":350,"label":"SubTerm 0"},{"arrows":"to","to":562,"from":350,"label":"SubTerm 1"},{"arrows":"to","to":257,"from":351,"label":"SubTerm 0"},{"arrows":"to","to":464,"from":351,"label":"StepsTo BoringStep"},{"arrows":"to","to":517,"from":351,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":352,"label":"StepsTo CallStep"},{"arrows":"to","to":383,"from":352,"label":"SubTerm 1"},{"arrows":"to","to":421,"from":352,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":354,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":354,"label":"StepsTo BoringStep"},{"arrows":"to","to":229,"from":354,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":355,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":355,"label":"SubTerm 1"},{"arrows":"to","to":437,"from":355,"label":"StepsTo BoringStep"},{"arrows":"to","to":296,"from":356,"label":"StepsTo CallStep"},{"arrows":"to","to":357,"from":356,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":357,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":357,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":357,"label":"StepsTo CallStep"},{"arrows":"to","to":328,"from":359,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":361,"label":"SubTerm 0"},{"arrows":"to","to":196,"from":361,"label":"StepsTo BoringStep"},{"arrows":"to","to":295,"from":361,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":362,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":362,"label":"StepsTo BoringStep"},{"arrows":"to","to":460,"from":362,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":363,"label":"SubTerm 1"},{"arrows":"to","to":364,"from":363,"label":"SubTerm 0"},{"arrows":"to","to":383,"from":364,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":365,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":365,"label":"SubTerm 1"},{"arrows":"to","to":295,"from":365,"label":"StepsTo BoringStep"},{"arrows":"to","to":367,"from":366,"label":"SubTerm 2"},{"arrows":"to","to":514,"from":366,"label":"SubTerm 0"},{"arrows":"to","to":531,"from":366,"label":"SubTerm 1"},{"arrows":"to","to":229,"from":370,"label":"StepsTo CallStep"},{"arrows":"to","to":310,"from":370,"label":"SubTerm 1"},{"arrows":"to","to":453,"from":370,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":371,"label":"SubTerm 0"},{"arrows":"to","to":362,"from":371,"label":"StepsTo ReturnStep"},{"arrows":"to","to":502,"from":371,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":372,"label":"StepsTo CallStep"},{"arrows":"to","to":373,"from":372,"label":"SubTerm 1"},{"arrows":"to","to":522,"from":372,"label":"SubTerm 0"},{"arrows":"to","to":184,"from":374,"label":"SubTerm 1"},{"arrows":"to","to":375,"from":374,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":376,"label":"SubTerm 1"},{"arrows":"to","to":601,"from":376,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":377,"label":"StepsTo BoringStep"},{"arrows":"to","to":276,"from":377,"label":"SubTerm 0"},{"arrows":"to","to":432,"from":377,"label":"SubTerm 1"},{"arrows":"to","to":138,"from":378,"label":"SubTerm 1"},{"arrows":"to","to":379,"from":378,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":380,"label":"SubTerm 1"},{"arrows":"to","to":331,"from":380,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":381,"label":"SubTerm 1"},{"arrows":"to","to":365,"from":381,"label":"StepsTo BoringStep"},{"arrows":"to","to":382,"from":381,"label":"SubTerm 0"},{"arrows":"to","to":109,"from":382,"label":"SubTerm 1"},{"arrows":"to","to":378,"from":382,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":384,"label":"SubTerm 0"},{"arrows":"to","to":569,"from":384,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":385,"label":"SubTerm 0"},{"arrows":"to","to":215,"from":385,"label":"StepsTo CallStep"},{"arrows":"to","to":475,"from":385,"label":"SubTerm 1"},{"arrows":"to","to":388,"from":387,"label":"SubTerm 1"},{"arrows":"to","to":561,"from":387,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":389,"label":"SubTerm 1"},{"arrows":"to","to":276,"from":389,"label":"SubTerm 0"},{"arrows":"to","to":498,"from":389,"label":"StepsTo CallStep"},{"arrows":"to","to":458,"from":390,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":391,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":391,"label":"SubTerm 0"},{"arrows":"to","to":420,"from":391,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":392,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":392,"label":"SubTerm 1"},{"arrows":"to","to":208,"from":392,"label":"SubTerm 0"},{"arrows":"to","to":439,"from":392,"label":"StepsTo ReturnStep"},{"arrows":"to","to":394,"from":393,"label":"SubTerm 1"},{"arrows":"to","to":566,"from":393,"label":"SubTerm 0"},{"arrows":"to","to":396,"from":395,"label":"SubTerm 1"},{"arrows":"to","to":409,"from":395,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":398,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":398,"label":"SubTerm 1"},{"arrows":"to","to":399,"from":398,"label":"StepsTo BoringStep"},{"arrows":"to","to":8,"from":399,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":399,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":399,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":400,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":400,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":400,"label":"StepsTo ReturnStep"},{"arrows":"to","to":288,"from":401,"label":"SubTerm 0"},{"arrows":"to","to":573,"from":401,"label":"SubTerm 1"},{"arrows":"to","to":403,"from":402,"label":"SubTerm 0"},{"arrows":"to","to":434,"from":402,"label":"SubTerm 1"},{"arrows":"to","to":151,"from":404,"label":"SubTerm 1"},{"arrows":"to","to":250,"from":404,"label":"SubTerm 2"},{"arrows":"to","to":500,"from":404,"label":"StepsTo ReturnStep"},{"arrows":"to","to":600,"from":404,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":405,"label":"SubTerm 0"},{"arrows":"to","to":568,"from":405,"label":"SubTerm 1"},{"arrows":"to","to":274,"from":406,"label":"SubTerm 0"},{"arrows":"to","to":570,"from":406,"label":"SubTerm 1"},{"arrows":"to","to":85,"from":407,"label":"SubTerm 1"},{"arrows":"to","to":540,"from":407,"label":"SubTerm 2"},{"arrows":"to","to":603,"from":407,"label":"SubTerm 0"},{"arrows":"to","to":409,"from":408,"label":"SubTerm 1"},{"arrows":"to","to":564,"from":408,"label":"SubTerm 0"},{"arrows":"to","to":597,"from":408,"label":"SubTerm 2"},{"arrows":"to","to":366,"from":411,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":413,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":413,"label":"SubTerm 0"},{"arrows":"to","to":498,"from":413,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":415,"label":"SubTerm 1"},{"arrows":"to","to":416,"from":415,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":417,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":417,"label":"SubTerm 0"},{"arrows":"to","to":471,"from":417,"label":"StepsTo BoringStep"},{"arrows":"to","to":302,"from":418,"label":"StepsTo BoringStep"},{"arrows":"to","to":303,"from":418,"label":"SubTerm 1"},{"arrows":"to","to":582,"from":418,"label":"SubTerm 0"},{"arrows":"to","to":472,"from":419,"label":"SubTerm 1"},{"arrows":"to","to":591,"from":419,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":420,"label":"StepsTo CallStep"},{"arrows":"to","to":174,"from":420,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":420,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":422,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":422,"label":"StepsTo BoringStep"},{"arrows":"to","to":495,"from":422,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":424,"label":"StepsTo ReturnStep"},{"arrows":"to","to":190,"from":424,"label":"SubTerm 0"},{"arrows":"to","to":485,"from":425,"label":"SubTerm 1"},{"arrows":"to","to":494,"from":425,"label":"SubTerm 0"},{"arrows":"to","to":575,"from":425,"label":"SubTerm 2"},{"arrows":"to","to":183,"from":426,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":426,"label":"StepsTo BoringStep"},{"arrows":"to","to":436,"from":426,"label":"SubTerm 1"},{"arrows":"to","to":430,"from":429,"label":"SubTerm 2"},{"arrows":"to","to":596,"from":429,"label":"SubTerm 0"},{"arrows":"to","to":609,"from":429,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":431,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":431,"label":"StepsTo BoringStep"},{"arrows":"to","to":496,"from":431,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":432,"label":"StepsTo BoringStep"},{"arrows":"to","to":96,"from":432,"label":"SubTerm 1"},{"arrows":"to","to":433,"from":432,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":433,"label":"StepsTo BoringStep"},{"arrows":"to","to":435,"from":434,"label":"SubTerm 0"},{"arrows":"to","to":594,"from":434,"label":"SubTerm 1"},{"arrows":"to","to":253,"from":436,"label":"SubTerm 1"},{"arrows":"to","to":253,"from":436,"label":"StepsTo BoringStep"},{"arrows":"to","to":256,"from":436,"label":"SubTerm 2"},{"arrows":"to","to":428,"from":436,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":437,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":437,"label":"SubTerm 1"},{"arrows":"to","to":200,"from":437,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":439,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":439,"label":"SubTerm 1"},{"arrows":"to","to":98,"from":439,"label":"StepsTo BoringStep"},{"arrows":"to","to":515,"from":439,"label":"SubTerm 0"},{"arrows":"to","to":476,"from":442,"label":"SubTerm 1"},{"arrows":"to","to":505,"from":442,"label":"SubTerm 0"},{"arrows":"to","to":572,"from":442,"label":"SubTerm 2"},{"arrows":"to","to":484,"from":443,"label":"SubTerm 1"},{"arrows":"to","to":510,"from":443,"label":"SubTerm 0"},{"arrows":"to","to":576,"from":443,"label":"SubTerm 2"},{"arrows":"to","to":21,"from":444,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":444,"label":"SubTerm 1"},{"arrows":"to","to":495,"from":444,"label":"StepsTo CallStep"},{"arrows":"to","to":119,"from":445,"label":"SubTerm 2"},{"arrows":"to","to":252,"from":445,"label":"StepsTo BoringStep"},{"arrows":"to","to":480,"from":445,"label":"SubTerm 0"},{"arrows":"to","to":574,"from":445,"label":"SubTerm 1"},{"arrows":"to","to":338,"from":446,"label":"SubTerm 1"},{"arrows":"to","to":483,"from":446,"label":"SubTerm 0"},{"arrows":"to","to":506,"from":446,"label":"StepsTo BoringStep"},{"arrows":"to","to":578,"from":448,"label":"StepsTo BoringStep"},{"arrows":"to","to":194,"from":449,"label":"SubTerm 1"},{"arrows":"to","to":247,"from":449,"label":"SubTerm 0"},{"arrows":"to","to":351,"from":449,"label":"StepsTo CallStep"},{"arrows":"to","to":452,"from":451,"label":"SubTerm 0"},{"arrows":"to","to":396,"from":452,"label":"SubTerm 0"},{"arrows":"to","to":408,"from":452,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":455,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":455,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":455,"label":"StepsTo BoringStep"},{"arrows":"to","to":117,"from":458,"label":"SubTerm 0"},{"arrows":"to","to":407,"from":458,"label":"SubTerm 1"},{"arrows":"to","to":391,"from":459,"label":"SubTerm 0"},{"arrows":"to","to":475,"from":459,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":460,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":460,"label":"StepsTo BoringStep"},{"arrows":"to","to":439,"from":460,"label":"SubTerm 1"},{"arrows":"to","to":462,"from":461,"label":"StepsTo BoringStep"},{"arrows":"to","to":162,"from":464,"label":"SubTerm 0"},{"arrows":"to","to":516,"from":464,"label":"StepsTo PrimStep"},{"arrows":"to","to":517,"from":464,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":466,"label":"StepsTo BoringStep"},{"arrows":"to","to":352,"from":467,"label":"StepsTo BoringStep"},{"arrows":"to","to":364,"from":467,"label":"SubTerm 1"},{"arrows":"to","to":421,"from":467,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":469,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":469,"label":"StepsTo BoringStep"},{"arrows":"to","to":437,"from":469,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":471,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":471,"label":"SubTerm 1"},{"arrows":"to","to":233,"from":471,"label":"StepsTo PrimStep"},{"arrows":"to","to":48,"from":473,"label":"SubTerm 1"},{"arrows":"to","to":415,"from":473,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":474,"label":"StepsTo BoringStep"},{"arrows":"to","to":420,"from":475,"label":"SubTerm 0"},{"arrows":"to","to":493,"from":475,"label":"StepsTo CallStep"},{"arrows":"to","to":2,"from":477,"label":"SubTerm 1"},{"arrows":"to","to":270,"from":477,"label":"SubTerm 0"},{"arrows":"to","to":478,"from":477,"label":"SubTerm 2"},{"arrows":"to","to":269,"from":480,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":481,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":481,"label":"StepsTo BoringStep"},{"arrows":"to","to":539,"from":481,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":482,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":482,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":482,"label":"StepsTo BoringStep"},{"arrows":"to","to":115,"from":483,"label":"SubTerm 1"},{"arrows":"to","to":374,"from":483,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":486,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":486,"label":"StepsTo ReturnStep"},{"arrows":"to","to":142,"from":486,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":487,"label":"SubTerm 0"},{"arrows":"to","to":354,"from":487,"label":"StepsTo CallStep"},{"arrows":"to","to":370,"from":487,"label":"SubTerm 1"},{"arrows":"to","to":468,"from":488,"label":"SubTerm 0"},{"arrows":"to","to":489,"from":488,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":491,"label":"SubTerm 0"},{"arrows":"to","to":392,"from":491,"label":"SubTerm 1"},{"arrows":"to","to":502,"from":491,"label":"StepsTo PrimStep"},{"arrows":"to","to":157,"from":493,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":493,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":495,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":495,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":495,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":496,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":496,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":496,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":497,"label":"SubTerm 0"},{"arrows":"to","to":544,"from":497,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":498,"label":"SubTerm 0"},{"arrows":"to","to":140,"from":498,"label":"SubTerm 2"},{"arrows":"to","to":305,"from":498,"label":"StepsTo BoringStep"},{"arrows":"to","to":319,"from":498,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":499,"label":"SubTerm 0"},{"arrows":"to","to":545,"from":499,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":502,"label":"SubTerm 0"},{"arrows":"to","to":439,"from":502,"label":"SubTerm 1"},{"arrows":"to","to":460,"from":502,"label":"StepsTo ReturnStep"},{"arrows":"to","to":19,"from":503,"label":"SubTerm 0"},{"arrows":"to","to":422,"from":503,"label":"StepsTo CallStep"},{"arrows":"to","to":444,"from":503,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":504,"label":"SubTerm 0"},{"arrows":"to","to":224,"from":504,"label":"StepsTo BoringStep"},{"arrows":"to","to":315,"from":504,"label":"SubTerm 1"},{"arrows":"to","to":477,"from":506,"label":"SubTerm 1"},{"arrows":"to","to":483,"from":506,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":507,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":507,"label":"SubTerm 1"},{"arrows":"to","to":509,"from":507,"label":"StepsTo CallStep"},{"arrows":"to","to":19,"from":509,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":509,"label":"StepsTo BoringStep"},{"arrows":"to","to":482,"from":509,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":512,"label":"SubTerm 2"},{"arrows":"to","to":77,"from":512,"label":"SubTerm 1"},{"arrows":"to","to":225,"from":512,"label":"StepsTo CallStep"},{"arrows":"to","to":352,"from":512,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":516,"label":"SubTerm 0"},{"arrows":"to","to":428,"from":516,"label":"StepsTo ReturnStep"},{"arrows":"to","to":517,"from":516,"label":"SubTerm 1"},{"arrows":"to","to":340,"from":518,"label":"SubTerm 1"},{"arrows":"to","to":489,"from":518,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":523,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":523,"label":"SubTerm 1"},{"arrows":"to","to":400,"from":523,"label":"StepsTo ReturnStep"},{"arrows":"to","to":317,"from":525,"label":"StepsTo BoringStep"},{"arrows":"to","to":10,"from":527,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":527,"label":"SubTerm 0"},{"arrows":"to","to":491,"from":527,"label":"StepsTo PrimStep"},{"arrows":"to","to":129,"from":528,"label":"StepsTo ReturnStep"},{"arrows":"to","to":523,"from":528,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":529,"label":"SubTerm 0"},{"arrows":"to","to":300,"from":529,"label":"StepsTo BoringStep"},{"arrows":"to","to":377,"from":529,"label":"SubTerm 1"},{"arrows":"to","to":285,"from":530,"label":"SubTerm 1"},{"arrows":"to","to":479,"from":530,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":538,"label":"SubTerm 0"},{"arrows":"to","to":371,"from":538,"label":"StepsTo PrimStep"},{"arrows":"to","to":491,"from":538,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":539,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":539,"label":"SubTerm 1"},{"arrows":"to","to":205,"from":539,"label":"StepsTo BoringStep"},{"arrows":"to","to":256,"from":543,"label":"SubTerm 1"},{"arrows":"to","to":316,"from":543,"label":"StepsTo BoringStep"},{"arrows":"to","to":466,"from":543,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":544,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":545,"label":"SubTerm 0"},{"arrows":"to","to":532,"from":546,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":548,"label":"SubTerm 0"},{"arrows":"to","to":241,"from":548,"label":"StepsTo ReturnStep"},{"arrows":"to","to":486,"from":548,"label":"SubTerm 1"},{"arrows":"to","to":412,"from":555,"label":"SubTerm 0"},{"arrows":"to","to":480,"from":579,"label":"StepsTo BoringStep"},{"arrows":"to","to":585,"from":582,"label":"StepsTo BoringStep"},{"arrows":"to","to":192,"from":588,"label":"SubTerm 0"},{"arrows":"to","to":192,"from":588,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[17,1,"Redex"],[35,117,"Redex"],[164,5,"Redex"],[172,5,"Redex"]],"id":0,"label":"let seen' = [] @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[_32 ; _33]"]],"annots":[[5,1,"Redex"]],"id":1,"label":"[] @ h"},{"span":null,"env":[],"annots":[],"id":2,"label":"[_32 ; _33]"},{"span":null,"env":[],"annots":[],"id":3,"label":"_32"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[0,8,"Redex"],[23,1,"Redex"]],"id":5,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["rest'","[0 ; 2]"]],"annots":[[22,5,"Redex"]],"id":6,"label":"helper ([_32 ; _33] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[0 ; 2]"]],"annots":[[15,5,"Redex"]],"id":7,"label":"([_32 ; _33] , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[19,1,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":8,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[17,3,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":9,"label":"let rest' =\n  if f 1\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["y","0"],["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[4,9,"Redex"]],"id":10,"label":"if ((0 mod 2) = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[14,2,"Redex"]],"id":11,"label":"List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[_32 ; _33]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[9,407,"Redex"]],"id":12,"label":"List.rev (match [0 ; 2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       (let rest' = (let is_in =\n                                       fun i ->\n                                         ((i mod 2) = 0) in\n                                     List.filter is_in\n                                                 t) in helper (seen' , rest'))))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[34,4,"Redex"],[41,1,"Redex"],[69,147,"Redex"],[228,5,"Redex"],[236,5,"Redex"]],"id":13,"label":"List.rev (let seen' =\n            seen @ h in\n          (let rest' = (let is_in =\n                          fun i -> ((i mod 2) = 0) in\n                        List.filter is_in\n                                    t) in helper (seen' , rest')))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[13,1,"Redex"]],"id":14,"label":"helper ([] , l)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":16,"label":"(0 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":17,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[40,2,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":18,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[[0,8,"Redex"]],"id":19,"label":"List.rev"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[12,45,"Redex"],[69,5,"Redex"],[77,5,"Redex"]],"id":20,"label":"let rest' = List.filter f\n                        [0 ; 2] in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":21,"label":"helper (seen' , rest')"},{"span":null,"env":[["xs","[1 ; 0 ; 2]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":22,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,130,"Redex"]],"id":23,"label":"match [1 ; 0 ; 2] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[_32 ; _33]"],["h","0"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":24,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","0"]],"annots":[[0,1,"Redex"]],"id":25,"label":"h"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[0 ; 2]"]],"annots":[[0,4,"Redex"]],"id":26,"label":"rest"},{"span":null,"env":[],"annots":[],"id":27,"label":"[0 ; 2]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":28,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":29,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[34,89,"Redex"],[145,5,"Redex"],[153,5,"Redex"]],"id":30,"label":"List.rev (let rest' =\n            (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in t) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","0"]],"annots":[[2,1,"Redex"]],"id":31,"label":"f y"},{"span":null,"env":[["y","0"]],"annots":[[0,1,"Redex"]],"id":32,"label":"y"},{"span":null,"env":[["y","1"],["f","fun i -> ((i mod 2) = 0)"],["ys","[0 ; 2]"]],"annots":[[4,9,"Redex"]],"id":33,"label":"if ((1 mod 2) = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","1"],["f","fun i -> ((i mod 2) = 0)"],["ys","[0 ; 2]"]],"annots":[[3,7,"Redex"]],"id":34,"label":"if (1 = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":35,"label":"[_32 ; _33]"},{"span":null,"env":[],"annots":[],"id":36,"label":"_32"},{"span":null,"env":[],"annots":[],"id":38,"label":"2 :: []"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","2"],["ys","[]"]],"annots":[[11,1,"Redex"]],"id":39,"label":"0 :: (if f y\n      then y :: (List.filter f ys)\n      else List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","2"],["ys","[]"]],"annots":[[9,3,"Redex"]],"id":40,"label":"0 :: (if f 2\n      then y :: (List.filter f ys)\n      else List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,21,"Redex"]],"id":41,"label":"List.filter f [0 ; 2]"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,16,"Redex"]],"id":42,"label":"[] @ [_32 ; _33]"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":43,"label":"@"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","2"],["ys","[]"]],"annots":[[10,1,"Redex"]],"id":44,"label":"(0 , if f y\n     then y :: (List.filter f ys)\n     else List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","2"],["ys","[]"]],"annots":[[8,3,"Redex"]],"id":45,"label":"(0 , if f 2\n     then y :: (List.filter f ys)\n     else List.filter f ys)"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,61,"Redex"]],"id":48,"label":"let is_in =\n  fun i -> ((i mod 2) = 0) in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":49,"label":"fun i -> ((i mod 2) = 0)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[],"annots":[[0,8,"Redex"],[10,6,"Redex"],[23,1,"Redex"]],"id":50,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[[0,8,"Redex"]],"id":51,"label":"List.rev"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":53,"label":"fun i -> ((i mod 2) = 0)"},{"span":null,"env":[],"annots":[],"id":55,"label":"(2 , [])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[48,1,"Redex"],[76,147,"Redex"],[235,5,"Redex"],[243,5,"Redex"]],"id":56,"label":"List.rev (let seen' =\n            [_32 ; _33] @ h in\n          (let rest' = (let is_in =\n                          fun i -> ((i mod 2) = 0) in\n                        List.filter is_in\n                                    t) in helper (seen' , rest')))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[0 ; 2]"]],"annots":[[14,2,"Redex"]],"id":57,"label":"List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,45,"Redex"]],"id":59,"label":"let rest' = [0 ; 2] in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":60,"label":"[_32 ; _33]"},{"span":null,"env":[],"annots":[],"id":61,"label":"_32"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":63,"label":"f"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[_32 ; _33]"]],"annots":[[0,4,"Redex"]],"id":64,"label":"seen"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[11,18,"Redex"]],"id":65,"label":"0 :: (2 :: (List.filter f []))"},{"span":null,"env":[["xs","[]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[18,2,"Redex"],[79,1,"Redex"]],"id":66,"label":"0 :: (2 :: (match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[38,9,"Redex"],[149,5,"Redex"],[157,5,"Redex"]],"id":67,"label":"List.rev (let rest' =\n            if ((1 mod 2) = 0)\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,1,"Redex"]],"id":68,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[17,7,"Redex"],[91,5,"Redex"],[99,5,"Redex"]],"id":69,"label":"let rest' =\n  if (1 = 0)\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[28,2,"Redex"],[42,5,"Redex"],[50,5,"Redex"]],"id":70,"label":"let rest' =\n  List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[_32 ; _33]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":71,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":72,"label":"@"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[14,16,"Redex"],[47,117,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":73,"label":"let seen' =\n  [] @ [_32 ; _33] in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":74,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":75,"label":"@"},{"span":null,"env":[["y","1"],["f","fun i -> ((i mod 2) = 0)"],["ys","[0 ; 2]"]],"annots":[[0,59,"Redex"]],"id":76,"label":"if false\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","1"],["f","fun i -> ((i mod 2) = 0)"],["ys","[0 ; 2]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":77,"label":"y :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":80,"label":"1 = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":81,"label":"0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[19,1,"Redex"],[99,5,"Redex"],[107,5,"Redex"]],"id":82,"label":"let rest' =\n  if ((i mod 2) = 0)\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[18,9,"Redex"],[99,5,"Redex"],[107,5,"Redex"]],"id":83,"label":"let rest' =\n  if ((1 mod 2) = 0)\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[2,1,"Redex"]],"id":84,"label":"f y"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":85,"label":"f"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":86,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":87,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":90,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":91,"label":"h"},{"span":null,"env":[["i","2"],["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[10,1,"Redex"]],"id":92,"label":"(0 , if ((i mod 2) = 0)\n     then y :: (List.filter f ys)\n     else List.filter f ys)"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[9,9,"Redex"]],"id":93,"label":"(0 , if ((2 mod 2) = 0)\n     then y :: (List.filter f ys)\n     else List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,16,"Redex"]],"id":94,"label":"List.filter f []"},{"span":null,"env":[],"annots":[],"id":95,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[0 ; 2]"]],"annots":[[0,5,"Redex"]],"id":96,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":97,"label":"[0 ; 2]"},{"span":null,"env":[["y","0"],["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":98,"label":"y :: (List.filter f ys)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":99,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":100,"label":"h"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[89,5,"Redex"],[97,5,"Redex"]],"id":101,"label":"let rest' =\n  if false\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[_32 ; _33]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":103,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_32 ; _33]"]],"annots":[[0,1,"Redex"]],"id":104,"label":"h"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[40,1,"Redex"],[96,2,"Redex"],[122,5,"Redex"],[130,5,"Redex"]],"id":105,"label":"List.rev (let rest' =\n            0 :: (y :: (List.filter f\n                                    ys)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[96,2,"Redex"],[122,5,"Redex"],[130,5,"Redex"]],"id":106,"label":"List.rev (let rest' =\n            0 :: (2 :: (List.filter f\n                                    ys)) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[34,174,"Redex"],[230,5,"Redex"],[238,5,"Redex"]],"id":107,"label":"List.rev (let rest' =\n            match [0 ; 2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[39,1,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":108,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 2]"]],"annots":[[0,61,"Redex"]],"id":109,"label":"let is_in =\n  fun i -> ((i mod 2) = 0) in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":110,"label":"fun i -> ((i mod 2) = 0)"},{"span":null,"env":[["i","2"],["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[11,1,"Redex"]],"id":111,"label":"0 :: (if ((i mod 2) = 0)\n      then y :: (List.filter f ys)\n      else List.filter f ys)"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[10,9,"Redex"]],"id":112,"label":"0 :: (if ((2 mod 2) = 0)\n      then y :: (List.filter f ys)\n      else List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,126,"Redex"]],"id":113,"label":"match [0 ; 2] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[],"annots":[],"id":114,"label":"[0 ; 2]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[0,61,"Redex"]],"id":115,"label":"let is_in =\n  fun i -> ((i mod 2) = 0) in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":116,"label":"fun i -> ((i mod 2) = 0)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":117,"label":"y"},{"span":null,"env":[["xs","[2]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":118,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,1,"Redex"]],"id":119,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","1"]],"annots":[[1,1,"Redex"]],"id":120,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":121,"label":"(1 mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":122,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":123,"label":"seen'"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[19,1,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":124,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[17,3,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":125,"label":"let rest' =\n  if f 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":126,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":127,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":128,"label":"0"},{"span":null,"env":[],"annots":[],"id":129,"label":"0 :: (2 :: [])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[45,333,"Redex"],[401,5,"Redex"],[409,5,"Redex"]],"id":131,"label":"List.rev (let rest' =\n            0 :: (2 :: (match [] with\n                        | [] -> []\n                        | y :: ys -> if f y\n                                     then y :: (List.filter f\n                                                            ys)\n                                     else List.filter f\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[25,179,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":132,"label":"let rest' =\n  0 :: (2 :: (match [] with\n              | [] -> []\n              | y :: ys -> if f y\n                           then y :: (List.filter f ys)\n                           else List.filter f ys)) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[26,2,"Redex"]],"id":133,"label":"0 :: (2 :: (List.filter f ys))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[9,425,"Redex"]],"id":134,"label":"List.rev (match [[_32 ; _33] ; 1 ; 0 ; 2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       (let rest' = (let is_in =\n                                       fun i ->\n                                         ((i mod 2) = 0) in\n                                     List.filter is_in\n                                                 t) in helper (seen' , rest'))))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,312,"Redex"]],"id":135,"label":"match [[_32 ; _33] ; 1 ; 0 ; 2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             (let rest' = (let is_in =\n                             fun i -> ((i mod 2) = 0) in\n                           List.filter is_in\n                                       t) in helper (seen' , rest')))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> ((i mod 2) = 0)"]],"annots":[[0,29,"Redex"]],"id":136,"label":"List.filter is_in [1 ; 0 ; 2]"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":137,"label":"is_in"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":138,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":139,"label":"seen'"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[37,117,"Redex"],[166,5,"Redex"],[174,5,"Redex"]],"id":140,"label":"let seen' = seen @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,114,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":141,"label":"let rest' = (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":142,"label":"0 :: [2]"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[5,72,"Redex"]],"id":145,"label":"0 :: (if true\n      then y :: (List.filter f ys)\n      else List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":146,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":147,"label":"0 mod 2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":148,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[6,1,"Redex"]],"id":149,"label":"([] , l)"},{"span":null,"env":[["xs","[]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":150,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[],"annots":[],"id":151,"label":"[]"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[107,156,"Redex"],[267,6,"Redex"],[275,5,"Redex"],[283,5,"Redex"]],"id":152,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             (let rest' = (let is_in =\n                             fun i -> ((i mod 2) = 0) in\n                           List.filter is_in\n                                       t) in helper (seen' , rest')))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":153,"label":"seen"},{"span":null,"env":[["xs","[0 ; 2]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":154,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":155,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[39,1,"Redex"],[149,5,"Redex"],[157,5,"Redex"]],"id":156,"label":"List.rev (let rest' =\n            if ((i mod 2) = 0)\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["xs","[2]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[11,2,"Redex"],[58,1,"Redex"]],"id":157,"label":"(0 , match xs with\n     | [] -> []\n     | y :: ys -> if f y\n                  then y :: (List.filter f ys)\n                  else List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,142,"Redex"]],"id":158,"label":"(0 , match [2] with\n     | [] -> []\n     | y :: ys -> if f y\n                  then y :: (List.filter f ys)\n                  else List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[70,5,"Redex"],[78,5,"Redex"]],"id":160,"label":"List.rev (let rest' =\n            0 :: (2 :: []) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[38,5,"Redex"],[46,5,"Redex"]],"id":161,"label":"let rest' = 0 :: (2 :: []) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":162,"label":"2 mod 2"},{"span":null,"env":[],"annots":[],"id":163,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[43,7,"Redex"],[160,5,"Redex"],[168,5,"Redex"]],"id":164,"label":"List.rev (let rest' =\n            0 :: (if (0 = 0)\n                  then y :: (List.filter f ys)\n                  else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[23,7,"Redex"],[110,5,"Redex"],[118,5,"Redex"]],"id":165,"label":"let rest' =\n  0 :: (if (0 = 0)\n        then y :: (List.filter f ys)\n        else List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[37,7,"Redex"],[141,5,"Redex"],[149,5,"Redex"]],"id":166,"label":"List.rev (let rest' =\n            if (1 = 0)\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[37,117,"Redex"],[158,6,"Redex"],[166,5,"Redex"],[174,5,"Redex"]],"id":167,"label":"let seen' = seen @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,114,"Redex"],[130,6,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":168,"label":"let rest' = (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[34,1,"Redex"],[54,2,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":169,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[14,1,"Redex"],[34,2,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":170,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":171,"label":"List.rev (let rest' =\n            if false\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":172,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":173,"label":"0"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,17,"Redex"]],"id":174,"label":"List.filter f [2]"},{"span":null,"env":[],"annots":[],"id":175,"label":"[2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[46,2,"Redex"],[119,1,"Redex"],[256,5,"Redex"],[264,5,"Redex"]],"id":178,"label":"List.rev (let rest' =\n            0 :: (match xs with\n                  | [] -> []\n                  | y :: ys -> if f y\n                               then y :: (List.filter f ys)\n                               else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[39,196,"Redex"],[257,5,"Redex"],[265,5,"Redex"]],"id":179,"label":"List.rev (let rest' =\n            0 :: (match [2] with\n                  | [] -> []\n                  | y :: ys -> if f y\n                               then y :: (List.filter f ys)\n                               else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,148,"Redex"]],"id":182,"label":"0 :: (match [2] with\n      | [] -> []\n      | y :: ys -> if f y\n                   then y :: (List.filter f ys)\n                   else List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":183,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":184,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":185,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_32 ; _33]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":186,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_32 ; _33]"]],"annots":[[0,5,"Redex"]],"id":187,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[39,1,"Redex"],[149,5,"Redex"],[157,5,"Redex"]],"id":188,"label":"List.rev (let rest' =\n            if ((i mod 2) = 0)\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[38,9,"Redex"],[149,5,"Redex"],[157,5,"Redex"]],"id":189,"label":"List.rev (let rest' =\n            if ((0 mod 2) = 0)\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[8,7,"Redex"]],"id":190,"label":"(0 , if (0 = 0)\n     then y :: (List.filter f ys)\n     else List.filter f ys)"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[],"annots":[[0,438,"Redex"]],"id":192,"label":"let rec helper =\n  fun (seen , rest) ->\n    (match rest with\n     | [] -> seen\n     | h :: t -> (let seen' =\n                    seen @ h in\n                  (let rest' = (let is_in =\n                                  fun i ->\n                                    ((i mod 2) = 0) in\n                                List.filter is_in\n                                            t) in helper (seen' , rest')))) in\nList.rev (helper ([] , l))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,141,"Redex"]],"id":193,"label":"(2 , match [] with\n     | [] -> []\n     | y :: ys -> if f y\n                  then y :: (List.filter f ys)\n                  else List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":194,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[12,216,"Redex"],[240,5,"Redex"],[248,5,"Redex"]],"id":195,"label":"let rest' = match [0 ; 2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[34,53,"Redex"],[109,5,"Redex"],[117,5,"Redex"]],"id":196,"label":"List.rev (let rest' =\n            List.filter is_in\n                        [1 ; 0 ; 2] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[12,53,"Redex"],[77,5,"Redex"],[85,5,"Redex"]],"id":197,"label":"let rest' = List.filter is_in\n                        [1 ; 0 ; 2] in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[39,96,"Redex"],[157,5,"Redex"],[165,5,"Redex"]],"id":198,"label":"List.rev (let rest' =\n            0 :: (if true\n                  then y :: (List.filter f ys)\n                  else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[43,3,"Redex"],[156,5,"Redex"],[164,5,"Redex"]],"id":199,"label":"List.rev (let rest' =\n            0 :: (if f 2\n                  then y :: (List.filter f ys)\n                  else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[23,3,"Redex"],[106,5,"Redex"],[114,5,"Redex"]],"id":200,"label":"let rest' =\n  0 :: (if f 2\n        then y :: (List.filter f ys)\n        else List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","2"],["ys","[]"]],"annots":[[3,3,"Redex"]],"id":201,"label":"if f 2\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["i","2"],["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[5,1,"Redex"]],"id":202,"label":"if ((i mod 2) = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[44,9,"Redex"],[168,5,"Redex"],[176,5,"Redex"]],"id":204,"label":"List.rev (let rest' =\n            0 :: (if ((2 mod 2) = 0)\n                  then y :: (List.filter f ys)\n                  else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[24,9,"Redex"],[118,5,"Redex"],[126,5,"Redex"]],"id":205,"label":"let rest' =\n  0 :: (if ((2 mod 2) = 0)\n        then y :: (List.filter f ys)\n        else List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[48,2,"Redex"],[72,5,"Redex"],[80,5,"Redex"]],"id":206,"label":"List.rev (let rest' =\n            List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,3,"Redex"]],"id":207,"label":"f 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":208,"label":"0 = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[107,5,"Redex"],[115,5,"Redex"]],"id":210,"label":"let rest' =\n  0 :: (if true\n        then y :: (List.filter f ys)\n        else List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[6,1,"Redex"],[26,2,"Redex"]],"id":211,"label":"0 :: (y :: (List.filter f ys))"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[5,1,"Redex"],[25,2,"Redex"]],"id":212,"label":"(0 , y :: (List.filter f ys))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","0"],["ys","[2]"]],"annots":[[5,1,"Redex"]],"id":214,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[26,2,"Redex"],[79,1,"Redex"],[186,5,"Redex"],[194,5,"Redex"]],"id":215,"label":"let rest' =\n  0 :: (match xs with\n        | [] -> []\n        | y :: ys -> if f y\n                     then y :: (List.filter f ys)\n                     else List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[0,438,"Redex"]],"id":216,"label":"let rec helper =\n  fun (seen , rest) ->\n    (match rest with\n     | [] -> seen\n     | h :: t -> (let seen' =\n                    seen @ h in\n                  (let rest' = (let is_in =\n                                  fun i ->\n                                    ((i mod 2) = 0) in\n                                List.filter is_in\n                                            t) in helper (seen' , rest')))) in\nList.rev (helper ([] , l))"},{"span":null,"env":[],"annots":[],"id":219,"label":"(0 , [2])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[34,4,"Redex"],[41,1,"Redex"],[69,147,"Redex"],[228,5,"Redex"],[236,5,"Redex"]],"id":220,"label":"List.rev (let seen' =\n            seen @ h in\n          (let rest' = (let is_in =\n                          fun i -> ((i mod 2) = 0) in\n                        List.filter is_in\n                                    t) in helper (seen' , rest')))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[37,117,"Redex"],[166,5,"Redex"],[174,5,"Redex"]],"id":221,"label":"let seen' = seen @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> ((i mod 2) = 0)"],["t","[1 ; 0 ; 2]"]],"annots":[[18,1,"Redex"]],"id":222,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":223,"label":"List.filter"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[10,18,"Redex"]],"id":224,"label":"(0 , 2 :: (List.filter f []))"},{"span":null,"env":[["i","1"],["y","1"],["f","fun i -> ((i mod 2) = 0)"],["ys","[0 ; 2]"]],"annots":[[5,1,"Redex"]],"id":225,"label":"if ((i mod 2) = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":226,"label":"fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[107,156,"Redex"],[267,6,"Redex"],[275,5,"Redex"],[283,5,"Redex"]],"id":227,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             (let rest' = (let is_in =\n                             fun i -> ((i mod 2) = 0) in\n                           List.filter is_in\n                                       t) in helper (seen' , rest')))"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 2]"]],"annots":[[0,1,"Redex"]],"id":228,"label":"t"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[_32 ; _33] ; 1 ; 0 ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[107,156,"Redex"],[275,5,"Redex"],[283,5,"Redex"]],"id":229,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             (let rest' = (let is_in =\n                             fun i -> ((i mod 2) = 0) in\n                           List.filter is_in\n                                       t) in helper (seen' , rest')))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[37,117,"Redex"],[166,5,"Redex"],[174,5,"Redex"]],"id":230,"label":"let seen' = seen @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":null,"env":[["xs","[]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[11,2,"Redex"],[58,1,"Redex"]],"id":231,"label":"(2 , match xs with\n     | [] -> []\n     | y :: ys -> if f y\n                  then y :: (List.filter f ys)\n                  else List.filter f ys)"},{"span":null,"env":[["xs","[]"]],"annots":[[0,2,"Redex"]],"id":232,"label":"xs"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[9,238,"Redex"]],"id":233,"label":"List.rev (let seen' =\n            [_32 ; _33] in\n          (let rest' = (let is_in =\n                          fun i -> ((i mod 2) = 0) in\n                        List.filter is_in\n                                    t) in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":234,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":235,"label":"2"},{"span":null,"env":[],"annots":[],"id":237,"label":"_33"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":238,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":239,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[9,69,"Redex"]],"id":241,"label":"List.rev (let rest' =\n            [0 ; 2] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[20,1,"Redex"],[66,2,"Redex"],[82,5,"Redex"],[90,5,"Redex"]],"id":243,"label":"let rest' =\n  0 :: (y :: (List.filter f\n                          ys)) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[66,2,"Redex"],[82,5,"Redex"],[90,5,"Redex"]],"id":244,"label":"let rest' =\n  0 :: (2 :: (List.filter f\n                          ys)) in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[34,178,"Redex"],[234,5,"Redex"],[242,5,"Redex"]],"id":245,"label":"List.rev (let rest' =\n            match [1 ; 0 ; 2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","2"]],"annots":[[2,1,"Redex"]],"id":246,"label":"f y"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":247,"label":"f"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,147,"Redex"]],"id":248,"label":"2 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f y\n                   then y :: (List.filter f ys)\n                   else List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,1,"Redex"]],"id":250,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":251,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","2"],["ys","[]"]],"annots":[[5,1,"Redex"]],"id":252,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":253,"label":"y :: (List.filter f ys)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":254,"label":"seen"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[19,1,"Redex"],[99,5,"Redex"],[107,5,"Redex"]],"id":255,"label":"let rest' =\n  if ((i mod 2) = 0)\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[14,2,"Redex"]],"id":256,"label":"List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":257,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":258,"label":"2"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,1,"Redex"]],"id":259,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":260,"label":"y :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 2]"]],"annots":[[0,61,"Redex"]],"id":261,"label":"let is_in =\n  fun i -> ((i mod 2) = 0) in\nList.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":262,"label":"List.filter is_in t"},{"span":null,"env":[["xs","[]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[17,2,"Redex"],[76,1,"Redex"]],"id":263,"label":"(0 , 2 :: (match xs with\n           | [] -> []\n           | y :: ys -> if f y\n                        then y :: (List.filter f ys)\n                        else List.filter f ys))"},{"span":null,"env":[],"annots":[],"id":264,"label":"_33"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[54,2,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":265,"label":"List.rev (let rest' =\n            0 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[39,19,"Redex"],[80,5,"Redex"],[88,5,"Redex"]],"id":266,"label":"List.rev (let rest' =\n            0 :: (List.filter f [2]) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","0"]],"annots":[[1,1,"Redex"]],"id":267,"label":"(i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":269,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":270,"label":"@"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":271,"label":"([_32 ; _33] , [0 ; 2])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[6,1,"Redex"]],"id":272,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[0,1,"Redex"]],"id":273,"label":"l"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":274,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":275,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[],"id":276,"label":"helper"},{"span":null,"env":[["ys","[2]"]],"annots":[[0,2,"Redex"]],"id":277,"label":"ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[39,1,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":278,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[37,3,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":279,"label":"List.rev (let rest' =\n            if f 1\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":280,"label":"@"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","1"],["ys","[0 ; 2]"]],"annots":[[5,1,"Redex"]],"id":281,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[17,131,"Redex"],[160,5,"Redex"],[168,5,"Redex"]],"id":282,"label":"let rest' = 0 :: (if true\n                  then y :: (List.filter f ys)\n                  else List.filter f\n                                   ys) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":283,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":284,"label":"2"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[14,2,"Redex"]],"id":285,"label":"List.filter f ys"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":286,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":287,"label":"is_in"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":288,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":289,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[34,15,"Redex"],[76,147,"Redex"],[235,5,"Redex"],[243,5,"Redex"]],"id":290,"label":"List.rev (let seen' =\n            [_32 ; _33] @ 0 in\n          (let rest' = (let is_in =\n                          fun i -> ((i mod 2) = 0) in\n                        List.filter is_in\n                                    t) in helper (seen' , rest')))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[2,1,"Redex"]],"id":291,"label":"f y"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":292,"label":"f"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[32,1,"Redex"],[45,5,"Redex"],[53,5,"Redex"]],"id":295,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":null,"env":[["xs","[]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[12,2,"Redex"],[61,1,"Redex"]],"id":296,"label":"2 :: (match xs with\n      | [] -> []\n      | y :: ys -> if f y\n                   then y :: (List.filter f ys)\n                   else List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":297,"label":"[_32 ; _33]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":298,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":299,"label":"(seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["rest'","[0 ; 2]"]],"annots":[[0,8,"Redex"],[32,5,"Redex"]],"id":300,"label":"List.rev (helper ([_32 ; _33] , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[9,32,"Redex"]],"id":301,"label":"List.rev (helper ([_32 ; _33] , [0 ; 2]))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":302,"label":"1 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":303,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[0,1,"Redex"]],"id":304,"label":"l"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[_32 ; _33]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,294,"Redex"]],"id":305,"label":"match [0 ; 2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             (let rest' = (let is_in =\n                             fun i -> ((i mod 2) = 0) in\n                           List.filter is_in\n                                       t) in helper (seen' , rest')))"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":306,"label":"@"},{"span":null,"env":[],"annots":[],"id":307,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":308,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":310,"label":"([] , [[_32 ; _33] ; 1 ; 0 ; 2])"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":314,"label":"seen"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[20,2,"Redex"]],"id":315,"label":"2 :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[19,2,"Redex"]],"id":316,"label":"(2 , List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":317,"label":"[0 ; 2]"},{"span":null,"env":[],"annots":[],"id":318,"label":"[0 ; 2]"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[_32 ; _33]"]],"annots":[[0,4,"Redex"]],"id":319,"label":"seen"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[34,2,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":320,"label":"let rest' =\n  0 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":322,"label":"fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":323,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[37,3,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":324,"label":"List.rev (let rest' =\n            if f 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":325,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":326,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":327,"label":"([] , l)"},{"span":null,"env":[],"annots":[],"id":328,"label":"[]"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[37,117,"Redex"],[166,5,"Redex"],[174,5,"Redex"]],"id":329,"label":"let seen' = seen @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","0"],["ys","[2]"]],"annots":[[3,3,"Redex"]],"id":330,"label":"if f 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,114,"Redex"],[130,6,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":331,"label":"let rest' = (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,61,"Redex"]],"id":332,"label":"let is_in =\n  fun i -> ((i mod 2) = 0) in\nList.filter is_in t"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":333,"label":"rest'"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","0"]],"annots":[[14,1,"Redex"]],"id":338,"label":"[_32 ; _33] @ h"},{"span":null,"env":[["i","0"],["y","0"],["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[5,1,"Redex"]],"id":339,"label":"if ((i mod 2) = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[14,2,"Redex"]],"id":340,"label":"List.filter f ys"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":341,"label":"ys"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[4,9,"Redex"]],"id":342,"label":"if ((2 mod 2) = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[3,7,"Redex"]],"id":343,"label":"if (0 = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":344,"label":"0"},{"span":null,"env":[],"annots":[],"id":345,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","0"]],"annots":[[0,1,"Redex"]],"id":348,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":349,"label":"fun i -> ((i mod 2) = 0)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":350,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","2"]],"annots":[[1,1,"Redex"]],"id":351,"label":"(i mod 2) = 0"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,3,"Redex"]],"id":352,"label":"f 1"},{"span":null,"env":[],"annots":[],"id":353,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[_32 ; _33] ; 1 ; 0 ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[157,227,"Redex"],[396,5,"Redex"],[404,5,"Redex"]],"id":354,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       (let rest' = (let is_in =\n                                       fun i ->\n                                         ((i mod 2) = 0) in\n                                     List.filter is_in\n                                                 t) in helper (seen' , rest'))))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[19,156,"Redex"],[187,5,"Redex"],[195,5,"Redex"]],"id":355,"label":"let rest' =\n  0 :: (match [2] with\n        | [] -> []\n        | y :: ys -> if f y\n                     then y :: (List.filter f ys)\n                     else List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,18,"Redex"]],"id":356,"label":"2 :: (List.filter f [])"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,16,"Redex"]],"id":357,"label":"(2 , List.filter f [])"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":359,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":360,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[52,1,"Redex"],[75,5,"Redex"],[83,5,"Redex"]],"id":361,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[22,141,"Redex"],[175,5,"Redex"],[183,5,"Redex"]],"id":362,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":null,"env":[["y","1"],["f","fun i -> ((i mod 2) = 0)"],["ys","[0 ; 2]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":363,"label":"(y , List.filter f ys)"},{"span":null,"env":[["y","1"]],"annots":[[0,1,"Redex"]],"id":364,"label":"y"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[12,114,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":365,"label":"let rest' = (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":366,"label":"[1 ; 0 ; 2]"},{"span":null,"env":[],"annots":[],"id":367,"label":"2"},{"span":null,"env":[],"annots":[],"id":369,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,39,"Redex"]],"id":370,"label":"helper ([] , [[_32 ; _33] ; 1 ; 0 ; 2])"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":371,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              (match rest with\n               | [] -> seen\n               | h :: t -> (let seen' =\n                              seen @ h in\n                            (let rest' = (let is_in =\n                                            fun i ->\n                                              ((i mod 2) = 0) in\n                                          List.filter is_in\n                                                      t) in helper (seen' , rest')))) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,42,"Redex"]],"id":372,"label":"removeDuplicates [[_32 ; _33] ; 1 ; 0 ; 2]"},{"span":null,"env":[],"annots":[],"id":373,"label":"[[_32 ; _33] ; 1 ; 0 ; 2]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":374,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[],"id":375,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[0,8,"Redex"],[10,6,"Redex"],[23,1,"Redex"]],"id":376,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"],["rest'","[0 ; 2]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":377,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":378,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[],"id":379,"label":"helper"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[37,117,"Redex"],[158,6,"Redex"],[166,5,"Redex"],[174,5,"Redex"]],"id":380,"label":"let seen' = seen @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,184,"Redex"]],"id":381,"label":"let seen' = [_32 ; _33] in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,114,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":382,"label":"let rest' = (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":383,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":384,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[19,19,"Redex"],[50,5,"Redex"],[58,5,"Redex"]],"id":385,"label":"let rest' =\n  0 :: (List.filter f [2]) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":386,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":387,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":388,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,30,"Redex"]],"id":389,"label":"helper ([_32 ; _33] , [0 ; 2])"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":390,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[19,2,"Redex"]],"id":391,"label":"(0 , List.filter f ys)"},{"span":null,"env":[["y","0"],["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[3,7,"Redex"]],"id":392,"label":"if (0 = 0)\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":393,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":394,"label":"2"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[2,1,"Redex"]],"id":395,"label":"f y"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":396,"label":"y"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[],"id":397,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[20,2,"Redex"],[61,1,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":398,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[14,138,"Redex"],[164,5,"Redex"],[172,5,"Redex"]],"id":399,"label":"let rest' =\n  match [1 ; 0 ; 2] with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":400,"label":"(0 , 2 :: [])"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":401,"label":"(i mod 2) = 0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":402,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":403,"label":"helper"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,121,"Redex"]],"id":404,"label":"match [] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":405,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":406,"label":"(i mod 2) = 0"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[14,2,"Redex"]],"id":407,"label":"List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[14,2,"Redex"]],"id":408,"label":"List.filter f ys"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":409,"label":"f"},{"span":null,"env":[],"annots":[],"id":410,"label":"[]"},{"span":null,"env":[["xs","[1 ; 0 ; 2]"]],"annots":[[0,2,"Redex"]],"id":411,"label":"xs"},{"span":null,"env":[],"annots":[],"id":412,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[0 ; 2]"],["seen","[_32 ; _33]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[157,227,"Redex"],[396,5,"Redex"],[404,5,"Redex"]],"id":413,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       (let rest' = (let is_in =\n                                       fun i ->\n                                         ((i mod 2) = 0) in\n                                     List.filter is_in\n                                                 t) in helper (seen' , rest'))))"},{"span":null,"env":[],"annots":[],"id":414,"label":"1"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":415,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[],"id":416,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[39,1,"Redex"],[67,147,"Redex"],[226,5,"Redex"],[234,5,"Redex"]],"id":417,"label":"List.rev (let seen' =\n            [] @ h in\n          (let rest' = (let is_in =\n                          fun i -> ((i mod 2) = 0) in\n                        List.filter is_in\n                                    t) in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":418,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":419,"label":"i mod 2"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,17,"Redex"]],"id":420,"label":"(0 , List.filter f [2])"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":421,"label":"f"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[52,2,"Redex"],[137,1,"Redex"],[401,5,"Redex"],[409,5,"Redex"]],"id":422,"label":"List.rev (let rest' =\n            0 :: (2 :: (match xs with\n                        | [] -> []\n                        | y :: ys -> if f y\n                                     then y :: (List.filter f\n                                                            ys)\n                                     else List.filter f\n                                                      ys)) in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":423,"label":"0"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[9,7,"Redex"]],"id":424,"label":"0 :: (if (0 = 0)\n      then y :: (List.filter f ys)\n      else List.filter f ys)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[1 ; 0 ; 2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":425,"label":"List.filter is_in t"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[5,68,"Redex"]],"id":426,"label":"(0 , if true\n     then y :: (List.filter f ys)\n     else List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":428,"label":"true"},{"span":null,"env":[],"annots":[],"id":429,"label":"[1 ; 0 ; 2]"},{"span":null,"env":[],"annots":[],"id":430,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[22,142,"Redex"],[176,5,"Redex"],[184,5,"Redex"]],"id":431,"label":"List.rev (let rest' = if false\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_32 ; _33]"],["rest'","[0 ; 2]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":432,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_32 ; _33]"]],"annots":[[0,5,"Redex"]],"id":433,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":434,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":435,"label":"seen'"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[0,58,"Redex"]],"id":436,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[25,1,"Redex"],[106,5,"Redex"],[114,5,"Redex"]],"id":437,"label":"let rest' =\n  0 :: (if f y\n        then y :: (List.filter f ys)\n        else List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["y","0"],["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[0,58,"Redex"]],"id":439,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":441,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":442,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":443,"label":"List.filter is_in t"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[25,44,"Redex"],[82,5,"Redex"],[90,5,"Redex"]],"id":444,"label":"let rest' =\n  0 :: (2 :: (List.filter f\n                          [])) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,122,"Redex"]],"id":445,"label":"match [2] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[26,1,"Redex"],[44,117,"Redex"],[173,5,"Redex"],[181,5,"Redex"]],"id":446,"label":"let seen' = [_32 ; _33] @ h in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_32 ; _33] ; 1 ; 0 ; 2]"]],"annots":[[0,4,"Redex"]],"id":448,"label":"rest"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,3,"Redex"]],"id":449,"label":"f 2"},{"span":null,"env":[],"annots":[],"id":450,"label":"List.filter"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":451,"label":"y :: (List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":452,"label":"(y , List.filter f ys)"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[],"id":453,"label":"helper"},{"span":null,"env":[["y","0"],["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":455,"label":"(y , List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":458,"label":"(y , List.filter f ys)"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[2]"]],"annots":[[20,2,"Redex"]],"id":459,"label":"0 :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[12,111,"Redex"],[135,5,"Redex"],[143,5,"Redex"]],"id":460,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":null,"env":[["ys","[]"]],"annots":[[0,2,"Redex"]],"id":461,"label":"ys"},{"span":null,"env":[],"annots":[],"id":462,"label":"[]"},{"span":null,"env":[],"annots":[],"id":463,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":464,"label":"(2 mod 2) = 0"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":465,"label":"is_in"},{"span":null,"env":[["y","2"]],"annots":[[0,1,"Redex"]],"id":466,"label":"y"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","1"]],"annots":[[2,1,"Redex"]],"id":467,"label":"f y"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[],"id":468,"label":"f"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[45,1,"Redex"],[156,5,"Redex"],[164,5,"Redex"]],"id":469,"label":"List.rev (let rest' =\n            0 :: (if f y\n                  then y :: (List.filter f ys)\n                  else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":470,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[34,16,"Redex"],[77,147,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":471,"label":"List.rev (let seen' =\n            [] @ [_32 ; _33] in\n          (let rest' = (let is_in =\n                          fun i -> ((i mod 2) = 0) in\n                        List.filter is_in\n                                    t) in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":472,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,114,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":473,"label":"let rest' = (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":null,"env":[["xs","[0 ; 2]"]],"annots":[[0,2,"Redex"]],"id":474,"label":"xs"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[5,19,"Redex"]],"id":475,"label":"0 :: (List.filter f [2])"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":476,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,15,"Redex"]],"id":477,"label":"[_32 ; _33] @ 0"},{"span":null,"env":[],"annots":[],"id":478,"label":"0"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":479,"label":"y"},{"span":null,"env":[],"annots":[],"id":480,"label":"[2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[45,1,"Redex"],[168,5,"Redex"],[176,5,"Redex"]],"id":481,"label":"List.rev (let rest' =\n            0 :: (if ((i mod 2) = 0)\n                  then y :: (List.filter f ys)\n                  else List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[20,2,"Redex"],[61,1,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":482,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,114,"Redex"],[138,5,"Redex"],[146,5,"Redex"]],"id":483,"label":"let rest' = (let is_in =\n               fun i -> ((i mod 2) = 0) in\n             List.filter is_in\n                         t) in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":484,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":485,"label":"is_in"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[32,5,"Redex"],[40,5,"Redex"]],"id":486,"label":"let rest' = 0 :: [2] in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[0,8,"Redex"],[9,41,"Redex"]],"id":487,"label":"List.rev (helper ([] , [[_32 ; _33] ; 1 ; 0 ; 2]))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[2,1,"Redex"]],"id":488,"label":"f y"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":489,"label":"y"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[17,7,"Redex"],[91,5,"Redex"],[99,5,"Redex"]],"id":491,"label":"let rest' =\n  if (0 = 0)\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":492,"label":"2"},{"span":null,"env":[["xs","[2]"],["f","fun i -> ((i mod 2) = 0)"]],"annots":[[12,2,"Redex"],[61,1,"Redex"]],"id":493,"label":"0 :: (match xs with\n      | [] -> []\n      | y :: ys -> if f y\n                   then y :: (List.filter f ys)\n                   else List.filter f ys)"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":494,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[32,2,"Redex"],[97,1,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":495,"label":"let rest' =\n  0 :: (2 :: (match xs with\n              | [] -> []\n              | y :: ys -> if f y\n                           then y :: (List.filter f ys)\n                           else List.filter f ys)) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[12,112,"Redex"],[136,5,"Redex"],[144,5,"Redex"]],"id":496,"label":"let rest' = if false\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,61,"Redex"]],"id":497,"label":"let is_in =\n  fun i -> ((i mod 2) = 0) in\nList.filter is_in t"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[0 ; 2]"],["seen","[_32 ; _33]"],["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[107,156,"Redex"],[275,5,"Redex"],[283,5,"Redex"]],"id":498,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             (let rest' = (let is_in =\n                             fun i -> ((i mod 2) = 0) in\n                           List.filter is_in\n                                       t) in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,61,"Redex"]],"id":499,"label":"let is_in =\n  fun i -> ((i mod 2) = 0) in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":500,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":501,"label":"List.filter"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[88,5,"Redex"],[96,5,"Redex"]],"id":502,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[45,54,"Redex"],[122,5,"Redex"],[130,5,"Redex"]],"id":503,"label":"List.rev (let rest' =\n            0 :: (2 :: (List.filter f\n                                    [])) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[25,2,"Redex"]],"id":504,"label":"(0 , 2 :: (List.filter f ys))"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":505,"label":"List.filter"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[[12,15,"Redex"],[44,117,"Redex"],[173,5,"Redex"],[181,5,"Redex"]],"id":506,"label":"let seen' = [_32 ; _33] @ 0 in\n(let rest' = (let is_in =\n                fun i -> ((i mod 2) = 0) in\n              List.filter is_in\n                          t) in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[34,21,"Redex"],[77,5,"Redex"],[85,5,"Redex"]],"id":507,"label":"List.rev (let rest' =\n            List.filter f [0 ; 2] in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[40,2,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":509,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":510,"label":"List.filter"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":511,"label":"rest"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"],["y","1"],["ys","[0 ; 2]"]],"annots":[[3,3,"Redex"]],"id":512,"label":"if f 1\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":513,"label":"helper"},{"span":null,"env":[],"annots":[],"id":514,"label":"1"},{"span":null,"env":[],"annots":[],"id":515,"label":"true"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":516,"label":"0 = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":517,"label":"0"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":518,"label":"(y , List.filter f ys)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":519,"label":"t"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              (match rest with\n               | [] -> seen\n               | h :: t -> (let seen' =\n                              seen @ h in\n                            (let rest' = (let is_in =\n                                            fun i ->\n                                              ((i mod 2) = 0) in\n                                          List.filter is_in\n                                                      t) in helper (seen' , rest')))) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":522,"label":"removeDuplicates"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[10,167,"Redex"]],"id":523,"label":"(0 , 2 :: (match [] with\n           | [] -> []\n           | y :: ys -> if f y\n                        then y :: (List.filter f ys)\n                        else List.filter f ys))"},{"span":null,"env":[["ys","[0 ; 2]"]],"annots":[[0,2,"Redex"]],"id":525,"label":"ys"},{"span":null,"env":[],"annots":[],"id":526,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[18,9,"Redex"],[99,5,"Redex"],[107,5,"Redex"]],"id":527,"label":"let rest' =\n  if ((0 mod 2) = 0)\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[11,171,"Redex"]],"id":528,"label":"0 :: (2 :: (match [] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"],["rest'","[0 ; 2]"]],"annots":[[0,8,"Redex"],[18,5,"Redex"],[26,5,"Redex"]],"id":529,"label":"List.rev (helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> ((i mod 2) = 0)"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":530,"label":"(y , List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":531,"label":"0"},{"span":null,"env":[],"annots":[],"id":532,"label":"2"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":534,"label":"List.filter"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":535,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":536,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":537,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[37,7,"Redex"],[141,5,"Redex"],[149,5,"Redex"]],"id":538,"label":"List.rev (let rest' =\n            if (0 = 0)\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[25,1,"Redex"],[118,5,"Redex"],[126,5,"Redex"]],"id":539,"label":"let rest' =\n  0 :: (if ((i mod 2) = 0)\n        then y :: (List.filter f ys)\n        else List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":540,"label":"ys"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":541,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":542,"label":"i"},{"span":null,"env":[["y","2"],["f","fun i -> ((i mod 2) = 0)"],["ys","[]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":543,"label":"(y , List.filter f ys)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":544,"label":"fun i -> ((i mod 2) = 0)"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":545,"label":"fun i -> ((i mod 2) = 0)"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":546,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[_32 ; _33]"]],"annots":[[0,4,"Redex"]],"id":547,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"],["seen'","[_32 ; _33]"]],"annots":[[0,8,"Redex"],[64,5,"Redex"],[72,5,"Redex"]],"id":548,"label":"List.rev (let rest' =\n            0 :: [2] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":549,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":550,"label":"i"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":551,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":552,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":553,"label":"h"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":554,"label":"helper"},{"span":null,"env":[],"annots":[],"id":555,"label":"[2]"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  (match rest with\n   | [] -> seen\n   | h :: t -> (let seen' =\n                  seen @ h in\n                (let rest' = (let is_in =\n                                fun i -> ((i mod 2) = 0) in\n                              List.filter is_in\n                                          t) in helper (seen' , rest'))))"]],"annots":[],"id":556,"label":"helper"},{"span":null,"env":[],"annots":[],"id":557,"label":"[[_32 ; _33] ; 1 ; 0 ; 2]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":558,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":559,"label":"seen"},{"span":null,"env":[],"annots":[],"id":560,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":561,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":562,"label":"0"},{"span":null,"env":[],"annots":[],"id":564,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 2]"]],"annots":[[0,1,"Redex"]],"id":565,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":566,"label":"i"},{"span":null,"env":[],"annots":[],"id":567,"label":"false"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":568,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":569,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":570,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":572,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":573,"label":"0"},{"span":null,"env":[],"annots":[],"id":574,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[1 ; 0 ; 2]"]],"annots":[[0,1,"Redex"]],"id":575,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":576,"label":"t"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":577,"label":"ys"},{"span":null,"env":[],"annots":[],"id":578,"label":"[[_32 ; _33] ; 1 ; 0 ; 2]"},{"span":null,"env":[["xs","[2]"]],"annots":[[0,2,"Redex"]],"id":579,"label":"xs"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":580,"label":"l"},{"span":null,"env":[],"annots":[],"id":581,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","1"]],"annots":[[0,1,"Redex"]],"id":582,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":583,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":584,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":585,"label":"1"},{"span":null,"env":[],"annots":[],"id":587,"label":"0"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[],"annots":[],"id":588,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              (match rest with\n               | [] -> seen\n               | h :: t -> (let seen' =\n                              seen @ h in\n                            (let rest' = (let is_in =\n                                            fun i ->\n                                              ((i mod 2) = 0) in\n                                          List.filter is_in\n                                                      t) in helper (seen' , rest')))) in\n          List.rev (helper ([] , l)))"},{"span":null,"env":[],"annots":[],"id":589,"label":"0"},{"span":null,"env":[],"annots":[],"id":590,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":591,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":592,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":593,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":594,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":595,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":596,"label":"1"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":597,"label":"ys"},{"span":null,"env":[],"annots":[],"id":598,"label":"List.filter"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":599,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":600,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[[0,8,"Redex"]],"id":601,"label":"List.rev"},{"span":null,"env":[],"annots":[],"id":602,"label":"_33"},{"span":null,"env":[],"annots":[],"id":603,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":604,"label":"0"},{"span":null,"env":[],"annots":[],"id":605,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":606,"label":"[]"},{"span":null,"env":[],"annots":[],"id":607,"label":"0"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":608,"label":"seen"},{"span":null,"env":[],"annots":[],"id":609,"label":"0"}]}