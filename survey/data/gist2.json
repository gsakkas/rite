{"root":229,"result":"stuck","reason":"Type error : could not match int with 't72 list","bad":75,"stuck":335,"edges":[{"arrows":"to","to":1,"from":0,"label":"StepsTo CallStep"},{"arrows":"to","to":55,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":0,"label":"SubTerm 2"},{"arrows":"to","to":387,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":246,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":280,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":312,"from":1,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":306,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":291,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":138,"from":7,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":104,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":363,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":104,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":347,"from":12,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":134,"from":14,"label":"SubTerm 2"},{"arrows":"to","to":344,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":16,"label":"StepsTo PrimStep"},{"arrows":"to","to":13,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":302,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":19,"label":"SubTerm 2"},{"arrows":"to","to":130,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":277,"from":19,"label":"StepsTo BoringStep"},{"arrows":"to","to":377,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":227,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":204,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":24,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":25,"label":"StepsTo PrimStep"},{"arrows":"to","to":53,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":307,"from":25,"label":"SubTerm 2"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":133,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":31,"label":"StepsTo CallStep"},{"arrows":"to","to":141,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"SubTerm 2"},{"arrows":"to","to":53,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":257,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":307,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":34,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":38,"label":"StepsTo CallStep"},{"arrows":"to","to":249,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":267,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":288,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":40,"label":"SubTerm 2"},{"arrows":"to","to":116,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":293,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":42,"label":"StepsTo CallStep"},{"arrows":"to","to":51,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":350,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":351,"from":44,"label":"SubTerm 2"},{"arrows":"to","to":47,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":296,"from":46,"label":"SubTerm 2"},{"arrows":"to","to":333,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":211,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":68,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":56,"label":"SubTerm 2"},{"arrows":"to","to":343,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":58,"label":"SubTerm 2"},{"arrows":"to","to":166,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":357,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":151,"from":60,"label":"StepsTo CallStep"},{"arrows":"to","to":63,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":65,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":65,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":65,"label":"SubTerm 2"},{"arrows":"to","to":144,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":377,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":66,"label":"SubTerm 2"},{"arrows":"to","to":186,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":192,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":375,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":371,"from":75,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":6,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":110,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":146,"from":80,"label":"SubTerm 2"},{"arrows":"to","to":153,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":370,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":64,"from":87,"label":"StepsTo CallStep"},{"arrows":"to","to":0,"from":88,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":332,"from":88,"label":"StepsTo CallStep"},{"arrows":"to","to":16,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":89,"label":"StepsTo PrimStep"},{"arrows":"to","to":92,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":185,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":390,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":234,"from":93,"label":"SubTerm 2"},{"arrows":"to","to":336,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":218,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":314,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":97,"label":"SubTerm 2"},{"arrows":"to","to":13,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":98,"label":"StepsTo ReturnStep"},{"arrows":"to","to":132,"from":99,"label":"StepsTo ReturnStep"},{"arrows":"to","to":150,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":290,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":201,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":225,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":101,"label":"StepsTo CallStep"},{"arrows":"to","to":13,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":102,"label":"StepsTo CallStep"},{"arrows":"to","to":106,"from":103,"label":"StepsTo CallStep"},{"arrows":"to","to":150,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":341,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":215,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":223,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":107,"label":"SubTerm 2"},{"arrows":"to","to":176,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":308,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":110,"label":"StepsTo BoringStep"},{"arrows":"to","to":112,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":40,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":248,"from":112,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":113,"label":"SubTerm 2"},{"arrows":"to","to":305,"from":113,"label":"StepsTo CallStep"},{"arrows":"to","to":115,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":116,"label":"StepsTo BoringStep"},{"arrows":"to","to":240,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":116,"label":"SubTerm 2"},{"arrows":"to","to":72,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":118,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":182,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":120,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":257,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":309,"from":125,"label":"StepsTo ReturnStep"},{"arrows":"to","to":61,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":374,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":128,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":241,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":385,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":389,"from":128,"label":"SubTerm 2"},{"arrows":"to","to":95,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":388,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":131,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":132,"label":"StepsTo BoringStep"},{"arrows":"to","to":290,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":141,"from":133,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":161,"from":133,"label":"SubTerm 2"},{"arrows":"to","to":276,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":136,"label":"StepsTo BoringStep"},{"arrows":"to","to":142,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":231,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":137,"label":"SubTerm 1"},{"arrows":"to","to":205,"from":137,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":138,"label":"StepsTo PrimStep"},{"arrows":"to","to":13,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":139,"label":"StepsTo BoringStep"},{"arrows":"to","to":250,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":324,"from":140,"label":"StepsTo ReturnStep"},{"arrows":"to","to":158,"from":141,"label":"SubTerm 1"},{"arrows":"to","to":162,"from":141,"label":"SubTerm 2"},{"arrows":"to","to":200,"from":141,"label":"StepsTo CallStep"},{"arrows":"to","to":276,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":143,"label":"SubTerm 2"},{"arrows":"to","to":321,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":391,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":130,"from":144,"label":"StepsTo BoringStep"},{"arrows":"to","to":80,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":146,"from":145,"label":"SubTerm 2"},{"arrows":"to","to":153,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":289,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":301,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":353,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":222,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":149,"label":"StepsTo ReturnStep"},{"arrows":"to","to":181,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":354,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":151,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":253,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":352,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":154,"label":"StepsTo BoringStep"},{"arrows":"to","to":167,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":177,"from":155,"label":"SubTerm 1"},{"arrows":"to","to":365,"from":155,"label":"SubTerm 2"},{"arrows":"to","to":376,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":162,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":330,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":163,"label":"SubTerm 1"},{"arrows":"to","to":190,"from":163,"label":"StepsTo BoringStep"},{"arrows":"to","to":355,"from":164,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":165,"label":"StepsTo BoringStep"},{"arrows":"to","to":248,"from":165,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":167,"label":"StepsTo BoringStep"},{"arrows":"to","to":35,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":319,"from":168,"label":"SubTerm 2"},{"arrows":"to","to":364,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":171,"label":"StepsTo BoringStep"},{"arrows":"to","to":313,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":317,"from":171,"label":"SubTerm 2"},{"arrows":"to","to":173,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":328,"from":172,"label":"SubTerm 2"},{"arrows":"to","to":356,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":345,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":295,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":337,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":311,"from":179,"label":"SubTerm 2"},{"arrows":"to","to":369,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":189,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":361,"from":188,"label":"SubTerm 1"},{"arrows":"to","to":355,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":196,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":322,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":340,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":373,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":197,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":251,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":199,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":199,"label":"SubTerm 1"},{"arrows":"to","to":40,"from":200,"label":"StepsTo BoringStep"},{"arrows":"to","to":78,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":200,"label":"SubTerm 2"},{"arrows":"to","to":293,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":202,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":201,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":202,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":202,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":165,"from":205,"label":"StepsTo BoringStep"},{"arrows":"to","to":348,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":358,"from":208,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":359,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":213,"from":212,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":360,"from":213,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":214,"label":"StepsTo BoringStep"},{"arrows":"to","to":145,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":215,"label":"StepsTo ReturnStep"},{"arrows":"to","to":150,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":224,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":219,"from":218,"label":"SubTerm 0"},{"arrows":"to","to":243,"from":218,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":220,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":220,"label":"StepsTo ReturnStep"},{"arrows":"to","to":149,"from":220,"label":"SubTerm 1"},{"arrows":"to","to":224,"from":223,"label":"StepsTo BoringStep"},{"arrows":"to","to":332,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":224,"label":"StepsTo ReturnStep"},{"arrows":"to","to":325,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":226,"from":225,"label":"SubTerm 2"},{"arrows":"to","to":316,"from":225,"label":"SubTerm 1"},{"arrows":"to","to":338,"from":225,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":227,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":228,"label":"StepsTo CallStep"},{"arrows":"to","to":190,"from":228,"label":"SubTerm 1"},{"arrows":"to","to":291,"from":228,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":229,"label":"StepsTo CallStep"},{"arrows":"to","to":230,"from":229,"label":"SubTerm 1"},{"arrows":"to","to":329,"from":229,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":231,"label":"SubTerm 1"},{"arrows":"to","to":386,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":233,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":274,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":234,"label":"SubTerm 1"},{"arrows":"to","to":198,"from":234,"label":"SubTerm 0"},{"arrows":"to","to":237,"from":236,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":236,"label":"SubTerm 1"},{"arrows":"to","to":239,"from":238,"label":"SubTerm 1"},{"arrows":"to","to":366,"from":238,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":240,"label":"StepsTo BoringStep"},{"arrows":"to","to":292,"from":240,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":362,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":246,"label":"SubTerm 2"},{"arrows":"to","to":118,"from":246,"label":"SubTerm 1"},{"arrows":"to","to":323,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":247,"label":"SubTerm 0"},{"arrows":"to","to":368,"from":247,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":248,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":248,"label":"SubTerm 0"},{"arrows":"to","to":249,"from":248,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":249,"label":"StepsTo CallStep"},{"arrows":"to","to":150,"from":250,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":250,"label":"StepsTo BoringStep"},{"arrows":"to","to":309,"from":250,"label":"SubTerm 1"},{"arrows":"to","to":252,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":272,"from":251,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":253,"label":"SubTerm 1"},{"arrows":"to","to":254,"from":253,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":254,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":282,"from":254,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":256,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":256,"label":"SubTerm 1"},{"arrows":"to","to":326,"from":256,"label":"SubTerm 2"},{"arrows":"to","to":387,"from":256,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":257,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":257,"label":"SubTerm 2"},{"arrows":"to","to":53,"from":257,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":257,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":258,"label":"SubTerm 1"},{"arrows":"to","to":259,"from":258,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":260,"label":"SubTerm 1"},{"arrows":"to","to":261,"from":260,"label":"StepsTo BoringStep"},{"arrows":"to","to":318,"from":260,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":318,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":297,"from":262,"label":"SubTerm 1"},{"arrows":"to","to":381,"from":262,"label":"SubTerm 0"},{"arrows":"to","to":300,"from":263,"label":"SubTerm 1"},{"arrows":"to","to":379,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":299,"from":266,"label":"SubTerm 1"},{"arrows":"to","to":380,"from":266,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":267,"label":"SubTerm 0"},{"arrows":"to","to":268,"from":267,"label":"StepsTo PrimStep"},{"arrows":"to","to":283,"from":267,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":268,"label":"StepsTo PrimStep"},{"arrows":"to","to":278,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":269,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":269,"label":"SubTerm 1"},{"arrows":"to","to":101,"from":269,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":270,"label":"SubTerm 0"},{"arrows":"to","to":384,"from":270,"label":"SubTerm 1"},{"arrows":"to","to":273,"from":272,"label":"SubTerm 0"},{"arrows":"to","to":382,"from":272,"label":"SubTerm 1"},{"arrows":"to","to":275,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":383,"from":274,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":277,"label":"SubTerm 1"},{"arrows":"to","to":260,"from":277,"label":"StepsTo BoringStep"},{"arrows":"to","to":318,"from":277,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":278,"label":"StepsTo PrimStep"},{"arrows":"to","to":150,"from":278,"label":"SubTerm 0"},{"arrows":"to","to":279,"from":278,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":279,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":279,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":279,"label":"SubTerm 2"},{"arrows":"to","to":290,"from":279,"label":"StepsTo ReturnStep"},{"arrows":"to","to":281,"from":280,"label":"StepsTo BoringStep"},{"arrows":"to","to":294,"from":282,"label":"SubTerm 0"},{"arrows":"to","to":342,"from":282,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":283,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":283,"label":"StepsTo PrimStep"},{"arrows":"to","to":284,"from":283,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":284,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":284,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":284,"label":"SubTerm 2"},{"arrows":"to","to":279,"from":284,"label":"StepsTo PrimStep"},{"arrows":"to","to":304,"from":287,"label":"SubTerm 1"},{"arrows":"to","to":315,"from":287,"label":"SubTerm 0"},{"arrows":"to","to":367,"from":287,"label":"SubTerm 2"},{"arrows":"to","to":150,"from":288,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":288,"label":"StepsTo BoringStep"},{"arrows":"to","to":305,"from":288,"label":"SubTerm 1"},{"arrows":"to","to":370,"from":289,"label":"StepsTo BoringStep"},{"arrows":"to","to":240,"from":290,"label":"StepsTo BoringStep"},{"arrows":"to","to":240,"from":290,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":290,"label":"SubTerm 2"},{"arrows":"to","to":324,"from":290,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":292,"label":"SubTerm 0"},{"arrows":"to","to":256,"from":292,"label":"SubTerm 1"},{"arrows":"to","to":294,"from":292,"label":"StepsTo BoringStep"},{"arrows":"to","to":61,"from":294,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":294,"label":"StepsTo BoringStep"},{"arrows":"to","to":256,"from":294,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":301,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":301,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":302,"label":"SubTerm 0"},{"arrows":"to","to":277,"from":302,"label":"SubTerm 1"},{"arrows":"to","to":334,"from":302,"label":"StepsTo BoringStep"},{"arrows":"to","to":151,"from":305,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":305,"label":"SubTerm 1"},{"arrows":"to","to":256,"from":305,"label":"SubTerm 2"},{"arrows":"to","to":284,"from":305,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":306,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":306,"label":"StepsTo CallStep"},{"arrows":"to","to":228,"from":306,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":308,"label":"SubTerm 0"},{"arrows":"to","to":346,"from":308,"label":"SubTerm 1"},{"arrows":"to","to":372,"from":309,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":310,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":310,"label":"SubTerm 1"},{"arrows":"to","to":117,"from":310,"label":"SubTerm 1"},{"arrows":"to","to":133,"from":310,"label":"StepsTo BoringStep"},{"arrows":"to","to":246,"from":312,"label":"SubTerm 2"},{"arrows":"to","to":281,"from":312,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":312,"label":"SubTerm 1"},{"arrows":"to","to":374,"from":312,"label":"StepsTo ReturnStep"},{"arrows":"to","to":314,"from":313,"label":"StepsTo BoringStep"},{"arrows":"to","to":339,"from":314,"label":"SubTerm 0"},{"arrows":"to","to":371,"from":317,"label":"StepsTo BoringStep"},{"arrows":"to","to":127,"from":318,"label":"SubTerm 1"},{"arrows":"to","to":156,"from":318,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":323,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":323,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":325,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":325,"label":"StepsTo ReturnStep"},{"arrows":"to","to":312,"from":325,"label":"SubTerm 1"},{"arrows":"to","to":327,"from":326,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":332,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":332,"label":"SubTerm 0"},{"arrows":"to","to":325,"from":332,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":334,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":334,"label":"SubTerm 1"},{"arrows":"to","to":335,"from":334,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":335,"label":"SubTerm 0"},{"arrows":"to","to":261,"from":335,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":337,"label":"SubTerm 1"},{"arrows":"to","to":295,"from":337,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":341,"label":"SubTerm 0"},{"arrows":"to","to":215,"from":341,"label":"SubTerm 1"},{"arrows":"to","to":220,"from":341,"label":"StepsTo ReturnStep"},{"arrows":"to","to":88,"from":342,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":342,"label":"StepsTo CallStep"},{"arrows":"to","to":114,"from":346,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":347,"label":"SubTerm 0"},{"arrows":"to","to":227,"from":347,"label":"SubTerm 1"},{"arrows":"to","to":269,"from":347,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":352,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":352,"label":"StepsTo BoringStep"},{"arrows":"to","to":254,"from":352,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":363,"label":"StepsTo BoringStep"},{"arrows":"to","to":122,"from":378,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":378,"label":"SubTerm 0"}],"nodes":[{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,16,"Redex"]],"id":0,"label":"List.filter f []"},{"span":null,"env":[["xs|1","[]"],["f|1","fun i -> (i mod 2) = 0"]],"annots":[[6,4,"Redex"],[47,1,"Redex"]],"id":1,"label":"match xs|1 with\n| [] -> []\n| y :: ys -> if f|1 y\n             then y :: (List.filter f|1 ys)\n             else List.filter f|1 ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_30] ; 2]"]],"annots":[[23,1,"Redex"]],"id":3,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["l","[[_30] ; 2]"]],"annots":[[13,1,"Redex"]],"id":4,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,4,"Redex"],[41,1,"Redex"],[68,137,"Redex"],[217,5,"Redex"],[225,5,"Redex"]],"id":6,"label":"List.rev (let seen' =\n            seen @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[39,1,"Redex"],[66,137,"Redex"],[215,5,"Redex"],[223,5,"Redex"]],"id":7,"label":"List.rev (let seen' =\n            [] @ h in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_30]"],["rest'","[2]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":8,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["rest'","[2]"]],"annots":[[9,5,"Redex"]],"id":9,"label":"([_30] , rest')"},{"span":null,"env":[],"annots":[],"id":11,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,208,"Redex"]],"id":12,"label":"List.rev (let seen' = [_30] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":13,"label":"List.rev"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":14,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":15,"label":"is_in"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,7,"Redex"]],"id":16,"label":"2 mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":17,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen|1","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,393,"Redex"]],"id":18,"label":"List.rev (match [2] with\n          | [] -> seen|1\n          | h :: t -> (let seen' =\n                         seen|1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen|1","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,282,"Redex"]],"id":19,"label":"match [2] with\n| [] -> seen|1\n| h :: t -> (let seen' =\n               seen|1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,166,"Redex"]],"id":22,"label":"let seen' = [_30] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":23,"label":"[_30]"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,10,"Redex"],[38,107,"Redex"],[157,5,"Redex"],[165,5,"Redex"]],"id":24,"label":"let seen' = [] @ [_30] in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,10,"Redex"]],"id":25,"label":"[] @ [_30]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":26,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":27,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":28,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":29,"label":"List.rev"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[32,1,"Redex"],[45,5,"Redex"],[53,5,"Redex"]],"id":30,"label":"let rest' =\n  List.filter is_in t in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,45,"Redex"],[69,5,"Redex"],[77,5,"Redex"]],"id":31,"label":"let rest' = List.filter is_in\n                        [2] in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"],["h","[_30]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":32,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h","[_30]"]],"annots":[[0,1,"Redex"]],"id":33,"label":"h"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2]"]],"annots":[[16,5,"Redex"]],"id":34,"label":"helper ([_30] , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":35,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":36,"label":"i"},{"span":null,"env":[],"annots":[],"id":37,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[37,3,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":38,"label":"List.rev (let rest' =\n            if f 2\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[38,1,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":39,"label":"List.rev (let rest' =\n            if (i mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,122,"Redex"]],"id":40,"label":"match [2] with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":null,"env":[],"annots":[],"id":41,"label":"[2]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,20,"Redex"]],"id":42,"label":"helper ([_30] , [2])"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[],"id":43,"label":"([_30] , [2])"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":44,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":45,"label":"@"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[16,2,"Redex"]],"id":46,"label":"List.filter f|1 ys"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[],"id":47,"label":"f|1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":48,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":null,"env":[],"annots":[],"id":51,"label":"[2]"},{"span":null,"env":[],"annots":[],"id":52,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":53,"label":"@"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"]],"annots":[[2,1,"Redex"]],"id":54,"label":"f y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":55,"label":"f"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":56,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":57,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":58,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":59,"label":"h"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,3,"Redex"]],"id":60,"label":"f 2"},{"span":null,"env":[],"annots":[],"id":61,"label":"2"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":62,"label":"seen"},{"span":null,"env":[],"annots":[],"id":63,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest|1","[2]"],["seen|1","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,6,"Redex"],[46,6,"Redex"],[113,6,"Redex"],[122,1,"Redex"],[162,215,"Redex"],[389,5,"Redex"],[397,5,"Redex"]],"id":64,"label":"List.rev (match rest|1 with\n          | [] -> seen|1\n          | h :: t -> (let seen' =\n                         seen|1 @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest|1","[2]"],["seen|1","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,6,"Redex"],[26,6,"Redex"],[73,6,"Redex"],[82,1,"Redex"],[112,146,"Redex"],[270,5,"Redex"],[278,5,"Redex"]],"id":65,"label":"match rest|1 with\n| [] -> seen|1\n| h :: t -> (let seen' =\n               seen|1 @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"],[7,1,"Redex"]],"id":66,"label":"seen @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":67,"label":"h"},{"span":null,"env":[["y","2"]],"annots":[[0,1,"Redex"]],"id":68,"label":"y"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":69,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":70,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":71,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":72,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":73,"label":"0"},{"span":null,"env":[],"annots":[],"id":74,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[],"annots":[[0,9,"Redex"]],"id":75,"label":"[_30] @ 2"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":76,"label":"@"},{"span":null,"env":[["xs","[2]"]],"annots":[[0,2,"Redex"]],"id":78,"label":"xs"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,397,"Redex"]],"id":79,"label":"List.rev (match [[_30] ; 2] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,286,"Redex"]],"id":80,"label":"match [[_30] ; 2] with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["rest'","[2]"]],"annots":[[26,5,"Redex"]],"id":86,"label":"List.rev (helper ([_30] , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,22,"Redex"]],"id":87,"label":"List.rev (helper ([_30] , [2]))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,16,"Redex"]],"id":88,"label":"(2 , List.filter f [])"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,9,"Redex"]],"id":89,"label":"(2 mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":90,"label":"0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["l","[[_30] ; 2]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":91,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_30] ; 2]"]],"annots":[[6,1,"Redex"]],"id":92,"label":"([] , l)"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":93,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":94,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":95,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":96,"label":"0"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h|1","2"]],"annots":[[8,3,"Redex"]],"id":97,"label":"[_30] @ h|1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[138,5,"Redex"],[146,5,"Redex"]],"id":98,"label":"List.rev (let rest' =\n            if true\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[88,5,"Redex"],[96,5,"Redex"]],"id":99,"label":"let rest' =\n  if true\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen|1","[_30]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,1,"Redex"],[38,107,"Redex"],[157,5,"Redex"],[165,5,"Redex"]],"id":100,"label":"let seen' = seen|1 @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,21,"Redex"],[77,5,"Redex"],[85,5,"Redex"]],"id":101,"label":"List.rev (let rest' =\n            List.filter is_in [2] in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[39,18,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":102,"label":"List.rev (let rest' =\n            2 :: (List.filter f []) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[19,18,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":103,"label":"let rest' =\n  2 :: (List.filter f []) in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[["rest'","[2]"]],"annots":[[0,5,"Redex"]],"id":104,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs|1","[]"],["f|1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[46,4,"Redex"],[123,1,"Redex"],[318,5,"Redex"],[326,5,"Redex"]],"id":105,"label":"List.rev (let rest' =\n            2 :: (match xs|1 with\n                  | [] -> []\n                  | y :: ys -> if f|1 y\n                               then y :: (List.filter f|1\n                                                      ys)\n                               else List.filter f|1 ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs|1","[]"],["f|1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[26,4,"Redex"],[83,1,"Redex"],[194,5,"Redex"],[202,5,"Redex"]],"id":106,"label":"let rest' =\n  2 :: (match xs|1 with\n        | [] -> []\n        | y :: ys -> if f|1 y\n                     then y :: (List.filter f|1 ys)\n                     else List.filter f|1 ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,1,"Redex"]],"id":107,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":108,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":109,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":110,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[20,2,"Redex"],[61,1,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":111,"label":"let rest' =\n  match xs with\n  | [] -> []\n  | y :: ys -> if f y\n               then y :: (List.filter f ys)\n               else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,212,"Redex"],[236,5,"Redex"],[244,5,"Redex"]],"id":112,"label":"let rest' = match [2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f\n                                          ys in helper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"]],"annots":[[3,3,"Redex"]],"id":113,"label":"if f 2\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":114,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":115,"label":"0"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"]],"annots":[[5,1,"Redex"]],"id":116,"label":"if f y\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":117,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[22,2,"Redex"]],"id":118,"label":"y :: (List.filter f|1 ys)"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[21,2,"Redex"]],"id":119,"label":"(y , List.filter f|1 ys)"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h","[_30]"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[17,1,"Redex"],[34,107,"Redex"],[153,5,"Redex"],[161,5,"Redex"]],"id":120,"label":"let seen' = [] @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[],"annots":[[0,381,"Redex"]],"id":122,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":null,"env":[],"annots":[],"id":125,"label":"2 :: []"},{"span":null,"env":[],"annots":[],"id":126,"label":"(2 , [])"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t|1","[]"]],"annots":[[0,61,"Redex"]],"id":127,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t|1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t|1","[]"]],"annots":[[12,5,"Redex"],[18,3,"Redex"]],"id":128,"label":"List.filter is_in t|1"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":129,"label":"fun i -> (i mod 2) = 0"},{"span":null,"env":[],"annots":[],"id":130,"label":"[2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[22,141,"Redex"],[175,5,"Redex"],[183,5,"Redex"]],"id":131,"label":"List.rev (let rest' = if true\n                      then y :: (List.filter f ys)\n                      else List.filter f\n                                       ys in helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,111,"Redex"],[135,5,"Redex"],[143,5,"Redex"]],"id":132,"label":"let rest' = if true\n            then y :: (List.filter f ys)\n            else List.filter f\n                             ys in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"]],"annots":[[18,1,"Redex"]],"id":133,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":134,"label":"t"},{"span":{"startLine":2,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_30] ; 2]"]],"annots":[[0,381,"Redex"]],"id":136,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   seen @ h in\n                 let rest' = let is_in =\n                               fun i -> (i mod 2) = 0 in\n                             List.filter is_in\n                                         t in helper (seen' , rest')) in\nList.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[40,2,"Redex"],[101,1,"Redex"],[225,5,"Redex"],[233,5,"Redex"]],"id":137,"label":"List.rev (let rest' =\n            match xs with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,10,"Redex"],[70,137,"Redex"],[219,5,"Redex"],[227,5,"Redex"]],"id":138,"label":"List.rev (let seen' =\n            [] @ [_30] in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[9,53,"Redex"]],"id":139,"label":"List.rev (let rest' = [2] in\n          helper (seen' , rest'))"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[0,5,"Redex"]],"id":140,"label":"0 = 0"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[[0,21,"Redex"]],"id":141,"label":"List.filter is_in [2]"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":142,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[256,6,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":143,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest|1","[2]"]],"annots":[[0,6,"Redex"]],"id":144,"label":"rest|1"},{"span":{"startLine":3,"endLine":9,"endCol":29,"startCol":5},"env":[["rest","[[_30] ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[69,4,"Redex"],[76,1,"Redex"],[106,146,"Redex"],[264,5,"Redex"],[272,5,"Redex"]],"id":145,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               seen @ h in\n             let rest' = let is_in =\n                           fun i -> (i mod 2) = 0 in\n                         List.filter is_in\n                                     t in helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":146,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":147,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":148,"label":"(seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[31,5,"Redex"],[39,5,"Redex"]],"id":149,"label":"let rest' = 2 :: [] in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":150,"label":"helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[["i","2"]],"annots":[[1,1,"Redex"]],"id":151,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,1,"Redex"],[54,2,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":152,"label":"List.rev (let rest' =\n            y :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":153,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"],["rest'","[2]"]],"annots":[[18,5,"Redex"],[26,5,"Redex"]],"id":154,"label":"List.rev (helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[14,2,"Redex"]],"id":155,"label":"List.filter f ys"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":156,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":157,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[["is_in","fun i -> (i mod 2) = 0"]],"annots":[],"id":158,"label":"is_in"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":161,"label":"t"},{"span":null,"env":[],"annots":[],"id":162,"label":"[2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[["l","[[_30] ; 2]"]],"annots":[[6,1,"Redex"]],"id":163,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_30] ; 2]"]],"annots":[[0,1,"Redex"]],"id":164,"label":"l"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[39,1,"Redex"],[137,5,"Redex"],[145,5,"Redex"]],"id":165,"label":"List.rev (let rest' =\n            if f y\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":166,"label":"@"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"],["rest'","[2]"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":167,"label":"helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":168,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":169,"label":"is_in"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen|1","[_30]"],["h|1","2"]],"annots":[[0,6,"Redex"],[9,3,"Redex"]],"id":171,"label":"seen|1 @ h|1"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":172,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":173,"label":"is_in"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":174,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":175,"label":"2"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[2,1,"Redex"]],"id":176,"label":"f y"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[],"id":177,"label":"f"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":178,"label":"y :: (List.filter f ys)"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":179,"label":"List.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":180,"label":"is_in"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[["seen'","[_30]"]],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":181,"label":"(seen' , rest')"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":182,"label":"y"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[["l","[[_30] ; 2]"]],"annots":[[0,1,"Redex"]],"id":185,"label":"l"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":186,"label":"@"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_30]"]],"annots":[[0,5,"Redex"]],"id":187,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":188,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":189,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[],"id":190,"label":"([] , [[_30] ; 2])"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":192,"label":"seen"},{"span":{"startLine":2,"endLine":9,"endCol":29,"startCol":19},"env":[],"annots":[],"id":193,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":194,"label":"rest'"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":195,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":21},"env":[],"annots":[[6,1,"Redex"]],"id":196,"label":"([] , l)"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[["i","2"]],"annots":[[0,1,"Redex"]],"id":197,"label":"i mod 2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,107,"Redex"],[123,6,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":198,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":199,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[["xs","[2]"],["f","fun i -> (i mod 2) = 0"]],"annots":[[6,2,"Redex"],[43,1,"Redex"]],"id":200,"label":"match xs with\n| [] -> []\n| y :: ys -> if f y\n             then y :: (List.filter f ys)\n             else List.filter f ys"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":201,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":202,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":203,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":204,"label":"_30"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,170,"Redex"],[226,5,"Redex"],[234,5,"Redex"]],"id":205,"label":"List.rev (let rest' =\n            match [2] with\n            | [] -> []\n            | y :: ys -> if f y\n                         then y :: (List.filter f ys)\n                         else List.filter f ys in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":206,"label":"[_30]"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":207,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":208,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":209,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":210,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[0,59,"Redex"]],"id":211,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":212,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":213,"label":"(i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["rest","[[_30] ; 2]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[16,4,"Redex"],[44,4,"Redex"],[109,4,"Redex"],[116,1,"Redex"],[156,215,"Redex"],[383,5,"Redex"],[391,5,"Redex"]],"id":214,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         seen @ h in\n                       let rest' = let is_in =\n                                     fun i ->\n                                       (i mod 2) = 0 in\n                                   List.filter is_in\n                                               t in helper (seen' , rest')))"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f|1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[19,161,"Redex"],[192,5,"Redex"],[200,5,"Redex"]],"id":215,"label":"let rest' =\n  2 :: (match [] with\n        | [] -> []\n        | y :: ys -> if f|1 y\n                     then y :: (List.filter f|1 ys)\n                     else List.filter f|1 ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":218,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":219,"label":"i"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[63,5,"Redex"],[71,5,"Redex"]],"id":220,"label":"List.rev (let rest' =\n            2 :: [] in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":222,"label":"seen'"},{"span":null,"env":[["xs|1","[]"],["f|1","fun i -> (i mod 2) = 0"]],"annots":[[12,4,"Redex"],[65,1,"Redex"]],"id":223,"label":"2 :: (match xs|1 with\n      | [] -> []\n      | y :: ys -> if f|1 y\n                   then y :: (List.filter f|1 ys)\n                   else List.filter f|1 ys)"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[5,153,"Redex"]],"id":224,"label":"2 :: (match [] with\n      | [] -> []\n      | y :: ys -> if f|1 y\n                   then y :: (List.filter f|1 ys)\n                   else List.filter f|1 ys)"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["seen|1","[_30]"]],"annots":[[0,6,"Redex"],[9,1,"Redex"]],"id":225,"label":"seen|1 @ h"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":226,"label":"h"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":227,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[0,25,"Redex"]],"id":228,"label":"helper ([] , [[_30] ; 2])"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[[0,28,"Redex"]],"id":229,"label":"removeDuplicates [[_30] ; 2]"},{"span":null,"env":[],"annots":[],"id":230,"label":"[[_30] ; 2]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["l","[[_30] ; 2]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":231,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":232,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":233,"label":"helper"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[12,4,"Redex"],[19,1,"Redex"],[36,107,"Redex"],[147,6,"Redex"],[155,5,"Redex"],[163,5,"Redex"]],"id":234,"label":"let seen' = seen @ h in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":236,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":237,"label":"helper"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":238,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":239,"label":"2"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,1,"Redex"],[20,2,"Redex"]],"id":240,"label":"y :: (List.filter f ys)"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":241,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":243,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":244,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":245,"label":"2"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[7,1,"Redex"]],"id":246,"label":"if f|1 y\nthen y :: (List.filter f|1 ys)\nelse List.filter f|1 ys"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":36},"env":[],"annots":[[1,1,"Redex"]],"id":247,"label":"(i mod 2) = 0"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[19,1,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":248,"label":"let rest' =\n  if f y\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["y","2"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[17,3,"Redex"],[87,5,"Redex"],[95,5,"Redex"]],"id":249,"label":"let rest' =\n  if f 2\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[0,41,"Redex"]],"id":250,"label":"let rest' = [2] in\nhelper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,5,"Redex"]],"id":251,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":252,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[14,1,"Redex"],[34,2,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":253,"label":"let rest' =\n  y :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,2,"Redex"],[49,5,"Redex"],[57,5,"Redex"]],"id":254,"label":"let rest' =\n  2 :: (List.filter f ys) in\nhelper (seen' , rest')"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[14,2,"Redex"]],"id":256,"label":"List.filter f ys"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":21},"env":[["h","[_30]"]],"annots":[[5,1,"Redex"]],"id":257,"label":"[] @ h"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[8,5,"Redex"],[16,5,"Redex"]],"id":258,"label":"helper (seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":259,"label":"helper"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["h|1","2"],["t|1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[20,3,"Redex"],[39,109,"Redex"],[160,5,"Redex"],[168,5,"Redex"]],"id":260,"label":"let seen' = [_30] @ h|1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t|1 in helper (seen' , rest')"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["t|1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,9,"Redex"],[37,109,"Redex"],[158,5,"Redex"],[166,5,"Redex"]],"id":261,"label":"let seen' = [_30] @ 2 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t|1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":262,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":263,"label":"i mod 2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":266,"label":"i mod 2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[37,9,"Redex"],[147,5,"Redex"],[155,5,"Redex"]],"id":267,"label":"List.rev (let rest' =\n            if (2 mod 2) = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[37,5,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":268,"label":"List.rev (let rest' =\n            if 0 = 0\n            then y :: (List.filter f ys)\n            else List.filter f ys in\n          helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["is_in","fun i -> (i mod 2) = 0"],["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[52,1,"Redex"],[75,5,"Redex"],[83,5,"Redex"]],"id":269,"label":"List.rev (let rest' =\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":270,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":271,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":272,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":273,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":17},"env":[],"annots":[[1,5,"Redex"],[9,5,"Redex"]],"id":274,"label":"(seen' , rest')"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[],"annots":[[0,5,"Redex"]],"id":275,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":276,"label":"List.filter"},{"span":{"startLine":6,"endLine":9,"endCol":29,"startCol":9},"env":[["seen|1","[_30]"],["h|1","2"],["t|1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,6,"Redex"],[21,3,"Redex"],[40,109,"Redex"],[161,5,"Redex"],[169,5,"Redex"]],"id":277,"label":"let seen' = seen|1 @ h|1 in\nlet rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t|1 in helper (seen' , rest')"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[17,5,"Redex"],[89,5,"Redex"],[97,5,"Redex"]],"id":278,"label":"let rest' =\n  if 0 = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,5,"Redex"]],"id":279,"label":"if 0 = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[["xs|1","[]"]],"annots":[[0,4,"Redex"]],"id":280,"label":"xs|1"},{"span":null,"env":[],"annots":[],"id":281,"label":"[]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[20,2,"Redex"]],"id":282,"label":"2 :: (List.filter f ys)"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[17,9,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":283,"label":"let rest' =\n  if (2 mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[3,9,"Redex"]],"id":284,"label":"if (2 mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":null,"env":[],"annots":[],"id":285,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":286,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[12,5,"Redex"],[18,1,"Redex"]],"id":287,"label":"List.filter is_in t"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[18,1,"Redex"],[97,5,"Redex"],[105,5,"Redex"]],"id":288,"label":"let rest' =\n  if (i mod 2) = 0\n  then y :: (List.filter f ys)\n  else List.filter f ys in\nhelper (seen' , rest')"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[[_30] ; 2]"]],"annots":[[0,4,"Redex"]],"id":289,"label":"rest"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[0,58,"Redex"]],"id":290,"label":"if true\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":291,"label":"helper"},{"span":null,"env":[["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":292,"label":"(y , List.filter f ys)"},{"span":null,"env":[],"annots":[],"id":293,"label":"[]"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[19,2,"Redex"]],"id":294,"label":"(2 , List.filter f ys)"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":295,"label":"y"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":296,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":297,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":298,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":299,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":43,"startCol":42},"env":[],"annots":[],"id":300,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,107,"Redex"],[131,5,"Redex"],[139,5,"Redex"]],"id":301,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t in helper (seen' , rest')"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["seen|1","[_30]"],["h|1","2"],["t|1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,6,"Redex"],[43,3,"Redex"],[72,139,"Redex"],[223,5,"Redex"],[231,5,"Redex"]],"id":302,"label":"List.rev (let seen' =\n            seen|1 @ h|1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t|1 in helper (seen' , rest'))"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":304,"label":"is_in"},{"span":null,"env":[["i","2"],["y","2"],["f","fun i -> (i mod 2) = 0"],["ys","[]"]],"annots":[[4,1,"Redex"]],"id":305,"label":"if (i mod 2) = 0\nthen y :: (List.filter f ys)\nelse List.filter f ys"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[9,27,"Redex"]],"id":306,"label":"List.rev (helper ([] , [[_30] ; 2]))"},{"span":null,"env":[],"annots":[],"id":307,"label":"[_30]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[],"annots":[[0,59,"Redex"]],"id":308,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":null,"env":[],"annots":[],"id":309,"label":"[2]"},{"span":{"startLine":7,"endLine":8,"endCol":40,"startCol":21},"env":[["t","[2]"]],"annots":[[0,59,"Redex"]],"id":310,"label":"let is_in =\n  fun i -> (i mod 2) = 0 in\nList.filter is_in t"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t","[2]"]],"annots":[[0,1,"Redex"]],"id":311,"label":"t"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[0,127,"Redex"]],"id":312,"label":"match [] with\n| [] -> []\n| y :: ys -> if f|1 y\n             then y :: (List.filter f|1 ys)\n             else List.filter f|1 ys"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen|1","[_30]"]],"annots":[[0,6,"Redex"]],"id":313,"label":"seen|1"},{"span":null,"env":[],"annots":[],"id":314,"label":"[_30]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":315,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[["seen|1","[_30]"]],"annots":[[0,6,"Redex"]],"id":316,"label":"seen|1"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[["h|1","2"]],"annots":[[0,3,"Redex"]],"id":317,"label":"h|1"},{"span":{"startLine":7,"endLine":9,"endCol":29,"startCol":9},"env":[["t|1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[12,109,"Redex"],[133,5,"Redex"],[141,5,"Redex"]],"id":318,"label":"let rest' = let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in\n                        t|1 in helper (seen' , rest')"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":319,"label":"t"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":321,"label":"rest"},{"span":{"startLine":10,"endLine":10,"endCol":19,"startCol":13},"env":[],"annots":[[0,6,"Redex"]],"id":322,"label":"helper"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[4,1,"Redex"]],"id":323,"label":"f|1 y"},{"span":null,"env":[],"annots":[],"id":324,"label":"true"},{"span":null,"env":[["f|1","fun i -> (i mod 2) = 0"]],"annots":[[5,147,"Redex"]],"id":325,"label":"(2 , match [] with\n     | [] -> []\n     | y :: ys -> if f|1 y\n                  then y :: (List.filter f|1 ys)\n                  else List.filter f|1 ys)"},{"span":null,"env":[["ys","[]"]],"annots":[[0,2,"Redex"]],"id":326,"label":"ys"},{"span":null,"env":[],"annots":[],"id":327,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":328,"label":"t"},{"span":null,"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":329,"label":"removeDuplicates"},{"span":null,"env":[],"annots":[],"id":330,"label":"2"},{"span":null,"env":[["xs|1","[]"],["f|1","fun i -> (i mod 2) = 0"]],"annots":[[11,4,"Redex"],[62,1,"Redex"]],"id":332,"label":"(2 , match xs|1 with\n     | [] -> []\n     | y :: ys -> if f|1 y\n                  then y :: (List.filter f|1 ys)\n                  else List.filter f|1 ys)"},{"span":null,"env":[],"annots":[],"id":333,"label":"List.filter"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["h|1","2"],["t|1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[42,3,"Redex"],[71,139,"Redex"],[222,5,"Redex"],[230,5,"Redex"]],"id":334,"label":"List.rev (let seen' =\n            [_30] @ h|1 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t|1 in helper (seen' , rest'))"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t|1","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[[34,9,"Redex"],[69,139,"Redex"],[220,5,"Redex"],[228,5,"Redex"]],"id":335,"label":"List.rev (let seen' =\n            [_30] @ 2 in\n          let rest' = let is_in =\n                        fun i -> (i mod 2) = 0 in\n                      List.filter is_in\n                                  t|1 in helper (seen' , rest'))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":336,"label":"rest"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[1,1,"Redex"],[19,2,"Redex"]],"id":337,"label":"(y , List.filter f ys)"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":26},"env":[],"annots":[],"id":338,"label":"@"},{"span":null,"env":[],"annots":[],"id":339,"label":"_30"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":340,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f|1","fun i -> (i mod 2) = 0"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[39,255,"Redex"],[316,5,"Redex"],[324,5,"Redex"]],"id":341,"label":"List.rev (let rest' =\n            2 :: (match [] with\n                  | [] -> []\n                  | y :: ys -> if f|1 y\n                               then y :: (List.filter f|1\n                                                      ys)\n                               else List.filter f|1 ys) in\n          helper (seen' , rest'))"},{"span":null,"env":[["f","fun i -> (i mod 2) = 0"]],"annots":[[5,18,"Redex"]],"id":342,"label":"2 :: (List.filter f [])"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":343,"label":"List.filter"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":344,"label":"List.filter"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":345,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":31},"env":[],"annots":[],"id":346,"label":"fun i -> (i mod 2) = 0"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["t","[2]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[34,83,"Redex"],[139,5,"Redex"],[147,5,"Redex"]],"id":347,"label":"List.rev (let rest' =\n            let is_in =\n              fun i -> (i mod 2) = 0 in\n            List.filter is_in t in\n          helper (seen' , rest'))"},{"span":null,"env":[],"annots":[],"id":348,"label":"_30"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":350,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":29,"startCol":28},"env":[],"annots":[[0,1,"Redex"]],"id":351,"label":"h"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":3},"env":[["f","fun i -> (i mod 2) = 0"],["ys","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"],["seen'","[_30]"]],"annots":[[54,2,"Redex"],[79,5,"Redex"],[87,5,"Redex"]],"id":352,"label":"List.rev (let rest' =\n            2 :: (List.filter f ys) in\n          helper (seen' , rest'))"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[],"annots":[[0,6,"Redex"]],"id":353,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":9},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 seen @ h in\n               let rest' = let is_in =\n                             fun i -> (i mod 2) = 0 in\n                           List.filter is_in\n                                       t in helper (seen' , rest'))"]],"annots":[],"id":354,"label":"helper"},{"span":null,"env":[],"annots":[],"id":355,"label":"[[_30] ; 2]"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":356,"label":"List.filter"},{"span":{"startLine":6,"endLine":6,"endCol":25,"startCol":21},"env":[],"annots":[[0,4,"Redex"]],"id":357,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":358,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":359,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":360,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":361,"label":"rest'"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":362,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":22,"startCol":17},"env":[["seen'","[_30]"]],"annots":[[0,5,"Redex"]],"id":363,"label":"seen'"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":364,"label":"List.filter"},{"span":null,"env":[],"annots":[[0,2,"Redex"]],"id":365,"label":"ys"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":366,"label":"i"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[],"annots":[[0,1,"Redex"]],"id":367,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":48,"startCol":47},"env":[],"annots":[],"id":368,"label":"0"},{"span":{"startLine":8,"endLine":8,"endCol":32,"startCol":21},"env":[],"annots":[],"id":369,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":370,"label":"[[_30] ; 2]"},{"span":null,"env":[],"annots":[],"id":371,"label":"2"},{"span":null,"env":[],"annots":[],"id":372,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":25},"env":[],"annots":[[0,1,"Redex"]],"id":373,"label":"l"},{"span":null,"env":[],"annots":[],"id":374,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":375,"label":"rest'"},{"span":null,"env":[],"annots":[],"id":376,"label":"List.filter"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen|1","[_30]"]],"annots":[[0,6,"Redex"]],"id":377,"label":"seen|1"},{"span":{"startLine":1,"endLine":10,"endCol":26,"startCol":22},"env":[],"annots":[],"id":378,"label":"fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             seen @ h in\n                           let rest' = let is_in =\n                                         fun i ->\n                                           (i mod 2) = 0 in\n                                       List.filter is_in\n                                                   t in helper (seen' , rest')) in\n          List.rev (helper ([] , l)))"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":379,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":380,"label":"i"},{"span":{"startLine":7,"endLine":7,"endCol":37,"startCol":36},"env":[],"annots":[[0,1,"Redex"]],"id":381,"label":"i"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":382,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":383,"label":"rest'"},{"span":{"startLine":9,"endLine":9,"endCol":29,"startCol":24},"env":[],"annots":[[0,5,"Redex"]],"id":384,"label":"rest'"},{"span":{"startLine":8,"endLine":8,"endCol":38,"startCol":33},"env":[],"annots":[[0,5,"Redex"]],"id":385,"label":"is_in"},{"span":{"startLine":10,"endLine":10,"endCol":11,"startCol":3},"env":[],"annots":[],"id":386,"label":"List.rev"},{"span":null,"env":[],"annots":[],"id":387,"label":"List.filter"},{"span":null,"env":[],"annots":[],"id":388,"label":"2"},{"span":{"startLine":8,"endLine":8,"endCol":40,"startCol":39},"env":[["t|1","[]"]],"annots":[[0,3,"Redex"]],"id":389,"label":"t|1"},{"span":{"startLine":10,"endLine":10,"endCol":23,"startCol":21},"env":[],"annots":[],"id":390,"label":"[]"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":391,"label":"seen"}]}