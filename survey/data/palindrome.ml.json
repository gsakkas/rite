{"root":23,"result":"stuck","reason":"Type error: stuck because 'a -> 'b is incompatible with char list","bad":37,"stuck":25,"edges":[{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":61,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":7,"label":"StepsTo ReturnStep"},{"arrows":"to","to":38,"from":9,"label":"StepsTo ReturnStep"},{"arrows":"to","to":44,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":16,"label":"StepsTo CallStep"},{"arrows":"to","to":34,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":17,"label":"SubTerm 2"},{"arrows":"to","to":58,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":19,"label":"StepsTo BoringStep"},{"arrows":"to","to":10,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":23,"label":"StepsTo CallStep"},{"arrows":"to","to":1,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":25,"label":"SubTerm 2"},{"arrows":"to","to":37,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 2"},{"arrows":"to","to":56,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":50,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":35,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":43,"label":"SubTerm 2"},{"arrows":"to","to":49,"from":43,"label":"StepsTo ReturnStep"},{"arrows":"to","to":1,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":49,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":60,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":56,"label":"StepsTo CallStep"},{"arrows":"to","to":32,"from":56,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":56,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":14,"endLine":14,"endCol":12,"startCol":8},"env":[],"annots":[],"id":1,"label":"true"},{"span":{"startLine":13,"endLine":13,"endCol":20,"startCol":19},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[12,1,"Redex"]],"id":2,"label":"listReverse w = w"},{"span":{"startLine":13,"endLine":13,"endCol":25,"startCol":24},"env":[["w","['a' ; 'b']"]],"annots":[[0,1,"Redex"]],"id":3,"label":"w"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":23},"env":[],"annots":[],"id":4,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":23},"env":[],"annots":[],"id":5,"label":"$x"},{"span":{"startLine":10,"endLine":10,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[0,9,"Redex"]],"id":7,"label":"helper [] = w"},{"span":{"startLine":10,"endLine":10,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,9,"Redex"]],"id":9,"label":"helper []"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":18},"env":[],"annots":[],"id":10,"label":"fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":23},"env":[],"annots":[],"id":11,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":17,"endLine":17,"endCol":29,"startCol":26},"env":[],"annots":[],"id":13,"label":"'b'"},{"span":{"startLine":13,"endLine":13,"endCol":20,"startCol":19},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[12,1,"Redex"]],"id":14,"label":"listReverse w"},{"span":{"startLine":13,"endLine":13,"endCol":18,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"]],"annots":[],"id":15,"label":"listReverse"},{"span":{"startLine":13,"endLine":13,"endCol":20,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"]],"annots":[[0,23,"Redex"]],"id":16,"label":"listReverse ['a' ; 'b']"},{"span":{"startLine":9,"endLine":9,"endCol":37,"startCol":17},"env":[],"annots":[],"id":17,"label":"helper (hd :: xs) tl"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":25},"env":[],"annots":[],"id":18,"label":"hd :: xs"},{"span":{"startLine":7,"endLine":10,"endCol":15,"startCol":3},"env":[],"annots":[[0,139,"Redex"]],"id":19,"label":"let rec helper =\n  fun xs ->\n    function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl in\nhelper []"},{"span":null,"env":[],"annots":[],"id":20,"label":"['a' ; 'b']"},{"span":{"startLine":17,"endLine":17,"endCol":19,"startCol":9},"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[],"id":22,"label":"palindrome"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":9},"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[[0,22,"Redex"]],"id":23,"label":"palindrome ['a' ; 'b']"},{"span":{"startLine":7,"endLine":10,"endCol":15,"startCol":3},"env":[["w","['a' ; 'b']"]],"annots":[[3,165,"Redex"]],"id":24,"label":"if (let rec helper =\n      fun xs ->\n        function\n          | [] -> xs\n          | hd :: tl -> helper (hd :: xs)\n                               tl in\n    helper []) = w then true else false"},{"span":{"startLine":13,"endLine":13,"endCol":25,"startCol":7},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[3,109,"Redex"]],"id":25,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = ['a' ; 'b'] then true else false"},{"span":{"startLine":17,"endLine":17,"endCol":24,"startCol":21},"env":[],"annots":[],"id":26,"label":"'a'"},{"span":{"startLine":10,"endLine":10,"endCol":15,"startCol":6},"env":[],"annots":[[0,9,"Redex"]],"id":27,"label":"helper []"},{"span":{"startLine":10,"endLine":10,"endCol":12,"startCol":6},"env":[],"annots":[],"id":28,"label":"helper"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":29,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":30,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":13,"endLine":13,"endCol":20,"startCol":19},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[15,1,"Redex"]],"id":31,"label":"if listReverse w = w\nthen true\nelse false"},{"span":{"startLine":15,"endLine":15,"endCol":13,"startCol":8},"env":[],"annots":[],"id":32,"label":"false"},{"span":{"startLine":13,"endLine":13,"endCol":20,"startCol":19},"env":[["w","['a' ; 'b']"]],"annots":[[0,1,"Redex"]],"id":33,"label":"w"},{"span":null,"env":[],"annots":[],"id":34,"label":"['a' ; 'b']"},{"span":{"startLine":13,"endLine":13,"endCol":20,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[0,23,"Redex"]],"id":35,"label":"listReverse ['a' ; 'b'] = w"},{"span":{"startLine":7,"endLine":10,"endCol":15,"startCol":3},"env":[["w","['a' ; 'b']"]],"annots":[[0,147,"Redex"]],"id":36,"label":"(let rec helper =\n   fun xs ->\n     function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl in\n helper []) = w"},{"span":{"startLine":13,"endLine":13,"endCol":25,"startCol":7},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,100,"Redex"]],"id":37,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = ['a' ; 'b']"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":23},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":38,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":7,"endLine":9,"endCol":37,"startCol":23},"env":[],"annots":[],"id":39,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":13,"endLine":13,"endCol":25,"startCol":24},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[89,1,"Redex"]],"id":41,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = w"},{"span":{"startLine":10,"endLine":10,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[3,9,"Redex"]],"id":43,"label":"if helper [] = w\nthen true\nelse false"},{"span":{"startLine":10,"endLine":10,"endCol":12,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":44,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":37,"startCol":35},"env":[],"annots":[],"id":45,"label":"tl"},{"span":{"startLine":13,"endLine":13,"endCol":25,"startCol":24},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[101,1,"Redex"]],"id":49,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = w\nthen true\nelse false"},{"span":{"startLine":17,"endLine":17,"endCol":29,"startCol":26},"env":[],"annots":[],"id":50,"label":"'b'"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":25},"env":[],"annots":[],"id":51,"label":"(hd , xs)"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":31},"env":[],"annots":[],"id":52,"label":"xs"},{"span":{"startLine":17,"endLine":17,"endCol":24,"startCol":21},"env":[],"annots":[],"id":53,"label":"'a'"},{"span":{"startLine":10,"endLine":10,"endCol":15,"startCol":13},"env":[],"annots":[[0,2,"Redex"]],"id":54,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":20,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[3,23,"Redex"]],"id":56,"label":"if listReverse ['a' ; 'b'] = w\nthen true\nelse false"},{"span":{"startLine":10,"endLine":10,"endCol":15,"startCol":13},"env":[],"annots":[[0,2,"Redex"]],"id":57,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":23,"startCol":17},"env":[],"annots":[],"id":58,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":25},"env":[],"annots":[],"id":60,"label":"hd"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":13},"env":[],"annots":[],"id":61,"label":"xs"}]}