{"root":15,"result":"stuck","reason":"Type error: stuck because `function' is incompatible with `list'","bad":29,"stuck":23,"edges":[{"arrows":"to","to":3,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":38,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":13,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":6,"label":"StepsTo ReturnStep"},{"arrows":"to","to":2,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":13,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":15,"label":"StepsTo CallStep"},{"arrows":"to","to":59,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":20,"label":"StepsTo CallStep"},{"arrows":"to","to":30,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":23,"label":"SubTerm 2"},{"arrows":"to","to":29,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":31,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":39,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":34,"label":"StepsTo CallStep"},{"arrows":"to","to":41,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":35,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":35,"label":"SubTerm 2"},{"arrows":"to","to":34,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":40,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":43,"label":"SubTerm 2"},{"arrows":"to","to":23,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":47,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":46,"label":"StepsTo ReturnStep"},{"arrows":"to","to":29,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":36,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":49,"label":"SubTerm 2"},{"arrows":"to","to":50,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":51,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":13},"env":[],"annots":[[0,2,"Redex"]],"id":1,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":33,"startCol":25},"env":[],"annots":[],"id":2,"label":"(hd , xs)"},{"span":{"startLine":8,"endLine":8,"endCol":27,"startCol":25},"env":[],"annots":[],"id":3,"label":"hd"},{"span":{"startLine":6,"endLine":9,"endCol":15,"startCol":3},"env":[["w","['a' ; 'b']"]],"annots":[[3,165,"Redex"]],"id":4,"label":"if (let rec helper =\n      fun xs ->\n        function\n          | [] -> xs\n          | hd :: tl -> helper (hd :: xs)\n                               tl in\n    helper []) = w then true else false"},{"span":{"startLine":13,"endLine":13,"endCol":12,"startCol":8},"env":[],"annots":[],"id":5,"label":"true"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[3,9,"Redex"]],"id":6,"label":"if helper [] = w\nthen true\nelse false"},{"span":{"startLine":14,"endLine":14,"endCol":13,"startCol":8},"env":[],"annots":[],"id":7,"label":"false"},{"span":{"startLine":9,"endLine":9,"endCol":12,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":8,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":33,"startCol":25},"env":[],"annots":[],"id":10,"label":"hd :: xs"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":18},"env":[],"annots":[],"id":11,"label":"fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":23},"env":[],"annots":[],"id":12,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[0,9,"Redex"]],"id":13,"label":"helper [] = w"},{"span":{"startLine":16,"endLine":16,"endCol":30,"startCol":20},"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[],"id":15,"label":"palindrome ['a' ; 'b']"},{"span":null,"env":[],"annots":[],"id":17,"label":"['a' ; 'b']"},{"span":{"startLine":16,"endLine":16,"endCol":24,"startCol":21},"env":[],"annots":[],"id":18,"label":"'a'"},{"span":{"startLine":12,"endLine":12,"endCol":20,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"]],"annots":[[0,23,"Redex"]],"id":20,"label":"listReverse ['a' ; 'b']"},{"span":{"startLine":12,"endLine":12,"endCol":18,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"]],"annots":[],"id":21,"label":"listReverse"},{"span":{"startLine":12,"endLine":12,"endCol":25,"startCol":7},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[3,109,"Redex"]],"id":23,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = ['a' ; 'b'] then true else false"},{"span":{"startLine":8,"endLine":8,"endCol":37,"startCol":17},"env":[],"annots":[],"id":24,"label":"helper (hd :: xs) tl"},{"span":{"startLine":8,"endLine":8,"endCol":23,"startCol":17},"env":[],"annots":[],"id":25,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":13},"env":[],"annots":[[7,2,"Redex"]],"id":26,"label":"helper []"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":13},"env":[],"annots":[[0,2,"Redex"]],"id":27,"label":"[]"},{"span":{"startLine":6,"endLine":9,"endCol":15,"startCol":3},"env":[],"annots":[[0,139,"LastRedex"],[0,139,"Redex"]],"id":28,"label":"let rec helper =\n  fun xs ->\n    function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl in\nhelper []"},{"span":{"startLine":12,"endLine":12,"endCol":25,"startCol":7},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,100,"Redex"]],"id":29,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = ['a' ; 'b']"},{"span":null,"env":[],"annots":[],"id":30,"label":"['a' ; 'b']"},{"span":{"startLine":12,"endLine":12,"endCol":20,"startCol":19},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[15,1,"Redex"],[0,41,"LastRedex"]],"id":31,"label":"if listReverse w = w\nthen true\nelse false"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":32,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":33,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":12,"endLine":12,"endCol":20,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[0,23,"Redex"]],"id":34,"label":"listReverse ['a' ; 'b'] = w"},{"span":{"startLine":12,"endLine":12,"endCol":20,"startCol":7},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[3,23,"Redex"]],"id":35,"label":"if listReverse ['a' ; 'b'] = w\nthen true\nelse false"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":23},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":36,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":23},"env":[],"annots":[],"id":37,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":6,"endLine":9,"endCol":15,"startCol":3},"env":[["w","['a' ; 'b']"]],"annots":[[0,147,"Redex"]],"id":38,"label":"(let rec helper =\n   fun xs ->\n     function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl in\n helper []) = w"},{"span":{"startLine":12,"endLine":12,"endCol":20,"startCol":19},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[12,1,"Redex"]],"id":39,"label":"listReverse w = w"},{"span":{"startLine":12,"endLine":12,"endCol":20,"startCol":19},"env":[["listReverse","fun l ->\n  (let rec helper =\n     fun xs ->\n       function\n         | [] -> xs\n         | hd :: tl -> helper (hd :: xs)\n                              tl in\n   helper [])"],["w","['a' ; 'b']"]],"annots":[[12,1,"Redex"]],"id":40,"label":"listReverse w"},{"span":{"startLine":12,"endLine":12,"endCol":25,"startCol":24},"env":[["w","['a' ; 'b']"]],"annots":[[0,1,"Redex"]],"id":41,"label":"w"},{"span":{"startLine":16,"endLine":16,"endCol":24,"startCol":21},"env":[],"annots":[],"id":42,"label":"'a'"},{"span":{"startLine":12,"endLine":12,"endCol":25,"startCol":24},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[3,95,"LastRedex"],[101,1,"Redex"]],"id":43,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = w then true else false"},{"span":{"startLine":16,"endLine":16,"endCol":29,"startCol":26},"env":[],"annots":[],"id":44,"label":"'b'"},{"span":{"startLine":9,"endLine":9,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,9,"Redex"]],"id":46,"label":"helper []"},{"span":{"startLine":12,"endLine":12,"endCol":25,"startCol":24},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[0,86,"LastRedex"],[89,1,"Redex"]],"id":47,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = w"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":23},"env":[],"annots":[],"id":49,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":13},"env":[],"annots":[],"id":50,"label":"xs"},{"span":{"startLine":12,"endLine":12,"endCol":20,"startCol":19},"env":[["w","['a' ; 'b']"]],"annots":[[0,1,"Redex"]],"id":51,"label":"w"},{"span":{"startLine":6,"endLine":8,"endCol":37,"startCol":23},"env":[],"annots":[],"id":55,"label":"$x"},{"span":{"startLine":8,"endLine":8,"endCol":37,"startCol":35},"env":[],"annots":[],"id":57,"label":"tl"},{"span":{"startLine":16,"endLine":16,"endCol":29,"startCol":26},"env":[],"annots":[],"id":58,"label":"'b'"},{"span":{"startLine":16,"endLine":16,"endCol":19,"startCol":9},"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[],"id":59,"label":"palindrome"},{"span":{"startLine":8,"endLine":8,"endCol":33,"startCol":31},"env":[],"annots":[],"id":60,"label":"xs"},{"span":{"startLine":9,"endLine":9,"endCol":12,"startCol":6},"env":[],"annots":[],"id":61,"label":"helper"}]}