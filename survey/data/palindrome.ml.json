{"root":23,"result":"stuck","reason":"Type error : could not match 't21 -> 't22 with char list","bad":34,"stuck":35,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 2"},{"arrows":"to","to":25,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":8,"label":"StepsTo ReturnStep"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":10,"label":"SubTerm 2"},{"arrows":"to","to":48,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":14,"label":"StepsTo CallStep"},{"arrows":"to","to":26,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":16,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":17,"label":"StepsTo ReturnStep"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":21,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":23,"label":"StepsTo CallStep"},{"arrows":"to","to":50,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":25,"label":"StepsTo ReturnStep"},{"arrows":"to","to":52,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":39,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":35,"label":"SubTerm 2"},{"arrows":"to","to":34,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":37,"label":"StepsTo CallStep"},{"arrows":"to","to":52,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":40,"label":"SubTerm 2"},{"arrows":"to","to":16,"from":40,"label":"StepsTo CallStep"},{"arrows":"to","to":37,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":42,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":45,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":44,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":60,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":60,"label":"StepsTo BoringStep"},{"arrows":"to","to":46,"from":60,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":8,"endLine":8,"endCol":20,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","['a' ; 'b']"]],"annots":[[12,1,"Redex"]],"id":0,"label":"listReverse w"},{"span":{"startLine":8,"endLine":8,"endCol":18,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"]],"annots":[],"id":1,"label":"listReverse"},{"span":{"startLine":4,"endLine":4,"endCol":33,"startCol":25},"env":[],"annots":[[1,2,"Redex"],[6,2,"Redex"]],"id":2,"label":"(hd , xs)"},{"span":{"startLine":4,"endLine":4,"endCol":27,"startCol":25},"env":[],"annots":[[0,2,"Redex"]],"id":3,"label":"hd"},{"span":{"startLine":5,"endLine":5,"endCol":12,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":5,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":12,"startCol":8},"env":[],"annots":[],"id":7,"label":"true"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[3,9,"Redex"],[15,1,"Redex"]],"id":8,"label":"if helper [] = w\nthen true\nelse false"},{"span":{"startLine":10,"endLine":10,"endCol":13,"startCol":8},"env":[],"annots":[],"id":9,"label":"false"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":10,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[[0,2,"Redex"]],"id":11,"label":"$x"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":18},"env":[],"annots":[],"id":12,"label":"fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[],"id":13,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":8,"endLine":8,"endCol":20,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"]],"annots":[[0,23,"Redex"]],"id":14,"label":"listReverse ['a' ; 'b']"},{"span":null,"env":[],"annots":[],"id":15,"label":"['a' ; 'b']"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["w","['a' ; 'b']"]],"annots":[[3,165,"Redex"],[171,1,"Redex"]],"id":16,"label":"if (let rec helper =\n      fun xs ->\n        function\n          | [] -> xs\n          | hd :: tl -> helper (hd :: xs)\n                               tl in\n    helper []) = w then true else false"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,9,"Redex"]],"id":17,"label":"helper []"},{"span":{"startLine":4,"endLine":4,"endCol":37,"startCol":17},"env":[],"annots":[[0,6,"Redex"],[8,2,"Redex"],[14,2,"Redex"],[18,2,"Redex"]],"id":18,"label":"helper (hd :: xs) tl"},{"span":{"startLine":4,"endLine":4,"endCol":37,"startCol":35},"env":[],"annots":[[0,2,"Redex"]],"id":19,"label":"tl"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":13},"env":[],"annots":[],"id":20,"label":"[]"},{"span":{"startLine":4,"endLine":4,"endCol":33,"startCol":25},"env":[],"annots":[[0,2,"Redex"],[6,2,"Redex"]],"id":21,"label":"hd :: xs"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":9},"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[],"id":23,"label":"palindrome ['a' ; 'b']"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[0,9,"Redex"],[12,1,"Redex"]],"id":25,"label":"helper [] = w"},{"span":{"startLine":12,"endLine":12,"endCol":29,"startCol":26},"env":[],"annots":[],"id":26,"label":"'b'"},{"span":null,"env":[],"annots":[],"id":28,"label":"['a' ; 'b']"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":29,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[6,2,"Redex"],[22,2,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":30,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":31,"label":"helper []"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":13},"env":[],"annots":[],"id":32,"label":"[]"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","['a' ; 'b']"]],"annots":[[15,1,"Redex"],[19,1,"Redex"]],"id":33,"label":"if listReverse w = w\nthen true\nelse false"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,100,"Redex"]],"id":34,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = ['a' ; 'b']"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[3,109,"Redex"]],"id":35,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = ['a' ; 'b'] then true else false"},{"span":{"startLine":4,"endLine":4,"endCol":23,"startCol":17},"env":[],"annots":[[0,6,"Redex"]],"id":36,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","['a' ; 'b']"]],"annots":[[0,23,"Redex"],[26,1,"Redex"]],"id":37,"label":"listReverse ['a' ; 'b'] = w"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","['a' ; 'b']"]],"annots":[[12,1,"Redex"],[16,1,"Redex"]],"id":39,"label":"listReverse w = w"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","['a' ; 'b']"]],"annots":[[3,23,"Redex"],[29,1,"Redex"]],"id":40,"label":"if listReverse ['a' ; 'b'] = w\nthen true\nelse false"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["w","['a' ; 'b']"]],"annots":[[0,147,"Redex"],[150,1,"Redex"]],"id":41,"label":"(let rec helper =\n   fun xs ->\n     function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl in\n helper []) = w"},{"span":{"startLine":2,"endLine":5,"endCol":15,"startCol":3},"env":[],"annots":[[0,139,"Redex"]],"id":42,"label":"let rec helper =\n  fun xs ->\n    function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl in\nhelper []"},{"span":{"startLine":8,"endLine":8,"endCol":20,"startCol":19},"env":[["w","['a' ; 'b']"]],"annots":[[0,1,"Redex"]],"id":43,"label":"w"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":44,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":45,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[89,1,"Redex"]],"id":46,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = w"},{"span":{"startLine":12,"endLine":12,"endCol":29,"startCol":26},"env":[],"annots":[],"id":47,"label":"'b'"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":13},"env":[],"annots":[[0,2,"Redex"]],"id":48,"label":"xs"},{"span":{"startLine":12,"endLine":12,"endCol":19,"startCol":9},"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[],"id":50,"label":"palindrome"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":24},"env":[["w","['a' ; 'b']"]],"annots":[[0,1,"Redex"]],"id":52,"label":"w"},{"span":{"startLine":4,"endLine":4,"endCol":33,"startCol":31},"env":[],"annots":[[0,2,"Redex"]],"id":56,"label":"xs"},{"span":{"startLine":12,"endLine":12,"endCol":24,"startCol":21},"env":[],"annots":[],"id":58,"label":"'a'"},{"span":{"startLine":12,"endLine":12,"endCol":24,"startCol":21},"env":[],"annots":[],"id":59,"label":"'a'"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["xs","[]"],["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","['a' ; 'b']"]],"annots":[[101,1,"Redex"]],"id":60,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = w\nthen true\nelse false"},{"span":{"startLine":5,"endLine":5,"endCol":12,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":61,"label":"helper"}]}