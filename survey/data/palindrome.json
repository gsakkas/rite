{"root":20,"result":"stuck","reason":"Type error : could not match 't23 -> 't24 with char list","bad":41,"stuck":48,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":0,"label":"StepsTo ReturnStep"},{"arrows":"to","to":0,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":22,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":8,"label":"SubTerm 2"},{"arrows":"to","to":38,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":15,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":17,"label":"SubTerm 2"},{"arrows":"to","to":39,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":10,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":19,"label":"StepsTo CallStep"},{"arrows":"to","to":28,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"StepsTo CallStep"},{"arrows":"to","to":53,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":21,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":21,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":32,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":28,"label":"StepsTo CallStep"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":31,"label":"StepsTo CallStep"},{"arrows":"to","to":30,"from":31,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":32,"label":"StepsTo ReturnStep"},{"arrows":"to","to":18,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":32,"label":"SubTerm 2"},{"arrows":"to","to":33,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":33,"label":"StepsTo ReturnStep"},{"arrows":"to","to":28,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":29,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":45,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":54,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":6,"endLine":6,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,9,"Redex"]],"id":0,"label":"helper []"},{"span":{"startLine":6,"endLine":6,"endCol":12,"startCol":6},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":1,"label":"helper"},{"span":{"startLine":3,"endLine":6,"endCol":15,"startCol":3},"env":[],"annots":[[0,139,"Redex"]],"id":2,"label":"let rec helper =\n  fun xs ->\n    function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl in\nhelper []"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":18},"env":[],"annots":[],"id":3,"label":"fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"},{"span":{"startLine":5,"endLine":5,"endCol":37,"startCol":17},"env":[],"annots":[[0,6,"Redex"],[8,2,"Redex"],[14,2,"Redex"],[18,2,"Redex"]],"id":4,"label":"helper (hd :: xs) tl"},{"span":{"startLine":5,"endLine":5,"endCol":37,"startCol":35},"env":[],"annots":[[0,2,"Redex"]],"id":5,"label":"tl"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":23},"env":[],"annots":[],"id":7,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":23},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":8,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":9,"endLine":9,"endCol":25,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[12,1,"Redex"],[16,1,"Redex"]],"id":9,"label":"listReverse w = w"},{"span":{"startLine":9,"endLine":9,"endCol":25,"startCol":24},"env":[["w","[]"]],"annots":[[0,1,"Redex"]],"id":10,"label":"w"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":23},"env":[],"annots":[],"id":13,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":6,"endLine":6,"endCol":15,"startCol":13},"env":[],"annots":[],"id":14,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":25,"startCol":7},"env":[["w","[]"]],"annots":[[0,147,"Redex"],[150,1,"Redex"]],"id":15,"label":"(let rec helper =\n   fun xs ->\n     function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl in\n helper []) = w"},{"span":{"startLine":9,"endLine":11,"endCol":13,"startCol":3},"env":[["w","[]"]],"annots":[[101,1,"Redex"]],"id":17,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = w\nthen true\nelse false"},{"span":{"startLine":10,"endLine":10,"endCol":12,"startCol":8},"env":[],"annots":[],"id":18,"label":"true"},{"span":{"startLine":9,"endLine":9,"endCol":25,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[0,14,"Redex"],[17,1,"Redex"]],"id":19,"label":"listReverse [] = w"},{"span":null,"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[[0,13,"Redex"]],"id":20,"label":"palindrome []"},{"span":{"startLine":9,"endLine":11,"endCol":13,"startCol":3},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[15,1,"Redex"],[19,1,"Redex"]],"id":21,"label":"if listReverse w = w\nthen true\nelse false"},{"span":{"startLine":5,"endLine":5,"endCol":33,"startCol":25},"env":[],"annots":[[0,2,"Redex"],[6,2,"Redex"]],"id":22,"label":"hd :: xs"},{"span":{"startLine":5,"endLine":5,"endCol":33,"startCol":25},"env":[],"annots":[[1,2,"Redex"],[6,2,"Redex"]],"id":23,"label":"(hd , xs)"},{"span":{"startLine":9,"endLine":11,"endCol":13,"startCol":3},"env":[["w","[]"]],"annots":[[3,165,"Redex"],[171,1,"Redex"]],"id":24,"label":"if (let rec helper =\n      fun xs ->\n        function\n          | [] -> xs\n          | hd :: tl -> helper (hd :: xs)\n                               tl in\n    helper []) = w then true else false"},{"span":{"startLine":6,"endLine":6,"endCol":15,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":26,"label":"helper []"},{"span":{"startLine":6,"endLine":6,"endCol":12,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":27,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":20,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"]],"annots":[[0,14,"Redex"]],"id":28,"label":"listReverse []"},{"span":{"startLine":9,"endLine":9,"endCol":18,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"]],"annots":[],"id":29,"label":"listReverse"},{"span":{"startLine":11,"endLine":11,"endCol":13,"startCol":8},"env":[],"annots":[],"id":30,"label":"false"},{"span":{"startLine":9,"endLine":11,"endCol":13,"startCol":3},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[3,14,"Redex"],[20,1,"Redex"]],"id":31,"label":"if listReverse [] = w\nthen true\nelse false"},{"span":{"startLine":9,"endLine":11,"endCol":13,"startCol":3},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","[]"]],"annots":[[3,9,"Redex"],[15,1,"Redex"]],"id":32,"label":"if helper [] = w\nthen true\nelse false"},{"span":{"startLine":9,"endLine":9,"endCol":25,"startCol":7},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","[]"]],"annots":[[0,9,"Redex"],[12,1,"Redex"]],"id":33,"label":"helper [] = w"},{"span":{"startLine":9,"endLine":9,"endCol":20,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[12,1,"Redex"]],"id":37,"label":"listReverse w"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":23},"env":[],"annots":[[0,2,"Redex"]],"id":38,"label":"$x"},{"span":{"startLine":9,"endLine":9,"endCol":25,"startCol":7},"env":[["w","[]"]],"annots":[[89,1,"Redex"]],"id":39,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = w"},{"span":{"startLine":9,"endLine":9,"endCol":25,"startCol":7},"env":[],"annots":[[0,91,"Redex"]],"id":41,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = []"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":23},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":42,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":null,"env":[],"annots":[],"id":44,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":20,"startCol":19},"env":[["w","[]"]],"annots":[[0,1,"Redex"]],"id":45,"label":"w"},{"span":{"startLine":5,"endLine":5,"endCol":23,"startCol":17},"env":[],"annots":[[0,6,"Redex"]],"id":46,"label":"helper"},{"span":{"startLine":4,"endLine":4,"endCol":15,"startCol":13},"env":[],"annots":[[0,2,"Redex"]],"id":47,"label":"xs"},{"span":{"startLine":9,"endLine":11,"endCol":13,"startCol":3},"env":[],"annots":[[3,100,"Redex"]],"id":48,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = [] then true else false"},{"span":{"startLine":5,"endLine":5,"endCol":27,"startCol":25},"env":[],"annots":[[0,2,"Redex"]],"id":49,"label":"hd"},{"span":{"startLine":5,"endLine":5,"endCol":33,"startCol":31},"env":[],"annots":[[0,2,"Redex"]],"id":50,"label":"xs"},{"span":{"startLine":6,"endLine":6,"endCol":15,"startCol":13},"env":[],"annots":[],"id":51,"label":"[]"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[6,2,"Redex"],[22,2,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":52,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":null,"env":[],"annots":[],"id":53,"label":"[]"},{"span":{"startLine":3,"endLine":5,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":54,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":null,"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[],"id":55,"label":"palindrome"}]}