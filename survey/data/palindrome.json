{"root":47,"result":"stuck","reason":"Type error : could not match 't23 -> 't24 with char list","bad":39,"stuck":29,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":45,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":5,"label":"SubTerm 2"},{"arrows":"to","to":49,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":8,"label":"StepsTo ReturnStep"},{"arrows":"to","to":37,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":16,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":20,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":22,"label":"StepsTo CallStep"},{"arrows":"to","to":43,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":29,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":30,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":31,"label":"SubTerm 2"},{"arrows":"to","to":16,"from":31,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":32,"label":"StepsTo ReturnStep"},{"arrows":"to","to":3,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":34,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":35,"label":"StepsTo CallStep"},{"arrows":"to","to":22,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":42,"label":"StepsTo CallStep"},{"arrows":"to","to":35,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":45,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":47,"label":"StepsTo CallStep"},{"arrows":"to","to":51,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":53,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":8,"endLine":8,"endCol":20,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              (function\n                 | [] -> xs\n                 | hd :: tl -> helper (hd :: xs)\n                                      tl) in\n          helper [])"],["w","[]"]],"annots":[[12,1,"Redex"]],"id":0,"label":"listReverse w"},{"span":{"startLine":8,"endLine":8,"endCol":18,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              (function\n                 | [] -> xs\n                 | hd :: tl -> helper (hd :: xs)\n                                      tl) in\n          helper [])"]],"annots":[],"id":1,"label":"listReverse"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["w","[]"]],"annots":[[89,1,"Redex"]],"id":2,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = w"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":24},"env":[["w","[]"]],"annots":[[0,1,"Redex"]],"id":3,"label":"w"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[],"id":4,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":5,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":4,"endLine":4,"endCol":33,"startCol":25},"env":[],"annots":[[1,2,"Redex"],[6,2,"Redex"]],"id":6,"label":"(hd , xs)"},{"span":{"startLine":4,"endLine":4,"endCol":27,"startCol":25},"env":[],"annots":[[0,2,"Redex"]],"id":7,"label":"hd"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":6},"env":[["helper","fun xs ->\n  (function\n     | [] -> xs\n     | hd :: tl -> helper (hd :: xs)\n                          tl)"]],"annots":[[0,9,"Redex"]],"id":8,"label":"helper []"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[],"id":11,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":10,"endLine":10,"endCol":13,"startCol":8},"env":[],"annots":[],"id":14,"label":"false"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":13},"env":[],"annots":[[0,2,"Redex"]],"id":15,"label":"xs"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["w","[]"]],"annots":[[105,1,"Redex"]],"id":16,"label":"if ((function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl) = w)\nthen true\nelse false"},{"span":{"startLine":9,"endLine":9,"endCol":12,"startCol":8},"env":[],"annots":[],"id":17,"label":"true"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["w","[]"]],"annots":[[4,176,"Redex"],[183,1,"Redex"]],"id":18,"label":"if ((let rec helper =\n       fun xs ->\n         (function\n            | [] -> xs\n            | hd :: tl -> helper (hd :: xs)\n                                 tl) in\n     helper []) = w) then true else false"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["w","[]"]],"annots":[[0,152,"Redex"],[155,1,"Redex"]],"id":20,"label":"(let rec helper =\n   fun xs ->\n     (function\n        | [] -> xs\n        | hd :: tl -> helper (hd :: xs)\n                             tl) in\n helper []) = w"},{"span":{"startLine":8,"endLine":8,"endCol":20,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              (function\n                 | [] -> xs\n                 | hd :: tl -> helper (hd :: xs)\n                                      tl) in\n          helper [])"]],"annots":[[0,14,"Redex"]],"id":22,"label":"listReverse []"},{"span":{"startLine":2,"endLine":5,"endCol":15,"startCol":3},"env":[],"annots":[[0,144,"Redex"]],"id":23,"label":"let rec helper =\n  fun xs ->\n    (function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl) in\nhelper []"},{"span":{"startLine":4,"endLine":4,"endCol":37,"startCol":17},"env":[],"annots":[[0,6,"Redex"],[8,2,"Redex"],[14,2,"Redex"],[18,2,"Redex"]],"id":24,"label":"helper (hd :: xs) tl"},{"span":{"startLine":4,"endLine":4,"endCol":23,"startCol":17},"env":[],"annots":[[0,6,"Redex"]],"id":25,"label":"helper"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":13},"env":[],"annots":[],"id":27,"label":"[]"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[],"annots":[[3,105,"Redex"]],"id":29,"label":"if ((function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl) = []) then true else false"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              (function\n                 | [] -> xs\n                 | hd :: tl -> helper (hd :: xs)\n                                      tl) in\n          helper [])"],["w","[]"]],"annots":[[16,1,"Redex"],[20,1,"Redex"]],"id":30,"label":"if (listReverse w = w)\nthen true\nelse false"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["helper","fun xs ->\n  (function\n     | [] -> xs\n     | hd :: tl -> helper (hd :: xs)\n                          tl)"],["w","[]"]],"annots":[[4,9,"Redex"],[16,1,"Redex"]],"id":31,"label":"if (helper [] = w)\nthen true\nelse false"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["helper","fun xs ->\n  (function\n     | [] -> xs\n     | hd :: tl -> helper (hd :: xs)\n                          tl)"],["w","[]"]],"annots":[[0,9,"Redex"],[12,1,"Redex"]],"id":32,"label":"helper [] = w"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":33,"label":"helper []"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              (function\n                 | [] -> xs\n                 | hd :: tl -> helper (hd :: xs)\n                                      tl) in\n          helper [])"],["w","[]"]],"annots":[[12,1,"Redex"],[16,1,"Redex"]],"id":34,"label":"listReverse w = w"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              (function\n                 | [] -> xs\n                 | hd :: tl -> helper (hd :: xs)\n                                      tl) in\n          helper [])"],["w","[]"]],"annots":[[0,14,"Redex"],[17,1,"Redex"]],"id":35,"label":"listReverse [] = w"},{"span":{"startLine":4,"endLine":4,"endCol":37,"startCol":35},"env":[],"annots":[[0,2,"Redex"]],"id":36,"label":"tl"},{"span":{"startLine":5,"endLine":5,"endCol":12,"startCol":6},"env":[["helper","fun xs ->\n  (function\n     | [] -> xs\n     | hd :: tl -> helper (hd :: xs)\n                          tl)"]],"annots":[],"id":37,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":25,"startCol":7},"env":[],"annots":[[0,91,"Redex"]],"id":39,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = []"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":40,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":4,"endLine":4,"endCol":33,"startCol":25},"env":[],"annots":[[0,2,"Redex"],[6,2,"Redex"]],"id":41,"label":"hd :: xs"},{"span":{"startLine":8,"endLine":10,"endCol":13,"startCol":3},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              (function\n                 | [] -> xs\n                 | hd :: tl -> helper (hd :: xs)\n                                      tl) in\n          helper [])"],["w","[]"]],"annots":[[4,14,"Redex"],[21,1,"Redex"]],"id":42,"label":"if (listReverse [] = w)\nthen true\nelse false"},{"span":null,"env":[],"annots":[],"id":43,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":20,"startCol":19},"env":[["w","[]"]],"annots":[[0,1,"Redex"]],"id":45,"label":"w"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":18},"env":[],"annots":[],"id":46,"label":"fun xs ->\n  (function\n     | [] -> xs\n     | hd :: tl -> helper (hd :: xs)\n                          tl)"},{"span":null,"env":[["palindrome","fun (w : char list) ->\n  if (listReverse w = w)\n  then true\n  else false"]],"annots":[[0,13,"Redex"]],"id":47,"label":"palindrome []"},{"span":{"startLine":4,"endLine":4,"endCol":33,"startCol":31},"env":[],"annots":[[0,2,"Redex"]],"id":48,"label":"xs"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[],"annots":[[0,2,"Redex"]],"id":49,"label":"$x"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  (function\n     | [] -> xs\n     | hd :: tl -> helper (hd :: xs)\n                          tl)"]],"annots":[[6,2,"Redex"],[22,2,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":50,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":null,"env":[],"annots":[],"id":51,"label":"[]"},{"span":{"startLine":5,"endLine":5,"endCol":15,"startCol":13},"env":[],"annots":[],"id":52,"label":"[]"},{"span":{"startLine":2,"endLine":4,"endCol":37,"startCol":23},"env":[["helper","fun xs ->\n  (function\n     | [] -> xs\n     | hd :: tl -> helper (hd :: xs)\n                          tl)"]],"annots":[],"id":53,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":null,"env":[["palindrome","fun (w : char list) ->\n  if (listReverse w = w)\n  then true\n  else false"]],"annots":[],"id":54,"label":"palindrome"},{"span":{"startLine":5,"endLine":5,"endCol":12,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":55,"label":"helper"}]}
