{"root":44,"result":"stuck","reason":"Type error : could not match 't23 -> 't24 with char list","bad":18,"stuck":48,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":8,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":11,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":11,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":16,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":22,"label":"StepsTo CallStep"},{"arrows":"to","to":10,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":25,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":25,"label":"StepsTo CallStep"},{"arrows":"to","to":19,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":26,"label":"StepsTo CallStep"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":28,"label":"SubTerm 2"},{"arrows":"to","to":16,"from":28,"label":"StepsTo ReturnStep"},{"arrows":"to","to":17,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":29,"label":"StepsTo ReturnStep"},{"arrows":"to","to":5,"from":30,"label":"StepsTo ReturnStep"},{"arrows":"to","to":7,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 2"},{"arrows":"to","to":46,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":37,"label":"SubTerm 2"},{"arrows":"to","to":45,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":39,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":44,"label":"StepsTo CallStep"},{"arrows":"to","to":54,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":17,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":52,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":5,"endLine":5,"endCol":55,"startCol":47},"env":[],"annots":[[1,2,"Redex"],[6,2,"Redex"]],"id":0,"label":"(hd , xs)"},{"span":{"startLine":5,"endLine":5,"endCol":49,"startCol":47},"env":[],"annots":[[0,2,"Redex"]],"id":1,"label":"hd"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":15},"env":[["w","[]"]],"annots":[[0,147,"Redex"],[150,1,"Redex"]],"id":2,"label":"(let rec helper =\n   fun xs ->\n     function\n       | [] -> xs\n       | hd :: tl -> helper (hd :: xs)\n                            tl in\n helper []) = w"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":31},"env":[],"annots":[],"id":5,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":32},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":7,"label":"helper"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":31},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":8,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":15},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[12,1,"Redex"],[16,1,"Redex"]],"id":9,"label":"listReverse w = w"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":32},"env":[["w","[]"]],"annots":[[0,1,"Redex"]],"id":10,"label":"w"},{"span":{"startLine":9,"endLine":11,"endCol":25,"startCol":11},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[15,1,"Redex"],[19,1,"Redex"]],"id":11,"label":"if listReverse w = w\nthen true\nelse false"},{"span":{"startLine":11,"endLine":11,"endCol":25,"startCol":20},"env":[],"annots":[],"id":15,"label":"false"},{"span":{"startLine":9,"endLine":11,"endCol":25,"startCol":11},"env":[["w","[]"]],"annots":[[101,1,"Redex"]],"id":16,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = w\nthen true\nelse false"},{"span":{"startLine":10,"endLine":10,"endCol":22,"startCol":18},"env":[],"annots":[],"id":17,"label":"true"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":15},"env":[],"annots":[[0,91,"Redex"]],"id":18,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = []"},{"span":null,"env":[],"annots":[],"id":19,"label":"[]"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":31},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[],"id":20,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":31},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[6,2,"Redex"],[22,2,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":21,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":15},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[0,14,"Redex"],[17,1,"Redex"]],"id":22,"label":"listReverse [] = w"},{"span":{"startLine":3,"endLine":6,"endCol":41,"startCol":11},"env":[],"annots":[[0,139,"Redex"]],"id":23,"label":"let rec helper =\n  fun xs ->\n    function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl in\nhelper []"},{"span":{"startLine":6,"endLine":6,"endCol":41,"startCol":32},"env":[],"annots":[[0,6,"Redex"]],"id":24,"label":"helper []"},{"span":{"startLine":9,"endLine":11,"endCol":25,"startCol":11},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[3,14,"Redex"],[20,1,"Redex"]],"id":25,"label":"if listReverse [] = w\nthen true\nelse false"},{"span":{"startLine":9,"endLine":9,"endCol":28,"startCol":15},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"]],"annots":[[0,14,"Redex"]],"id":26,"label":"listReverse []"},{"span":{"startLine":9,"endLine":9,"endCol":26,"startCol":15},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"]],"annots":[],"id":27,"label":"listReverse"},{"span":{"startLine":9,"endLine":11,"endCol":25,"startCol":11},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","[]"]],"annots":[[3,9,"Redex"],[15,1,"Redex"]],"id":28,"label":"if helper [] = w\nthen true\nelse false"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":15},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"],["w","[]"]],"annots":[[0,9,"Redex"],[12,1,"Redex"]],"id":29,"label":"helper [] = w"},{"span":{"startLine":6,"endLine":6,"endCol":41,"startCol":32},"env":[["helper","fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"]],"annots":[[0,9,"Redex"]],"id":30,"label":"helper []"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":26},"env":[],"annots":[],"id":31,"label":"fun xs ->\n  function\n    | [] -> xs\n    | hd :: tl -> helper (hd :: xs)\n                         tl"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":31},"env":[],"annots":[],"id":32,"label":"function\n  | [] -> xs\n  | hd :: tl -> helper (hd :: xs)\n                       tl"},{"span":{"startLine":5,"endLine":5,"endCol":59,"startCol":39},"env":[],"annots":[[0,6,"Redex"],[8,2,"Redex"],[14,2,"Redex"],[18,2,"Redex"]],"id":34,"label":"helper (hd :: xs) tl"},{"span":{"startLine":5,"endLine":5,"endCol":59,"startCol":57},"env":[],"annots":[[0,2,"Redex"]],"id":35,"label":"tl"},{"span":{"startLine":9,"endLine":9,"endCol":33,"startCol":15},"env":[["w","[]"]],"annots":[[89,1,"Redex"]],"id":36,"label":"(function\n   | [] -> xs\n   | hd :: tl -> helper (hd :: xs)\n                        tl) = w"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":31},"env":[],"annots":[[6,2,"Redex"],[22,2,"Redex"],[39,6,"Redex"],[47,2,"Redex"],[53,2,"Redex"],[78,2,"Redex"]],"id":37,"label":"match $x with\n| [] -> xs\n| hd :: tl -> helper (hd :: xs)\n                     tl"},{"span":{"startLine":9,"endLine":9,"endCol":28,"startCol":15},"env":[["listReverse","fun l -> (let rec helper =\n            fun xs ->\n              function\n                | [] -> xs\n                | hd :: tl -> helper (hd :: xs)\n                                     tl in\n          helper [])"],["w","[]"]],"annots":[[12,1,"Redex"]],"id":38,"label":"listReverse w"},{"span":{"startLine":9,"endLine":11,"endCol":25,"startCol":11},"env":[["w","[]"]],"annots":[[3,165,"Redex"],[171,1,"Redex"]],"id":39,"label":"if (let rec helper =\n      fun xs ->\n        function\n          | [] -> xs\n          | hd :: tl -> helper (hd :: xs)\n                               tl in\n    helper []) = w then true else false"},{"span":{"startLine":6,"endLine":6,"endCol":41,"startCol":39},"env":[],"annots":[],"id":42,"label":"[]"},{"span":null,"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[[0,13,"Redex"]],"id":44,"label":"palindrome []"},{"span":{"startLine":4,"endLine":4,"endCol":33,"startCol":31},"env":[],"annots":[[0,2,"Redex"]],"id":45,"label":"xs"},{"span":{"startLine":5,"endLine":5,"endCol":55,"startCol":47},"env":[],"annots":[[0,2,"Redex"],[6,2,"Redex"]],"id":46,"label":"hd :: xs"},{"span":{"startLine":3,"endLine":5,"endCol":59,"startCol":31},"env":[],"annots":[[0,2,"Redex"]],"id":47,"label":"$x"},{"span":{"startLine":9,"endLine":11,"endCol":25,"startCol":11},"env":[],"annots":[[3,100,"Redex"]],"id":48,"label":"if (function\n      | [] -> xs\n      | hd :: tl -> helper (hd :: xs)\n                           tl) = [] then true else false"},{"span":{"startLine":5,"endLine":5,"endCol":45,"startCol":39},"env":[],"annots":[[0,6,"Redex"]],"id":49,"label":"helper"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":32},"env":[],"annots":[[0,6,"Redex"]],"id":50,"label":"helper"},{"span":{"startLine":5,"endLine":5,"endCol":55,"startCol":53},"env":[],"annots":[[0,2,"Redex"]],"id":51,"label":"xs"},{"span":{"startLine":9,"endLine":9,"endCol":28,"startCol":27},"env":[["w","[]"]],"annots":[[0,1,"Redex"]],"id":52,"label":"w"},{"span":{"startLine":6,"endLine":6,"endCol":41,"startCol":39},"env":[],"annots":[],"id":53,"label":"[]"},{"span":null,"env":[],"annots":[],"id":54,"label":"[]"},{"span":null,"env":[["palindrome","fun (w : char list) ->\n  if listReverse w = w\n  then true\n  else false"]],"annots":[],"id":55,"label":"palindrome"}]}