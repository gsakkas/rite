{"root":54,"result":"stuck","reason":"Type error : could not match 't26 list with int","bad":22,"stuck":59,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":2,"label":"StepsTo ReturnStep"},{"arrows":"to","to":16,"from":3,"label":"StepsTo ReturnStep"},{"arrows":"to","to":53,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":72,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":64,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":6,"label":"StepsTo PrimStep"},{"arrows":"to","to":12,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":8,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":8,"label":"StepsTo CallStep"},{"arrows":"to","to":95,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":10,"label":"StepsTo PrimStep"},{"arrows":"to","to":72,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":11,"label":"StepsTo PrimStep"},{"arrows":"to","to":53,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":14,"label":"StepsTo CallStep"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":15,"label":"StepsTo CallStep"},{"arrows":"to","to":36,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":16,"label":"StepsTo CallStep"},{"arrows":"to","to":53,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":18,"label":"StepsTo CallStep"},{"arrows":"to","to":72,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":19,"label":"StepsTo CallStep"},{"arrows":"to","to":37,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":20,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":44,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":123,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":30,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":30,"label":"StepsTo PrimStep"},{"arrows":"to","to":53,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":72,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":32,"label":"StepsTo PrimStep"},{"arrows":"to","to":30,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":24,"from":35,"label":"SubTerm 2"},{"arrows":"to","to":88,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":35,"label":"StepsTo BoringStep"},{"arrows":"to","to":117,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":37,"label":"StepsTo CallStep"},{"arrows":"to","to":115,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":38,"label":"SubTerm 2"},{"arrows":"to","to":65,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":84,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":39,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":40,"label":"StepsTo PrimStep"},{"arrows":"to","to":109,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":48,"label":"StepsTo CallStep"},{"arrows":"to","to":99,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":124,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"StepsTo CallStep"},{"arrows":"to","to":116,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":55,"label":"SubTerm 2"},{"arrows":"to","to":8,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":58,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":58,"label":"StepsTo BoringStep"},{"arrows":"to","to":83,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":59,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":62,"label":"StepsTo CallStep"},{"arrows":"to","to":1,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":63,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":64,"label":"StepsTo PrimStep"},{"arrows":"to","to":40,"from":65,"label":"StepsTo BoringStep"},{"arrows":"to","to":108,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":67,"label":"SubTerm 2"},{"arrows":"to","to":40,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":67,"label":"StepsTo PrimStep"},{"arrows":"to","to":69,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":70,"label":"StepsTo ReturnStep"},{"arrows":"to","to":39,"from":70,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":71,"label":"StepsTo ReturnStep"},{"arrows":"to","to":7,"from":74,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":62,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":74,"label":"StepsTo CallStep"},{"arrows":"to","to":6,"from":75,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":75,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":78,"label":"StepsTo PrimStep"},{"arrows":"to","to":35,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":72,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":81,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":82,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":82,"label":"StepsTo PrimStep"},{"arrows":"to","to":112,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":86,"label":"StepsTo PrimStep"},{"arrows":"to","to":78,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":88,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":88,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":89,"label":"StepsTo CallStep"},{"arrows":"to","to":91,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":94,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":95,"label":"StepsTo CallStep"},{"arrows":"to","to":110,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":96,"label":"SubTerm 2"},{"arrows":"to","to":117,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":97,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":97,"label":"StepsTo ReturnStep"},{"arrows":"to","to":71,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":99,"label":"StepsTo CallStep"},{"arrows":"to","to":89,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":102,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":36,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":108,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":110,"label":"StepsTo CallStep"},{"arrows":"to","to":14,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":112,"label":"StepsTo PrimStep"}],"nodes":[{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[12,6,"Redex"]],"id":0,"label":"sumList (if [] < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":46},"env":[],"annots":[],"id":1,"label":"10"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[21,104,"Redex"]],"id":2,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10]))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[12,86,"Redex"]],"id":3,"label":"digitsOfInt (if true\n             then []\n             else digitsOfInt (n|2 / 10) @ [n|2 mod 10])"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[35,3,"Redex"],[39,3,"Redex"]],"id":4,"label":"sumList (digitsOfInt (digitsOfInt (abs n|1)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[26,3,"Redex"],[30,3,"Redex"]],"id":5,"label":"digitsOfInt (digitsOfInt (abs n|1))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[28,5,"Redex"]],"id":6,"label":"if sumList (digitsOfInt (if 0 < 1\n                         then []\n                         else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":8},"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[50,1,"Redex"]],"id":7,"label":"additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[24,10,"Redex"]],"id":8,"label":"if sumList (digitsOfInt (digits 0)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[35,3,"Redex"]],"id":10,"label":"sumList (digitsOfInt (digitsOfInt (abs 0)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[26,3,"Redex"]],"id":11,"label":"digitsOfInt (digitsOfInt (abs 0))"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":29},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":12,"label":"sumList (digitsOfInt (digits n))"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":13,"label":"digitsOfInt (digits n)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[12,10,"Redex"]],"id":14,"label":"digitsOfInt (digits 0)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":30},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[0,8,"Redex"]],"id":15,"label":"digits 0"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[0,14,"Redex"]],"id":16,"label":"digitsOfInt []"},{"span":null,"env":[],"annots":[],"id":17,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[21,15,"Redex"]],"id":18,"label":"sumList (digitsOfInt (digitsOfInt 0))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,15,"Redex"]],"id":19,"label":"digitsOfInt (digitsOfInt 0)"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":29},"env":[["n|1","0"]],"annots":[[0,3,"Redex"],[4,3,"Redex"]],"id":20,"label":"abs n|1"},{"span":{"startLine":4,"endLine":4,"endCol":32,"startCol":29},"env":[],"annots":[[0,3,"Redex"]],"id":21,"label":"abs"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":22,"label":"[] < 1"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":23,"label":"1"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[13,3,"Redex"],[26,3,"Redex"]],"id":24,"label":"digitsOfInt (n|1 / 10) @ [n|1 mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":50},"env":[["n|1","[]"]],"annots":[[1,3,"Redex"]],"id":25,"label":"[n|1 mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":27,"label":"n|1"},{"span":null,"env":[],"annots":[],"id":28,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[16,3,"Redex"]],"id":29,"label":"digitsOfInt (if n|2 < 1\n             then []\n             else digitsOfInt (n|2 / 10) @ [n|2 mod 10])"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[16,5,"Redex"]],"id":30,"label":"digitsOfInt (if 0 < 1\n             then []\n             else digitsOfInt (n|2 / 10) @ [n|2 mod 10])"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,3,"Redex"]],"id":31,"label":"sumList (digitsOfInt (if n|2 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10]))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,5,"Redex"]],"id":32,"label":"sumList (digitsOfInt (if 0 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10]))"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[13,3,"Redex"],[17,3,"Redex"]],"id":33,"label":"digitsOfInt (abs n|1)"},{"span":{"startLine":4,"endLine":4,"endCol":27,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":34,"label":"digitsOfInt"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[3,3,"Redex"]],"id":35,"label":"if n|1 < 1\nthen []\nelse digitsOfInt (n|1 / 10) @ [n|1 mod 10]"},{"span":{"startLine":11,"endLine":11,"endCol":36,"startCol":30},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":36,"label":"digits"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[0,13,"Redex"]],"id":37,"label":"digitsOfInt 0"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["n|2","0"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[3,3,"Redex"]],"id":38,"label":"if n|2 < 1\nthen []\nelse digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[13,3,"Redex"],[26,3,"Redex"]],"id":39,"label":"digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,5,"Redex"]],"id":40,"label":"0 < 1"},{"span":null,"env":[],"annots":[],"id":41,"label":"true"},{"span":{"startLine":12,"endLine":12,"endCol":9,"startCol":8},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":43,"label":"n"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[13,3,"Redex"]],"id":44,"label":"digitsOfInt (n|1 / 10)"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":39},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":45,"label":"n|1 / 10"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[11,16,"Redex"]],"id":48,"label":"if sumList (digitsOfInt []) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":50,"label":"sumList (digitsOfInt (digits n))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":51,"label":"digitsOfInt (digits n)"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":52,"label":"digits n"},{"span":{"startLine":11,"endLine":11,"endCol":28,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":53,"label":"digitsOfInt"},{"span":null,"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[0,21,"Redex"]],"id":54,"label":"additivePersistence 0"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[32,1,"Redex"]],"id":55,"label":"if sumList (digitsOfInt (digits n)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[15,3,"Redex"]],"id":58,"label":"if sumList (if n|1 < 1\n            then []\n            else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[15,6,"Redex"]],"id":59,"label":"if sumList (if [] < 1\n            then []\n            else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[21,15,"Redex"]],"id":62,"label":"sumList (digitsOfInt (digitsOfInt 0)) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,3,"Redex"]],"id":63,"label":"sumList (digitsOfInt (if n|2 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,5,"Redex"]],"id":64,"label":"sumList (digitsOfInt (if 0 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":65,"label":"n|2 < 1"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[35,3,"Redex"],[39,3,"Redex"]],"id":66,"label":"sumList (digitsOfInt (digitsOfInt (abs n|1))) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[3,5,"Redex"]],"id":67,"label":"if 0 < 1\nthen []\nelse digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":37},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":68,"label":"n"},{"span":null,"env":[],"annots":[],"id":69,"label":"0"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[0,58,"Redex"]],"id":70,"label":"if true\nthen []\nelse digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[21,104,"Redex"]],"id":71,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":15,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"]],"annots":[],"id":72,"label":"sumList"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[24,15,"Redex"]],"id":74,"label":"if sumList (digitsOfInt (digitsOfInt 0)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[28,3,"Redex"]],"id":75,"label":"if sumList (digitsOfInt (if n|2 < 1\n                         then []\n                         else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":29},"env":[],"annots":[[0,3,"Redex"]],"id":78,"label":"abs 0"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,3,"Redex"]],"id":79,"label":"sumList (if n|1 < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10])"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[12,6,"Redex"]],"id":80,"label":"sumList (if [] < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10])"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[38,3,"Redex"],[42,3,"Redex"]],"id":81,"label":"if sumList (digitsOfInt (digitsOfInt (abs n|1))) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[38,3,"Redex"]],"id":82,"label":"if sumList (digitsOfInt (digitsOfInt (abs 0))) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,3,"Redex"]],"id":83,"label":"sumList (if n|1 < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[13,3,"Redex"]],"id":84,"label":"digitsOfInt (n|2 / 10)"},{"span":{"startLine":2,"endLine":2,"endCol":37,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":85,"label":"digitsOfInt"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[13,3,"Redex"]],"id":86,"label":"digitsOfInt (abs 0)"},{"span":{"startLine":2,"endLine":2,"endCol":49,"startCol":48},"env":[],"annots":[[0,1,"Redex"]],"id":87,"label":"@"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":88,"label":"n|1 < 1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[8,16,"Redex"]],"id":89,"label":"sumList (digitsOfInt [])"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":50},"env":[["n|2","0"]],"annots":[[1,3,"Redex"]],"id":90,"label":"[n|2 mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":51},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":91,"label":"n|2 mod 10"},{"span":{"startLine":2,"endLine":2,"endCol":40,"startCol":39},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":92,"label":"n|1"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":94,"label":"sumList (digitsOfInt (digits n)) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":95,"label":"sumList (digitsOfInt (digits 0)) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[3,6,"Redex"]],"id":96,"label":"if [] < 1\nthen []\nelse digitsOfInt (n|1 / 10) @ [n|1 mod 10]"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[24,110,"Redex"]],"id":97,"label":"if sumList (digitsOfInt (if true\n                         then []\n                         else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[8,16,"Redex"]],"id":99,"label":"sumList (digitsOfInt []) < 10"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":33},"env":[["n|1","0"]],"annots":[[0,3,"Redex"]],"id":100,"label":"n|1"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":39},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":101,"label":"n|2 / 10"},{"span":{"startLine":2,"endLine":2,"endCol":40,"startCol":39},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":102,"label":"n|2"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":30},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":103,"label":"digits n"},{"span":null,"env":[],"annots":[],"id":104,"label":"0"},{"span":{"startLine":13,"endLine":13,"endCol":49,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":105,"label":"digitsOfInt"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":51},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":106,"label":"n|1 mod 10"},{"span":{"startLine":2,"endLine":2,"endCol":52,"startCol":51},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":107,"label":"n|1"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":108,"label":"n|2"},{"span":null,"env":[],"annots":[],"id":109,"label":"0"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":110,"label":"sumList (digitsOfInt (digits 0))"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":111,"label":"1"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[35,3,"Redex"]],"id":112,"label":"sumList (digitsOfInt (digitsOfInt (abs 0))) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":57},"env":[],"annots":[],"id":113,"label":"10"},{"span":{"startLine":2,"endLine":2,"endCol":52,"startCol":51},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":114,"label":"n|2"},{"span":null,"env":[],"annots":[],"id":115,"label":"0"},{"span":null,"env":[],"annots":[],"id":116,"label":"0"},{"span":{"startLine":2,"endLine":2,"endCol":19,"startCol":17},"env":[],"annots":[],"id":117,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":58},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":118,"label":"n"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":43},"env":[],"annots":[],"id":119,"label":"10"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":43},"env":[],"annots":[],"id":120,"label":"10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":29},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"]],"annots":[],"id":121,"label":"sumList"},{"span":null,"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":122,"label":"additivePersistence"},{"span":{"startLine":2,"endLine":2,"endCol":49,"startCol":48},"env":[],"annots":[[0,1,"Redex"]],"id":123,"label":"@"},{"span":{"startLine":13,"endLine":13,"endCol":57,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":124,"label":"digits"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":57},"env":[],"annots":[],"id":125,"label":"10"},{"span":{"startLine":2,"endLine":2,"endCol":37,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":126,"label":"digitsOfInt"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":8},"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":127,"label":"additivePersistence"}]}