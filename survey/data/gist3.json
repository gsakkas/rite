{"root":69,"result":"stuck","reason":"Type error : could not match 't26 list with int","bad":32,"stuck":82,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":106,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":4,"label":"StepsTo CallStep"},{"arrows":"to","to":11,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":6,"label":"StepsTo ReturnStep"},{"arrows":"to","to":66,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 2"},{"arrows":"to","to":40,"from":8,"label":"StepsTo CallStep"},{"arrows":"to","to":41,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":12,"label":"StepsTo PrimStep"},{"arrows":"to","to":39,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":13,"label":"StepsTo PrimStep"},{"arrows":"to","to":71,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":124,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":20,"label":"StepsTo CallStep"},{"arrows":"to","to":71,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":21,"label":"StepsTo CallStep"},{"arrows":"to","to":45,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":22,"label":"StepsTo CallStep"},{"arrows":"to","to":71,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":24,"label":"StepsTo CallStep"},{"arrows":"to","to":46,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":25,"label":"StepsTo CallStep"},{"arrows":"to","to":71,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":26,"label":"StepsTo ReturnStep"},{"arrows":"to","to":22,"from":27,"label":"StepsTo ReturnStep"},{"arrows":"to","to":71,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":35,"label":"StepsTo CallStep"},{"arrows":"to","to":11,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":102,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":40,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":86,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":72,"from":43,"label":"SubTerm 2"},{"arrows":"to","to":19,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":46,"label":"StepsTo CallStep"},{"arrows":"to","to":115,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":47,"label":"SubTerm 2"},{"arrows":"to","to":48,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":114,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":49,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":48,"label":"StepsTo PrimStep"},{"arrows":"to","to":50,"from":49,"label":"StepsTo PrimStep"},{"arrows":"to","to":94,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":51,"label":"SubTerm 2"},{"arrows":"to","to":6,"from":52,"label":"StepsTo PrimStep"},{"arrows":"to","to":9,"from":52,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":53,"label":"StepsTo BoringStep"},{"arrows":"to","to":39,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":47,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":58,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":58,"label":"StepsTo CallStep"},{"arrows":"to","to":101,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":20,"from":63,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":66,"label":"StepsTo ReturnStep"},{"arrows":"to","to":13,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":69,"label":"StepsTo CallStep"},{"arrows":"to","to":116,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":123,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":70,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":70,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":72,"label":"SubTerm 2"},{"arrows":"to","to":39,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":78,"label":"StepsTo ReturnStep"},{"arrows":"to","to":42,"from":78,"label":"SubTerm 2"},{"arrows":"to","to":50,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":81,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":97,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":82,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":119,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":87,"label":"StepsTo PrimStep"},{"arrows":"to","to":95,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":89,"label":"SubTerm 2"},{"arrows":"to","to":41,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":89,"label":"StepsTo PrimStep"},{"arrows":"to","to":111,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":91,"label":"StepsTo PrimStep"},{"arrows":"to","to":109,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":93,"label":"StepsTo BoringStep"},{"arrows":"to","to":92,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":95,"label":"StepsTo PrimStep"},{"arrows":"to","to":22,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":96,"label":"StepsTo CallStep"},{"arrows":"to","to":39,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":99,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":62,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":100,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":96,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":101,"label":"StepsTo CallStep"},{"arrows":"to","to":88,"from":102,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":103,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":103,"label":"StepsTo CallStep"},{"arrows":"to","to":20,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":104,"label":"StepsTo CallStep"},{"arrows":"to","to":21,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":45,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":109,"label":"StepsTo PrimStep"},{"arrows":"to","to":39,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":110,"label":"StepsTo PrimStep"},{"arrows":"to","to":48,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":111,"label":"StepsTo PrimStep"},{"arrows":"to","to":49,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":93,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":120,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":39},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":0,"label":"n / 10"},{"span":{"startLine":2,"endLine":2,"endCol":40,"startCol":39},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":1,"label":"n"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":29},"env":[["n","0"]],"annots":[[0,3,"Redex"],[4,1,"Redex"]],"id":2,"label":"abs n"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":33},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":3,"label":"n"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":4,"label":"sumList (digitsOfInt (digits 0)) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[35,3,"Redex"],[39,1,"Redex"]],"id":5,"label":"sumList (digitsOfInt (digitsOfInt (abs n))) < 10"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[25,110,"Redex"]],"id":6,"label":"if (sumList (digitsOfInt (if true\n                          then []\n                          else (digitsOfInt (n / 10) @ [n mod 10]))) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[25,10,"Redex"]],"id":8,"label":"if (sumList (digitsOfInt (digits 0)) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":8},"env":[["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[50,1,"Redex"]],"id":9,"label":"additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":46},"env":[],"annots":[],"id":11,"label":"10"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[35,3,"Redex"]],"id":12,"label":"sumList (digitsOfInt (digitsOfInt (abs 0)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[26,3,"Redex"]],"id":13,"label":"digitsOfInt (digitsOfInt (abs 0))"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":50},"env":[["n","0"]],"annots":[[1,1,"Redex"]],"id":14,"label":"[n mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":51},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":15,"label":"n mod 10"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":29},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":16,"label":"sumList (digitsOfInt (digits n))"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":17,"label":"digitsOfInt (digits n)"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[13,3,"Redex"],[17,1,"Redex"]],"id":18,"label":"digitsOfInt (abs n)"},{"span":{"startLine":4,"endLine":4,"endCol":27,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[],"id":19,"label":"digitsOfInt"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[12,10,"Redex"]],"id":20,"label":"digitsOfInt (digits 0)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":30},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[0,8,"Redex"]],"id":21,"label":"digits 0"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[0,14,"Redex"]],"id":22,"label":"digitsOfInt []"},{"span":null,"env":[],"annots":[],"id":23,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[21,15,"Redex"]],"id":24,"label":"sumList (digitsOfInt (digitsOfInt 0))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[12,15,"Redex"]],"id":25,"label":"digitsOfInt (digitsOfInt 0)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[21,102,"Redex"]],"id":26,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else (digitsOfInt (n / 10) @ [n mod 10])))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[12,84,"Redex"]],"id":27,"label":"digitsOfInt (if true\n             then []\n             else (digitsOfInt (n / 10) @ [n mod 10]))"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":51},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":28,"label":"n mod 10"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":57},"env":[],"annots":[],"id":29,"label":"10"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","[]"]],"annots":[[13,1,"Redex"]],"id":30,"label":"digitsOfInt (n / 10)"},{"span":{"startLine":2,"endLine":2,"endCol":37,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[],"id":31,"label":"digitsOfInt"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":32,"label":"[] < 1"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":33,"label":"1"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[21,15,"Redex"]],"id":35,"label":"sumList (digitsOfInt (digitsOfInt 0)) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[26,1,"Redex"]],"id":36,"label":"sumList (digitsOfInt (if (n < 1)\n                      then []\n                      else (digitsOfInt (n / 10) @ [n mod 10]))) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":37,"label":"n < 1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["n","[]"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[13,1,"Redex"]],"id":38,"label":"sumList (if (n < 1)\n         then []\n         else (digitsOfInt (n / 10) @ [n mod 10]))"},{"span":{"startLine":11,"endLine":11,"endCol":15,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"]],"annots":[],"id":39,"label":"sumList"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[39,3,"Redex"],[43,1,"Redex"]],"id":40,"label":"if (sumList (digitsOfInt (digitsOfInt (abs n))) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":12,"endLine":12,"endCol":9,"startCol":8},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":41,"label":"n"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[13,1,"Redex"],[24,1,"Redex"]],"id":42,"label":"digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["n","[]"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[4,1,"Redex"]],"id":43,"label":"if (n < 1)\nthen []\nelse (digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":2,"endLine":2,"endCol":19,"startCol":17},"env":[],"annots":[],"id":44,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":36,"startCol":30},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":45,"label":"digits"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[0,13,"Redex"]],"id":46,"label":"digitsOfInt 0"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["n","0"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[4,1,"Redex"]],"id":47,"label":"if (n < 1)\nthen []\nelse (digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[3,7,"Redex"]],"id":48,"label":"if (0 < 1)\nthen []\nelse (digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,5,"Redex"]],"id":49,"label":"0 < 1"},{"span":null,"env":[],"annots":[],"id":50,"label":"true"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","[]"]],"annots":[[3,8,"Redex"]],"id":51,"label":"if ([] < 1)\nthen []\nelse (digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[29,7,"Redex"]],"id":52,"label":"if (sumList (digitsOfInt (if (0 < 1)\n                          then []\n                          else (digitsOfInt (n / 10) @ [n mod 10]))) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[35,3,"Redex"],[39,1,"Redex"]],"id":53,"label":"sumList (digitsOfInt (digitsOfInt (abs n)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[26,1,"Redex"]],"id":54,"label":"sumList (digitsOfInt (if (n < 1)\n                      then []\n                      else (digitsOfInt (n / 10) @ [n mod 10])))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[17,1,"Redex"]],"id":55,"label":"digitsOfInt (if (n < 1)\n             then []\n             else (digitsOfInt (n / 10) @ [n mod 10]))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[12,16,"Redex"]],"id":58,"label":"if (sumList (digitsOfInt []) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":39},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":60,"label":"n / 10"},{"span":{"startLine":2,"endLine":2,"endCol":40,"startCol":39},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":61,"label":"n"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":62,"label":"sumList (digitsOfInt (digits n))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":63,"label":"digitsOfInt (digits n)"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":64,"label":"digits n"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[21,102,"Redex"]],"id":66,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else (digitsOfInt (n / 10) @ [n mod 10]))) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[26,3,"Redex"],[30,1,"Redex"]],"id":68,"label":"digitsOfInt (digitsOfInt (abs n))"},{"span":null,"env":[["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[0,21,"Redex"]],"id":69,"label":"additivePersistence 0"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[33,1,"Redex"]],"id":70,"label":"if (sumList (digitsOfInt (digits n)) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":28,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[],"id":71,"label":"digitsOfInt"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","[]"]],"annots":[[13,1,"Redex"],[24,1,"Redex"]],"id":72,"label":"digitsOfInt (n / 10) @ [n mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":49,"startCol":48},"env":[],"annots":[[0,1,"Redex"]],"id":73,"label":"@"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":43},"env":[],"annots":[],"id":76,"label":"10"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","[]"]],"annots":[[12,8,"Redex"]],"id":77,"label":"sumList (if ([] < 1)\n         then []\n         else (digitsOfInt (n / 10) @ [n mod 10]))"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[0,56,"Redex"]],"id":78,"label":"if true\nthen []\nelse (digitsOfInt (n / 10) @ [n mod 10])"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":37},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":79,"label":"n"},{"span":null,"env":[],"annots":[],"id":80,"label":"0"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["n","[]"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[17,1,"Redex"]],"id":81,"label":"if (sumList (if (n < 1)\n             then []\n             else (digitsOfInt (n / 10) @ [n mod 10])) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","[]"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[16,8,"Redex"]],"id":82,"label":"if (sumList (if ([] < 1)\n             then []\n             else (digitsOfInt (n / 10) @ [n mod 10])) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":2,"endLine":2,"endCol":52,"startCol":51},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":83,"label":"n"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[13,1,"Redex"]],"id":86,"label":"digitsOfInt (n / 10)"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[13,3,"Redex"]],"id":87,"label":"digitsOfInt (abs 0)"},{"span":null,"env":[],"annots":[],"id":88,"label":"[]"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[39,3,"Redex"]],"id":89,"label":"if (sumList (digitsOfInt (digitsOfInt (abs 0))) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","[]"]],"annots":[[12,8,"Redex"]],"id":90,"label":"sumList (if ([] < 1)\n         then []\n         else (digitsOfInt (n / 10) @ [n mod 10])) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[25,7,"Redex"]],"id":91,"label":"sumList (digitsOfInt (if (0 < 1)\n                      then []\n                      else (digitsOfInt (n / 10) @ [n mod 10]))) < 10"},{"span":{"startLine":4,"endLine":4,"endCol":32,"startCol":29},"env":[],"annots":[[0,3,"Redex"]],"id":92,"label":"abs"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":93,"label":"n"},{"span":null,"env":[],"annots":[],"id":94,"label":"0"},{"span":{"startLine":4,"endLine":4,"endCol":34,"startCol":29},"env":[],"annots":[[0,3,"Redex"]],"id":95,"label":"abs 0"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[8,16,"Redex"]],"id":96,"label":"sumList (digitsOfInt [])"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["n","[]"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[13,1,"Redex"]],"id":97,"label":"sumList (if (n < 1)\n         then []\n         else (digitsOfInt (n / 10) @ [n mod 10])) < 10"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":99,"label":"sumList (digitsOfInt (digits n)) < 10"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[30,1,"Redex"]],"id":100,"label":"if (sumList (digitsOfInt (if (n < 1)\n                          then []\n                          else (digitsOfInt (n / 10) @ [n mod 10]))) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[8,16,"Redex"]],"id":101,"label":"sumList (digitsOfInt []) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n","[]"]],"annots":[[0,1,"Redex"]],"id":102,"label":"n"},{"span":{"startLine":11,"endLine":13,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"],["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[25,15,"Redex"]],"id":103,"label":"if (sumList (digitsOfInt (digitsOfInt 0)) < 10)\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":104,"label":"sumList (digitsOfInt (digits 0))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":30},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":105,"label":"digits n"},{"span":null,"env":[],"annots":[],"id":106,"label":"0"},{"span":{"startLine":13,"endLine":13,"endCol":49,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[],"id":107,"label":"digitsOfInt"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[25,7,"Redex"]],"id":109,"label":"sumList (digitsOfInt (if (0 < 1)\n                      then []\n                      else (digitsOfInt (n / 10) @ [n mod 10])))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":17},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"],["n","0"]],"annots":[[16,7,"Redex"]],"id":110,"label":"digitsOfInt (if (0 < 1)\n             then []\n             else (digitsOfInt (n / 10) @ [n mod 10]))"},{"span":{"startLine":11,"endLine":11,"endCol":48,"startCol":8},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"],["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[[35,3,"Redex"]],"id":111,"label":"sumList (digitsOfInt (digitsOfInt (abs 0))) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":112,"label":"1"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":114,"label":"n < 1"},{"span":null,"env":[],"annots":[],"id":115,"label":"0"},{"span":null,"env":[],"annots":[],"id":116,"label":"0"},{"span":{"startLine":2,"endLine":2,"endCol":59,"startCol":57},"env":[],"annots":[],"id":117,"label":"10"},{"span":{"startLine":13,"endLine":13,"endCol":59,"startCol":58},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":118,"label":"n"},{"span":{"startLine":2,"endLine":2,"endCol":37,"startCol":26},"env":[["digitsOfInt","fun n ->\n  if (n < 1)\n  then []\n  else (digitsOfInt (n / 10) @ [n mod 10])"]],"annots":[],"id":119,"label":"digitsOfInt"},{"span":{"startLine":2,"endLine":2,"endCol":60,"startCol":50},"env":[["n","[]"]],"annots":[[1,1,"Redex"]],"id":120,"label":"[n mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":49,"startCol":48},"env":[],"annots":[[0,1,"Redex"]],"id":121,"label":"@"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":29},"env":[["sumList","fun xs ->\n  (match xs with\n   | [] -> 0\n   | h :: t -> (h + sumList t))"]],"annots":[],"id":122,"label":"sumList"},{"span":null,"env":[["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":123,"label":"additivePersistence"},{"span":{"startLine":2,"endLine":2,"endCol":52,"startCol":51},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":124,"label":"n"},{"span":{"startLine":2,"endLine":2,"endCol":45,"startCol":43},"env":[],"annots":[],"id":125,"label":"10"},{"span":{"startLine":13,"endLine":13,"endCol":57,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":126,"label":"digits"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":8},"env":[["additivePersistence","fun n ->\n  if (sumList (digitsOfInt (digits n)) < 10)\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":127,"label":"additivePersistence"}]}