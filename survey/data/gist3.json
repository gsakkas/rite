{"root":117,"result":"stuck","reason":"Type error : could not match 't26 list with int","bad":25,"stuck":55,"edges":[{"arrows":"to","to":1,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":1,"label":"StepsTo PrimStep"},{"arrows":"to","to":4,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":105,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":6,"label":"StepsTo PrimStep"},{"arrows":"to","to":35,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":7,"label":"StepsTo PrimStep"},{"arrows":"to","to":94,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":22,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":11,"label":"StepsTo PrimStep"},{"arrows":"to","to":51,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":38,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":17,"label":"SubTerm 2"},{"arrows":"to","to":79,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":121,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":19,"label":"StepsTo CallStep"},{"arrows":"to","to":35,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":20,"label":"StepsTo CallStep"},{"arrows":"to","to":49,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":21,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":21,"label":"StepsTo ReturnStep"},{"arrows":"to","to":49,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":49,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":92,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":67,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":31,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":34,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":36,"label":"SubTerm 2"},{"arrows":"to","to":8,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":37,"label":"SubTerm 2"},{"arrows":"to","to":6,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":37,"label":"StepsTo PrimStep"},{"arrows":"to","to":57,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":61,"from":39,"label":"StepsTo CallStep"},{"arrows":"to","to":116,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":64,"from":41,"label":"StepsTo ReturnStep"},{"arrows":"to","to":64,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":43,"label":"StepsTo PrimStep"},{"arrows":"to","to":104,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":45,"label":"StepsTo PrimStep"},{"arrows":"to","to":43,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":64,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":46,"label":"SubTerm 2"},{"arrows":"to","to":107,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":47,"label":"SubTerm 2"},{"arrows":"to","to":48,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":110,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":62,"from":48,"label":"StepsTo CallStep"},{"arrows":"to","to":85,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":53,"label":"StepsTo CallStep"},{"arrows":"to","to":49,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":54,"label":"SubTerm 2"},{"arrows":"to","to":55,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":55,"label":"SubTerm 2"},{"arrows":"to","to":14,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":56,"label":"StepsTo ReturnStep"},{"arrows":"to","to":35,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":58,"label":"StepsTo CallStep"},{"arrows":"to","to":39,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":61,"label":"StepsTo BoringStep"},{"arrows":"to","to":46,"from":61,"label":"SubTerm 2"},{"arrows":"to","to":64,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":62,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":78,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":63,"label":"SubTerm 2"},{"arrows":"to","to":11,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":63,"label":"StepsTo PrimStep"},{"arrows":"to","to":3,"from":65,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":65,"label":"StepsTo CallStep"},{"arrows":"to","to":57,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":69,"label":"StepsTo PrimStep"},{"arrows":"to","to":73,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":70,"label":"StepsTo CallStep"},{"arrows":"to","to":35,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":72,"label":"StepsTo ReturnStep"},{"arrows":"to","to":49,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":58,"from":73,"label":"StepsTo PrimStep"},{"arrows":"to","to":82,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":75,"label":"StepsTo ReturnStep"},{"arrows":"to","to":11,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":101,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":82,"label":"StepsTo PrimStep"},{"arrows":"to","to":40,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":85,"label":"StepsTo CallStep"},{"arrows":"to","to":81,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":86,"label":"StepsTo CallStep"},{"arrows":"to","to":102,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":66,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":89,"label":"StepsTo CallStep"},{"arrows":"to","to":12,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":40,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":93,"label":"StepsTo CallStep"},{"arrows":"to","to":45,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":94,"label":"StepsTo PrimStep"},{"arrows":"to","to":3,"from":96,"label":"SubTerm 2"},{"arrows":"to","to":54,"from":96,"label":"StepsTo CallStep"},{"arrows":"to","to":57,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":49,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":99,"label":"StepsTo BoringStep"},{"arrows":"to","to":102,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":104,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":109,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":85,"from":110,"label":"StepsTo BoringStep"},{"arrows":"to","to":111,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":35,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":113,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":123,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":119,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":117,"label":"StepsTo CallStep"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":124,"from":117,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":29},"env":[["n|1","0"]],"annots":[[4,3,"Redex"]],"id":0,"label":"abs n|1"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":29},"env":[],"annots":[],"id":1,"label":"abs 0"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":8},"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[50,1,"Redex"]],"id":3,"label":"additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":29},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":4,"label":"sumList (digitsOfInt (digits n))"},{"span":{"startLine":15,"endLine":15,"endCol":36,"startCol":29},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"]],"annots":[],"id":5,"label":"sumList"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,5,"Redex"]],"id":6,"label":"sumList (digitsOfInt (if 0 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,5,"Redex"]],"id":7,"label":"sumList (digitsOfInt (if 0 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10]))"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,3,"Redex"]],"id":8,"label":"sumList (digitsOfInt (if n|2 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[25,3,"Redex"]],"id":9,"label":"sumList (digitsOfInt (if n|2 < 1\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10]))"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":11,"label":"sumList (digitsOfInt (digitsOfInt (abs 0))) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":41},"env":[],"annots":[],"id":12,"label":"10"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":13,"label":"digitsOfInt (digits n)"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[12,6,"Redex"]],"id":14,"label":"sumList (if [] < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":22},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":15,"label":"n|1 / 10"},{"span":{"startLine":4,"endLine":4,"endCol":23,"startCol":22},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":16,"label":"n|1"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[3,3,"Redex"]],"id":17,"label":"if n|1 < 1\nthen []\nelse digitsOfInt (n|1 / 10) @ [n|1 mod 10]"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[3,6,"Redex"]],"id":18,"label":"if [] < 1\nthen []\nelse digitsOfInt (n|1 / 10) @ [n|1 mod 10]"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":19,"label":"sumList (digitsOfInt (digits 0))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[12,10,"Redex"]],"id":20,"label":"digitsOfInt (digits 0)"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[24,110,"Redex"]],"id":21,"label":"if sumList (digitsOfInt (if true\n                         then []\n                         else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[16,3,"Redex"]],"id":22,"label":"digitsOfInt (if n|2 < 1\n             then []\n             else digitsOfInt (n|2 / 10) @ [n|2 mod 10])"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[39,3,"Redex"]],"id":23,"label":"sumList (digitsOfInt (digitsOfInt (abs n|1)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[30,3,"Redex"]],"id":24,"label":"digitsOfInt (digitsOfInt (abs n|1))"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":25,"label":"[] < 1"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":26,"label":"1"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":27,"label":"n|1"},{"span":null,"env":[],"annots":[],"id":28,"label":"[]"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[13,3,"Redex"],[26,3,"Redex"]],"id":31,"label":"digitsOfInt (n|1 / 10) @ [n|1 mod 10]"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[8,16,"Redex"]],"id":34,"label":"sumList (digitsOfInt [])"},{"span":{"startLine":13,"endLine":13,"endCol":13,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"]],"annots":[],"id":35,"label":"sumList"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[28,3,"Redex"]],"id":36,"label":"if sumList (digitsOfInt (if n|2 < 1\n                         then []\n                         else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[28,5,"Redex"]],"id":37,"label":"if sumList (digitsOfInt (if 0 < 1\n                         then []\n                         else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[12,6,"Redex"]],"id":38,"label":"sumList (if [] < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10])"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[0,13,"Redex"]],"id":39,"label":"digitsOfInt 0"},{"span":{"startLine":6,"endLine":6,"endCol":27,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":40,"label":"digitsOfInt"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[0,58,"Redex"]],"id":41,"label":"if true\nthen []\nelse digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[],"annots":[[0,5,"Redex"]],"id":43,"label":"0 < 1"},{"span":null,"env":[],"annots":[],"id":44,"label":"true"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[3,5,"Redex"]],"id":45,"label":"if 0 < 1\nthen []\nelse digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[13,3,"Redex"],[26,3,"Redex"]],"id":46,"label":"digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[32,1,"Redex"]],"id":47,"label":"if sumList (digitsOfInt (digits n)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[24,10,"Redex"]],"id":48,"label":"if sumList (digitsOfInt (digits 0)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":26,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":49,"label":"digitsOfInt"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":51,"label":"digits n"},{"span":{"startLine":15,"endLine":15,"endCol":57,"startCol":51},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":52,"label":"digits"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[0,14,"Redex"]],"id":53,"label":"digitsOfInt []"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[15,3,"Redex"]],"id":54,"label":"if sumList (if n|1 < 1\n            then []\n            else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[15,6,"Redex"]],"id":55,"label":"if sumList (if [] < 1\n            then []\n            else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[21,104,"Redex"]],"id":56,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10]))"},{"span":{"startLine":14,"endLine":14,"endCol":9,"startCol":8},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":57,"label":"n"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,15,"Redex"]],"id":58,"label":"digitsOfInt (digitsOfInt 0)"},{"span":{"startLine":2,"endLine":4,"endCol":43,"startCol":3},"env":[["n|2","0"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[3,3,"Redex"]],"id":61,"label":"if n|2 < 1\nthen []\nelse digitsOfInt (n|2 / 10) @ [n|2 mod 10]"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[42,3,"Redex"]],"id":62,"label":"if sumList (digitsOfInt (digitsOfInt (abs n|1))) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":63,"label":"if sumList (digitsOfInt (digitsOfInt (abs 0))) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":null,"env":[],"annots":[],"id":64,"label":"[]"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[24,15,"Redex"]],"id":65,"label":"if sumList (digitsOfInt (digitsOfInt 0)) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,3,"Redex"]],"id":66,"label":"sumList (if n|1 < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10])"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","[]"]],"annots":[[13,3,"Redex"]],"id":67,"label":"digitsOfInt (n|1 / 10)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":69,"label":"sumList (digitsOfInt (digitsOfInt (abs 0)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[21,15,"Redex"]],"id":70,"label":"sumList (digitsOfInt (digitsOfInt 0))"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":71,"label":"n|2 < 1"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[21,104,"Redex"]],"id":72,"label":"sumList (digitsOfInt (if true\n                      then []\n                      else digitsOfInt (n|2 / 10) @ [n|2 mod 10])) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":73,"label":"digitsOfInt (digitsOfInt (abs 0))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[12,86,"Redex"]],"id":75,"label":"digitsOfInt (if true\n             then []\n             else digitsOfInt (n|2 / 10) @ [n|2 mod 10])"},{"span":{"startLine":6,"endLine":6,"endCol":32,"startCol":29},"env":[],"annots":[],"id":77,"label":"abs"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[39,3,"Redex"]],"id":78,"label":"sumList (digitsOfInt (digitsOfInt (abs n|1))) < 10"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":6},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":79,"label":"n|1 < 1"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":28},"env":[["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[7,1,"Redex"]],"id":80,"label":"digits n"},{"span":{"startLine":13,"endLine":13,"endCol":34,"startCol":28},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[],"id":81,"label":"digits"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":82,"label":"digitsOfInt (abs 0)"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":33},"env":[["n|2","0"]],"annots":[[1,3,"Redex"]],"id":83,"label":"[n|2 mod 10]"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":34},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":84,"label":"n|2 mod 10"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[21,10,"Redex"]],"id":85,"label":"sumList (digitsOfInt (digits 0)) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":28},"env":[["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[0,8,"Redex"]],"id":86,"label":"digits 0"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["n|1","[]"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[12,3,"Redex"]],"id":87,"label":"sumList (if n|1 < 1\n         then []\n         else digitsOfInt (n|1 / 10) @ [n|1 mod 10]) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[21,15,"Redex"]],"id":89,"label":"sumList (digitsOfInt (digitsOfInt 0)) < 10"},{"span":{"startLine":4,"endLine":4,"endCol":43,"startCol":33},"env":[["n|1","[]"]],"annots":[[1,3,"Redex"]],"id":90,"label":"[n|1 mod 10]"},{"span":{"startLine":4,"endLine":4,"endCol":35,"startCol":34},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":91,"label":"n|2"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|1","0"]],"annots":[[17,3,"Redex"]],"id":92,"label":"digitsOfInt (abs n|1)"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[[8,16,"Redex"]],"id":93,"label":"sumList (digitsOfInt []) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[16,5,"Redex"]],"id":94,"label":"digitsOfInt (if 0 < 1\n             then []\n             else digitsOfInt (n|2 / 10) @ [n|2 mod 10])"},{"span":{"startLine":13,"endLine":15,"endCol":59,"startCol":3},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n","0"],["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"],["digits","fun n -> digitsOfInt (abs n)"]],"annots":[[11,16,"Redex"]],"id":96,"label":"if sumList (digitsOfInt []) < 10\nthen n\nelse additivePersistence (sumList (digitsOfInt (digits n)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":15},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[20,1,"Redex"]],"id":97,"label":"digitsOfInt (digits n)"},{"span":{"startLine":4,"endLine":4,"endCol":32,"startCol":31},"env":[],"annots":[],"id":98,"label":"@"},{"span":{"startLine":6,"endLine":6,"endCol":34,"startCol":33},"env":[["n|1","0"]],"annots":[[0,3,"Redex"]],"id":99,"label":"n|1"},{"span":null,"env":[],"annots":[],"id":100,"label":"0"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":35},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":101,"label":"n"},{"span":null,"env":[],"annots":[],"id":102,"label":"0"},{"span":{"startLine":2,"endLine":2,"endCol":7,"startCol":6},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":103,"label":"n|2"},{"span":null,"env":[],"annots":[],"id":104,"label":"0"},{"span":{"startLine":15,"endLine":15,"endCol":27,"startCol":8},"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":105,"label":"additivePersistence"},{"span":{"startLine":2,"endLine":2,"endCol":11,"startCol":10},"env":[],"annots":[],"id":106,"label":"1"},{"span":{"startLine":4,"endLine":4,"endCol":32,"startCol":31},"env":[],"annots":[],"id":107,"label":"@"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["n|2","0"]],"annots":[[13,3,"Redex"]],"id":108,"label":"digitsOfInt (n|2 / 10)"},{"span":{"startLine":4,"endLine":4,"endCol":20,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":109,"label":"digitsOfInt"},{"span":{"startLine":13,"endLine":13,"endCol":43,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":110,"label":"sumList (digitsOfInt (digits n)) < 10"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":6},"env":[["sumList","fun xs ->\n  match xs with\n  | [] -> 0\n  | h :: t -> h + sumList t"],["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"],["digits","fun n -> digitsOfInt (abs n)"],["n","0"]],"annots":[[29,1,"Redex"]],"id":111,"label":"sumList (digitsOfInt (digits n))"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":34},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":112,"label":"n|1 mod 10"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":40},"env":[],"annots":[],"id":113,"label":"10"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":22},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":114,"label":"n|2 / 10"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":26},"env":[],"annots":[],"id":115,"label":"10"},{"span":null,"env":[],"annots":[],"id":116,"label":"0"},{"span":null,"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[[0,21,"Redex"]],"id":117,"label":"additivePersistence 0"},{"span":null,"env":[],"annots":[],"id":118,"label":"0"},{"span":{"startLine":4,"endLine":4,"endCol":23,"startCol":22},"env":[["n|2","0"]],"annots":[[0,3,"Redex"]],"id":119,"label":"n|2"},{"span":{"startLine":15,"endLine":15,"endCol":59,"startCol":58},"env":[["n","0"]],"annots":[[0,1,"Redex"]],"id":120,"label":"n"},{"span":{"startLine":3,"endLine":3,"endCol":10,"startCol":8},"env":[],"annots":[],"id":121,"label":"[]"},{"span":{"startLine":4,"endLine":4,"endCol":20,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":122,"label":"digitsOfInt"},{"span":{"startLine":4,"endLine":4,"endCol":35,"startCol":34},"env":[["n|1","[]"]],"annots":[[0,3,"Redex"]],"id":123,"label":"n|1"},{"span":null,"env":[["additivePersistence","fun n ->\n  if sumList (digitsOfInt (digits n)) < 10\n  then n\n  else additivePersistence (sumList (digitsOfInt (digits n)))"]],"annots":[],"id":124,"label":"additivePersistence"},{"span":{"startLine":4,"endLine":4,"endCol":42,"startCol":40},"env":[],"annots":[],"id":125,"label":"10"},{"span":{"startLine":4,"endLine":4,"endCol":28,"startCol":26},"env":[],"annots":[],"id":126,"label":"10"},{"span":{"startLine":15,"endLine":15,"endCol":49,"startCol":38},"env":[["digitsOfInt","fun n ->\n  if n < 1\n  then []\n  else digitsOfInt (n / 10) @ [n mod 10]"]],"annots":[],"id":127,"label":"digitsOfInt"}]}