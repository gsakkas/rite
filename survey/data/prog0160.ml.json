{"root":62,"result":"stuck","reason":"Type error: stuck because `list' is incompatible with `int'","bad":15,"stuck":15,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":2,"label":"SubTerm 2"},{"arrows":"to","to":37,"from":2,"label":"StepsTo PrimStep"},{"arrows":"to","to":51,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":3,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":5,"label":"SubTerm 2"},{"arrows":"to","to":40,"from":5,"label":"StepsTo PrimStep"},{"arrows":"to","to":7,"from":6,"label":"StepsTo PrimStep"},{"arrows":"to","to":41,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":57,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":7,"label":"SubTerm 2"},{"arrows":"to","to":60,"from":7,"label":"StepsTo ReturnStep"},{"arrows":"to","to":60,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":73,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":64,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":19,"label":"StepsTo BoringStep"},{"arrows":"to","to":41,"from":19,"label":"SubTerm 2"},{"arrows":"to","to":60,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":26,"label":"SubTerm 2"},{"arrows":"to","to":47,"from":26,"label":"StepsTo CallStep"},{"arrows":"to","to":60,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 2"},{"arrows":"to","to":50,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":49,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":31,"label":"SubTerm 2"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":31,"label":"StepsTo PrimStep"},{"arrows":"to","to":84,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":32,"label":"StepsTo PrimStep"},{"arrows":"to","to":77,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":33,"label":"StepsTo PrimStep"},{"arrows":"to","to":46,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":60,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":64,"from":34,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":35,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":36,"label":"SubTerm 2"},{"arrows":"to","to":33,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":37,"label":"StepsTo CallStep"},{"arrows":"to","to":28,"from":37,"label":"SubTerm 2"},{"arrows":"to","to":78,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":39,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":40,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":40,"label":"StepsTo ReturnStep"},{"arrows":"to","to":16,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":66,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":44,"label":"StepsTo PrimStep"},{"arrows":"to","to":22,"from":46,"label":"StepsTo PrimStep"},{"arrows":"to","to":44,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":75,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":47,"label":"SubTerm 2"},{"arrows":"to","to":79,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":45,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":8,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":61,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":51,"label":"StepsTo PrimStep"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"StepsTo PrimStep"},{"arrows":"to","to":58,"from":56,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":57,"label":"StepsTo PrimStep"},{"arrows":"to","to":63,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":62,"label":"StepsTo CallStep"},{"arrows":"to","to":88,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":10,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":35,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":65,"label":"SubTerm 2"},{"arrows":"to","to":27,"from":65,"label":"StepsTo BoringStep"},{"arrows":"to","to":72,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":67,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":68,"label":"SubTerm 2"},{"arrows":"to","to":31,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":67,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":75,"label":"SubTerm 2"},{"arrows":"to","to":80,"from":75,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":78,"label":"StepsTo CallStep"},{"arrows":"to","to":55,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":81,"label":"StepsTo BoringStep"},{"arrows":"to","to":30,"from":82,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":85,"label":"StepsTo BoringStep"}],"nodes":[{"span":{"startLine":7,"endLine":7,"endCol":12,"startCol":6},"env":[["n_1","0"]],"annots":[[0,3,"Redex"]],"id":0,"label":"n_1 <= 0"},{"span":{"startLine":7,"endLine":7,"endCol":12,"startCol":11},"env":[],"annots":[],"id":1,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n","1"]],"annots":[[20,8,"Redex"],[38,1,"Redex"]],"id":2,"label":"append (digitsOfInt (1 / 10))\n       [n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":14,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"]],"annots":[],"id":3,"label":"append"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["n_1","0"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n","1"]],"annots":[[11,3,"Redex"],[116,1,"Redex"]],"id":4,"label":"append (if n_1 <= 0\n        then []\n        else append (digitsOfInt (n_1 / 10))\n                    [n_1 mod 10]) [n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n_1","0"],["n","1"]],"annots":[[11,6,"Redex"],[114,1,"Redex"]],"id":5,"label":"append (if 0 <= 0\n        then []\n        else append (digitsOfInt (n_1 / 10))\n                    [n_1 mod 10]) [n mod 10]"},{"span":{"startLine":7,"endLine":9,"endCol":48,"startCol":3},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n_1","0"]],"annots":[[3,6,"Redex"]],"id":6,"label":"if 0 <= 0\nthen []\nelse append (digitsOfInt (n_1 / 10))\n            [n_1 mod 10]"},{"span":{"startLine":7,"endLine":9,"endCol":48,"startCol":3},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n_1","0"]],"annots":[[0,77,"Redex"]],"id":7,"label":"if true\nthen []\nelse append (digitsOfInt (n_1 / 10))\n            [n_1 mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":29},"env":[["n","1"]],"annots":[[0,1,"Redex"]],"id":8,"label":"n / 10"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":33},"env":[],"annots":[],"id":9,"label":"10"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[],"annots":[],"id":10,"label":"([] , [1])"},{"span":null,"env":[],"annots":[],"id":11,"label":"[1]"},{"span":{"startLine":3,"endLine":3,"endCol":14,"startCol":11},"env":[["x","[]"]],"annots":[[1,1,"Redex"]],"id":12,"label":"[x]"},{"span":{"startLine":3,"endLine":3,"endCol":13,"startCol":12},"env":[["x","[]"]],"annots":[[0,1,"Redex"]],"id":13,"label":"x"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[["l","[1]"]],"annots":[[6,1,"Redex"]],"id":14,"label":"[] :: l"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[],"annots":[],"id":15,"label":"[] :: [1]"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n_1","0"]],"annots":[[13,3,"Redex"]],"id":16,"label":"digitsOfInt (n_1 / 10)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[],"id":17,"label":"digitsOfInt"},{"span":{"startLine":7,"endLine":9,"endCol":48,"startCol":3},"env":[["n_1","0"],["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[[3,3,"Redex"]],"id":19,"label":"if n_1 <= 0\nthen []\nelse append (digitsOfInt (n_1 / 10))\n            [n_1 mod 10]"},{"span":null,"env":[],"annots":[],"id":22,"label":"[1]"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[["x","[]"],["l","[1]"]],"annots":[[1,1,"Redex"],[5,1,"Redex"]],"id":23,"label":"(x , l)"},{"span":{"startLine":4,"endLine":4,"endCol":12,"startCol":11},"env":[["x","[]"]],"annots":[[0,1,"Redex"]],"id":24,"label":"x"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"]],"annots":[[0,13,"Redex"]],"id":26,"label":"append [] [1]"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n","1"]],"annots":[[21,1,"Redex"],[38,1,"Redex"]],"id":27,"label":"append (digitsOfInt (n / 10))\n       [n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":38},"env":[["n","1"]],"annots":[[1,1,"Redex"]],"id":28,"label":"[n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":30,"startCol":29},"env":[["n","1"]],"annots":[[0,1,"Redex"]],"id":29,"label":"n"},{"span":{"startLine":11,"endLine":11,"endCol":22,"startCol":21},"env":[],"annots":[],"id":30,"label":"1"},{"span":{"startLine":7,"endLine":9,"endCol":48,"startCol":3},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n","1"]],"annots":[[3,6,"Redex"]],"id":31,"label":"if 1 <= 0\nthen []\nelse append (digitsOfInt (n / 10))\n            [n mod 10]"},{"span":{"startLine":7,"endLine":7,"endCol":12,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":32,"label":"1 <= 0"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"]],"annots":[[11,8,"Redex"]],"id":33,"label":"append [] [1 mod 10]"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[["x","[]"],["l","[1]"]],"annots":[[1,1,"Redex"],[5,1,"Redex"]],"id":34,"label":"(x , l)"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":16},"env":[["l","[1]"]],"annots":[[0,1,"Redex"]],"id":35,"label":"l"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["n","1"]],"annots":[[11,1,"Redex"]],"id":36,"label":"append [] [n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n","1"]],"annots":[[7,15,"Redex"],[31,1,"Redex"]],"id":37,"label":"append (digitsOfInt 0)\n       [n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":29},"env":[["n_1","0"]],"annots":[[0,3,"Redex"]],"id":38,"label":"n_1 / 10"},{"span":{"startLine":9,"endLine":9,"endCol":30,"startCol":29},"env":[["n_1","0"]],"annots":[[0,3,"Redex"]],"id":39,"label":"n_1"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n_1","0"],["n","1"]],"annots":[[7,103,"Redex"],[112,1,"Redex"]],"id":40,"label":"append (if true\n        then []\n        else append (digitsOfInt (n_1 / 10))\n                    [n_1 mod 10]) [n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n_1","0"]],"annots":[[21,3,"Redex"],[40,3,"Redex"]],"id":41,"label":"append (digitsOfInt (n_1 / 10))\n       [n_1 mod 10]"},{"span":null,"env":[],"annots":[],"id":42,"label":"1"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":16},"env":[["l","[1]"]],"annots":[[0,1,"Redex"]],"id":43,"label":"l"},{"span":{"startLine":9,"endLine":9,"endCol":47,"startCol":39},"env":[],"annots":[[0,8,"Redex"]],"id":44,"label":"1 mod 10"},{"span":{"startLine":9,"endLine":9,"endCol":47,"startCol":45},"env":[],"annots":[],"id":45,"label":"10"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":38},"env":[],"annots":[[1,8,"Redex"]],"id":46,"label":"[1 mod 10]"},{"span":{"startLine":2,"endLine":4,"endCol":17,"startCol":3},"env":[["l","[1]"],["x","[]"]],"annots":[[6,1,"Redex"]],"id":47,"label":"match l with\n| [] -> [x]\n| _ -> x :: l"},{"span":null,"env":[],"annots":[],"id":48,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":47,"startCol":39},"env":[["n","1"]],"annots":[[0,1,"Redex"]],"id":49,"label":"n mod 10"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n","1"]],"annots":[[13,1,"Redex"]],"id":50,"label":"digitsOfInt (n / 10)"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[[12,8,"Redex"]],"id":51,"label":"digitsOfInt (1 / 10)"},{"span":{"startLine":9,"endLine":9,"endCol":48,"startCol":38},"env":[["n_1","0"]],"annots":[[1,3,"Redex"]],"id":52,"label":"[n_1 mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":47,"startCol":39},"env":[["n_1","0"]],"annots":[[0,3,"Redex"]],"id":53,"label":"n_1 mod 10"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":29},"env":[],"annots":[[0,6,"Redex"]],"id":54,"label":"1 / 10"},{"span":null,"env":[],"annots":[],"id":55,"label":"0"},{"span":{"startLine":7,"endLine":7,"endCol":7,"startCol":6},"env":[["n_1","0"]],"annots":[[0,3,"Redex"]],"id":56,"label":"n_1"},{"span":{"startLine":7,"endLine":7,"endCol":12,"startCol":6},"env":[],"annots":[[0,6,"Redex"]],"id":57,"label":"0 <= 0"},{"span":null,"env":[],"annots":[],"id":58,"label":"0"},{"span":null,"env":[],"annots":[],"id":60,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[],"id":61,"label":"digitsOfInt"},{"span":{"startLine":11,"endLine":11,"endCol":22,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[[0,13,"Redex"]],"id":62,"label":"digitsOfInt 1"},{"span":{"startLine":11,"endLine":11,"endCol":22,"startCol":21},"env":[],"annots":[],"id":63,"label":"1"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[["l","[1]"]],"annots":[[6,1,"Redex"]],"id":64,"label":"([] , l)"},{"span":{"startLine":7,"endLine":9,"endCol":48,"startCol":3},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"],["n","1"]],"annots":[[0,74,"Redex"]],"id":65,"label":"if false\nthen []\nelse append (digitsOfInt (n / 10))\n            [n mod 10]"},{"span":{"startLine":9,"endLine":9,"endCol":14,"startCol":8},"env":[["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"]],"annots":[],"id":66,"label":"append"},{"span":{"startLine":7,"endLine":7,"endCol":12,"startCol":6},"env":[["n","1"]],"annots":[[0,1,"Redex"]],"id":67,"label":"n <= 0"},{"span":{"startLine":7,"endLine":9,"endCol":48,"startCol":3},"env":[["n","1"],["append","fun x ->\n  fun l ->\n    match l with\n    | [] -> [x]\n    | _ -> x :: l"],["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[[3,1,"Redex"]],"id":68,"label":"if n <= 0\nthen []\nelse append (digitsOfInt (n / 10))\n            [n mod 10]"},{"span":null,"env":[],"annots":[],"id":69,"label":"[1]"},{"span":null,"env":[],"annots":[],"id":70,"label":"1"},{"span":null,"env":[],"annots":[],"id":71,"label":"1"},{"span":null,"env":[],"annots":[],"id":72,"label":"false"},{"span":null,"env":[],"annots":[],"id":73,"label":"true"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":33},"env":[],"annots":[],"id":74,"label":"10"},{"span":{"startLine":2,"endLine":4,"endCol":17,"startCol":3},"env":[["x","[]"],["l","[1]"]],"annots":[[0,40,"Redex"]],"id":75,"label":"match [1] with\n| [] -> [x]\n| _ -> x :: l"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[["x","[]"],["l","[1]"]],"annots":[[0,1,"Redex"],[5,1,"Redex"]],"id":76,"label":"x :: l"},{"span":{"startLine":7,"endLine":7,"endCol":12,"startCol":11},"env":[],"annots":[],"id":77,"label":"0"},{"span":{"startLine":9,"endLine":9,"endCol":35,"startCol":16},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[[0,13,"Redex"]],"id":78,"label":"digitsOfInt 0"},{"span":{"startLine":2,"endLine":2,"endCol":10,"startCol":9},"env":[["l","[1]"]],"annots":[[0,1,"Redex"]],"id":79,"label":"l"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":11},"env":[["x","[]"],["l","[1]"]],"annots":[[0,1,"Redex"],[5,1,"Redex"]],"id":80,"label":"x :: l"},{"span":{"startLine":7,"endLine":7,"endCol":7,"startCol":6},"env":[["n","1"]],"annots":[[0,1,"Redex"]],"id":81,"label":"n"},{"span":{"startLine":9,"endLine":9,"endCol":40,"startCol":39},"env":[["n","1"]],"annots":[[0,1,"Redex"]],"id":82,"label":"n"},{"span":{"startLine":9,"endLine":9,"endCol":40,"startCol":39},"env":[["n_1","0"]],"annots":[[0,3,"Redex"]],"id":83,"label":"n_1"},{"span":{"startLine":8,"endLine":8,"endCol":10,"startCol":8},"env":[],"annots":[],"id":84,"label":"[]"},{"span":{"startLine":4,"endLine":4,"endCol":12,"startCol":11},"env":[["x","[]"]],"annots":[[0,1,"Redex"]],"id":85,"label":"x"},{"span":{"startLine":9,"endLine":9,"endCol":47,"startCol":45},"env":[],"annots":[],"id":87,"label":"10"},{"span":{"startLine":11,"endLine":11,"endCol":20,"startCol":9},"env":[["digitsOfInt","fun n ->\n  if n <= 0\n  then []\n  else append (digitsOfInt (n / 10))\n              [n mod 10]"]],"annots":[],"id":88,"label":"digitsOfInt"}]}