{"root":128,"result":"stuck","reason":"Type error : could not match 't26 list with int","bad":94,"stuck":47,"edges":[{"arrows":"to","to":1,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":0,"label":"SubTerm 2"},{"arrows":"to","to":56,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":1,"label":"SubTerm 2"},{"arrows":"to","to":55,"from":1,"label":"StepsTo PrimStep"},{"arrows":"to","to":56,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":105,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":7,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":14,"label":"SubTerm 2"},{"arrows":"to","to":94,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":74,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":19,"label":"StepsTo BoringStep"},{"arrows":"to","to":166,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":69,"from":22,"label":"SubTerm 2"},{"arrows":"to","to":153,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":67,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":1,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":25,"label":"StepsTo PrimStep"},{"arrows":"to","to":67,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":25,"label":"SubTerm 2"},{"arrows":"to","to":27,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":164,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":102,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":32,"label":"SubTerm 2"},{"arrows":"to","to":131,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":148,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":29,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":138,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":55,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":67,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":41,"label":"SubTerm 2"},{"arrows":"to","to":7,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":44,"label":"StepsTo BoringStep"},{"arrows":"to","to":123,"from":44,"label":"SubTerm 2"},{"arrows":"to","to":159,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":48,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":56,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":51,"label":"StepsTo CallStep"},{"arrows":"to","to":75,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":53,"label":"SubTerm 2"},{"arrows":"to","to":58,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":91,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":63,"label":"StepsTo BoringStep"},{"arrows":"to","to":176,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":67,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":68,"label":"SubTerm 2"},{"arrows":"to","to":94,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":154,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":69,"label":"StepsTo BoringStep"},{"arrows":"to","to":142,"from":70,"label":"SubTerm 2"},{"arrows":"to","to":212,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":147,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":162,"from":71,"label":"SubTerm 2"},{"arrows":"to","to":3,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":75,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":151,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":151,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":76,"label":"StepsTo BoringStep"},{"arrows":"to","to":30,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":82,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":177,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":88,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":87,"label":"SubTerm 2"},{"arrows":"to","to":122,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":196,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":91,"label":"StepsTo BoringStep"},{"arrows":"to","to":93,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":94,"label":"SubTerm 2"},{"arrows":"to","to":23,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":95,"label":"StepsTo BoringStep"},{"arrows":"to","to":92,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":95,"label":"SubTerm 2"},{"arrows":"to","to":8,"from":96,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":168,"from":97,"label":"StepsTo PrimStep"},{"arrows":"to","to":25,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":98,"label":"StepsTo PrimStep"},{"arrows":"to","to":24,"from":99,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":99,"label":"SubTerm 2"},{"arrows":"to","to":34,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":199,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":40,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":60,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":110,"label":"SubTerm 2"},{"arrows":"to","to":126,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":112,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":116,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":119,"label":"StepsTo CallStep"},{"arrows":"to","to":29,"from":120,"label":"StepsTo BoringStep"},{"arrows":"to","to":2,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":202,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":126,"label":"SubTerm 2"},{"arrows":"to","to":189,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":128,"label":"StepsTo CallStep"},{"arrows":"to","to":134,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":134,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":167,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":131,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":131,"label":"SubTerm 2"},{"arrows":"to","to":68,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":133,"label":"StepsTo CallStep"},{"arrows":"to","to":135,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":134,"label":"SubTerm 2"},{"arrows":"to","to":171,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":59,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":138,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":135,"label":"StepsTo CallStep"},{"arrows":"to","to":81,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":137,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":139,"label":"SubTerm 2"},{"arrows":"to","to":187,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":141,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":140,"label":"SubTerm 2"},{"arrows":"to","to":173,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":147,"label":"StepsTo BoringStep"},{"arrows":"to","to":99,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":150,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":185,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":200,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":97,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":154,"from":153,"label":"StepsTo BoringStep"},{"arrows":"to","to":156,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":204,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":159,"label":"StepsTo BoringStep"},{"arrows":"to","to":140,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":163,"label":"SubTerm 1"},{"arrows":"to","to":209,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":166,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":168,"label":"StepsTo BoringStep"},{"arrows":"to","to":71,"from":169,"label":"StepsTo BoringStep"},{"arrows":"to","to":72,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":162,"from":169,"label":"SubTerm 2"},{"arrows":"to","to":170,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":170,"label":"StepsTo BoringStep"},{"arrows":"to","to":174,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":176,"label":"StepsTo BoringStep"},{"arrows":"to","to":136,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":129,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":198,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":203,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":182,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":184,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":184,"from":190,"label":"SubTerm 2"},{"arrows":"to","to":191,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":205,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":178,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":193,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":193,"label":"SubTerm 1"},{"arrows":"to","to":190,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":197,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[["seen","[]"]],"annots":[[11,4,"Redex"]],"id":0,"label":"List.mem 1 seen"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[],"annots":[],"id":1,"label":"List.mem 1 []"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[["seen'","[[]]"],["t","[2 ; 1]"]],"annots":[[1,5,"Redex"],[9,1,"Redex"]],"id":2,"label":"(seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":3,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[["seen","[]"]],"annots":[[9,1,"Redex"],[11,4,"Redex"]],"id":4,"label":"List.mem h seen"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":5,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["l","[1 ; 2 ; 1]"]],"annots":[[23,1,"Redex"]],"id":7,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,255,"Redex"]],"id":8,"label":"List.rev (match [1 ; 2 ; 1] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[46,1,"Redex"],[48,4,"Redex"],[131,5,"Redex"],[139,1,"Redex"]],"id":9,"label":"List.rev (let seen' =\n            if List.mem h seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen_1","[[]]"]],"annots":[[6,6,"Redex"]],"id":10,"label":"([] , seen_1)"},{"span":{"startLine":7,"endLine":7,"endCol":27,"startCol":25},"env":[],"annots":[],"id":11,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":28,"startCol":25},"env":[["h_1","2"]],"annots":[[1,3,"Redex"]],"id":12,"label":"[h_1]"},{"span":{"startLine":8,"endLine":8,"endCol":27,"startCol":26},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":13,"label":"h_1"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["seen_1","[[]]"],["h_1","2"]],"annots":[],"id":14,"label":"if List.mem 2 [[]]\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen_1","[[]]"]],"annots":[[6,6,"Redex"]],"id":15,"label":"[] :: seen_1"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,1,"Redex"]],"id":16,"label":"helper ([[]] , t)"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":17,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":24},"env":[["l","[1 ; 2 ; 1]"]],"annots":[[6,1,"Redex"]],"id":19,"label":"([] , l)"},{"span":null,"env":[],"annots":[],"id":20,"label":"[[]]"},{"span":null,"env":[],"annots":[],"id":21,"label":"[]"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[["h_1","2"],["seen_1","[[]]"]],"annots":[[9,3,"Redex"],[13,6,"Redex"]],"id":22,"label":"List.mem h_1 seen_1"},{"span":{"startLine":6,"endLine":6,"endCol":31,"startCol":23},"env":[],"annots":[],"id":23,"label":"List.mem"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[[14,4,"Redex"]],"id":24,"label":"if List.mem 1 seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[],"id":25,"label":"if List.mem 1 []\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[],"annots":[[2,1,"Redex"],[7,4,"Redex"]],"id":26,"label":"([h] , seen)"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":32},"env":[],"annots":[[0,4,"Redex"]],"id":27,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":28,"label":"seen"},{"span":null,"env":[],"annots":[],"id":29,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[["t","[2 ; 1]"]],"annots":[[1,5,"Redex"],[9,1,"Redex"]],"id":30,"label":"(seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":31,"label":"t"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["h_1","2"],["seen_1","[[]]"]],"annots":[[12,3,"Redex"],[16,6,"Redex"]],"id":32,"label":"if List.mem h_1 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[]]"]],"annots":[[1,3,"Redex"],[9,6,"Redex"]],"id":33,"label":"[h_1] :: seen_1"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[["t_1","[1]"]],"annots":[[1,5,"Redex"],[9,3,"Redex"]],"id":34,"label":"(seen' , t_1)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":26},"env":[["t_1","[1]"]],"annots":[[0,3,"Redex"]],"id":35,"label":"t_1"},{"span":{"startLine":6,"endLine":6,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":36,"label":"h"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[],"annots":[],"id":37,"label":"[] :: []"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[],"annots":[],"id":38,"label":"([] , [])"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["l","[1 ; 2 ; 1]"]],"annots":[[13,1,"Redex"]],"id":39,"label":"helper ([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[25,1,"Redex"]],"id":40,"label":"List.rev (helper ([[]] , t))"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[[0,40,"Redex"]],"id":41,"label":"if true\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":2,"endLine":10,"endCol":29,"startCol":3},"env":[["l","[1 ; 2 ; 1]"]],"annots":[[0,284,"Redex"]],"id":43,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   if List.mem h seen\n                   then [] :: seen\n                   else [h] :: seen in\n                 helper (seen' , t)) in\nList.rev (helper ([] , l))"},{"span":{"startLine":3,"endLine":9,"endCol":27,"startCol":5},"env":[["rest_1","[2 ; 1]"],["seen_1","[[]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,6,"Redex"],[26,6,"Redex"],[85,1,"Redex"],[87,6,"Redex"],[185,5,"Redex"],[193,1,"Redex"]],"id":44,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen_1","[[]]"]],"annots":[[0,6,"Redex"]],"id":45,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen_1","[[]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[48,6,"Redex"],[139,5,"Redex"],[147,3,"Redex"]],"id":46,"label":"List.rev (let seen' =\n            if List.mem 2 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen_1","[[]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[137,5,"Redex"],[145,3,"Redex"]],"id":47,"label":"List.rev (let seen' =\n            if List.mem 2 [[]]\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[["h","1"],["seen","[]"]],"annots":[[9,1,"Redex"],[11,4,"Redex"]],"id":48,"label":"List.mem h seen"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen_1","[[]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,259,"Redex"]],"id":49,"label":"List.rev (match [2 ; 1] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["h_1","2"],["seen_1","[[]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[46,3,"Redex"],[50,6,"Redex"],[141,5,"Redex"],[149,3,"Redex"]],"id":50,"label":"List.rev (let seen' =\n            if List.mem h_1 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,23,"Redex"]],"id":51,"label":"helper ([[]] , [2 ; 1])"},{"span":{"startLine":10,"endLine":10,"endCol":14,"startCol":6},"env":[],"annots":[],"id":52,"label":"List.rev"},{"span":null,"env":[],"annots":[],"id":53,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":54,"label":"1"},{"span":null,"env":[],"annots":[],"id":55,"label":"true"},{"span":{"startLine":6,"endLine":6,"endCol":31,"startCol":23},"env":[],"annots":[],"id":56,"label":"List.mem"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["l","[1 ; 2 ; 1]"]],"annots":[[10,6,"Redex"],[23,1,"Redex"]],"id":57,"label":"List.rev (helper ([] , l))"},{"span":{"startLine":10,"endLine":10,"endCol":14,"startCol":6},"env":[],"annots":[],"id":58,"label":"List.rev"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":24},"env":[],"annots":[],"id":59,"label":"([] , [1 ; 2 ; 1])"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[],"annots":[[1,5,"Redex"],[9,1,"Redex"]],"id":60,"label":"(seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":61,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[64,5,"Redex"],[72,1,"Redex"]],"id":62,"label":"List.rev (let seen' =\n            [] :: [] in\n          helper (seen' , t))"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,50,"Redex"]],"id":63,"label":"List.rev (let seen' = [[]] in\n          helper (seen' , t))"},{"span":{"startLine":6,"endLine":6,"endCol":33,"startCol":32},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":64,"label":"h"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":65,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[[6,4,"Redex"]],"id":67,"label":"[] :: seen"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[["seen_1","[[]]"]],"annots":[[11,6,"Redex"]],"id":68,"label":"List.mem 2 seen_1"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":34},"env":[["seen_1","[[]]"]],"annots":[[0,6,"Redex"]],"id":69,"label":"seen_1"},{"span":null,"env":[],"annots":[],"id":70,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":3,"endLine":9,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,193,"Redex"]],"id":71,"label":"match [1 ; 2 ; 1] with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":72,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[["t","[2 ; 1]"]],"annots":[[8,1,"Redex"]],"id":74,"label":"([[]] , t)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[],"annots":[],"id":75,"label":"([[]] , [2 ; 1])"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[18,4,"Redex"],[34,5,"Redex"],[42,1,"Redex"]],"id":76,"label":"let seen' = [] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"],[16,1,"Redex"]],"id":77,"label":"helper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":78,"label":"helper"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[12,64,"Redex"],[88,5,"Redex"],[96,1,"Redex"]],"id":79,"label":"let seen' = if true\n            then [] :: seen\n            else [h] :: seen in helper (seen' , t)"},{"span":null,"env":[],"annots":[],"id":81,"label":"[]"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["h_1","2"],["seen_1","[[]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[26,3,"Redex"],[30,6,"Redex"],[91,5,"Redex"],[99,3,"Redex"]],"id":82,"label":"let seen' =\n  if List.mem h_1 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen_1","[[]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[28,6,"Redex"],[89,5,"Redex"],[97,3,"Redex"]],"id":83,"label":"let seen' =\n  if List.mem 2 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":24},"env":[["l","[1 ; 2 ; 1]"]],"annots":[[6,1,"Redex"]],"id":84,"label":"([] , l)"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":28},"env":[["l","[1 ; 2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":85,"label":"l"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[28,4,"Redex"],[81,5,"Redex"],[89,1,"Redex"]],"id":86,"label":"let seen' =\n  if List.mem 1 seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[["seen_1","[[]]"]],"annots":[[9,1,"Redex"],[11,6,"Redex"]],"id":87,"label":"List.mem h seen_1"},{"span":{"startLine":6,"endLine":6,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":88,"label":"h"},{"span":{"startLine":6,"endLine":6,"endCol":31,"startCol":23},"env":[],"annots":[],"id":89,"label":"List.mem"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":16},"env":[["l","[1 ; 2 ; 1]"]],"annots":[[0,6,"Redex"],[13,1,"Redex"]],"id":90,"label":"helper ([] , l)"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[32,5,"Redex"],[40,1,"Redex"]],"id":91,"label":"let seen' = [] :: [] in\nhelper (seen' , t)"},{"span":null,"env":[],"annots":[],"id":92,"label":"[2 ; 1]"},{"span":{"startLine":12,"endLine":12,"endCol":32,"startCol":31},"env":[],"annots":[],"id":93,"label":"1"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[],"annots":[],"id":94,"label":"List.mem 2 [[]]"},{"span":{"startLine":3,"endLine":9,"endCol":27,"startCol":5},"env":[["seen_1","[[]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,197,"Redex"]],"id":95,"label":"match [2 ; 1] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,4,"Redex"],[44,4,"Redex"],[121,1,"Redex"],[123,4,"Redex"],[245,5,"Redex"],[253,1,"Redex"]],"id":96,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[129,5,"Redex"],[137,1,"Redex"]],"id":97,"label":"List.rev (let seen' =\n            if List.mem 1 []\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[79,5,"Redex"],[87,1,"Redex"]],"id":98,"label":"let seen' =\n  if List.mem 1 []\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["h","1"],["seen","[]"]],"annots":[[12,1,"Redex"],[14,4,"Redex"]],"id":99,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[8,5,"Redex"],[16,3,"Redex"]],"id":100,"label":"helper (seen' , t_1)"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["rest_1","[2 ; 1]"],["seen_1","[[]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,6,"Redex"],[46,6,"Redex"],[125,1,"Redex"],[127,6,"Redex"],[255,5,"Redex"],[263,1,"Redex"]],"id":101,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":9,"endLine":9,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":102,"label":"seen'"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":104,"label":"2"},{"span":{"startLine":9,"endLine":9,"endCol":24,"startCol":19},"env":[["seen'","[[]]"]],"annots":[[0,5,"Redex"]],"id":105,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[]]"],["t","[2 ; 1]"]],"annots":[[18,5,"Redex"],[26,1,"Redex"]],"id":106,"label":"List.rev (helper (seen' , t))"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":34},"env":[["seen_1","[[]]"]],"annots":[[0,6,"Redex"]],"id":107,"label":"seen_1"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[],"annots":[[0,6,"Redex"],[8,5,"Redex"],[16,1,"Redex"]],"id":108,"label":"helper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":11},"env":[],"annots":[[0,6,"Redex"]],"id":109,"label":"helper"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[],"annots":[[12,1,"Redex"],[14,4,"Redex"]],"id":110,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[],"annots":[[1,1,"Redex"],[7,4,"Redex"]],"id":111,"label":"[h] :: seen"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[[6,4,"Redex"]],"id":112,"label":"([] , seen)"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[]]"]],"annots":[[2,3,"Redex"],[9,6,"Redex"]],"id":113,"label":"([h_1] , seen_1)"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":32},"env":[["seen_1","[[]]"]],"annots":[[0,6,"Redex"]],"id":114,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[40,4,"Redex"],[66,5,"Redex"],[74,1,"Redex"]],"id":116,"label":"List.rev (let seen' =\n            [] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["seen_1","[[]]"]],"annots":[[2,1,"Redex"],[7,6,"Redex"]],"id":117,"label":"([h] , seen_1)"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":32},"env":[["seen_1","[[]]"]],"annots":[[0,6,"Redex"]],"id":118,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,25,"Redex"]],"id":119,"label":"List.rev (helper ([[]] , [2 ; 1]))"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":120,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[]]"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"],[16,1,"Redex"]],"id":121,"label":"helper (seen' , t)"},{"span":{"startLine":6,"endLine":6,"endCol":31,"startCol":23},"env":[],"annots":[],"id":122,"label":"List.mem"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen_1","[[]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[26,1,"Redex"],[28,6,"Redex"],[87,5,"Redex"],[95,1,"Redex"]],"id":123,"label":"let seen' =\n  if List.mem h seen_1\n  then [] :: seen_1\n  else [h] :: seen_1 in\nhelper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"],[16,1,"Redex"]],"id":124,"label":"helper (seen' , t)"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":23},"env":[],"annots":[[9,1,"Redex"],[11,4,"Redex"]],"id":126,"label":"List.mem h seen"},{"span":{"startLine":6,"endLine":6,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":127,"label":"h"},{"span":{"startLine":12,"endLine":12,"endCol":33,"startCol":9},"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             if List.mem h seen\n                             then [] :: seen\n                             else [h] :: seen in\n                           helper (seen' , t)) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":128,"label":"removeDuplicates [1 ; 2 ; 1]"},{"span":{"startLine":8,"endLine":8,"endCol":28,"startCol":25},"env":[["h","1"]],"annots":[[1,1,"Redex"]],"id":129,"label":"[h]"},{"span":{"startLine":8,"endLine":8,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":130,"label":"h"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["seen_1","[[]]"],["h_1","2"]],"annots":[[14,6,"Redex"]],"id":131,"label":"if List.mem 2 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,27,"Redex"]],"id":133,"label":"List.rev (helper ([] , [1 ; 2 ; 1]))"},{"span":null,"env":[],"annots":[],"id":134,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,25,"Redex"]],"id":135,"label":"helper ([] , [1 ; 2 ; 1])"},{"span":null,"env":[],"annots":[],"id":136,"label":"[[]]"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen_1","[[]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[87,5,"Redex"],[95,3,"Redex"]],"id":137,"label":"let seen' =\n  if List.mem 2 [[]]\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":10,"endLine":10,"endCol":22,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":138,"label":"helper"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["seen_1","[[]]"]],"annots":[[12,1,"Redex"],[14,6,"Redex"]],"id":139,"label":"if List.mem h seen_1\nthen [] :: seen_1\nelse [h] :: seen_1"},{"span":{"startLine":6,"endLine":8,"endCol":36,"startCol":20},"env":[["seen","[]"]],"annots":[[12,1,"Redex"],[14,4,"Redex"]],"id":140,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[[6,4,"Redex"]],"id":141,"label":"[] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":32,"startCol":31},"env":[],"annots":[],"id":142,"label":"1"},{"span":null,"env":[],"annots":[],"id":143,"label":"[2 ; 1]"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":144,"label":"2"},{"span":{"startLine":12,"endLine":12,"endCol":32,"startCol":31},"env":[],"annots":[],"id":145,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[],"annots":[[6,4,"Redex"]],"id":146,"label":"[] :: seen"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"],[28,4,"Redex"],[81,5,"Redex"],[89,1,"Redex"]],"id":147,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":148,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[],"annots":[[1,5,"Redex"],[9,1,"Redex"]],"id":149,"label":"(seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":150,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":151,"label":"[[]]"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[48,4,"Redex"],[131,5,"Redex"],[139,1,"Redex"]],"id":152,"label":"List.rev (let seen' =\n            if List.mem 1 seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":6,"endLine":6,"endCol":33,"startCol":32},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":153,"label":"h_1"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":154,"label":"2"},{"span":{"startLine":8,"endLine":8,"endCol":28,"startCol":25},"env":[],"annots":[[1,1,"Redex"]],"id":155,"label":"[h]"},{"span":{"startLine":8,"endLine":8,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":156,"label":"h"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen_1","[[]]"]],"annots":[[6,6,"Redex"]],"id":157,"label":"([] , seen_1)"},{"span":{"startLine":7,"endLine":7,"endCol":27,"startCol":25},"env":[],"annots":[],"id":158,"label":"[]"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"]],"annots":[[0,6,"Redex"]],"id":159,"label":"rest_1"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":24},"env":[],"annots":[],"id":160,"label":"[]"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[26,1,"Redex"],[28,4,"Redex"],[81,5,"Redex"],[89,1,"Redex"]],"id":162,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[],"annots":[[6,4,"Redex"]],"id":163,"label":"([] , seen)"},{"span":{"startLine":8,"endLine":8,"endCol":28,"startCol":25},"env":[],"annots":[[1,1,"Redex"]],"id":164,"label":"[h]"},{"span":{"startLine":8,"endLine":8,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":165,"label":"h"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":28},"env":[["l","[1 ; 2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":166,"label":"l"},{"span":{"startLine":12,"endLine":12,"endCol":25,"startCol":9},"env":[["removeDuplicates","fun l -> (let rec helper =\n            fun (seen , rest) ->\n              match rest with\n              | [] -> seen\n              | h :: t -> (let seen' =\n                             if List.mem h seen\n                             then [] :: seen\n                             else [h] :: seen in\n                           helper (seen' , t)) in\n          List.rev (helper ([] , l)))"]],"annots":[],"id":167,"label":"removeDuplicates"},{"span":{"startLine":10,"endLine":10,"endCol":29,"startCol":6},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[22,84,"Redex"],[118,5,"Redex"],[126,1,"Redex"]],"id":168,"label":"List.rev (let seen' = if true\n                      then [] :: seen\n                      else [h] :: seen in helper (seen' , t))"},{"span":{"startLine":3,"endLine":9,"endCol":27,"startCol":5},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,4,"Redex"],[24,4,"Redex"],[81,1,"Redex"],[83,4,"Redex"],[175,5,"Redex"],[183,1,"Redex"]],"id":169,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"]],"annots":[[0,4,"Redex"]],"id":170,"label":"rest"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":171,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":31},"env":[],"annots":[[0,4,"Redex"]],"id":172,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[[6,4,"Redex"]],"id":173,"label":"([] , seen)"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":174,"label":"seen"},{"span":{"startLine":6,"endLine":6,"endCol":38,"startCol":34},"env":[],"annots":[[0,4,"Redex"]],"id":175,"label":"seen"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,38,"Redex"]],"id":176,"label":"let seen' = [[]] in\nhelper (seen' , t)"},{"span":{"startLine":10,"endLine":10,"endCol":26,"startCol":24},"env":[],"annots":[],"id":177,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["h","1"],["seen","[]"]],"annots":[[2,1,"Redex"],[7,4,"Redex"]],"id":178,"label":"([h] , seen)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"],[16,1,"Redex"]],"id":179,"label":"helper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":19},"env":[],"annots":[[1,5,"Redex"],[9,1,"Redex"]],"id":180,"label":"(seen' , t)"},{"span":{"startLine":8,"endLine":8,"endCol":28,"startCol":25},"env":[],"annots":[[1,1,"Redex"]],"id":181,"label":"[h]"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["seen_1","[[]]"]],"annots":[[1,1,"Redex"],[7,6,"Redex"]],"id":182,"label":"[h] :: seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":183,"label":"2"},{"span":{"startLine":6,"endLine":9,"endCol":27,"startCol":8},"env":[],"annots":[[26,1,"Redex"],[28,4,"Redex"],[73,6,"Redex"],[81,5,"Redex"],[89,1,"Redex"]],"id":184,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":185,"label":"t"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":186,"label":"seen"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":25},"env":[["seen_1","[[]]"]],"annots":[[6,6,"Redex"]],"id":187,"label":"[] :: seen_1"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":188,"label":"t"},{"span":{"startLine":6,"endLine":6,"endCol":31,"startCol":23},"env":[],"annots":[],"id":189,"label":"List.mem"},{"span":{"startLine":3,"endLine":9,"endCol":27,"startCol":5},"env":[],"annots":[[6,4,"Redex"],[24,4,"Redex"],[81,1,"Redex"],[83,4,"Redex"],[167,6,"Redex"],[175,5,"Redex"],[183,1,"Redex"]],"id":190,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":3,"endLine":3,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":191,"label":"rest"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["h","1"],["seen","[]"]],"annots":[[1,1,"Redex"],[7,4,"Redex"]],"id":192,"label":"[h] :: seen"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["seen","[]"]],"annots":[[2,1,"Redex"],[7,4,"Redex"]],"id":193,"label":"([h] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":32,"startCol":31},"env":[],"annots":[],"id":194,"label":"1"},{"span":{"startLine":2,"endLine":9,"endCol":27,"startCol":19},"env":[],"annots":[],"id":195,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"},{"span":{"startLine":10,"endLine":10,"endCol":22,"startCol":16},"env":[],"annots":[[0,6,"Redex"]],"id":196,"label":"helper"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":25},"env":[["seen","[]"]],"annots":[[1,1,"Redex"],[7,4,"Redex"]],"id":197,"label":"[h] :: seen"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":198,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":199,"label":"helper"},{"span":null,"env":[],"annots":[],"id":200,"label":"[]"},{"span":{"startLine":8,"endLine":8,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":201,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":202,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":203,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":31},"env":[["seen_1","[[]]"]],"annots":[[0,6,"Redex"]],"id":204,"label":"seen_1"},{"span":{"startLine":4,"endLine":4,"endCol":17,"startCol":13},"env":[],"annots":[[0,4,"Redex"]],"id":205,"label":"seen"},{"span":{"startLine":12,"endLine":12,"endCol":32,"startCol":31},"env":[],"annots":[],"id":206,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":207,"label":"h"},{"span":{"startLine":9,"endLine":9,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":208,"label":"t"},{"span":{"startLine":7,"endLine":7,"endCol":27,"startCol":25},"env":[],"annots":[],"id":209,"label":"[]"},{"span":{"startLine":7,"endLine":7,"endCol":27,"startCol":25},"env":[],"annots":[],"id":210,"label":"[]"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":211,"label":"2"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":27},"env":[],"annots":[],"id":212,"label":"1"},{"span":{"startLine":12,"endLine":12,"endCol":30,"startCol":29},"env":[],"annots":[],"id":213,"label":"2"},{"span":{"startLine":7,"endLine":7,"endCol":35,"startCol":31},"env":[["seen_1","[[]]"]],"annots":[[0,6,"Redex"]],"id":214,"label":"seen_1"}]}