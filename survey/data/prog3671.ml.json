{"root":203,"result":"stuck","reason":"Type error: stuck because int is incompatible with int list","bad":15,"stuck":155,"edges":[{"arrows":"to","to":1,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":1,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":121,"from":2,"label":"SubTerm 2"},{"arrows":"to","to":256,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":35,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"StepsTo CallStep"},{"arrows":"to","to":95,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":185,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":7,"label":"StepsTo BoringStep"},{"arrows":"to","to":107,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":7,"label":"SubTerm 2"},{"arrows":"to","to":270,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":8,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":9,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":86,"from":11,"label":"SubTerm 2"},{"arrows":"to","to":160,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":12,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":13,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":90,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":14,"label":"SubTerm 2"},{"arrows":"to","to":225,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":118,"from":15,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":138,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":245,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":282,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"StepsTo BoringStep"},{"arrows":"to","to":47,"from":20,"label":"SubTerm 2"},{"arrows":"to","to":225,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":241,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":14,"from":21,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":21,"label":"SubTerm 2"},{"arrows":"to","to":225,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":186,"from":27,"label":"SubTerm 2"},{"arrows":"to","to":195,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":30,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":284,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":35,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":36,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":8,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":224,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":243,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":41,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":42,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":43,"label":"StepsTo BoringStep"},{"arrows":"to","to":82,"from":43,"label":"SubTerm 2"},{"arrows":"to","to":227,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":45,"label":"StepsTo CallStep"},{"arrows":"to","to":90,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":228,"from":47,"label":"SubTerm 2"},{"arrows":"to","to":283,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":92,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":48,"label":"StepsTo BoringStep"},{"arrows":"to","to":242,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":84,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":50,"label":"StepsTo CallStep"},{"arrows":"to","to":20,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":44,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":51,"label":"SubTerm 2"},{"arrows":"to","to":188,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":174,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":223,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":148,"from":55,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":155,"from":56,"label":"StepsTo BoringStep"},{"arrows":"to","to":58,"from":57,"label":"SubTerm 2"},{"arrows":"to","to":172,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":218,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":60,"label":"StepsTo BoringStep"},{"arrows":"to","to":74,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":64,"label":"StepsTo CallStep"},{"arrows":"to","to":167,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":110,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":67,"label":"StepsTo BoringStep"},{"arrows":"to","to":105,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":213,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":182,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":262,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":64,"from":72,"label":"StepsTo BoringStep"},{"arrows":"to","to":167,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":201,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":11,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":246,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":166,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":252,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":176,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":210,"from":78,"label":"SubTerm 2"},{"arrows":"to","to":13,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":147,"from":80,"label":"SubTerm 2"},{"arrows":"to","to":270,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":215,"from":82,"label":"SubTerm 2"},{"arrows":"to","to":257,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":83,"label":"SubTerm 2"},{"arrows":"to","to":161,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":271,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":85,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":190,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":266,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":280,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":204,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":216,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":207,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":275,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":91,"label":"StepsTo BoringStep"},{"arrows":"to","to":202,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":92,"label":"SubTerm 2"},{"arrows":"to","to":258,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":93,"label":"SubTerm 2"},{"arrows":"to","to":273,"from":93,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":96,"label":"StepsTo BoringStep"},{"arrows":"to","to":154,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":8,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":98,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":99,"label":"StepsTo CallStep"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 2"},{"arrows":"to","to":256,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":102,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":222,"from":102,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":80,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":107,"label":"StepsTo BoringStep"},{"arrows":"to","to":33,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":108,"label":"SubTerm 2"},{"arrows":"to","to":28,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":99,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":109,"label":"StepsTo CallStep"},{"arrows":"to","to":186,"from":109,"label":"SubTerm 2"},{"arrows":"to","to":100,"from":110,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":151,"from":111,"label":"StepsTo CallStep"},{"arrows":"to","to":113,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":117,"label":"StepsTo CallStep"},{"arrows":"to","to":115,"from":117,"label":"SubTerm 2"},{"arrows":"to","to":173,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":118,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":120,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":120,"label":"SubTerm 2"},{"arrows":"to","to":256,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":123,"label":"StepsTo BoringStep"},{"arrows":"to","to":221,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":124,"label":"StepsTo BoringStep"},{"arrows":"to","to":209,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":129,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":237,"from":125,"label":"SubTerm 1"},{"arrows":"to","to":127,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":130,"label":"StepsTo ReturnStep"},{"arrows":"to","to":168,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":131,"label":"StepsTo BoringStep"},{"arrows":"to","to":200,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":117,"from":132,"label":"StepsTo BoringStep"},{"arrows":"to","to":173,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":220,"from":132,"label":"SubTerm 2"},{"arrows":"to","to":28,"from":133,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":133,"label":"SubTerm 2"},{"arrows":"to","to":200,"from":133,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":235,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":214,"from":138,"label":"StepsTo BoringStep"},{"arrows":"to","to":27,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":139,"label":"StepsTo BoringStep"},{"arrows":"to","to":143,"from":142,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":142,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":221,"from":144,"label":"StepsTo BoringStep"},{"arrows":"to","to":146,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":165,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":146,"label":"StepsTo BoringStep"},{"arrows":"to","to":69,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":148,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":148,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":149,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":149,"label":"SubTerm 1"},{"arrows":"to","to":191,"from":149,"label":"StepsTo BoringStep"},{"arrows":"to","to":125,"from":150,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":150,"label":"StepsTo BoringStep"},{"arrows":"to","to":263,"from":150,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":151,"label":"StepsTo BoringStep"},{"arrows":"to","to":152,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":48,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":49,"from":152,"label":"SubTerm 2"},{"arrows":"to","to":91,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":242,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":125,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":153,"label":"StepsTo CallStep"},{"arrows":"to","to":125,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":154,"label":"StepsTo BoringStep"},{"arrows":"to","to":133,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":155,"label":"SubTerm 1"},{"arrows":"to","to":157,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":239,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":187,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":159,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":158,"label":"SubTerm 2"},{"arrows":"to","to":226,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":118,"from":163,"label":"StepsTo BoringStep"},{"arrows":"to","to":165,"from":164,"label":"SubTerm 1"},{"arrows":"to","to":185,"from":164,"label":"StepsTo BoringStep"},{"arrows":"to","to":206,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":87,"from":165,"label":"StepsTo BoringStep"},{"arrows":"to","to":125,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":168,"label":"StepsTo ReturnStep"},{"arrows":"to","to":263,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":254,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":174,"label":"StepsTo BoringStep"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":220,"from":174,"label":"SubTerm 2"},{"arrows":"to","to":264,"from":176,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":176,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":177,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":179,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":98,"from":179,"label":"StepsTo CallStep"},{"arrows":"to","to":117,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":180,"label":"SubTerm 0"},{"arrows":"to","to":181,"from":180,"label":"SubTerm 2"},{"arrows":"to","to":251,"from":180,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":126,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":184,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":185,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":185,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":186,"label":"StepsTo BoringStep"},{"arrows":"to","to":205,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":123,"from":191,"label":"StepsTo BoringStep"},{"arrows":"to","to":144,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":192,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":192,"label":"SubTerm 1"},{"arrows":"to","to":196,"from":195,"label":"SubTerm 1"},{"arrows":"to","to":248,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":197,"label":"SubTerm 2"},{"arrows":"to","to":162,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":271,"from":197,"label":"StepsTo ReturnStep"},{"arrows":"to","to":28,"from":200,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":200,"label":"SubTerm 2"},{"arrows":"to","to":197,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":263,"from":200,"label":"StepsTo ReturnStep"},{"arrows":"to","to":10,"from":201,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":201,"label":"StepsTo BoringStep"},{"arrows":"to","to":38,"from":203,"label":"StepsTo CallStep"},{"arrows":"to","to":158,"from":203,"label":"SubTerm 1"},{"arrows":"to","to":158,"from":203,"label":"SubTerm 1"},{"arrows":"to","to":234,"from":203,"label":"SubTerm 0"},{"arrows":"to","to":234,"from":203,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":205,"label":"StepsTo BoringStep"},{"arrows":"to","to":110,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":208,"from":207,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":207,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":209,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":209,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":209,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":209,"label":"SubTerm 2"},{"arrows":"to","to":238,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":265,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":279,"from":210,"label":"SubTerm 2"},{"arrows":"to","to":142,"from":211,"label":"SubTerm 1"},{"arrows":"to","to":212,"from":211,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":213,"label":"SubTerm 1"},{"arrows":"to","to":223,"from":213,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":214,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":214,"label":"StepsTo CallStep"},{"arrows":"to","to":153,"from":214,"label":"SubTerm 1"},{"arrows":"to","to":114,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":215,"label":"SubTerm 2"},{"arrows":"to","to":14,"from":216,"label":"SubTerm 0"},{"arrows":"to","to":53,"from":216,"label":"SubTerm 2"},{"arrows":"to","to":75,"from":216,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":230,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":115,"from":220,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":221,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":221,"label":"StepsTo BoringStep"},{"arrows":"to","to":125,"from":221,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":222,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":222,"label":"StepsTo BoringStep"},{"arrows":"to","to":213,"from":222,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":223,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":223,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":223,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":224,"label":"StepsTo BoringStep"},{"arrows":"to","to":188,"from":227,"label":"StepsTo BoringStep"},{"arrows":"to","to":261,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":247,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":272,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":241,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":241,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":241,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":267,"from":246,"label":"SubTerm 0"},{"arrows":"to","to":281,"from":246,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":249,"label":"SubTerm 1"},{"arrows":"to","to":268,"from":251,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":255,"from":254,"label":"SubTerm 1"},{"arrows":"to","to":274,"from":254,"label":"SubTerm 2"},{"arrows":"to","to":259,"from":255,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":259,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":259,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":263,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":263,"label":"StepsTo BoringStep"},{"arrows":"to","to":186,"from":263,"label":"SubTerm 2"},{"arrows":"to","to":271,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":268,"label":"SubTerm 0"},{"arrows":"to","to":289,"from":268,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":274,"label":"SubTerm 0"},{"arrows":"to","to":249,"from":277,"label":"SubTerm 0"}],"nodes":[{"span":null,"env":[["x","2"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[37,216,"Redex"]],"id":0,"label":"List.rev (let seen' =\n            if (match [[1]] with\n                | [] -> false\n                | y :: ys -> if x = y\n                             then true\n                             else List.mem x\n                                           ys) then [] :: seen_1 else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":null,"env":[["x","2"],["y","[1]"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[40,1,"Redex"]],"id":1,"label":"List.rev (let seen' =\n            if if x = y\n               then true\n               else List.mem x ys\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[11,4,"Redex"]],"id":2,"label":"List.mem 1 seen"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":3,"label":"1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[48,6,"Redex"]],"id":4,"label":"List.rev (let seen' =\n            if List.mem 2 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":15,"endLine":15,"endCol":14,"startCol":6},"env":[],"annots":[],"id":5,"label":"List.rev"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,24,"Redex"]],"id":6,"label":"helper ([[1]] , [2 ; 1])"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,6,"Redex"]],"id":7,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":null,"env":[["x","2"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[3,156,"Redex"]],"id":8,"label":"if (match [[1]] with\n    | [] -> false\n    | y :: ys -> if x = y\n                 then true\n                 else List.mem x\n                               ys) then [] :: seen_1 else [h_1] :: seen_1"},{"span":null,"env":[["x","2"],["y","[1]"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[6,1,"Redex"]],"id":9,"label":"if if x = y\n   then true\n   else List.mem x ys\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":10,"label":"xs"},{"span":null,"env":[],"annots":[],"id":11,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[46,3,"Redex"]],"id":12,"label":"List.rev (let seen' =\n            if List.mem h_1 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[26,3,"Redex"]],"id":13,"label":"let seen' =\n  if List.mem h_1 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":null,"env":[["x","2"],["ys","[]"]],"annots":[[3,7,"Redex"]],"id":14,"label":"if 2 = [1]\nthen true\nelse List.mem x ys"},{"span":null,"env":[],"annots":[[0,7,"Redex"]],"id":15,"label":"2 = [1]"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,255,"Redex"]],"id":16,"label":"List.rev (match [1 ; 2 ; 1] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[46,1,"Redex"]],"id":17,"label":"List.rev (let seen' =\n            if List.mem h seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[9,1,"Redex"]],"id":18,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[],"annots":[[0,4,"Redex"]],"id":19,"label":"seen"},{"span":null,"env":[["x","2"],["y","[1]"],["ys","[]"]],"annots":[[3,1,"Redex"]],"id":20,"label":"if x = y\nthen true\nelse List.mem x ys"},{"span":null,"env":[["y","[1]"],["x","2"],["ys","[]"]],"annots":[[7,1,"Redex"]],"id":21,"label":"if 2 = y\nthen true\nelse List.mem x ys"},{"span":null,"env":[["x","2"]],"annots":[[0,1,"Redex"]],"id":22,"label":"x"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":23,"label":"2"},{"span":null,"env":[],"annots":[],"id":25,"label":"[1]"},{"span":null,"env":[["y","[1]"]],"annots":[[4,1,"Redex"]],"id":26,"label":"2 = y"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"]],"annots":[[14,4,"Redex"]],"id":27,"label":"if List.mem 1 seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":28,"label":"[] :: seen"},{"span":null,"env":[["y","[1]"],["x","2"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[24,1,"Redex"]],"id":29,"label":"let seen' =\n  if if 2 = y\n     then true\n     else List.mem x ys\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":null,"env":[["y","[1]"],["x","2"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[10,1,"Redex"]],"id":30,"label":"if if 2 = y\n   then true\n   else List.mem x ys\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[2,1,"Redex"]],"id":31,"label":"([h] , seen)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":32,"label":"seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"]],"annots":[],"id":33,"label":"List.mem h seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":34,"label":"List.mem"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[28,6,"Redex"]],"id":35,"label":"let seen' =\n  if List.mem 2 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"]],"annots":[[14,6,"Redex"]],"id":36,"label":"if List.mem 2 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":null,"env":[["x","2"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[17,166,"Redex"]],"id":37,"label":"let seen' =\n  if (match [[1]] with\n      | [] -> false\n      | y :: ys -> if x = y\n                   then true\n                   else List.mem x\n                                 ys) then [] :: seen_1 else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":7,"endLine":15,"endCol":30,"startCol":3},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,285,"Redex"]],"id":38,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   if List.mem h seen\n                   then [] :: seen\n                   else [h] :: seen in\n                 helper (seen' , t)) in\nList.rev (helper ([] , xs))"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[1,1,"Redex"]],"id":40,"label":"[h]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":41,"label":"h"},{"span":null,"env":[["x","2"],["y","[1]"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[20,1,"Redex"]],"id":42,"label":"let seen' =\n  if if x = y\n     then true\n     else List.mem x ys\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":null,"env":[["xs_1","[[1]]"],["x","2"]],"annots":[[6,4,"Redex"]],"id":43,"label":"match xs_1 with\n| [] -> false\n| y :: ys -> if x = y\n             then true\n             else List.mem x ys"},{"span":null,"env":[],"annots":[],"id":44,"label":"false"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[15,40,"Redex"]],"id":45,"label":"let seen' = if List.mem 2\n                        [[1]] then [] :: seen_1 else [h_1] :: seen_1 in helper (seen' , t_1)"},{"span":null,"env":[["xs_1","[[1]]"],["x","2"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[24,4,"Redex"]],"id":46,"label":"let seen' =\n  if (match xs_1 with\n      | [] -> false\n      | y :: ys -> if x = y\n                   then true\n                   else List.mem x ys)\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":null,"env":[["x","2"],["ys","[]"]],"annots":[],"id":47,"label":"List.mem x ys"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,193,"Redex"]],"id":48,"label":"match [1 ; 2 ; 1] with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[26,1,"Redex"]],"id":49,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[37,40,"Redex"]],"id":50,"label":"List.rev (let seen' =\n            if List.mem 2\n                        [[1]] then [] :: seen_1 else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":null,"env":[["x","2"]],"annots":[[0,107,"Redex"]],"id":51,"label":"match [[1]] with\n| [] -> false\n| y :: ys -> if x = y\n             then true\n             else List.mem x ys"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[[12,3,"Redex"]],"id":52,"label":"if List.mem h_1 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":53,"label":"[h_1] :: seen_1"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"]],"id":54,"label":"List.rev (helper ([[1]] , t))"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,26,"Redex"]],"id":55,"label":"List.rev (helper ([[1]] , [2 ; 1]))"},{"span":null,"env":[["y","[1]"],["x","2"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[44,1,"Redex"]],"id":56,"label":"List.rev (let seen' =\n            if if 2 = y\n               then true\n               else List.mem x ys\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[9,1,"Redex"]],"id":57,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":58,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":60,"label":"[1] :: seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,25,"Redex"]],"id":64,"label":"helper ([] , [1 ; 2 ; 1])"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":66,"label":"([1] , seen)"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,43,"Redex"]],"id":67,"label":"let seen' = [1] :: [] in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,39,"Redex"]],"id":68,"label":"let seen' = [[1]] in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"]],"id":69,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":70,"label":"(seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[],"annots":[],"id":71,"label":"([1] , [])"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":72,"label":"helper ([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":24},"env":[],"annots":[],"id":74,"label":"([] , [1 ; 2 ; 1])"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":75,"label":"[] :: seen_1"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[8,5,"Redex"]],"id":76,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":77,"label":"(seen' , t)"},{"span":null,"env":[["x","1"]],"annots":[[3,1,"Redex"]],"id":78,"label":"if x = y\nthen true\nelse List.mem x ys"},{"span":null,"env":[],"annots":[],"id":79,"label":"true"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,197,"Redex"]],"id":80,"label":"match [2 ; 1] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":null,"env":[],"annots":[],"id":81,"label":"[2 ; 1]"},{"span":null,"env":[["x","2"]],"annots":[[3,1,"Redex"]],"id":82,"label":"if x = y\nthen true\nelse List.mem x ys"},{"span":null,"env":[["xs_1","[]"],["x","1"]],"annots":[[6,4,"Redex"]],"id":83,"label":"match xs_1 with\n| [] -> false\n| y :: ys -> if x = y\n             then true\n             else List.mem x ys"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"]],"id":84,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":85,"label":"(seen' , t)"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":86,"label":"1"},{"span":null,"env":[],"annots":[],"id":87,"label":"[2 ; 1]"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":88,"label":"1"},{"span":null,"env":[["x","2"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[20,7,"Redex"]],"id":89,"label":"let seen' =\n  if if 2 = [1]\n     then true\n     else List.mem x ys\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[],"id":90,"label":"helper (seen' , t_1)"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"]],"annots":[[0,4,"Redex"]],"id":91,"label":"rest"},{"span":null,"env":[],"annots":[],"id":92,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":93,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":94,"label":"rest"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":95,"label":"helper"},{"span":null,"env":[["xs_1","[]"],["x","1"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[44,4,"Redex"]],"id":96,"label":"List.rev (let seen' =\n            if (match xs_1 with\n                | [] -> false\n                | y :: ys -> if x = y\n                             then true\n                             else List.mem x ys)\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":null,"env":[["x","1"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[37,213,"Redex"]],"id":97,"label":"List.rev (let seen' =\n            if (match [] with\n                | [] -> false\n                | y :: ys -> if x = y\n                             then true\n                             else List.mem x\n                                           ys) then [] :: seen else [h] :: seen in\n          helper (seen' , t))"},{"span":null,"env":[["xs_1","[[1]]"],["x","2"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[10,4,"Redex"]],"id":98,"label":"if (match xs_1 with\n    | [] -> false\n    | y :: ys -> if x = y\n                 then true\n                 else List.mem x ys)\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[],"annots":[[0,13,"Redex"]],"id":99,"label":"List.mem 1 []"},{"span":null,"env":[],"annots":[],"id":100,"label":"[]"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,67,"Redex"]],"id":101,"label":"List.rev (let seen' =\n            [1] :: [] in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,51,"Redex"]],"id":102,"label":"List.rev (let seen' = [[1]] in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":103,"label":"h"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,259,"Redex"]],"id":104,"label":"List.rev (match [2 ; 1] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[],"annots":[[0,9,"Redex"]],"id":105,"label":"[1] :: []"},{"span":null,"env":[],"annots":[],"id":106,"label":"[[1]]"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"]],"annots":[[0,6,"Redex"]],"id":107,"label":"rest_1"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen_1","[[1]]"]],"annots":[],"id":108,"label":"if List.mem h seen_1\nthen [] :: seen_1\nelse [h] :: seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"]],"annots":[[3,25,"Redex"]],"id":109,"label":"if List.mem 1\n            [] then [] :: seen else [h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":110,"label":"seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,27,"Redex"]],"id":111,"label":"List.rev (helper ([] , [1 ; 2 ; 1]))"},{"span":null,"env":[["x","2"]],"annots":[[0,1,"Redex"]],"id":112,"label":"x = y"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":113,"label":"y"},{"span":null,"env":[["x","2"]],"annots":[[0,1,"Redex"]],"id":114,"label":"x"},{"span":null,"env":[],"annots":[],"id":115,"label":"[[1]]"},{"span":null,"env":[],"annots":[],"id":116,"label":"[1]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[],"annots":[[0,16,"Redex"]],"id":117,"label":"List.mem 2 [[1]]"},{"span":null,"env":[],"annots":[],"id":118,"label":"[1]"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":119,"label":"1"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[9,1,"Redex"]],"id":120,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":121,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[41,4,"Redex"]],"id":123,"label":"List.rev (let seen' =\n            [1] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"]],"id":124,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"]],"id":125,"label":"helper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":126,"label":"[h]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":127,"label":"h"},{"span":{"startLine":15,"endLine":15,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":128,"label":"[]"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":129,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":130,"label":"List.rev (let seen' =\n            if false\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":null,"env":[["x","1"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,213,"Redex"]],"id":131,"label":"let seen' = if (match [] with\n                | [] -> false\n                | y :: ys -> if x = y\n                             then true\n                             else List.mem x\n                                           ys) then [] :: seen else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[11,6,"Redex"]],"id":132,"label":"List.mem 2 seen_1"},{"span":null,"env":[["xs_1","[]"],["x","1"],["seen","[]"],["h","1"]],"annots":[[10,4,"Redex"]],"id":133,"label":"if (match xs_1 with\n    | [] -> false\n    | y :: ys -> if x = y\n                 then true\n                 else List.mem x ys)\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":134,"label":"[] :: seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":135,"label":"([] , seen_1)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":136,"label":"[h]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":137,"label":"h"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[48,4,"Redex"]],"id":138,"label":"List.rev (let seen' =\n            if List.mem 1 seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[28,4,"Redex"]],"id":139,"label":"let seen' =\n  if List.mem 1 seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":142,"label":"([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":143,"label":"xs"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[13,1,"Redex"]],"id":144,"label":"let seen' = [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[1,5,"Redex"]],"id":145,"label":"(seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"]],"annots":[[0,5,"Redex"]],"id":146,"label":"seen'"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":147,"label":"let seen' =\n  if List.mem h seen_1\n  then [] :: seen_1\n  else [h] :: seen_1 in\nhelper (seen' , t)"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,6,"Redex"]],"id":148,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[22,85,"Redex"]],"id":149,"label":"List.rev (let seen' = if false\n                      then [] :: seen\n                      else [h] :: seen in helper (seen' , t))"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[12,65,"Redex"]],"id":150,"label":"let seen' = if false\n            then [] :: seen\n            else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,4,"Redex"]],"id":151,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,4,"Redex"]],"id":152,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,37,"Redex"]],"id":153,"label":"let seen' = if List.mem 1\n                        [] then [] :: seen else [h] :: seen in helper (seen' , t)"},{"span":null,"env":[["xs_1","[]"],["x","1"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[24,4,"Redex"]],"id":154,"label":"let seen' =\n  if (match xs_1 with\n      | [] -> false\n      | y :: ys -> if x = y\n                   then true\n                   else List.mem x ys)\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":null,"env":[["x","2"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[40,7,"Redex"]],"id":155,"label":"List.rev (let seen' =\n            if if 2 = [1]\n               then true\n               else List.mem x ys\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":156,"label":"([h_1] , seen_1)"},{"span":{"startLine":13,"endLine":13,"endCol":28,"startCol":25},"env":[["h_1","2"]],"annots":[],"id":157,"label":"[h_1]"},{"span":null,"env":[],"annots":[],"id":158,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":159,"label":"2"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":160,"label":"1"},{"span":null,"env":[["xs_1","[]"]],"annots":[[0,4,"Redex"]],"id":161,"label":"xs_1"},{"span":null,"env":[],"annots":[],"id":162,"label":"[]"},{"span":null,"env":[["y","[1]"]],"annots":[[0,1,"Redex"]],"id":163,"label":"y"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[9,1,"Redex"]],"id":164,"label":"([[1]] , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":165,"label":"t"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[],"annots":[],"id":166,"label":"helper"},{"span":{"startLine":15,"endLine":15,"endCol":22,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":167,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":168,"label":"let seen' =\n  if false\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[26,1,"Redex"]],"id":169,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":170,"label":"[]"},{"span":{"startLine":15,"endLine":15,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":171,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":172,"label":"h"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":173,"label":"2"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[[9,3,"Redex"]],"id":174,"label":"List.mem h_1 seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":175,"label":"List.mem"},{"span":null,"env":[["x","1"]],"annots":[[0,1,"Redex"]],"id":176,"label":"x = y"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":177,"label":"h_1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"]],"annots":[[3,28,"Redex"]],"id":179,"label":"if List.mem 2\n            [[1]] then [] :: seen_1 else [h_1] :: seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[12,1,"Redex"]],"id":180,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[1,1,"Redex"]],"id":181,"label":"[h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":182,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[2,1,"Redex"]],"id":183,"label":"([h] , seen)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[],"annots":[[0,4,"Redex"]],"id":184,"label":"seen"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":19},"env":[],"annots":[],"id":185,"label":"([[1]] , [2 ; 1])"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[1,1,"Redex"]],"id":186,"label":"[h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h_1","2"]],"annots":[],"id":187,"label":"h_1"},{"span":null,"env":[],"annots":[],"id":188,"label":"[[1]]"},{"span":null,"env":[],"annots":[],"id":189,"label":"[1]"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":190,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[35,1,"Redex"]],"id":191,"label":"List.rev (let seen' =\n            [h] :: seen in\n          helper (seen' , t))"},{"span":null,"env":[["xs_1","[[1]]"],["x","2"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[44,4,"Redex"]],"id":192,"label":"List.rev (let seen' =\n            if (match xs_1 with\n                | [] -> false\n                | y :: ys -> if x = y\n                             then true\n                             else List.mem x ys)\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":194,"label":"1"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":195,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":196,"label":"seen"},{"span":null,"env":[["x","1"]],"annots":[[0,104,"Redex"]],"id":197,"label":"match [] with\n| [] -> false\n| y :: ys -> if x = y\n             then true\n             else List.mem x ys"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":199,"label":"seen'"},{"span":null,"env":[["x","1"],["seen","[]"],["h","1"]],"annots":[[3,153,"Redex"]],"id":200,"label":"if (match [] with\n    | [] -> false\n    | y :: ys -> if x = y\n                 then true\n                 else List.mem x\n                               ys) then [] :: seen else [h] :: seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":201,"label":"([] , xs)"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":202,"label":"1"},{"span":{"startLine":17,"endLine":17,"endCol":33,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[[0,28,"Redex"]],"id":203,"label":"removeDuplicates [1 ; 2 ; 1]"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":204,"label":"2"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[2,1,"Redex"]],"id":205,"label":"([h] , seen)"},{"span":null,"env":[],"annots":[],"id":206,"label":"[[1]]"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":19},"env":[["t_1","[1]"]],"annots":[],"id":207,"label":"(seen' , t_1)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":208,"label":"seen'"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[12,1,"Redex"]],"id":209,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":null,"env":[["x","1"]],"annots":[],"id":210,"label":"List.mem x ys"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":211,"label":"helper ([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":22,"startCol":16},"env":[],"annots":[],"id":212,"label":"helper"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"]],"id":213,"label":"helper (seen' , t)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[37,37,"Redex"]],"id":214,"label":"List.rev (let seen' =\n            if List.mem 1\n                        [] then [] :: seen else [h] :: seen in\n          helper (seen' , t))"},{"span":null,"env":[["x","2"]],"annots":[],"id":215,"label":"List.mem x ys"},{"span":null,"env":[["x","2"],["ys","[]"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[6,7,"Redex"]],"id":216,"label":"if if 2 = [1]\n   then true\n   else List.mem x ys\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":218,"label":"List.mem"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":219,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":220,"label":"seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[19,4,"Redex"]],"id":221,"label":"let seen' = [1] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[18,5,"Redex"]],"id":222,"label":"List.rev (helper (seen' , t))"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[16,1,"Redex"]],"id":223,"label":"helper ([[1]] , t)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":224,"label":"List.rev (helper ([] , xs))"},{"span":null,"env":[],"annots":[],"id":225,"label":"true"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":226,"label":"1"},{"span":null,"env":[["xs_1","[[1]]"]],"annots":[[0,4,"Redex"]],"id":227,"label":"xs_1"},{"span":null,"env":[["ys","[]"]],"annots":[],"id":228,"label":"ys"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":229,"label":"2"},{"span":{"startLine":15,"endLine":15,"endCol":14,"startCol":6},"env":[],"annots":[],"id":230,"label":"List.rev"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":231,"label":"1"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":232,"label":"[h]"},{"span":{"startLine":17,"endLine":17,"endCol":25,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[],"id":234,"label":"removeDuplicates"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":235,"label":"seen_1"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":236,"label":"1"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["t","[2 ; 1]"]],"annots":[[1,5,"Redex"]],"id":237,"label":"(seen' , t)"},{"span":null,"env":[],"annots":[],"id":238,"label":"List.mem"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":239,"label":"seen_1"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t_1","[1]"]],"annots":[],"id":240,"label":"t_1"},{"span":null,"env":[["x","2"],["y","[1]"]],"annots":[[0,1,"Redex"]],"id":241,"label":"x = y"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":242,"label":"seen"},{"span":{"startLine":7,"endLine":14,"endCol":27,"startCol":19},"env":[],"annots":[],"id":243,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"},{"span":null,"env":[],"annots":[],"id":244,"label":"List.mem"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":245,"label":"h"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":246,"label":"([] , seen_1)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":247,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":248,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":249,"label":"([h] , seen_1)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":250,"label":"seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":251,"label":"[] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":252,"label":"seen'"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[12,1,"Redex"]],"id":254,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[],"annots":[],"id":255,"label":"[] :: seen"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":256,"label":"List.mem"},{"span":null,"env":[],"annots":[],"id":257,"label":"true"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":258,"label":"2"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[],"annots":[],"id":259,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":260,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":261,"label":"h"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":262,"label":"t"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[[0,41,"Redex"]],"id":263,"label":"if false\nthen [] :: seen\nelse [h] :: seen"},{"span":null,"env":[],"annots":[[0,1,"Redex"]],"id":264,"label":"y"},{"span":null,"env":[["x","1"]],"annots":[[0,1,"Redex"]],"id":265,"label":"x"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":266,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":267,"label":"[]"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":268,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":269,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[["seen_1","[[1]]"]],"annots":[],"id":270,"label":"seen_1"},{"span":null,"env":[],"annots":[],"id":271,"label":"false"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":272,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[],"annots":[],"id":273,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":274,"label":"[h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":275,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":276,"label":"seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":277,"label":"[h] :: seen_1"},{"span":null,"env":[],"annots":[],"id":278,"label":"ys"},{"span":null,"env":[],"annots":[],"id":279,"label":"ys"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":280,"label":"seen'"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":281,"label":"seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":282,"label":"List.mem"},{"span":null,"env":[],"annots":[],"id":283,"label":"List.mem"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":284,"label":"h"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":285,"label":"t"},{"span":null,"env":[],"annots":[],"id":286,"label":"[1]"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":287,"label":"2"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[],"annots":[],"id":288,"label":"seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":289,"label":"seen"}]}