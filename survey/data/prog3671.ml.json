{"root":151,"result":"stuck","reason":"Type error: stuck because `list' is incompatible with `int'","bad":33,"stuck":96,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":62,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":87,"from":0,"label":"SubTerm 2"},{"arrows":"to","to":193,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":4,"label":"SubTerm 2"},{"arrows":"to","to":34,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":84,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":56,"from":7,"label":"SubTerm 2"},{"arrows":"to","to":114,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":7,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":97,"from":9,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 2"},{"arrows":"to","to":179,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":215,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":15,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":10,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":137,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":143,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"StepsTo CallStep"},{"arrows":"to","to":72,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":21,"label":"SubTerm 2"},{"arrows":"to","to":77,"from":21,"label":"StepsTo BoringStep"},{"arrows":"to","to":149,"from":21,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":21,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":184,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":163,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":178,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":57,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":28,"label":"StepsTo BoringStep"},{"arrows":"to","to":105,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":123,"from":28,"label":"SubTerm 2"},{"arrows":"to","to":15,"from":29,"label":"StepsTo BoringStep"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":31,"label":"SubTerm 2"},{"arrows":"to","to":59,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":177,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":120,"from":33,"label":"SubTerm 2"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 2"},{"arrows":"to","to":122,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":159,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":38,"from":37,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":38,"label":"SubTerm 0"},{"arrows":"to","to":190,"from":38,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":38,"label":"SubTerm 2"},{"arrows":"to","to":45,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":51,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":110,"from":43,"label":"StepsTo CallStep"},{"arrows":"to","to":117,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":45,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":47,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":69,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":91,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":15,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":49,"label":"StepsTo BoringStep"},{"arrows":"to","to":117,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":148,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":7,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":55,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":138,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":202,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":213,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":57,"label":"SubTerm 2"},{"arrows":"to","to":33,"from":57,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":59,"from":58,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":59,"label":"SubTerm 2"},{"arrows":"to","to":196,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":60,"label":"SubTerm 2"},{"arrows":"to","to":209,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":63,"from":62,"label":"SubTerm 2"},{"arrows":"to","to":158,"from":62,"label":"StepsTo PrimStep"},{"arrows":"to","to":193,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":65,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":68,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":118,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":69,"label":"StepsTo BoringStep"},{"arrows":"to","to":15,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":62,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":71,"label":"StepsTo PrimStep"},{"arrows":"to","to":137,"from":71,"label":"SubTerm 2"},{"arrows":"to","to":63,"from":73,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":74,"label":"StepsTo CallStep"},{"arrows":"to","to":33,"from":75,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":75,"label":"SubTerm 1"},{"arrows":"to","to":123,"from":75,"label":"SubTerm 2"},{"arrows":"to","to":16,"from":76,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":76,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":76,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":77,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":77,"label":"SubTerm 2"},{"arrows":"to","to":168,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":78,"label":"StepsTo BoringStep"},{"arrows":"to","to":166,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":137,"from":79,"label":"SubTerm 2"},{"arrows":"to","to":158,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":82,"label":"StepsTo PrimStep"},{"arrows":"to","to":111,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":84,"label":"StepsTo BoringStep"},{"arrows":"to","to":0,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":66,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":86,"label":"SubTerm 2"},{"arrows":"to","to":193,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":64,"from":89,"label":"StepsTo BoringStep"},{"arrows":"to","to":161,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":90,"label":"StepsTo BoringStep"},{"arrows":"to","to":153,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":95,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":98,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":98,"label":"StepsTo BoringStep"},{"arrows":"to","to":100,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":161,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":102,"label":"StepsTo CallStep"},{"arrows":"to","to":17,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":105,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":123,"from":104,"label":"SubTerm 2"},{"arrows":"to","to":136,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":20,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":72,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":107,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":107,"label":"StepsTo BoringStep"},{"arrows":"to","to":182,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":108,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":108,"label":"StepsTo BoringStep"},{"arrows":"to","to":8,"from":109,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":31,"from":110,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":110,"label":"SubTerm 2"},{"arrows":"to","to":58,"from":110,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":110,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":111,"label":"StepsTo PrimStep"},{"arrows":"to","to":113,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":142,"from":112,"label":"SubTerm 2"},{"arrows":"to","to":164,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":119,"label":"SubTerm 0"},{"arrows":"to","to":191,"from":119,"label":"SubTerm 1"},{"arrows":"to","to":216,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":24,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":78,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":126,"label":"StepsTo BoringStep"},{"arrows":"to","to":128,"from":127,"label":"SubTerm 2"},{"arrows":"to","to":181,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":127,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":130,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":130,"label":"SubTerm 2"},{"arrows":"to","to":187,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":22,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":132,"label":"SubTerm 1"},{"arrows":"to","to":188,"from":132,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":134,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":134,"label":"SubTerm 1"},{"arrows":"to","to":194,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":214,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":137,"label":"StepsTo BoringStep"},{"arrows":"to","to":152,"from":137,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":139,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":140,"label":"StepsTo BoringStep"},{"arrows":"to","to":101,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":144,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":106,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":147,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":148,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":148,"label":"StepsTo BoringStep"},{"arrows":"to","to":168,"from":149,"label":"StepsTo BoringStep"},{"arrows":"to","to":26,"from":151,"label":"StepsTo CallStep"},{"arrows":"to","to":112,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":112,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":173,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":73,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":153,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":153,"label":"SubTerm 2"},{"arrows":"to","to":99,"from":155,"label":"SubTerm 1"},{"arrows":"to","to":156,"from":155,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":160,"label":"SubTerm 1"},{"arrows":"to","to":167,"from":160,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":161,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":161,"label":"StepsTo BoringStep"},{"arrows":"to","to":91,"from":161,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":163,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":163,"label":"StepsTo BoringStep"},{"arrows":"to","to":107,"from":166,"label":"StepsTo BoringStep"},{"arrows":"to","to":182,"from":166,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":166,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":207,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":174,"label":"SubTerm 1"},{"arrows":"to","to":208,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":175,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":175,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":182,"label":"StepsTo BoringStep"},{"arrows":"to","to":185,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":186,"label":"StepsTo BoringStep"},{"arrows":"to","to":204,"from":187,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":188,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":192,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":191,"label":"SubTerm 2"},{"arrows":"to","to":198,"from":192,"label":"SubTerm 0"},{"arrows":"to","to":132,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":199,"from":198,"label":"SubTerm 0"},{"arrows":"to","to":218,"from":198,"label":"SubTerm 1"},{"arrows":"to","to":205,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":204,"label":"SubTerm 1"},{"arrows":"to","to":134,"from":210,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[11,4,"Redex"]],"id":0,"label":"List.mem 1 seen"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":1,"label":"1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[48,6,"Redex"]],"id":2,"label":"List.rev (let seen' =\n            if List.mem 2 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[28,6,"Redex"]],"id":3,"label":"let seen' =\n  if List.mem 2 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[[9,3,"Redex"]],"id":4,"label":"List.mem h_1 seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":5,"label":"seen_1"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":6,"label":"xs"},{"span":null,"env":[],"annots":[],"id":7,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,255,"Redex"]],"id":8,"label":"List.rev (match [1 ; 2 ; 1] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[46,1,"Redex"]],"id":9,"label":"List.rev (let seen' =\n            if List.mem h seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[26,3,"Redex"]],"id":10,"label":"let seen' =\n  if List.mem h_1 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[],"id":11,"label":"helper (seen' , t_1)"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[9,1,"Redex"]],"id":12,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[],"annots":[[0,4,"Redex"]],"id":13,"label":"seen"},{"span":null,"env":[],"annots":[],"id":15,"label":"[1]"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[46,3,"Redex"]],"id":16,"label":"List.rev (let seen' =\n            if List.mem h_1 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":15,"endLine":15,"endCol":14,"startCol":6},"env":[],"annots":[],"id":17,"label":"List.rev"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"]],"annots":[[14,4,"Redex"]],"id":18,"label":"if List.mem 1 seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":19,"label":"[] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,24,"Redex"]],"id":20,"label":"helper ([[1]] , [2 ; 1])"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,6,"Redex"]],"id":21,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[2,1,"Redex"]],"id":22,"label":"([h] , seen)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":23,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":24,"label":"([h_1] , seen_1)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":25,"label":"seen_1"},{"span":{"startLine":7,"endLine":15,"endCol":30,"startCol":3},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,285,"Redex"]],"id":26,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   if List.mem h seen\n                   then [] :: seen\n                   else [h] :: seen in\n                 helper (seen' , t)) in\nList.rev (helper ([] , xs))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"]],"annots":[[14,6,"Redex"]],"id":28,"label":"if List.mem 2 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[1,1,"Redex"]],"id":29,"label":"[h]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":30,"label":"h"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,193,"Redex"]],"id":31,"label":"match [1 ; 2 ; 1] with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[26,1,"Redex"]],"id":32,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[],"annots":[[0,16,"Redex"]],"id":33,"label":"List.mem 2 [[1]]"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":34,"label":"List.mem"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[9,1,"Redex"]],"id":35,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":36,"label":"seen"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":37,"label":"let seen' =\n  if List.mem h seen_1\n  then [] :: seen_1\n  else [h] :: seen_1 in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen_1","[[1]]"]],"annots":[],"id":38,"label":"if List.mem h seen_1\nthen [] :: seen_1\nelse [h] :: seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":40,"label":"[1] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":41,"label":"helper"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,25,"Redex"]],"id":43,"label":"helper ([] , [1 ; 2 ; 1])"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":45,"label":"([1] , seen)"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,43,"Redex"]],"id":46,"label":"let seen' = [1] :: [] in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,39,"Redex"]],"id":47,"label":"let seen' = [[1]] in\nhelper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[],"annots":[],"id":48,"label":"([1] , [])"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":49,"label":"helper ([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":24},"env":[],"annots":[],"id":51,"label":"([] , [1 ; 2 ; 1])"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[8,5,"Redex"]],"id":52,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":53,"label":"(seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"]],"id":54,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":55,"label":"(seen' , t)"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":56,"label":"1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[11,6,"Redex"]],"id":57,"label":"List.mem 2 seen_1"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"]],"annots":[[0,4,"Redex"]],"id":58,"label":"rest"},{"span":null,"env":[],"annots":[],"id":59,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":60,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":61,"label":"rest"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[],"annots":[[0,13,"Redex"]],"id":62,"label":"List.mem 1 []"},{"span":null,"env":[],"annots":[],"id":63,"label":"[]"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,67,"Redex"]],"id":64,"label":"List.rev (let seen' =\n            [1] :: [] in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,51,"Redex"]],"id":65,"label":"List.rev (let seen' = [[1]] in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":66,"label":"h"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"]],"id":67,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":68,"label":"(seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[],"annots":[[0,9,"Redex"]],"id":69,"label":"[1] :: []"},{"span":null,"env":[],"annots":[],"id":70,"label":"[[1]]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"]],"annots":[[3,25,"Redex"]],"id":71,"label":"if List.mem 1\n            [] then [] :: seen else [h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":72,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":73,"label":"seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,27,"Redex"]],"id":74,"label":"List.rev (helper ([] , [1 ; 2 ; 1]))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"]],"annots":[[3,28,"Redex"]],"id":75,"label":"if List.mem 2\n            [[1]] then [] :: seen_1 else [h_1] :: seen_1"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,259,"Redex"]],"id":76,"label":"List.rev (match [2 ; 1] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,197,"Redex"]],"id":77,"label":"match [2 ; 1] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"]],"id":78,"label":"helper (seen' , t)"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[[0,41,"Redex"]],"id":79,"label":"if false\nthen [] :: seen\nelse [h] :: seen"},{"span":null,"env":[],"annots":[],"id":80,"label":"[[1]]"},{"span":null,"env":[],"annots":[],"id":81,"label":"[1]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[37,37,"Redex"]],"id":82,"label":"List.rev (let seen' =\n            if List.mem 1\n                        [] then [] :: seen else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[22,85,"Redex"]],"id":83,"label":"List.rev (let seen' = if false\n                      then [] :: seen\n                      else [h] :: seen in helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":84,"label":"h_1"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":85,"label":"2"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[9,1,"Redex"]],"id":86,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":87,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[41,4,"Redex"]],"id":89,"label":"List.rev (let seen' =\n            [1] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"]],"id":90,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"]],"id":91,"label":"helper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":92,"label":"[h]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":93,"label":"h"},{"span":{"startLine":15,"endLine":15,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":94,"label":"[]"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":95,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[37,40,"Redex"]],"id":96,"label":"List.rev (let seen' =\n            if List.mem 2\n                        [[1]] then [] :: seen_1 else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[48,4,"Redex"]],"id":97,"label":"List.rev (let seen' =\n            if List.mem 1 seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[28,4,"Redex"]],"id":98,"label":"let seen' =\n  if List.mem 1 seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":99,"label":"([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":100,"label":"xs"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[13,1,"Redex"]],"id":101,"label":"let seen' = [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,26,"Redex"]],"id":102,"label":"List.rev (helper ([[1]] , [2 ; 1]))"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,6,"Redex"]],"id":103,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[[12,3,"Redex"]],"id":104,"label":"if List.mem h_1 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":105,"label":"[] :: seen_1"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[16,1,"Redex"]],"id":106,"label":"helper ([[1]] , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[9,1,"Redex"]],"id":107,"label":"([[1]] , t)"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[12,65,"Redex"]],"id":108,"label":"let seen' = if false\n            then [] :: seen\n            else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,4,"Redex"]],"id":109,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,4,"Redex"]],"id":110,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,37,"Redex"]],"id":111,"label":"let seen' = if List.mem 1\n                        [] then [] :: seen else [h] :: seen in helper (seen' , t)"},{"span":null,"env":[],"annots":[],"id":112,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":113,"label":"2"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":114,"label":"1"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[],"annots":[],"id":115,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[15,40,"Redex"]],"id":116,"label":"let seen' = if List.mem 2\n                        [[1]] then [] :: seen_1 else [h_1] :: seen_1 in helper (seen' , t_1)"},{"span":{"startLine":15,"endLine":15,"endCol":22,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":117,"label":"helper"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":118,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[26,1,"Redex"]],"id":119,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":null,"env":[],"annots":[],"id":120,"label":"[[1]]"},{"span":{"startLine":15,"endLine":15,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":121,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":122,"label":"h"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":123,"label":"[h_1] :: seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":124,"label":"([] , seen_1)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":125,"label":"[]"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[18,5,"Redex"]],"id":126,"label":"List.rev (helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"]],"annots":[],"id":127,"label":"List.mem h seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":128,"label":"seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[12,1,"Redex"]],"id":130,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[1,1,"Redex"]],"id":131,"label":"[h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":132,"label":"([h] , seen_1)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":133,"label":"seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[2,1,"Redex"]],"id":134,"label":"([h] , seen)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[],"annots":[[0,4,"Redex"]],"id":135,"label":"seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":136,"label":"([] , seen_1)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[1,1,"Redex"]],"id":137,"label":"[h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":138,"label":"helper"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":19},"env":[],"annots":[],"id":139,"label":"([[1]] , [2 ; 1])"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[35,1,"Redex"]],"id":140,"label":"List.rev (let seen' =\n            [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":142,"label":"1"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":143,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":144,"label":"seen"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"]],"id":145,"label":"List.rev (helper ([[1]] , t))"},{"span":null,"env":[],"annots":[],"id":146,"label":"[2 ; 1]"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":147,"label":"2"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":148,"label":"([] , xs)"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"]],"annots":[[0,6,"Redex"]],"id":149,"label":"rest_1"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":150,"label":"1"},{"span":{"startLine":17,"endLine":17,"endCol":33,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[[0,28,"Redex"]],"id":151,"label":"removeDuplicates [1 ; 2 ; 1]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[2,1,"Redex"]],"id":152,"label":"([h] , seen)"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[12,1,"Redex"]],"id":153,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":154,"label":"t"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":155,"label":"helper ([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":22,"startCol":16},"env":[],"annots":[],"id":156,"label":"helper"},{"span":null,"env":[],"annots":[],"id":158,"label":"false"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":159,"label":"List.mem"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":160,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[19,4,"Redex"]],"id":161,"label":"let seen' = [1] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":162,"label":"seen_1"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":163,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":164,"label":"1"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":165,"label":"2"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[1,5,"Redex"]],"id":166,"label":"(seen' , t)"},{"span":{"startLine":15,"endLine":15,"endCol":14,"startCol":6},"env":[],"annots":[],"id":167,"label":"List.rev"},{"span":null,"env":[],"annots":[],"id":168,"label":"[2 ; 1]"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":169,"label":"1"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":170,"label":"1"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":171,"label":"[h]"},{"span":{"startLine":17,"endLine":17,"endCol":25,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[],"id":173,"label":"removeDuplicates"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["t","[2 ; 1]"]],"annots":[[1,5,"Redex"]],"id":174,"label":"(seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":19},"env":[["t_1","[1]"]],"annots":[],"id":175,"label":"(seen' , t_1)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t_1","[1]"]],"annots":[],"id":176,"label":"t_1"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":177,"label":"seen"},{"span":{"startLine":7,"endLine":14,"endCol":27,"startCol":19},"env":[],"annots":[],"id":178,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":179,"label":"h"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":180,"label":"t"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":181,"label":"List.mem"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":182,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":183,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":28,"startCol":25},"env":[["h_1","2"]],"annots":[],"id":184,"label":"[h_1]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h_1","2"]],"annots":[],"id":185,"label":"h_1"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"]],"annots":[[0,5,"Redex"]],"id":186,"label":"seen'"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":187,"label":"[] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":188,"label":"[h]"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":189,"label":"seen'"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":190,"label":"[] :: seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[12,1,"Redex"]],"id":191,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[],"annots":[],"id":192,"label":"[] :: seen"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":193,"label":"List.mem"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":194,"label":"seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":195,"label":"[h] :: seen_1"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":196,"label":"2"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":197,"label":"seen'"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[],"annots":[],"id":198,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":199,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":200,"label":"h"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":201,"label":"h"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":202,"label":"t"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":203,"label":"h"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":204,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":205,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[["seen_1","[[1]]"]],"annots":[],"id":206,"label":"seen_1"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":207,"label":"2"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":208,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[],"annots":[],"id":209,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":210,"label":"[h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":211,"label":"seen'"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":212,"label":"1"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":213,"label":"seen'"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":214,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":215,"label":"List.mem"},{"span":null,"env":[],"annots":[],"id":216,"label":"[1]"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":217,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[],"annots":[],"id":218,"label":"seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":219,"label":"seen"}]}