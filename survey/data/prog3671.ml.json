{"root":140,"result":"stuck","reason":"Type error: stuck because `list' is incompatible with `int'","bad":35,"stuck":16,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":114,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":1,"label":"SubTerm 0"},{"arrows":"to","to":186,"from":1,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":51,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":2,"label":"StepsTo CallStep"},{"arrows":"to","to":5,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":93,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":159,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":86,"from":7,"label":"StepsTo BoringStep"},{"arrows":"to","to":9,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":9,"label":"StepsTo CallStep"},{"arrows":"to","to":164,"from":9,"label":"SubTerm 1"},{"arrows":"to","to":4,"from":10,"label":"SubTerm 2"},{"arrows":"to","to":11,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":11,"label":"SubTerm 2"},{"arrows":"to","to":21,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":11,"label":"SubTerm 1"},{"arrows":"to","to":159,"from":11,"label":"StepsTo PrimStep"},{"arrows":"to","to":7,"from":12,"label":"SubTerm 2"},{"arrows":"to","to":10,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"StepsTo BoringStep"},{"arrows":"to","to":93,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":6,"from":13,"label":"StepsTo PrimStep"},{"arrows":"to","to":7,"from":13,"label":"SubTerm 2"},{"arrows":"to","to":11,"from":13,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":13,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":86,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":15,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":35,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":128,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":4,"from":20,"label":"SubTerm 2"},{"arrows":"to","to":10,"from":20,"label":"StepsTo BoringStep"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":23,"label":"SubTerm 1"},{"arrows":"to","to":84,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":23,"label":"SubTerm 2"},{"arrows":"to","to":18,"from":24,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":24,"label":"SubTerm 2"},{"arrows":"to","to":128,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":19,"from":25,"label":"StepsTo BoringStep"},{"arrows":"to","to":178,"from":26,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 2"},{"arrows":"to","to":68,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":203,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":29,"label":"StepsTo CallStep"},{"arrows":"to","to":8,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":31,"label":"StepsTo BoringStep"},{"arrows":"to","to":152,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":32,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":32,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":14,"from":33,"label":"StepsTo BoringStep"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":34,"label":"SubTerm 2"},{"arrows":"to","to":19,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":128,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":178,"from":35,"label":"SubTerm 2"},{"arrows":"to","to":15,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":36,"label":"StepsTo BoringStep"},{"arrows":"to","to":79,"from":37,"label":"StepsTo BoringStep"},{"arrows":"to","to":131,"from":37,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":64,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":65,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":32,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":191,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":204,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":149,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":44,"label":"StepsTo BoringStep"},{"arrows":"to","to":56,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":27,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":195,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":47,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":145,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":194,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":214,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":24,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":63,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":50,"label":"SubTerm 2"},{"arrows":"to","to":127,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":143,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":54,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":193,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":199,"from":53,"label":"SubTerm 2"},{"arrows":"to","to":53,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":56,"label":"StepsTo BoringStep"},{"arrows":"to","to":57,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":94,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":56,"label":"SubTerm 2"},{"arrows":"to","to":51,"from":59,"label":"StepsTo BoringStep"},{"arrows":"to","to":127,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":142,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":142,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":18,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":34,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":63,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":115,"from":62,"label":"SubTerm 2"},{"arrows":"to","to":60,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":64,"label":"StepsTo BoringStep"},{"arrows":"to","to":98,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":165,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":192,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":46,"from":69,"label":"StepsTo BoringStep"},{"arrows":"to","to":42,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":72,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":72,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":40,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":121,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":102,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":153,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":185,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":156,"from":83,"label":"StepsTo BoringStep"},{"arrows":"to","to":50,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":82,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":84,"label":"StepsTo BoringStep"},{"arrows":"to","to":1,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":12,"from":85,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":85,"label":"StepsTo BoringStep"},{"arrows":"to","to":64,"from":86,"label":"StepsTo BoringStep"},{"arrows":"to","to":97,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":72,"from":90,"label":"StepsTo BoringStep"},{"arrows":"to","to":82,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":91,"label":"StepsTo PrimStep"},{"arrows":"to","to":17,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":117,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":93,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":94,"label":"StepsTo BoringStep"},{"arrows":"to","to":198,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":98,"from":97,"label":"StepsTo BoringStep"},{"arrows":"to","to":5,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":79,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":66,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":100,"label":"SubTerm 2"},{"arrows":"to","to":101,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":197,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":101,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":71,"from":101,"label":"SubTerm 2"},{"arrows":"to","to":197,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":104,"label":"SubTerm 2"},{"arrows":"to","to":200,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":209,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":88,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":164,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":69,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":108,"from":107,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":107,"label":"SubTerm 1"},{"arrows":"to","to":168,"from":108,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":189,"from":111,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":137,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":114,"label":"SubTerm 2"},{"arrows":"to","to":12,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":20,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":93,"from":114,"label":"SubTerm 1"},{"arrows":"to","to":116,"from":115,"label":"SubTerm 0"},{"arrows":"to","to":134,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":206,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":117,"label":"StepsTo PrimStep"},{"arrows":"to","to":91,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":121,"label":"StepsTo BoringStep"},{"arrows":"to","to":123,"from":121,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":77,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":123,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 2"},{"arrows":"to","to":129,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":146,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":125,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":166,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":205,"from":129,"label":"SubTerm 2"},{"arrows":"to","to":76,"from":131,"label":"StepsTo BoringStep"},{"arrows":"to","to":136,"from":135,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":135,"label":"SubTerm 1"},{"arrows":"to","to":139,"from":138,"label":"SubTerm 2"},{"arrows":"to","to":147,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":211,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":139,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":140,"label":"StepsTo CallStep"},{"arrows":"to","to":172,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":172,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":175,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":175,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":143,"from":142,"label":"StepsTo BoringStep"},{"arrows":"to","to":150,"from":143,"label":"SubTerm 2"},{"arrows":"to","to":218,"from":143,"label":"SubTerm 1"},{"arrows":"to","to":219,"from":143,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":144,"label":"StepsTo BoringStep"},{"arrows":"to","to":173,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":183,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":184,"from":147,"label":"SubTerm 2"},{"arrows":"to","to":196,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":74,"from":151,"label":"StepsTo BoringStep"},{"arrows":"to","to":69,"from":152,"label":"SubTerm 1"},{"arrows":"to","to":106,"from":152,"label":"StepsTo BoringStep"},{"arrows":"to","to":144,"from":152,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":153,"label":"SubTerm 1"},{"arrows":"to","to":163,"from":153,"label":"SubTerm 0"},{"arrows":"to","to":155,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":217,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":16,"from":156,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":157,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":157,"label":"SubTerm 1"},{"arrows":"to","to":111,"from":157,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":124,"from":158,"label":"SubTerm 1"},{"arrows":"to","to":161,"from":160,"label":"SubTerm 0"},{"arrows":"to","to":216,"from":160,"label":"SubTerm 1"},{"arrows":"to","to":76,"from":162,"label":"StepsTo BoringStep"},{"arrows":"to","to":56,"from":164,"label":"StepsTo CallStep"},{"arrows":"to","to":88,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":122,"from":164,"label":"SubTerm 1"},{"arrows":"to","to":160,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":170,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":188,"from":171,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":173,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":173,"label":"SubTerm 0"},{"arrows":"to","to":110,"from":175,"label":"SubTerm 1"},{"arrows":"to","to":148,"from":175,"label":"SubTerm 2"},{"arrows":"to","to":176,"from":175,"label":"SubTerm 0"},{"arrows":"to","to":169,"from":177,"label":"SubTerm 0"},{"arrows":"to","to":182,"from":177,"label":"SubTerm 1"},{"arrows":"to","to":213,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":180,"from":179,"label":"SubTerm 1"},{"arrows":"to","to":208,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":186,"label":"SubTerm 1"},{"arrows":"to","to":202,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":189,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":189,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":17,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":191,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":191,"label":"SubTerm 1"},{"arrows":"to","to":190,"from":191,"label":"StepsTo BoringStep"},{"arrows":"to","to":177,"from":195,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":206,"label":"SubTerm 0"},{"arrows":"to","to":215,"from":208,"label":"SubTerm 0"},{"arrows":"to","to":154,"from":211,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"],[0,91,"LastRedex"]],"id":0,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":1,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,25,"Redex"]],"id":2,"label":"helper ([] , [1 ; 2 ; 1])"},{"span":{"startLine":14,"endLine":14,"endCol":22,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":3,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":4,"label":"seen"},{"span":null,"env":[],"annots":[],"id":5,"label":"[]"},{"span":{"startLine":10,"endLine":12,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[[0,41,"Redex"]],"id":6,"label":"if false\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[1,1,"Redex"],[0,11,"LastRedex"]],"id":7,"label":"[h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":8,"label":"List.rev (helper ([[1]] , t))"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,26,"Redex"]],"id":9,"label":"List.rev (helper ([[1]] , [2 ; 1]))"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[11,4,"Redex"]],"id":10,"label":"List.mem 1 seen"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[],"annots":[[0,13,"Redex"]],"id":11,"label":"List.mem 1 []"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"]],"annots":[[14,4,"Redex"]],"id":12,"label":"if List.mem 1 seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"]],"annots":[[3,25,"Redex"]],"id":13,"label":"if List.mem 1\n            [] then [] :: seen else [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[19,4,"Redex"]],"id":14,"label":"let seen' = [1] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":15,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[37,40,"Redex"]],"id":16,"label":"List.rev (let seen' =\n            if List.mem 2\n                        [[1]] then [] :: seen_1 else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":14,"endLine":14,"endCol":14,"startCol":6},"env":[],"annots":[],"id":17,"label":"List.rev"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[11,6,"Redex"]],"id":18,"label":"List.mem 2 seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":30,"startCol":29},"env":[],"annots":[],"id":19,"label":"2"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[9,1,"Redex"]],"id":20,"label":"List.mem h seen"},{"span":{"startLine":10,"endLine":10,"endCol":31,"startCol":23},"env":[],"annots":[],"id":21,"label":"List.mem"},{"span":{"startLine":7,"endLine":13,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,259,"Redex"]],"id":22,"label":"List.rev (match [2 ; 1] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":7,"endLine":13,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,197,"Redex"]],"id":23,"label":"match [2 ; 1] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[[9,3,"Redex"]],"id":24,"label":"List.mem h_1 seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":25,"label":"h_1"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":26,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[],"annots":[[9,1,"Redex"]],"id":27,"label":"List.mem h seen"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[],"annots":[[0,4,"Redex"]],"id":28,"label":"seen"},{"span":{"startLine":14,"endLine":14,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,27,"Redex"]],"id":29,"label":"List.rev (helper ([] , [1 ; 2 ; 1]))"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[],"id":30,"label":"List.rev (helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[0,18,"LastRedex"]],"id":31,"label":"helper (seen' , t)"},{"span":{"startLine":10,"endLine":12,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[12,65,"Redex"]],"id":32,"label":"let seen' = if false\n            then [] :: seen\n            else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[13,1,"Redex"],[12,11,"LastRedex"]],"id":33,"label":"let seen' = [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"]],"annots":[[3,28,"Redex"]],"id":34,"label":"if List.mem 2\n            [[1]] then [] :: seen_1 else [h_1] :: seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[],"annots":[[0,16,"Redex"]],"id":35,"label":"List.mem 2 [[1]]"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[],"id":36,"label":"([h] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[1,1,"Redex"]],"id":37,"label":"[h]"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[12,9,"Redex"]],"id":39,"label":"let seen' = [1] :: [] in\nhelper (seen' , t)"},{"span":{"startLine":10,"endLine":13,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,39,"Redex"]],"id":40,"label":"let seen' = [[1]] in\nhelper (seen' , t)"},{"span":{"startLine":10,"endLine":12,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[22,85,"Redex"]],"id":41,"label":"List.rev (let seen' = if false\n                      then [] :: seen\n                      else [h] :: seen in helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":42,"label":"helper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[],"id":43,"label":"(seen' , t)"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,6,"Redex"]],"id":44,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if List.mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[],"annots":[[12,1,"Redex"]],"id":45,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":null,"env":[],"annots":[],"id":46,"label":"[2 ; 1]"},{"span":{"startLine":16,"endLine":16,"endCol":32,"startCol":31},"env":[],"annots":[],"id":47,"label":"1"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":48,"label":"helper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[],"id":49,"label":"(seen' , t)"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[[12,3,"Redex"]],"id":50,"label":"if List.mem h_1 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":14,"endLine":14,"endCol":30,"startCol":24},"env":[],"annots":[],"id":51,"label":"([] , [1 ; 2 ; 1])"},{"span":null,"env":[],"annots":[],"id":53,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[],"annots":[],"id":54,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"]],"annots":[[0,4,"Redex"]],"id":55,"label":"rest"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,6,"Redex"],[0,196,"LastRedex"]],"id":56,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if List.mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":8,"endLine":8,"endCol":17,"startCol":13},"env":[["seen_1","[[1]]"]],"annots":[],"id":57,"label":"seen_1"},{"span":{"startLine":14,"endLine":14,"endCol":26,"startCol":24},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[],"id":59,"label":"([] , xs)"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":60,"label":"([] , seen_1)"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":61,"label":"seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"]],"annots":[[14,6,"Redex"]],"id":62,"label":"if List.mem 2 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":63,"label":"[] :: seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[],"annots":[[0,9,"Redex"]],"id":64,"label":"[1] :: []"},{"span":null,"env":[],"annots":[],"id":65,"label":"[[1]]"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[],"id":66,"label":"helper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[],"id":67,"label":"(seen' , t)"},{"span":{"startLine":10,"endLine":10,"endCol":31,"startCol":23},"env":[],"annots":[],"id":68,"label":"List.mem"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":69,"label":"t"},{"span":{"startLine":11,"endLine":11,"endCol":27,"startCol":25},"env":[],"annots":[],"id":70,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[26,1,"Redex"]],"id":71,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[15,40,"Redex"]],"id":72,"label":"let seen' = if List.mem 2\n                        [[1]] then [] :: seen_1 else [h_1] :: seen_1 in helper (seen' , t_1)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":73,"label":"t"},{"span":{"startLine":10,"endLine":13,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,51,"Redex"]],"id":74,"label":"List.rev (let seen' = [[1]] in\n          helper (seen' , t))"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[],"annots":[],"id":76,"label":"1"},{"span":null,"env":[],"annots":[],"id":77,"label":"[[1]]"},{"span":null,"env":[],"annots":[],"id":78,"label":"[1]"},{"span":null,"env":[],"annots":[],"id":79,"label":"[1]"},{"span":{"startLine":6,"endLine":14,"endCol":30,"startCol":3},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,285,"LastRedex"],[0,285,"Redex"]],"id":80,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   if List.mem h seen\n                   then [] :: seen\n                   else [h] :: seen in\n                 helper (seen' , t)) in\nList.rev (helper ([] , xs))"},{"span":{"startLine":14,"endLine":14,"endCol":26,"startCol":24},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[],"id":81,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[],"id":82,"label":"helper (seen' , t_1)"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[46,3,"Redex"]],"id":83,"label":"List.rev (let seen' =\n            if List.mem h_1 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[26,3,"Redex"],[0,103,"LastRedex"]],"id":84,"label":"let seen' =\n  if List.mem h_1 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[28,4,"Redex"]],"id":85,"label":"let seen' =\n  if List.mem 1 seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":86,"label":"[1] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":88,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":89,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[28,6,"Redex"]],"id":90,"label":"let seen' =\n  if List.mem 2 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,37,"Redex"]],"id":91,"label":"let seen' = if List.mem 1\n                        [] then [] :: seen else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[48,4,"Redex"]],"id":92,"label":"List.rev (let seen' =\n            if List.mem 1 seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":93,"label":"[] :: seen"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"]],"annots":[[0,6,"Redex"]],"id":94,"label":"rest_1"},{"span":null,"env":[],"annots":[],"id":95,"label":"[2 ; 1]"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[],"id":97,"label":"([1] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[],"annots":[],"id":98,"label":"([1] , [])"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[],"annots":[[26,1,"Redex"]],"id":99,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,4,"Redex"],[0,186,"LastRedex"]],"id":100,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":7,"endLine":13,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,193,"Redex"]],"id":101,"label":"match [1 ; 2 ; 1] with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":14,"endLine":14,"endCol":14,"startCol":6},"env":[],"annots":[],"id":102,"label":"List.rev"},{"span":{"startLine":6,"endLine":13,"endCol":27,"startCol":19},"env":[],"annots":[],"id":103,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":104,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":105,"label":"helper ([[1]] , t)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[],"id":106,"label":"([[1]] , t)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[],"id":107,"label":"([h] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":108,"label":"[h]"},{"span":{"startLine":16,"endLine":16,"endCol":30,"startCol":29},"env":[],"annots":[],"id":110,"label":"2"},{"span":{"startLine":7,"endLine":13,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,255,"Redex"]],"id":111,"label":"List.rev (match [1 ; 2 ; 1] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":14,"endLine":14,"endCol":26,"startCol":24},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[],"id":112,"label":"([] , xs)"},{"span":{"startLine":14,"endLine":14,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":113,"label":"xs"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[12,1,"Redex"]],"id":114,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":115,"label":"[h_1] :: seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":116,"label":"([h_1] , seen_1)"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[37,37,"Redex"]],"id":117,"label":"List.rev (let seen' =\n            if List.mem 1\n                        [] then [] :: seen else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":14,"endLine":14,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[],"id":121,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":19},"env":[],"annots":[],"id":122,"label":"([[1]] , [2 ; 1])"},{"span":{"startLine":14,"endLine":14,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[],"id":123,"label":"helper ([] , xs)"},{"span":{"startLine":10,"endLine":12,"endCol":36,"startCol":20},"env":[["seen_1","[[1]]"]],"annots":[],"id":124,"label":"if List.mem h seen_1\nthen [] :: seen_1\nelse [h] :: seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":125,"label":"[h] :: seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":17,"startCol":11},"env":[],"annots":[],"id":126,"label":"helper"},{"span":null,"env":[],"annots":[],"id":127,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":31,"startCol":23},"env":[],"annots":[],"id":128,"label":"List.mem"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":23},"env":[["seen_1","[[1]]"]],"annots":[],"id":129,"label":"List.mem h seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":31,"startCol":23},"env":[],"annots":[],"id":130,"label":"List.mem"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":131,"label":"h"},{"span":{"startLine":13,"endLine":13,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":132,"label":"helper"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":133,"label":"seen"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":134,"label":"seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":135,"label":"([] , seen)"},{"span":{"startLine":11,"endLine":11,"endCol":27,"startCol":25},"env":[],"annots":[],"id":136,"label":"[]"},{"span":{"startLine":14,"endLine":14,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":137,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[12,1,"Redex"]],"id":138,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[1,1,"Redex"]],"id":139,"label":"[h] :: seen"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":26},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[],"id":140,"label":"removeDuplicates [1 ; 2 ; 1]"},{"span":{"startLine":14,"endLine":14,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":142,"label":"xs"},{"span":null,"env":[],"annots":[],"id":143,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"]],"annots":[[0,5,"Redex"]],"id":144,"label":"seen'"},{"span":{"startLine":16,"endLine":16,"endCol":30,"startCol":29},"env":[],"annots":[],"id":145,"label":"2"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":146,"label":"[] :: seen_1"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[9,1,"Redex"]],"id":147,"label":"List.mem h seen"},{"span":{"startLine":16,"endLine":16,"endCol":32,"startCol":31},"env":[],"annots":[],"id":148,"label":"1"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":149,"label":"seen'"},{"span":{"startLine":16,"endLine":16,"endCol":32,"startCol":31},"env":[],"annots":[],"id":150,"label":"1"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[34,9,"Redex"]],"id":151,"label":"List.rev (let seen' =\n            [1] :: [] in\n          helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[],"id":152,"label":"(seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":26,"startCol":24},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[],"id":153,"label":"helper ([] , xs)"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":154,"label":"([] , seen)"},{"span":{"startLine":11,"endLine":11,"endCol":27,"startCol":25},"env":[],"annots":[],"id":155,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[48,6,"Redex"]],"id":156,"label":"List.rev (let seen' =\n            if List.mem 2 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,4,"Redex"]],"id":157,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":10,"endLine":13,"endCol":27,"startCol":8},"env":[["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":158,"label":"let seen' =\n  if List.mem h seen_1\n  then [] :: seen_1\n  else [h] :: seen_1 in\nhelper (seen' , t)"},{"span":null,"env":[],"annots":[],"id":159,"label":"false"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[],"annots":[],"id":160,"label":"([] , seen)"},{"span":{"startLine":11,"endLine":11,"endCol":27,"startCol":25},"env":[],"annots":[],"id":161,"label":"[]"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":162,"label":"h"},{"span":{"startLine":14,"endLine":14,"endCol":22,"startCol":16},"env":[],"annots":[],"id":163,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,24,"Redex"]],"id":164,"label":"helper ([[1]] , [2 ; 1])"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":165,"label":"t"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":166,"label":"h"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[],"annots":[],"id":167,"label":"[] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":168,"label":"h"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":169,"label":"[h]"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":170,"label":"h"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":19},"env":[["t_1","[1]"]],"annots":[],"id":171,"label":"(seen' , t_1)"},{"span":{"startLine":16,"endLine":16,"endCol":25,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[],"id":172,"label":"removeDuplicates"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":173,"label":"([] , seen_1)"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":174,"label":"seen_1"},{"span":null,"env":[],"annots":[],"id":175,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[],"annots":[],"id":176,"label":"1"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[],"id":177,"label":"([h] , seen)"},{"span":null,"env":[],"annots":[],"id":178,"label":"[[1]]"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":179,"label":"([h] , seen_1)"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":180,"label":"seen_1"},{"span":{"startLine":11,"endLine":11,"endCol":27,"startCol":25},"env":[],"annots":[],"id":181,"label":"[]"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[],"annots":[[0,4,"Redex"]],"id":182,"label":"seen"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":183,"label":"h"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":184,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":185,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[["t","[2 ; 1]"]],"annots":[],"id":186,"label":"(seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":187,"label":"t"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["t_1","[1]"]],"annots":[],"id":188,"label":"t_1"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[46,1,"Redex"]],"id":189,"label":"List.rev (let seen' =\n            if List.mem h seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":12,"endLine":12,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[41,4,"Redex"]],"id":190,"label":"List.rev (let seen' =\n            [1] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[35,1,"Redex"],[34,11,"LastRedex"]],"id":191,"label":"List.rev (let seen' =\n            [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":192,"label":"seen'"},{"span":{"startLine":16,"endLine":16,"endCol":30,"startCol":29},"env":[],"annots":[],"id":193,"label":"2"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":194,"label":"seen'"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":195,"label":"[h] :: seen"},{"span":{"startLine":10,"endLine":10,"endCol":31,"startCol":23},"env":[],"annots":[],"id":196,"label":"List.mem"},{"span":{"startLine":8,"endLine":8,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":197,"label":"seen"},{"span":{"startLine":16,"endLine":16,"endCol":30,"startCol":29},"env":[],"annots":[],"id":198,"label":"2"},{"span":{"startLine":16,"endLine":16,"endCol":32,"startCol":31},"env":[],"annots":[],"id":199,"label":"1"},{"span":{"startLine":7,"endLine":7,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":200,"label":"rest"},{"span":{"startLine":16,"endLine":16,"endCol":32,"startCol":31},"env":[],"annots":[],"id":201,"label":"1"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":202,"label":"seen'"},{"span":{"startLine":10,"endLine":10,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":203,"label":"h"},{"span":{"startLine":13,"endLine":13,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":204,"label":"helper"},{"span":{"startLine":10,"endLine":10,"endCol":38,"startCol":34},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":205,"label":"seen_1"},{"span":{"startLine":12,"endLine":12,"endCol":28,"startCol":25},"env":[["h_1","2"]],"annots":[],"id":206,"label":"[h_1]"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[["h_1","2"]],"annots":[],"id":207,"label":"h_1"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":208,"label":"[h]"},{"span":{"startLine":8,"endLine":8,"endCol":17,"startCol":13},"env":[],"annots":[],"id":209,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":210,"label":"seen'"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":211,"label":"[] :: seen"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":212,"label":"seen"},{"span":null,"env":[],"annots":[],"id":213,"label":"[1]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":214,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":215,"label":"h"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":31},"env":[],"annots":[],"id":216,"label":"seen"},{"span":{"startLine":11,"endLine":11,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":217,"label":"seen"},{"span":{"startLine":16,"endLine":16,"endCol":30,"startCol":29},"env":[],"annots":[],"id":218,"label":"2"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[],"annots":[],"id":219,"label":"1"}]}