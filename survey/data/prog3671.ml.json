{"root":94,"result":"stuck","reason":"Type error: stuck because int list is incompatible with int","bad":127,"stuck":73,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":0,"label":"StepsTo BoringStep"},{"arrows":"to","to":52,"from":0,"label":"SubTerm 2"},{"arrows":"to","to":122,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":3,"label":"SubTerm 2"},{"arrows":"to","to":72,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":106,"from":3,"label":"SubTerm 1"},{"arrows":"to","to":5,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":18,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 2"},{"arrows":"to","to":115,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":10,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":10,"label":"SubTerm 2"},{"arrows":"to","to":90,"from":11,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":102,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":104,"from":14,"label":"StepsTo BoringStep"},{"arrows":"to","to":114,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":17,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 2"},{"arrows":"to","to":39,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":18,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":19,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":19,"label":"SubTerm 1"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 2"},{"arrows":"to","to":79,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":101,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":23,"label":"StepsTo BoringStep"},{"arrows":"to","to":32,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":68,"from":25,"label":"StepsTo CallStep"},{"arrows":"to","to":76,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":9,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":27,"label":"StepsTo BoringStep"},{"arrows":"to","to":46,"from":27,"label":"SubTerm 1"},{"arrows":"to","to":9,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":25,"from":30,"label":"StepsTo BoringStep"},{"arrows":"to","to":76,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":92,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":32,"label":"SubTerm 1"},{"arrows":"to","to":34,"from":33,"label":"SubTerm 1"},{"arrows":"to","to":75,"from":33,"label":"SubTerm 0"},{"arrows":"to","to":119,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":136,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":35,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":35,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":134,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":38,"label":"StepsTo BoringStep"},{"arrows":"to","to":93,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":108,"from":39,"label":"SubTerm 2"},{"arrows":"to","to":123,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":41,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":40,"label":"SubTerm 2"},{"arrows":"to","to":132,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":1,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":42,"label":"SubTerm 2"},{"arrows":"to","to":100,"from":42,"label":"StepsTo PrimStep"},{"arrows":"to","to":122,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":1,"from":44,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":42,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":48,"from":45,"label":"StepsTo PrimStep"},{"arrows":"to","to":85,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":43,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":25,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":67,"from":47,"label":"StepsTo CallStep"},{"arrows":"to","to":11,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":85,"from":48,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":100,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":49,"label":"SubTerm 0"},{"arrows":"to","to":50,"from":49,"label":"StepsTo PrimStep"},{"arrows":"to","to":69,"from":49,"label":"SubTerm 1"},{"arrows":"to","to":28,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":50,"label":"StepsTo BoringStep"},{"arrows":"to","to":0,"from":51,"label":"StepsTo BoringStep"},{"arrows":"to","to":44,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":51,"label":"SubTerm 2"},{"arrows":"to","to":122,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":54,"label":"StepsTo BoringStep"},{"arrows":"to","to":103,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":55,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":55,"label":"StepsTo BoringStep"},{"arrows":"to","to":96,"from":55,"label":"SubTerm 1"},{"arrows":"to","to":60,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":49,"from":61,"label":"StepsTo BoringStep"},{"arrows":"to","to":62,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":69,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":64,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":78,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":103,"from":65,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":65,"from":66,"label":"StepsTo BoringStep"},{"arrows":"to","to":4,"from":67,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":67,"label":"SubTerm 0"},{"arrows":"to","to":68,"from":67,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":68,"label":"StepsTo BoringStep"},{"arrows":"to","to":19,"from":68,"label":"SubTerm 2"},{"arrows":"to","to":38,"from":68,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":68,"label":"SubTerm 1"},{"arrows":"to","to":45,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":69,"label":"SubTerm 0"},{"arrows":"to","to":66,"from":69,"label":"StepsTo PrimStep"},{"arrows":"to","to":71,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":70,"label":"SubTerm 2"},{"arrows":"to","to":105,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":33,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":77,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":81,"label":"SubTerm 2"},{"arrows":"to","to":118,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":12,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":23,"from":85,"label":"StepsTo BoringStep"},{"arrows":"to","to":95,"from":85,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":65,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":91,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":117,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":2,"from":92,"label":"SubTerm 1"},{"arrows":"to","to":32,"from":92,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":94,"label":"StepsTo CallStep"},{"arrows":"to","to":70,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":70,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":111,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":111,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":95,"label":"StepsTo BoringStep"},{"arrows":"to","to":46,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":96,"label":"StepsTo BoringStep"},{"arrows":"to","to":11,"from":96,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":85,"from":96,"label":"SubTerm 2"},{"arrows":"to","to":63,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":98,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":23,"from":103,"label":"SubTerm 1"},{"arrows":"to","to":56,"from":103,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":103,"label":"StepsTo BoringStep"},{"arrows":"to","to":28,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":104,"label":"StepsTo BoringStep"},{"arrows":"to","to":126,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":116,"from":112,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":112,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":118,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":121,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":133,"from":120,"label":"SubTerm 2"},{"arrows":"to","to":124,"from":121,"label":"SubTerm 0"},{"arrows":"to","to":125,"from":124,"label":"SubTerm 0"},{"arrows":"to","to":137,"from":124,"label":"SubTerm 1"},{"arrows":"to","to":29,"from":127,"label":"SubTerm 0"},{"arrows":"to","to":130,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":138,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":83,"from":133,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[11,4,"Redex"]],"id":0,"label":"List.mem 1 seen"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":1,"label":"1"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":2,"label":"xs"},{"span":null,"env":[],"annots":[],"id":3,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,255,"Redex"]],"id":4,"label":"List.rev (match [1 ; 2 ; 1] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[46,1,"Redex"]],"id":5,"label":"List.rev (let seen' =\n            if List.mem h seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[9,1,"Redex"]],"id":6,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[],"annots":[[0,4,"Redex"]],"id":7,"label":"seen"},{"span":null,"env":[],"annots":[],"id":9,"label":"[1]"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"]],"annots":[[14,4,"Redex"]],"id":10,"label":"if List.mem 1 seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":11,"label":"[] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[2,1,"Redex"]],"id":12,"label":"([h] , seen)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":13,"label":"seen"},{"span":{"startLine":7,"endLine":15,"endCol":30,"startCol":3},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,285,"Redex"]],"id":14,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   if List.mem h seen\n                   then [] :: seen\n                   else [h] :: seen in\n                 helper (seen' , t)) in\nList.rev (helper ([] , xs))"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[1,1,"Redex"]],"id":16,"label":"[h]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":17,"label":"h"},{"span":{"startLine":8,"endLine":14,"endCol":27,"startCol":5},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,193,"Redex"]],"id":18,"label":"match [1 ; 2 ; 1] with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[26,1,"Redex"]],"id":19,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[9,1,"Redex"]],"id":20,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":21,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":23,"label":"[1] :: seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,25,"Redex"]],"id":25,"label":"helper ([] , [1 ; 2 ; 1])"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":27,"label":"([1] , seen)"},{"span":{"startLine":15,"endLine":15,"endCol":14,"startCol":6},"env":[],"annots":[],"id":28,"label":"List.rev"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[],"annots":[],"id":29,"label":"([1] , [])"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":30,"label":"helper ([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":24},"env":[],"annots":[],"id":32,"label":"([] , [1 ; 2 ; 1])"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[],"annots":[],"id":33,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":19},"env":[],"annots":[],"id":34,"label":"(seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":35,"label":"helper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":19},"env":[],"annots":[],"id":36,"label":"(seen' , t)"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":37,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"]],"annots":[[0,4,"Redex"]],"id":38,"label":"rest"},{"span":null,"env":[],"annots":[],"id":39,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[],"annots":[[6,4,"Redex"]],"id":40,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":41,"label":"rest"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[],"annots":[[0,13,"Redex"]],"id":42,"label":"List.mem 1 []"},{"span":null,"env":[],"annots":[],"id":43,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":44,"label":"h"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"]],"annots":[[3,25,"Redex"]],"id":45,"label":"if List.mem 1\n            [] then [] :: seen else [h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":46,"label":"seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,27,"Redex"]],"id":47,"label":"List.rev (helper ([] , [1 ; 2 ; 1]))"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[[0,41,"Redex"]],"id":48,"label":"if false\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[37,37,"Redex"]],"id":49,"label":"List.rev (let seen' =\n            if List.mem 1\n                        [] then [] :: seen else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[22,85,"Redex"]],"id":50,"label":"List.rev (let seen' = if false\n                      then [] :: seen\n                      else [h] :: seen in helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[9,1,"Redex"]],"id":51,"label":"List.mem h seen"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":52,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[41,4,"Redex"]],"id":54,"label":"List.rev (let seen' =\n            [1] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"]],"id":55,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":56,"label":"helper (seen' , t)"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":57,"label":"[h]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":58,"label":"h"},{"span":{"startLine":15,"endLine":15,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":59,"label":"[]"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":60,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[48,4,"Redex"]],"id":61,"label":"List.rev (let seen' =\n            if List.mem 1 seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":34},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[28,4,"Redex"]],"id":62,"label":"let seen' =\n  if List.mem 1 seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":63,"label":"([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":64,"label":"xs"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[13,1,"Redex"]],"id":65,"label":"let seen' = [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":11,"endLine":13,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[12,65,"Redex"]],"id":66,"label":"let seen' = if false\n            then [] :: seen\n            else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,4,"Redex"]],"id":67,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if List.mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":8,"endLine":8,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,4,"Redex"]],"id":68,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if List.mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":38,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,37,"Redex"]],"id":69,"label":"let seen' = if List.mem 1\n                        [] then [] :: seen else [h] :: seen in helper (seen' , t)"},{"span":null,"env":[],"annots":[],"id":70,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":71,"label":"2"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":72,"label":"1"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,67,"Redex"]],"id":73,"label":"List.rev (let seen' =\n            [1] :: [] in\n          helper (seen' , t))"},{"span":{"startLine":11,"endLine":14,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,43,"Redex"]],"id":74,"label":"let seen' = [1] :: [] in\nhelper (seen' , t)"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[],"annots":[],"id":75,"label":"helper"},{"span":{"startLine":15,"endLine":15,"endCol":22,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":76,"label":"helper"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[26,1,"Redex"]],"id":77,"label":"let seen' =\n  if List.mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":15,"endLine":15,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":78,"label":"[]"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":79,"label":"h"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["seen","[]"]],"annots":[[12,1,"Redex"]],"id":81,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[1,1,"Redex"]],"id":82,"label":"[h] :: seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[2,1,"Redex"]],"id":83,"label":"([h] , seen)"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[],"annots":[[0,4,"Redex"]],"id":84,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[1,1,"Redex"]],"id":85,"label":"[h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":86,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[35,1,"Redex"]],"id":87,"label":"List.rev (let seen' =\n            [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":89,"label":"1"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":90,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":91,"label":"seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":92,"label":"([] , xs)"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":93,"label":"1"},{"span":{"startLine":17,"endLine":17,"endCol":33,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[[0,28,"Redex"]],"id":94,"label":"removeDuplicates [1 ; 2 ; 1]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[2,1,"Redex"]],"id":95,"label":"([h] , seen)"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[["h","1"],["seen","[]"]],"annots":[[12,1,"Redex"]],"id":96,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":97,"label":"helper ([] , xs)"},{"span":{"startLine":15,"endLine":15,"endCol":22,"startCol":16},"env":[],"annots":[],"id":98,"label":"helper"},{"span":null,"env":[],"annots":[],"id":100,"label":"false"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":101,"label":"List.mem"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":102,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[19,4,"Redex"]],"id":103,"label":"let seen' = [1] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":15,"endLine":15,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":104,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":17,"endLine":17,"endCol":28,"startCol":27},"env":[],"annots":[],"id":105,"label":"1"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":106,"label":"2"},{"span":{"startLine":15,"endLine":15,"endCol":14,"startCol":6},"env":[],"annots":[],"id":107,"label":"List.rev"},{"span":{"startLine":17,"endLine":17,"endCol":32,"startCol":31},"env":[],"annots":[],"id":108,"label":"1"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":109,"label":"[h]"},{"span":{"startLine":17,"endLine":17,"endCol":25,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if List.mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[],"id":111,"label":"removeDuplicates"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":19},"env":[["t","[2 ; 1]"]],"annots":[],"id":112,"label":"(seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":113,"label":"seen"},{"span":{"startLine":7,"endLine":14,"endCol":27,"startCol":19},"env":[],"annots":[],"id":114,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if List.mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[0,1,"Redex"]],"id":115,"label":"h"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[],"id":116,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":117,"label":"[]"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":118,"label":"[] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[],"id":119,"label":"seen'"},{"span":{"startLine":11,"endLine":11,"endCol":33,"startCol":32},"env":[],"annots":[[12,1,"Redex"]],"id":120,"label":"if List.mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[],"annots":[],"id":121,"label":"[] :: seen"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":122,"label":"List.mem"},{"span":{"startLine":17,"endLine":17,"endCol":30,"startCol":29},"env":[],"annots":[],"id":123,"label":"2"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[],"annots":[],"id":124,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":125,"label":"[]"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":126,"label":"h"},{"span":{"startLine":13,"endLine":13,"endCol":36,"startCol":25},"env":[],"annots":[[0,9,"Redex"]],"id":127,"label":"[1] :: []"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[],"id":128,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":129,"label":"([] , seen)"},{"span":{"startLine":12,"endLine":12,"endCol":27,"startCol":25},"env":[],"annots":[],"id":130,"label":"[]"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[],"id":131,"label":"seen'"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":13},"env":[],"annots":[],"id":132,"label":"seen"},{"span":{"startLine":13,"endLine":13,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":133,"label":"[h] :: seen"},{"span":{"startLine":14,"endLine":14,"endCol":24,"startCol":19},"env":[],"annots":[],"id":134,"label":"seen'"},{"span":{"startLine":11,"endLine":11,"endCol":31,"startCol":23},"env":[],"annots":[],"id":135,"label":"List.mem"},{"span":{"startLine":14,"endLine":14,"endCol":27,"startCol":26},"env":[],"annots":[],"id":136,"label":"t"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[],"annots":[],"id":137,"label":"seen"},{"span":{"startLine":12,"endLine":12,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":138,"label":"seen"}]}