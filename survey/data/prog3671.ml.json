{"root":226,"result":"stuck","reason":"Type error: stuck because int is incompatible with int list","bad":189,"stuck":51,"edges":[{"arrows":"to","to":1,"from":0,"label":"SubTerm 0"},{"arrows":"to","to":33,"from":0,"label":"SubTerm 2"},{"arrows":"to","to":220,"from":0,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":2,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":2,"label":"SubTerm 0"},{"arrows":"to","to":113,"from":2,"label":"StepsTo BoringStep"},{"arrows":"to","to":114,"from":3,"label":"StepsTo BoringStep"},{"arrows":"to","to":263,"from":3,"label":"SubTerm 0"},{"arrows":"to","to":5,"from":4,"label":"StepsTo BoringStep"},{"arrows":"to","to":208,"from":4,"label":"SubTerm 1"},{"arrows":"to","to":266,"from":4,"label":"SubTerm 0"},{"arrows":"to","to":189,"from":5,"label":"StepsTo BoringStep"},{"arrows":"to","to":208,"from":5,"label":"SubTerm 1"},{"arrows":"to","to":269,"from":5,"label":"SubTerm 0"},{"arrows":"to","to":7,"from":6,"label":"SubTerm 1"},{"arrows":"to","to":210,"from":6,"label":"SubTerm 0"},{"arrows":"to","to":231,"from":6,"label":"StepsTo BoringStep"},{"arrows":"to","to":48,"from":7,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":8,"label":"SubTerm 2"},{"arrows":"to","to":9,"from":8,"label":"SubTerm 1"},{"arrows":"to","to":140,"from":8,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":8,"label":"StepsTo BoringStep"},{"arrows":"to","to":102,"from":9,"label":"SubTerm 0"},{"arrows":"to","to":11,"from":10,"label":"SubTerm 1"},{"arrows":"to","to":236,"from":10,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":12,"label":"SubTerm 0"},{"arrows":"to","to":79,"from":12,"label":"StepsTo CallStep"},{"arrows":"to","to":104,"from":12,"label":"SubTerm 1"},{"arrows":"to","to":15,"from":14,"label":"SubTerm 1"},{"arrows":"to","to":287,"from":14,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":16,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":16,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":16,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":17,"label":"SubTerm 0"},{"arrows":"to","to":70,"from":17,"label":"StepsTo BoringStep"},{"arrows":"to","to":249,"from":17,"label":"SubTerm 1"},{"arrows":"to","to":19,"from":18,"label":"SubTerm 1"},{"arrows":"to","to":292,"from":18,"label":"SubTerm 0"},{"arrows":"to","to":21,"from":20,"label":"SubTerm 0"},{"arrows":"to","to":246,"from":20,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":22,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":22,"label":"SubTerm 0"},{"arrows":"to","to":56,"from":22,"label":"StepsTo BoringStep"},{"arrows":"to","to":24,"from":23,"label":"SubTerm 0"},{"arrows":"to","to":72,"from":24,"label":"SubTerm 1"},{"arrows":"to","to":134,"from":24,"label":"SubTerm 0"},{"arrows":"to","to":26,"from":25,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":25,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":25,"label":"StepsTo CallStep"},{"arrows":"to","to":3,"from":26,"label":"SubTerm 2"},{"arrows":"to","to":8,"from":26,"label":"StepsTo CallStep"},{"arrows":"to","to":9,"from":26,"label":"SubTerm 1"},{"arrows":"to","to":36,"from":26,"label":"SubTerm 0"},{"arrows":"to","to":28,"from":27,"label":"SubTerm 0"},{"arrows":"to","to":212,"from":28,"label":"SubTerm 1"},{"arrows":"to","to":275,"from":28,"label":"SubTerm 0"},{"arrows":"to","to":30,"from":29,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":29,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":30,"label":"SubTerm 2"},{"arrows":"to","to":133,"from":30,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":30,"label":"SubTerm 0"},{"arrows":"to","to":43,"from":31,"label":"SubTerm 0"},{"arrows":"to","to":63,"from":31,"label":"StepsTo ReturnStep"},{"arrows":"to","to":100,"from":31,"label":"SubTerm 1"},{"arrows":"to","to":35,"from":34,"label":"SubTerm 0"},{"arrows":"to","to":76,"from":34,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":36,"label":"SubTerm 1"},{"arrows":"to","to":132,"from":36,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":36,"label":"SubTerm 2"},{"arrows":"to","to":140,"from":36,"label":"StepsTo CallStep"},{"arrows":"to","to":13,"from":39,"label":"SubTerm 0"},{"arrows":"to","to":41,"from":39,"label":"SubTerm 1"},{"arrows":"to","to":51,"from":39,"label":"StepsTo BoringStep"},{"arrows":"to","to":41,"from":40,"label":"StepsTo BoringStep"},{"arrows":"to","to":46,"from":40,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":40,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":41,"label":"StepsTo BoringStep"},{"arrows":"to","to":47,"from":41,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":41,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":42,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":42,"label":"SubTerm 0"},{"arrows":"to","to":89,"from":42,"label":"SubTerm 1"},{"arrows":"to","to":50,"from":43,"label":"SubTerm 1"},{"arrows":"to","to":252,"from":43,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":44,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":44,"label":"SubTerm 0"},{"arrows":"to","to":45,"from":44,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":45,"label":"SubTerm 2"},{"arrows":"to","to":9,"from":45,"label":"SubTerm 1"},{"arrows":"to","to":89,"from":45,"label":"StepsTo BoringStep"},{"arrows":"to","to":194,"from":45,"label":"SubTerm 0"},{"arrows":"to","to":47,"from":46,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":46,"label":"SubTerm 2"},{"arrows":"to","to":106,"from":46,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":46,"label":"SubTerm 1"},{"arrows":"to","to":30,"from":47,"label":"StepsTo BoringStep"},{"arrows":"to","to":60,"from":47,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":47,"label":"SubTerm 2"},{"arrows":"to","to":133,"from":47,"label":"SubTerm 1"},{"arrows":"to","to":49,"from":48,"label":"SubTerm 0"},{"arrows":"to","to":94,"from":48,"label":"SubTerm 2"},{"arrows":"to","to":108,"from":48,"label":"SubTerm 1"},{"arrows":"to","to":93,"from":50,"label":"SubTerm 0"},{"arrows":"to","to":271,"from":50,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":51,"label":"SubTerm 0"},{"arrows":"to","to":29,"from":51,"label":"SubTerm 1"},{"arrows":"to","to":53,"from":52,"label":"SubTerm 2"},{"arrows":"to","to":84,"from":52,"label":"StepsTo BoringStep"},{"arrows":"to","to":85,"from":52,"label":"SubTerm 1"},{"arrows":"to","to":182,"from":52,"label":"SubTerm 0"},{"arrows":"to","to":95,"from":53,"label":"SubTerm 1"},{"arrows":"to","to":146,"from":53,"label":"SubTerm 0"},{"arrows":"to","to":55,"from":54,"label":"SubTerm 1"},{"arrows":"to","to":107,"from":54,"label":"SubTerm 2"},{"arrows":"to","to":273,"from":54,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":56,"label":"SubTerm 0"},{"arrows":"to","to":57,"from":56,"label":"StepsTo BoringStep"},{"arrows":"to","to":113,"from":56,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":57,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":57,"label":"SubTerm 1"},{"arrows":"to","to":244,"from":57,"label":"StepsTo BoringStep"},{"arrows":"to","to":59,"from":58,"label":"SubTerm 0"},{"arrows":"to","to":224,"from":58,"label":"SubTerm 1"},{"arrows":"to","to":18,"from":59,"label":"SubTerm 1"},{"arrows":"to","to":265,"from":59,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":60,"label":"SubTerm 2"},{"arrows":"to","to":5,"from":60,"label":"SubTerm 0"},{"arrows":"to","to":127,"from":60,"label":"SubTerm 1"},{"arrows":"to","to":136,"from":60,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":61,"label":"SubTerm 0"},{"arrows":"to","to":62,"from":61,"label":"StepsTo BoringStep"},{"arrows":"to","to":70,"from":61,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":62,"label":"SubTerm 0"},{"arrows":"to","to":101,"from":62,"label":"StepsTo BoringStep"},{"arrows":"to","to":190,"from":62,"label":"SubTerm 1"},{"arrows":"to","to":2,"from":63,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":63,"label":"SubTerm 0"},{"arrows":"to","to":100,"from":63,"label":"SubTerm 1"},{"arrows":"to","to":65,"from":64,"label":"SubTerm 1"},{"arrows":"to","to":191,"from":64,"label":"SubTerm 0"},{"arrows":"to","to":103,"from":65,"label":"SubTerm 0"},{"arrows":"to","to":260,"from":65,"label":"SubTerm 1"},{"arrows":"to","to":67,"from":66,"label":"SubTerm 0"},{"arrows":"to","to":259,"from":66,"label":"SubTerm 1"},{"arrows":"to","to":130,"from":69,"label":"StepsTo BoringStep"},{"arrows":"to","to":166,"from":69,"label":"SubTerm 1"},{"arrows":"to","to":71,"from":70,"label":"SubTerm 1"},{"arrows":"to","to":190,"from":70,"label":"StepsTo BoringStep"},{"arrows":"to","to":247,"from":70,"label":"SubTerm 0"},{"arrows":"to","to":157,"from":71,"label":"SubTerm 0"},{"arrows":"to","to":205,"from":71,"label":"StepsTo BoringStep"},{"arrows":"to","to":206,"from":71,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":73,"label":"SubTerm 2"},{"arrows":"to","to":123,"from":73,"label":"StepsTo BoringStep"},{"arrows":"to","to":221,"from":73,"label":"SubTerm 1"},{"arrows":"to","to":248,"from":73,"label":"SubTerm 0"},{"arrows":"to","to":75,"from":74,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":74,"label":"StepsTo BoringStep"},{"arrows":"to","to":163,"from":74,"label":"SubTerm 0"},{"arrows":"to","to":230,"from":74,"label":"SubTerm 1"},{"arrows":"to","to":179,"from":75,"label":"StepsTo BoringStep"},{"arrows":"to","to":78,"from":77,"label":"SubTerm 0"},{"arrows":"to","to":200,"from":78,"label":"SubTerm 0"},{"arrows":"to","to":285,"from":78,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":79,"label":"SubTerm 0"},{"arrows":"to","to":52,"from":79,"label":"SubTerm 1"},{"arrows":"to","to":253,"from":79,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":80,"label":"SubTerm 0"},{"arrows":"to","to":144,"from":80,"label":"SubTerm 1"},{"arrows":"to","to":156,"from":80,"label":"StepsTo BoringStep"},{"arrows":"to","to":147,"from":81,"label":"SubTerm 1"},{"arrows":"to","to":267,"from":81,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":82,"label":"StepsTo CallStep"},{"arrows":"to","to":83,"from":82,"label":"SubTerm 1"},{"arrows":"to","to":247,"from":82,"label":"SubTerm 0"},{"arrows":"to","to":158,"from":83,"label":"SubTerm 0"},{"arrows":"to","to":240,"from":83,"label":"SubTerm 1"},{"arrows":"to","to":44,"from":84,"label":"StepsTo BoringStep"},{"arrows":"to","to":53,"from":84,"label":"SubTerm 2"},{"arrows":"to","to":85,"from":84,"label":"SubTerm 1"},{"arrows":"to","to":154,"from":84,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":86,"label":"SubTerm 0"},{"arrows":"to","to":25,"from":86,"label":"SubTerm 1"},{"arrows":"to","to":87,"from":86,"label":"StepsTo CallStep"},{"arrows":"to","to":13,"from":87,"label":"SubTerm 0"},{"arrows":"to","to":128,"from":87,"label":"SubTerm 1"},{"arrows":"to","to":183,"from":87,"label":"StepsTo BoringStep"},{"arrows":"to","to":74,"from":88,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":88,"label":"SubTerm 2"},{"arrows":"to","to":97,"from":88,"label":"StepsTo BoringStep"},{"arrows":"to","to":133,"from":88,"label":"SubTerm 1"},{"arrows":"to","to":3,"from":89,"label":"SubTerm 2"},{"arrows":"to","to":9,"from":89,"label":"SubTerm 1"},{"arrows":"to","to":26,"from":89,"label":"StepsTo BoringStep"},{"arrows":"to","to":90,"from":89,"label":"SubTerm 0"},{"arrows":"to","to":36,"from":90,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":90,"label":"SubTerm 1"},{"arrows":"to","to":119,"from":90,"label":"SubTerm 2"},{"arrows":"to","to":132,"from":90,"label":"SubTerm 0"},{"arrows":"to","to":27,"from":91,"label":"SubTerm 1"},{"arrows":"to","to":92,"from":91,"label":"SubTerm 2"},{"arrows":"to","to":138,"from":91,"label":"SubTerm 0"},{"arrows":"to","to":117,"from":92,"label":"SubTerm 0"},{"arrows":"to","to":91,"from":94,"label":"SubTerm 1"},{"arrows":"to","to":242,"from":94,"label":"SubTerm 0"},{"arrows":"to","to":96,"from":95,"label":"SubTerm 2"},{"arrows":"to","to":196,"from":95,"label":"SubTerm 0"},{"arrows":"to","to":276,"from":95,"label":"SubTerm 1"},{"arrows":"to","to":111,"from":96,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":97,"label":"SubTerm 2"},{"arrows":"to","to":98,"from":97,"label":"SubTerm 0"},{"arrows":"to","to":133,"from":97,"label":"SubTerm 1"},{"arrows":"to","to":144,"from":97,"label":"StepsTo CallStep"},{"arrows":"to","to":141,"from":98,"label":"StepsTo CallStep"},{"arrows":"to","to":163,"from":98,"label":"SubTerm 0"},{"arrows":"to","to":179,"from":98,"label":"SubTerm 2"},{"arrows":"to","to":230,"from":98,"label":"SubTerm 1"},{"arrows":"to","to":46,"from":99,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":99,"label":"SubTerm 2"},{"arrows":"to","to":133,"from":99,"label":"SubTerm 1"},{"arrows":"to","to":164,"from":99,"label":"SubTerm 0"},{"arrows":"to","to":3,"from":100,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":100,"label":"SubTerm 2"},{"arrows":"to","to":9,"from":100,"label":"SubTerm 1"},{"arrows":"to","to":201,"from":100,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":101,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":101,"label":"SubTerm 1"},{"arrows":"to","to":126,"from":101,"label":"StepsTo CallStep"},{"arrows":"to","to":225,"from":102,"label":"SubTerm 0"},{"arrows":"to","to":291,"from":102,"label":"SubTerm 1"},{"arrows":"to","to":52,"from":104,"label":"StepsTo CallStep"},{"arrows":"to","to":130,"from":104,"label":"SubTerm 1"},{"arrows":"to","to":223,"from":104,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":105,"label":"SubTerm 0"},{"arrows":"to","to":151,"from":105,"label":"StepsTo BoringStep"},{"arrows":"to","to":162,"from":105,"label":"SubTerm 1"},{"arrows":"to","to":0,"from":106,"label":"SubTerm 2"},{"arrows":"to","to":4,"from":106,"label":"SubTerm 0"},{"arrows":"to","to":60,"from":106,"label":"StepsTo BoringStep"},{"arrows":"to","to":127,"from":106,"label":"SubTerm 1"},{"arrows":"to","to":110,"from":109,"label":"SubTerm 1"},{"arrows":"to","to":184,"from":109,"label":"SubTerm 0"},{"arrows":"to","to":112,"from":111,"label":"SubTerm 1"},{"arrows":"to","to":186,"from":111,"label":"SubTerm 0"},{"arrows":"to","to":16,"from":113,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":113,"label":"SubTerm 0"},{"arrows":"to","to":114,"from":113,"label":"SubTerm 1"},{"arrows":"to","to":219,"from":114,"label":"SubTerm 0"},{"arrows":"to","to":250,"from":114,"label":"StepsTo BoringStep"},{"arrows":"to","to":69,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":69,"from":116,"label":"SubTerm 1"},{"arrows":"to","to":104,"from":116,"label":"StepsTo BoringStep"},{"arrows":"to","to":223,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":223,"from":116,"label":"SubTerm 0"},{"arrows":"to","to":118,"from":117,"label":"SubTerm 1"},{"arrows":"to","to":204,"from":117,"label":"SubTerm 0"},{"arrows":"to","to":135,"from":119,"label":"StepsTo BoringStep"},{"arrows":"to","to":121,"from":120,"label":"SubTerm 2"},{"arrows":"to","to":262,"from":120,"label":"SubTerm 1"},{"arrows":"to","to":272,"from":120,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":122,"label":"SubTerm 0"},{"arrows":"to","to":105,"from":122,"label":"StepsTo BoringStep"},{"arrows":"to","to":123,"from":122,"label":"SubTerm 1"},{"arrows":"to","to":58,"from":123,"label":"SubTerm 2"},{"arrows":"to","to":66,"from":123,"label":"SubTerm 0"},{"arrows":"to","to":162,"from":123,"label":"StepsTo BoringStep"},{"arrows":"to","to":221,"from":123,"label":"SubTerm 1"},{"arrows":"to","to":13,"from":126,"label":"SubTerm 0"},{"arrows":"to","to":73,"from":126,"label":"SubTerm 1"},{"arrows":"to","to":122,"from":126,"label":"StepsTo BoringStep"},{"arrows":"to","to":8,"from":128,"label":"SubTerm 1"},{"arrows":"to","to":43,"from":128,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":128,"label":"StepsTo BoringStep"},{"arrows":"to","to":31,"from":129,"label":"StepsTo BoringStep"},{"arrows":"to","to":43,"from":129,"label":"SubTerm 0"},{"arrows":"to","to":167,"from":129,"label":"SubTerm 1"},{"arrows":"to","to":131,"from":130,"label":"SubTerm 1"},{"arrows":"to","to":152,"from":131,"label":"SubTerm 2"},{"arrows":"to","to":256,"from":131,"label":"SubTerm 0"},{"arrows":"to","to":257,"from":131,"label":"SubTerm 1"},{"arrows":"to","to":20,"from":133,"label":"SubTerm 0"},{"arrows":"to","to":0,"from":136,"label":"SubTerm 2"},{"arrows":"to","to":127,"from":136,"label":"SubTerm 1"},{"arrows":"to","to":189,"from":136,"label":"SubTerm 0"},{"arrows":"to","to":139,"from":138,"label":"SubTerm 1"},{"arrows":"to","to":199,"from":138,"label":"SubTerm 2"},{"arrows":"to","to":282,"from":138,"label":"SubTerm 0"},{"arrows":"to","to":149,"from":140,"label":"SubTerm 0"},{"arrows":"to","to":168,"from":140,"label":"StepsTo BoringStep"},{"arrows":"to","to":201,"from":140,"label":"SubTerm 1"},{"arrows":"to","to":213,"from":140,"label":"SubTerm 2"},{"arrows":"to","to":142,"from":141,"label":"SubTerm 0"},{"arrows":"to","to":164,"from":141,"label":"StepsTo BoringStep"},{"arrows":"to","to":176,"from":141,"label":"SubTerm 1"},{"arrows":"to","to":227,"from":141,"label":"SubTerm 2"},{"arrows":"to","to":165,"from":142,"label":"StepsTo BoringStep"},{"arrows":"to","to":77,"from":144,"label":"SubTerm 2"},{"arrows":"to","to":99,"from":144,"label":"StepsTo BoringStep"},{"arrows":"to","to":133,"from":144,"label":"SubTerm 1"},{"arrows":"to","to":141,"from":144,"label":"SubTerm 0"},{"arrows":"to","to":81,"from":145,"label":"SubTerm 0"},{"arrows":"to","to":88,"from":145,"label":"SubTerm 1"},{"arrows":"to","to":197,"from":145,"label":"StepsTo BoringStep"},{"arrows":"to","to":14,"from":146,"label":"SubTerm 1"},{"arrows":"to","to":268,"from":146,"label":"SubTerm 0"},{"arrows":"to","to":148,"from":147,"label":"SubTerm 0"},{"arrows":"to","to":270,"from":147,"label":"SubTerm 1"},{"arrows":"to","to":217,"from":149,"label":"StepsTo BoringStep"},{"arrows":"to","to":37,"from":150,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":151,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":151,"label":"SubTerm 1"},{"arrows":"to","to":181,"from":151,"label":"StepsTo BoringStep"},{"arrows":"to","to":155,"from":154,"label":"SubTerm 1"},{"arrows":"to","to":280,"from":154,"label":"SubTerm 2"},{"arrows":"to","to":290,"from":154,"label":"SubTerm 0"},{"arrows":"to","to":40,"from":156,"label":"StepsTo BoringStep"},{"arrows":"to","to":81,"from":156,"label":"SubTerm 0"},{"arrows":"to","to":99,"from":156,"label":"SubTerm 1"},{"arrows":"to","to":158,"from":157,"label":"StepsTo BoringStep"},{"arrows":"to","to":192,"from":158,"label":"SubTerm 0"},{"arrows":"to","to":160,"from":159,"label":"SubTerm 0"},{"arrows":"to","to":284,"from":159,"label":"SubTerm 1"},{"arrows":"to","to":81,"from":162,"label":"SubTerm 0"},{"arrows":"to","to":145,"from":162,"label":"StepsTo BoringStep"},{"arrows":"to","to":215,"from":162,"label":"SubTerm 1"},{"arrows":"to","to":106,"from":164,"label":"StepsTo BoringStep"},{"arrows":"to","to":165,"from":164,"label":"SubTerm 0"},{"arrows":"to","to":176,"from":164,"label":"SubTerm 1"},{"arrows":"to","to":227,"from":164,"label":"SubTerm 2"},{"arrows":"to","to":216,"from":165,"label":"SubTerm 0"},{"arrows":"to","to":131,"from":166,"label":"StepsTo BoringStep"},{"arrows":"to","to":3,"from":167,"label":"SubTerm 2"},{"arrows":"to","to":9,"from":167,"label":"SubTerm 1"},{"arrows":"to","to":100,"from":167,"label":"StepsTo ReturnStep"},{"arrows":"to","to":168,"from":167,"label":"SubTerm 0"},{"arrows":"to","to":201,"from":168,"label":"SubTerm 1"},{"arrows":"to","to":201,"from":168,"label":"StepsTo ReturnStep"},{"arrows":"to","to":213,"from":168,"label":"SubTerm 2"},{"arrows":"to","to":217,"from":168,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":169,"label":"SubTerm 0"},{"arrows":"to","to":31,"from":169,"label":"SubTerm 1"},{"arrows":"to","to":170,"from":169,"label":"StepsTo ReturnStep"},{"arrows":"to","to":13,"from":170,"label":"SubTerm 0"},{"arrows":"to","to":22,"from":170,"label":"StepsTo BoringStep"},{"arrows":"to","to":63,"from":170,"label":"SubTerm 1"},{"arrows":"to","to":109,"from":171,"label":"SubTerm 0"},{"arrows":"to","to":173,"from":172,"label":"SubTerm 0"},{"arrows":"to","to":207,"from":172,"label":"SubTerm 1"},{"arrows":"to","to":258,"from":172,"label":"SubTerm 2"},{"arrows":"to","to":175,"from":174,"label":"SubTerm 0"},{"arrows":"to","to":37,"from":177,"label":"SubTerm 0"},{"arrows":"to","to":74,"from":178,"label":"StepsTo BoringStep"},{"arrows":"to","to":75,"from":178,"label":"SubTerm 2"},{"arrows":"to","to":163,"from":178,"label":"SubTerm 0"},{"arrows":"to","to":229,"from":178,"label":"SubTerm 1"},{"arrows":"to","to":180,"from":179,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":181,"label":"SubTerm 0"},{"arrows":"to","to":197,"from":181,"label":"SubTerm 1"},{"arrows":"to","to":243,"from":181,"label":"StepsTo CallStep"},{"arrows":"to","to":154,"from":182,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":183,"label":"SubTerm 0"},{"arrows":"to","to":129,"from":183,"label":"SubTerm 1"},{"arrows":"to","to":169,"from":183,"label":"StepsTo BoringStep"},{"arrows":"to","to":185,"from":184,"label":"SubTerm 0"},{"arrows":"to","to":187,"from":186,"label":"SubTerm 0"},{"arrows":"to","to":174,"from":189,"label":"SubTerm 1"},{"arrows":"to","to":269,"from":189,"label":"SubTerm 0"},{"arrows":"to","to":82,"from":190,"label":"StepsTo BoringStep"},{"arrows":"to","to":205,"from":190,"label":"SubTerm 1"},{"arrows":"to","to":247,"from":190,"label":"SubTerm 0"},{"arrows":"to","to":90,"from":194,"label":"StepsTo BoringStep"},{"arrows":"to","to":119,"from":194,"label":"SubTerm 2"},{"arrows":"to","to":132,"from":194,"label":"SubTerm 0"},{"arrows":"to","to":195,"from":194,"label":"SubTerm 1"},{"arrows":"to","to":37,"from":195,"label":"StepsTo BoringStep"},{"arrows":"to","to":279,"from":196,"label":"SubTerm 2"},{"arrows":"to","to":281,"from":196,"label":"SubTerm 0"},{"arrows":"to","to":288,"from":196,"label":"SubTerm 1"},{"arrows":"to","to":80,"from":197,"label":"StepsTo CallStep"},{"arrows":"to","to":81,"from":197,"label":"SubTerm 0"},{"arrows":"to","to":97,"from":197,"label":"SubTerm 1"},{"arrows":"to","to":222,"from":200,"label":"SubTerm 0"},{"arrows":"to","to":150,"from":203,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":203,"label":"StepsTo BoringStep"},{"arrows":"to","to":251,"from":204,"label":"SubTerm 0"},{"arrows":"to","to":83,"from":205,"label":"StepsTo BoringStep"},{"arrows":"to","to":158,"from":205,"label":"SubTerm 0"},{"arrows":"to","to":206,"from":205,"label":"SubTerm 1"},{"arrows":"to","to":240,"from":206,"label":"StepsTo BoringStep"},{"arrows":"to","to":174,"from":208,"label":"StepsTo BoringStep"},{"arrows":"to","to":64,"from":210,"label":"SubTerm 1"},{"arrows":"to","to":211,"from":210,"label":"SubTerm 0"},{"arrows":"to","to":54,"from":213,"label":"SubTerm 2"},{"arrows":"to","to":214,"from":213,"label":"SubTerm 1"},{"arrows":"to","to":235,"from":213,"label":"SubTerm 0"},{"arrows":"to","to":77,"from":215,"label":"SubTerm 2"},{"arrows":"to","to":88,"from":215,"label":"StepsTo BoringStep"},{"arrows":"to","to":133,"from":215,"label":"SubTerm 1"},{"arrows":"to","to":178,"from":215,"label":"SubTerm 0"},{"arrows":"to","to":177,"from":219,"label":"SubTerm 0"},{"arrows":"to","to":245,"from":219,"label":"SubTerm 1"},{"arrows":"to","to":264,"from":219,"label":"StepsTo BoringStep"},{"arrows":"to","to":23,"from":224,"label":"SubTerm 1"},{"arrows":"to","to":171,"from":224,"label":"SubTerm 2"},{"arrows":"to","to":172,"from":224,"label":"SubTerm 0"},{"arrows":"to","to":6,"from":226,"label":"StepsTo CallStep"},{"arrows":"to","to":237,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":237,"from":226,"label":"SubTerm 1"},{"arrows":"to","to":278,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":278,"from":226,"label":"SubTerm 0"},{"arrows":"to","to":120,"from":227,"label":"SubTerm 2"},{"arrows":"to","to":159,"from":227,"label":"SubTerm 0"},{"arrows":"to","to":228,"from":227,"label":"SubTerm 1"},{"arrows":"to","to":230,"from":229,"label":"StepsTo BoringStep"},{"arrows":"to","to":12,"from":231,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":231,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":232,"label":"SubTerm 0"},{"arrows":"to","to":156,"from":232,"label":"SubTerm 1"},{"arrows":"to","to":233,"from":232,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":233,"label":"SubTerm 0"},{"arrows":"to","to":39,"from":233,"label":"StepsTo BoringStep"},{"arrows":"to","to":40,"from":233,"label":"SubTerm 1"},{"arrows":"to","to":274,"from":235,"label":"SubTerm 0"},{"arrows":"to","to":283,"from":235,"label":"SubTerm 1"},{"arrows":"to","to":238,"from":237,"label":"SubTerm 2"},{"arrows":"to","to":255,"from":237,"label":"SubTerm 1"},{"arrows":"to","to":277,"from":237,"label":"SubTerm 0"},{"arrows":"to","to":241,"from":240,"label":"SubTerm 0"},{"arrows":"to","to":289,"from":240,"label":"SubTerm 1"},{"arrows":"to","to":10,"from":242,"label":"SubTerm 1"},{"arrows":"to","to":286,"from":242,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":243,"label":"SubTerm 0"},{"arrows":"to","to":80,"from":243,"label":"SubTerm 1"},{"arrows":"to","to":232,"from":243,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":244,"label":"SubTerm 0"},{"arrows":"to","to":17,"from":244,"label":"SubTerm 1"},{"arrows":"to","to":61,"from":244,"label":"StepsTo BoringStep"},{"arrows":"to","to":135,"from":245,"label":"StepsTo BoringStep"},{"arrows":"to","to":66,"from":248,"label":"StepsTo BoringStep"},{"arrows":"to","to":177,"from":249,"label":"SubTerm 0"},{"arrows":"to","to":249,"from":250,"label":"StepsTo BoringStep"},{"arrows":"to","to":264,"from":250,"label":"SubTerm 0"},{"arrows":"to","to":13,"from":253,"label":"SubTerm 0"},{"arrows":"to","to":84,"from":253,"label":"SubTerm 1"},{"arrows":"to","to":254,"from":253,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":254,"label":"SubTerm 0"},{"arrows":"to","to":44,"from":254,"label":"SubTerm 1"},{"arrows":"to","to":261,"from":254,"label":"StepsTo BoringStep"},{"arrows":"to","to":13,"from":261,"label":"SubTerm 0"},{"arrows":"to","to":42,"from":261,"label":"SubTerm 1"},{"arrows":"to","to":86,"from":261,"label":"StepsTo BoringStep"},{"arrows":"to","to":203,"from":263,"label":"SubTerm 0"},{"arrows":"to","to":219,"from":263,"label":"StepsTo BoringStep"},{"arrows":"to","to":245,"from":263,"label":"SubTerm 1"},{"arrows":"to","to":135,"from":264,"label":"SubTerm 1"},{"arrows":"to","to":177,"from":264,"label":"SubTerm 0"},{"arrows":"to","to":269,"from":266,"label":"StepsTo BoringStep"},{"arrows":"to","to":34,"from":276,"label":"SubTerm 0"}],"nodes":[{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":37},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"]],"annots":[],"id":0,"label":"mem x t_2"},{"span":{"startLine":9,"endLine":9,"endCol":40,"startCol":37},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":1,"label":"mem"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[13,1,"Redex"]],"id":2,"label":"let seen' = [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[1,1,"Redex"]],"id":3,"label":"[h] :: seen"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","2"],["h_2","[1]"]],"annots":[[0,1,"Redex"]],"id":4,"label":"x = h_2"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[["h_2","[1]"]],"annots":[[4,3,"Redex"]],"id":5,"label":"2 = h_2"},{"span":{"startLine":12,"endLine":20,"endCol":30,"startCol":3},"env":[["xs","[1 ; 2 ; 1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[0,280,"Redex"]],"id":6,"label":"let rec helper =\n  fun (seen , rest) ->\n    match rest with\n    | [] -> seen\n    | h :: t -> (let seen' =\n                   if mem h seen\n                   then [] :: seen\n                   else [h] :: seen in\n                 helper (seen' , t)) in\nList.rev (helper ([] , xs))"},{"span":{"startLine":12,"endLine":19,"endCol":27,"startCol":19},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":7,"label":"fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[]"],["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"]],"annots":[[10,1,"Redex"]],"id":8,"label":"if (match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t)\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":9,"label":"[] :: seen"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":10,"label":"(seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":11,"label":"t"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,27,"Redex"]],"id":12,"label":"List.rev (helper ([] , [1 ; 2 ; 1]))"},{"span":{"startLine":20,"endLine":20,"endCol":14,"startCol":6},"env":[],"annots":[],"id":13,"label":"List.rev"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":14,"label":"(seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":15,"label":"t"},{"span":{"startLine":16,"endLine":19,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,43,"Redex"]],"id":16,"label":"let seen' = [1] :: [] in\nhelper (seen' , t)"},{"span":{"startLine":16,"endLine":19,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[0,39,"Redex"]],"id":17,"label":"let seen' = [[1]] in\nhelper (seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[1,5,"Redex"]],"id":18,"label":"(seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":19,"label":"t"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":20,"label":"([] , seen_1)"},{"span":{"startLine":17,"endLine":17,"endCol":27,"startCol":25},"env":[],"annots":[],"id":21,"label":"[]"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[35,1,"Redex"]],"id":22,"label":"List.rev (let seen' =\n            [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":23,"label":"[] :: seen_1"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":24,"label":"([] , seen_1)"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,27,"Redex"]],"id":25,"label":"let seen' = if mem 1\n                   [] then [] :: seen else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"]],"annots":[[3,15,"Redex"]],"id":26,"label":"if mem 1\n       [] then [] :: seen else [h] :: seen"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[],"annots":[],"id":27,"label":"[] :: seen"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[],"annots":[],"id":28,"label":"([] , seen)"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":16},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[20,7,"Redex"]],"id":29,"label":"let seen' =\n  if if 2 = [1]\n     then true\n     else mem x t_2\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":16},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[6,7,"Redex"]],"id":30,"label":"if if 2 = [1]\n   then true\n   else mem x t_2\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":31,"label":"let seen' =\n  if false\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":43},"env":[["t_2","[]"]],"annots":[],"id":33,"label":"t_2"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":34,"label":"([] , seen)"},{"span":{"startLine":17,"endLine":17,"endCol":27,"startCol":25},"env":[],"annots":[],"id":35,"label":"[]"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[0,8,"Redex"]],"id":36,"label":"mem 1 []"},{"span":{"startLine":22,"endLine":22,"endCol":28,"startCol":27},"env":[],"annots":[],"id":37,"label":"1"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[44,3,"Redex"]],"id":39,"label":"List.rev (let seen' =\n            if if 2 = h_2\n               then true\n               else mem x t_2\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","2"],["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[20,1,"Redex"]],"id":40,"label":"let seen' =\n  if if x = h_2\n     then true\n     else mem x t_2\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[24,3,"Redex"]],"id":41,"label":"let seen' =\n  if if 2 = h_2\n     then true\n     else mem x t_2\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[23,4,"Redex"]],"id":42,"label":"let seen' =\n  if mem 1 seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"]],"id":43,"label":"helper (seen' , t)"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[21,1,"Redex"]],"id":44,"label":"let seen' =\n  if mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h","1"],["seen","[]"]],"annots":[[7,1,"Redex"]],"id":45,"label":"if mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","2"],["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[6,1,"Redex"]],"id":46,"label":"if if x = h_2\n   then true\n   else mem x t_2\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[10,3,"Redex"]],"id":47,"label":"if if 2 = h_2\n   then true\n   else mem x t_2\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[6,4,"Redex"]],"id":48,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[],"annots":[[0,4,"Redex"]],"id":49,"label":"rest"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["t","[2 ; 1]"]],"annots":[[1,5,"Redex"]],"id":50,"label":"(seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":16},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[40,7,"Redex"]],"id":51,"label":"List.rev (let seen' =\n            if if 2 = [1]\n               then true\n               else mem x t_2\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,4,"Redex"]],"id":52,"label":"match rest with\n| [] -> seen\n| h :: t -> (let seen' =\n               if mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[21,1,"Redex"]],"id":53,"label":"let seen' =\n  if mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":37},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","1"]],"annots":[],"id":54,"label":"mem x t"},{"span":{"startLine":9,"endLine":9,"endCol":42,"startCol":41},"env":[["x","1"]],"annots":[],"id":55,"label":"x"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[41,4,"Redex"]],"id":56,"label":"List.rev (let seen' =\n            [1] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":16,"endLine":19,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,67,"Redex"]],"id":57,"label":"List.rev (let seen' =\n            [1] :: [] in\n          helper (seen' , t))"},{"span":{"startLine":16,"endLine":19,"endCol":27,"startCol":8},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":58,"label":"let seen' =\n  if mem h seen_1\n  then [] :: seen_1\n  else [h] :: seen_1 in\nhelper (seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"]],"id":59,"label":"helper (seen' , t)"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"]],"annots":[[7,3,"Redex"]],"id":60,"label":"if 2 = h_2\nthen true\nelse mem x t_2"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[18,5,"Redex"]],"id":61,"label":"List.rev (helper (seen' , t))"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[26,1,"Redex"]],"id":62,"label":"List.rev (helper ([[1]] , t))"},{"span":{"startLine":16,"endLine":18,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[12,65,"Redex"]],"id":63,"label":"let seen' = if false\n            then [] :: seen\n            else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":64,"label":"helper ([] , xs)"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":65,"label":"([] , xs)"},{"span":null,"env":[],"annots":[],"id":66,"label":"[2 ; 1]"},{"span":{"startLine":22,"endLine":22,"endCol":30,"startCol":29},"env":[],"annots":[],"id":67,"label":"2"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[6,2,"Redex"]],"id":69,"label":"([] , xs)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[8,5,"Redex"]],"id":70,"label":"helper (seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"],["t","[2 ; 1]"]],"annots":[[1,5,"Redex"]],"id":71,"label":"(seen' , t)"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":72,"label":"seen_1"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[6,6,"Redex"]],"id":73,"label":"match rest_1 with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"]],"annots":[[6,6,"Redex"]],"id":74,"label":"mem 2 seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":75,"label":"seen_1"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":76,"label":"seen"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":77,"label":"[h_1] :: seen_1"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":25},"env":[["h_1","2"],["seen_1","[[1]]"]],"annots":[],"id":78,"label":"([h_1] , seen_1)"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"],["seen","[]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,4,"Redex"]],"id":79,"label":"List.rev (match rest with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[[1]]"],["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[24,1,"Redex"]],"id":80,"label":"let seen' =\n  if (match l with\n      | [] -> false\n      | h :: t -> if x = h\n                  then true\n                  else mem x t)\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[],"id":81,"label":"helper (seen' , t_1)"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,24,"Redex"]],"id":82,"label":"helper ([[1]] , [2 ; 1])"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":19},"env":[],"annots":[],"id":83,"label":"([[1]] , [2 ; 1])"},{"span":{"startLine":13,"endLine":19,"endCol":27,"startCol":5},"env":[["seen","[]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,188,"Redex"]],"id":84,"label":"match [1 ; 2 ; 1] with\n| [] -> seen\n| h :: t -> (let seen' =\n               if mem h seen\n               then [] :: seen\n               else [h] :: seen in\n             helper (seen' , t))"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":13},"env":[["seen","[]"]],"annots":[],"id":85,"label":"seen"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[25,37,"Redex"]],"id":86,"label":"List.rev (let seen' = if mem 1\n                             [] then [] :: seen else [h] :: seen in helper (seen' , t))"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[]"],["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[44,1,"Redex"]],"id":87,"label":"List.rev (let seen' =\n            if (match l with\n                | [] -> false\n                | h :: t -> if x = h\n                            then true\n                            else mem x t)\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[9,6,"Redex"]],"id":88,"label":"if mem 2 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"]],"annots":[[9,4,"Redex"]],"id":89,"label":"if mem 1 seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"]],"annots":[[6,4,"Redex"]],"id":90,"label":"mem 1 seen"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[7,1,"Redex"]],"id":91,"label":"if mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":92,"label":"[h] :: seen"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":93,"label":"seen'"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[21,1,"Redex"]],"id":94,"label":"let seen' =\n  if mem h seen\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"]],"annots":[[7,1,"Redex"]],"id":95,"label":"if mem h seen\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[1,1,"Redex"]],"id":96,"label":"[h] :: seen"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[3,18,"Redex"]],"id":97,"label":"if mem 2\n       [[1]] then [] :: seen_1 else [h_1] :: seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[0,11,"Redex"]],"id":98,"label":"mem 2 [[1]]"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[3,141,"Redex"]],"id":99,"label":"if (match [[1]] with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x\n                         t) then [] :: seen_1 else [h_1] :: seen_1"},{"span":{"startLine":16,"endLine":18,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"]],"annots":[[0,41,"Redex"]],"id":100,"label":"if false\nthen [] :: seen\nelse [h] :: seen"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,26,"Redex"]],"id":101,"label":"List.rev (helper ([[1]] , [2 ; 1]))"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":102,"label":"([] , seen)"},{"span":{"startLine":20,"endLine":20,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":103,"label":"[]"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,25,"Redex"]],"id":104,"label":"helper ([] , [1 ; 2 ; 1])"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[41,3,"Redex"]],"id":105,"label":"List.rev (let seen' =\n            if mem h_1 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","2"],["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["t_2","[]"]],"annots":[[3,1,"Redex"]],"id":106,"label":"if x = h_2\nthen true\nelse mem x t_2"},{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":43},"env":[],"annots":[],"id":107,"label":"t"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":13},"env":[],"annots":[],"id":108,"label":"seen"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":109,"label":"([h] , seen_1)"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":110,"label":"seen_1"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["seen","[]"]],"annots":[[2,1,"Redex"]],"id":111,"label":"([h] , seen)"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":112,"label":"seen"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[19,4,"Redex"]],"id":113,"label":"let seen' = [1] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":114,"label":"[1] :: seen"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[13,2,"Redex"]],"id":116,"label":"helper ([] , xs)"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[2,1,"Redex"]],"id":117,"label":"([h] , seen)"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[],"annots":[[0,4,"Redex"]],"id":118,"label":"seen"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":119,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":37},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"]],"annots":[],"id":120,"label":"mem x t"},{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":43},"env":[],"annots":[],"id":121,"label":"t"},{"span":{"startLine":13,"endLine":19,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,254,"Redex"]],"id":122,"label":"List.rev (match [2 ; 1] with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":13,"endLine":19,"endCol":27,"startCol":5},"env":[["seen_1","[[1]]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[0,192,"Redex"]],"id":123,"label":"match [2 ; 1] with\n| [] -> seen_1\n| h :: t -> (let seen' =\n               if mem h seen_1\n               then [] :: seen_1\n               else [h] :: seen_1 in\n             helper (seen' , t))"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"],["seen_1","[[1]]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[16,6,"Redex"]],"id":126,"label":"List.rev (match rest_1 with\n          | [] -> seen_1\n          | h :: t -> (let seen' =\n                         if mem h seen_1\n                         then [] :: seen_1\n                         else [h] :: seen_1 in\n                       helper (seen' , t)))"},{"span":{"startLine":9,"endLine":9,"endCol":31,"startCol":27},"env":[],"annots":[],"id":127,"label":"true"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[]"],["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[24,1,"Redex"]],"id":128,"label":"let seen' =\n  if (match l with\n      | [] -> false\n      | h :: t -> if x = h\n                  then true\n                  else mem x t)\n  then [] :: seen\n  else [h] :: seen in\nhelper (seen' , t)"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[15,198,"Redex"]],"id":129,"label":"let seen' = if (match [] with\n                | [] -> false\n                | h :: t -> if x = h\n                            then true\n                            else mem x\n                                     t) then [] :: seen else [h] :: seen in helper (seen' , t)"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":24},"env":[],"annots":[],"id":130,"label":"([] , [1 ; 2 ; 1])"},{"span":null,"env":[],"annots":[],"id":131,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":16,"endLine":16,"endCol":26,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":132,"label":"mem"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":133,"label":"[] :: seen_1"},{"span":{"startLine":17,"endLine":17,"endCol":27,"startCol":25},"env":[],"annots":[],"id":134,"label":"[]"},{"span":null,"env":[],"annots":[],"id":135,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":16},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["x","2"],["t_2","[]"]],"annots":[[3,7,"Redex"]],"id":136,"label":"if 2 = [1]\nthen true\nelse mem x t_2"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[4,1,"Redex"]],"id":138,"label":"mem h seen"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[],"annots":[[0,1,"Redex"]],"id":139,"label":"h"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[]"],["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[6,1,"Redex"]],"id":140,"label":"match l with\n| [] -> false\n| h :: t -> if x = h\n            then true\n            else mem x t"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[[1]]"],["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[6,1,"Redex"]],"id":141,"label":"match l with\n| [] -> false\n| h :: t -> if x = h\n            then true\n            else mem x t"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[[1]]"]],"annots":[[0,1,"Redex"]],"id":142,"label":"l"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[[1]]"],["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"]],"annots":[[10,1,"Redex"]],"id":144,"label":"if (match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t)\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[23,6,"Redex"]],"id":145,"label":"let seen' =\n  if mem 2 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[8,5,"Redex"]],"id":146,"label":"helper (seen' , t)"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":19},"env":[["t_1","[1]"]],"annots":[],"id":147,"label":"(seen' , t_1)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":148,"label":"seen'"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[]"]],"annots":[[0,1,"Redex"]],"id":149,"label":"l"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":150,"label":"h"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[43,6,"Redex"]],"id":151,"label":"List.rev (let seen' =\n            if mem 2 seen_1\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":22,"endLine":22,"endCol":32,"startCol":31},"env":[],"annots":[],"id":152,"label":"1"},{"span":null,"env":[],"annots":[],"id":154,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":22,"endLine":22,"endCol":30,"startCol":29},"env":[],"annots":[],"id":155,"label":"2"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[17,151,"Redex"]],"id":156,"label":"let seen' =\n  if (match [[1]] with\n      | [] -> false\n      | h :: t -> if x = h\n                  then true\n                  else mem x\n                           t) then [] :: seen_1 else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[["seen'","[[1]]"]],"annots":[[0,5,"Redex"]],"id":157,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":158,"label":"[[1]]"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":16},"env":[["x","2"]],"annots":[],"id":159,"label":"x = h"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","2"]],"annots":[[0,1,"Redex"]],"id":160,"label":"x"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h_1","2"],["seen_1","[[1]]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[21,3,"Redex"]],"id":162,"label":"let seen' =\n  if mem h_1 seen_1\n  then [] :: seen_1\n  else [h_1] :: seen_1 in\nhelper (seen' , t_1)"},{"span":{"startLine":16,"endLine":16,"endCol":26,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":163,"label":"mem"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[0,98,"Redex"]],"id":164,"label":"match [[1]] with\n| [] -> false\n| h :: t -> if x = h\n            then true\n            else mem x t"},{"span":null,"env":[],"annots":[],"id":165,"label":"[[1]]"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":166,"label":"xs"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"]],"annots":[[3,138,"Redex"]],"id":167,"label":"if (match [] with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x\n                         t) then [] :: seen else [h] :: seen"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[[0,95,"Redex"]],"id":168,"label":"match [] with\n| [] -> false\n| h :: t -> if x = h\n            then true\n            else mem x t"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[],"id":169,"label":"List.rev (let seen' =\n            if false\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":16,"endLine":18,"endCol":36,"startCol":20},"env":[["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[22,85,"Redex"]],"id":170,"label":"List.rev (let seen' = if false\n                      then [] :: seen\n                      else [h] :: seen in helper (seen' , t))"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":25},"env":[["seen_1","[[1]]"]],"annots":[],"id":171,"label":"[h] :: seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"]],"annots":[],"id":172,"label":"mem h seen_1"},{"span":{"startLine":16,"endLine":16,"endCol":26,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":173,"label":"mem"},{"span":null,"env":[],"annots":[],"id":174,"label":"[1]"},{"span":{"startLine":22,"endLine":22,"endCol":28,"startCol":27},"env":[],"annots":[],"id":175,"label":"1"},{"span":{"startLine":8,"endLine":8,"endCol":16,"startCol":11},"env":[],"annots":[],"id":176,"label":"false"},{"span":null,"env":[],"annots":[],"id":177,"label":"[1]"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h_1","2"],["seen_1","[[1]]"]],"annots":[[4,3,"Redex"]],"id":178,"label":"mem h_1 seen_1"},{"span":null,"env":[],"annots":[],"id":179,"label":"[[1]]"},{"span":null,"env":[],"annots":[],"id":180,"label":"[1]"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[25,40,"Redex"]],"id":181,"label":"List.rev (let seen' = if mem 2\n                             [[1]] then [] :: seen_1 else [h_1] :: seen_1 in helper (seen' , t_1))"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[["rest","[1 ; 2 ; 1]"]],"annots":[[0,4,"Redex"]],"id":182,"label":"rest"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[37,198,"Redex"]],"id":183,"label":"List.rev (let seen' =\n            if (match [] with\n                | [] -> false\n                | h :: t -> if x = h\n                            then true\n                            else mem x\n                                     t) then [] :: seen else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":184,"label":"[h]"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":185,"label":"h"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":186,"label":"[h]"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":187,"label":"h"},{"span":{"startLine":20,"endLine":20,"endCol":26,"startCol":24},"env":[],"annots":[[0,2,"Redex"]],"id":188,"label":"[]"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":16},"env":[],"annots":[[0,7,"Redex"]],"id":189,"label":"2 = [1]"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[16,1,"Redex"]],"id":190,"label":"helper ([[1]] , t)"},{"span":{"startLine":20,"endLine":20,"endCol":22,"startCol":16},"env":[],"annots":[],"id":191,"label":"helper"},{"span":null,"env":[],"annots":[],"id":192,"label":"[1]"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h","1"],["seen","[]"]],"annots":[[4,1,"Redex"]],"id":194,"label":"mem h seen"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["h","1"]],"annots":[[0,1,"Redex"]],"id":195,"label":"h"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"]],"annots":[[4,1,"Redex"]],"id":196,"label":"mem h seen"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[15,30,"Redex"]],"id":197,"label":"let seen' = if mem 2\n                   [[1]] then [] :: seen_1 else [h_1] :: seen_1 in helper (seen' , t_1)"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[],"annots":[[0,4,"Redex"]],"id":199,"label":"seen"},{"span":{"startLine":18,"endLine":18,"endCol":28,"startCol":25},"env":[["h_1","2"]],"annots":[],"id":200,"label":"[h_1]"},{"span":{"startLine":8,"endLine":8,"endCol":16,"startCol":11},"env":[],"annots":[],"id":201,"label":"false"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["h","1"]],"annots":[[1,1,"Redex"]],"id":203,"label":"[h]"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[1,1,"Redex"]],"id":204,"label":"[h]"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[9,1,"Redex"]],"id":205,"label":"([[1]] , t)"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":206,"label":"t"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[],"annots":[[0,1,"Redex"]],"id":207,"label":"h"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[["h_2","[1]"]],"annots":[[0,3,"Redex"]],"id":208,"label":"h_2"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":210,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":20,"endLine":20,"endCol":14,"startCol":6},"env":[],"annots":[],"id":211,"label":"List.rev"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":31},"env":[],"annots":[],"id":212,"label":"seen"},{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":13},"env":[["x","1"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":213,"label":"if x = h\nthen true\nelse mem x t"},{"span":{"startLine":9,"endLine":9,"endCol":31,"startCol":27},"env":[],"annots":[],"id":214,"label":"true"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h_1","2"],["seen_1","[[1]]"]],"annots":[[7,3,"Redex"]],"id":215,"label":"if mem h_1 seen_1\nthen [] :: seen_1\nelse [h_1] :: seen_1"},{"span":null,"env":[],"annots":[],"id":216,"label":"[1]"},{"span":null,"env":[],"annots":[],"id":217,"label":"[]"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[7,4,"Redex"]],"id":219,"label":"([1] , seen)"},{"span":{"startLine":9,"endLine":9,"endCol":42,"startCol":41},"env":[["x","2"]],"annots":[],"id":220,"label":"x"},{"span":{"startLine":14,"endLine":14,"endCol":17,"startCol":13},"env":[["seen_1","[[1]]"]],"annots":[],"id":221,"label":"seen_1"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["h_1","2"]],"annots":[],"id":222,"label":"h_1"},{"span":{"startLine":20,"endLine":20,"endCol":22,"startCol":16},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":223,"label":"helper"},{"span":{"startLine":16,"endLine":18,"endCol":36,"startCol":20},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"]],"annots":[],"id":224,"label":"if mem h seen_1\nthen [] :: seen_1\nelse [h] :: seen_1"},{"span":{"startLine":17,"endLine":17,"endCol":27,"startCol":25},"env":[],"annots":[],"id":225,"label":"[]"},{"span":{"startLine":22,"endLine":22,"endCol":33,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[[0,28,"Redex"]],"id":226,"label":"removeDuplicates [1 ; 2 ; 1]"},{"span":{"startLine":9,"endLine":9,"endCol":44,"startCol":13},"env":[["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":227,"label":"if x = h\nthen true\nelse mem x t"},{"span":{"startLine":9,"endLine":9,"endCol":31,"startCol":27},"env":[],"annots":[],"id":228,"label":"true"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["h_1","2"]],"annots":[[0,3,"Redex"]],"id":229,"label":"h_1"},{"span":{"startLine":22,"endLine":22,"endCol":30,"startCol":29},"env":[],"annots":[],"id":230,"label":"2"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["xs","[1 ; 2 ; 1]"]],"annots":[[23,2,"Redex"]],"id":231,"label":"List.rev (helper ([] , xs))"},{"span":{"startLine":7,"endLine":9,"endCol":44,"startCol":3},"env":[["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[37,201,"Redex"]],"id":232,"label":"List.rev (let seen' =\n            if (match [[1]] with\n                | [] -> false\n                | h :: t -> if x = h\n                            then true\n                            else mem x\n                                     t) then [] :: seen_1 else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","2"],["h_2","[1]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["t_2","[]"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[40,1,"Redex"]],"id":233,"label":"List.rev (let seen' =\n            if if x = h_2\n               then true\n               else mem x t_2\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":16},"env":[["x","1"]],"annots":[],"id":235,"label":"x = h"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":236,"label":"seen'"},{"span":null,"env":[],"annots":[],"id":237,"label":"[1 ; 2 ; 1]"},{"span":{"startLine":22,"endLine":22,"endCol":32,"startCol":31},"env":[],"annots":[],"id":238,"label":"1"},{"span":null,"env":[],"annots":[],"id":240,"label":"[2 ; 1]"},{"span":{"startLine":22,"endLine":22,"endCol":30,"startCol":29},"env":[],"annots":[],"id":241,"label":"2"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[8,5,"Redex"]],"id":242,"label":"helper (seen' , t)"},{"span":{"startLine":7,"endLine":7,"endCol":10,"startCol":9},"env":[["l","[[1]]"],["x","2"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen_1","[[1]]"],["h_1","2"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t_1","[1]"]],"annots":[[44,1,"Redex"]],"id":243,"label":"List.rev (let seen' =\n            if (match l with\n                | [] -> false\n                | h :: t -> if x = h\n                            then true\n                            else mem x t)\n            then [] :: seen_1\n            else [h_1] :: seen_1 in\n          helper (seen' , t_1))"},{"span":{"startLine":16,"endLine":19,"endCol":27,"startCol":8},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[9,51,"Redex"]],"id":244,"label":"List.rev (let seen' = [[1]] in\n          helper (seen' , t))"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":245,"label":"seen"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":31},"env":[["seen_1","[[1]]"]],"annots":[],"id":246,"label":"seen_1"},{"span":{"startLine":19,"endLine":19,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":247,"label":"helper"},{"span":{"startLine":13,"endLine":13,"endCol":15,"startCol":11},"env":[["rest_1","[2 ; 1]"]],"annots":[[0,6,"Redex"]],"id":248,"label":"rest_1"},{"span":null,"env":[],"annots":[],"id":249,"label":"[[1]]"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":25},"env":[],"annots":[[0,9,"Redex"]],"id":250,"label":"[1] :: []"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[],"annots":[[0,1,"Redex"]],"id":251,"label":"h"},{"span":{"startLine":19,"endLine":19,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":252,"label":"helper"},{"span":{"startLine":13,"endLine":19,"endCol":27,"startCol":5},"env":[["seen","[]"],["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[[9,250,"Redex"]],"id":253,"label":"List.rev (match [1 ; 2 ; 1] with\n          | [] -> seen\n          | h :: t -> (let seen' =\n                         if mem h seen\n                         then [] :: seen\n                         else [h] :: seen in\n                       helper (seen' , t)))"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["h","1"],["seen","[]"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[41,1,"Redex"]],"id":254,"label":"List.rev (let seen' =\n            if mem h seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":22,"endLine":22,"endCol":30,"startCol":29},"env":[],"annots":[],"id":255,"label":"2"},{"span":{"startLine":22,"endLine":22,"endCol":28,"startCol":27},"env":[],"annots":[],"id":256,"label":"1"},{"span":{"startLine":22,"endLine":22,"endCol":30,"startCol":29},"env":[],"annots":[],"id":257,"label":"2"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["seen_1","[[1]]"]],"annots":[[0,6,"Redex"]],"id":258,"label":"seen_1"},{"span":{"startLine":22,"endLine":22,"endCol":32,"startCol":31},"env":[],"annots":[],"id":259,"label":"1"},{"span":{"startLine":20,"endLine":20,"endCol":30,"startCol":28},"env":[["xs","[1 ; 2 ; 1]"]],"annots":[[0,2,"Redex"]],"id":260,"label":"xs"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"],["seen","[]"],["h","1"],["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"],["t","[2 ; 1]"]],"annots":[[43,4,"Redex"]],"id":261,"label":"List.rev (let seen' =\n            if mem 1 seen\n            then [] :: seen\n            else [h] :: seen in\n          helper (seen' , t))"},{"span":{"startLine":9,"endLine":9,"endCol":42,"startCol":41},"env":[["x","2"]],"annots":[],"id":262,"label":"x"},{"span":{"startLine":18,"endLine":18,"endCol":27,"startCol":26},"env":[["h","1"],["seen","[]"]],"annots":[[2,1,"Redex"]],"id":263,"label":"([h] , seen)"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":25},"env":[],"annots":[],"id":264,"label":"([1] , [])"},{"span":{"startLine":19,"endLine":19,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":265,"label":"helper"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","2"]],"annots":[[0,1,"Redex"]],"id":266,"label":"x"},{"span":{"startLine":19,"endLine":19,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":267,"label":"helper"},{"span":{"startLine":19,"endLine":19,"endCol":17,"startCol":11},"env":[["helper","fun (seen , rest) ->\n  match rest with\n  | [] -> seen\n  | h :: t -> (let seen' =\n                 if mem h seen\n                 then [] :: seen\n                 else [h] :: seen in\n               helper (seen' , t))"]],"annots":[],"id":268,"label":"helper"},{"span":{"startLine":22,"endLine":22,"endCol":30,"startCol":29},"env":[],"annots":[],"id":269,"label":"2"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[["t_1","[1]"]],"annots":[],"id":270,"label":"t_1"},{"span":{"startLine":19,"endLine":19,"endCol":27,"startCol":26},"env":[["t","[2 ; 1]"]],"annots":[[0,1,"Redex"]],"id":271,"label":"t"},{"span":{"startLine":9,"endLine":9,"endCol":40,"startCol":37},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":272,"label":"mem"},{"span":{"startLine":9,"endLine":9,"endCol":40,"startCol":37},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":273,"label":"mem"},{"span":{"startLine":9,"endLine":9,"endCol":17,"startCol":16},"env":[["x","1"]],"annots":[[0,1,"Redex"]],"id":274,"label":"x"},{"span":{"startLine":17,"endLine":17,"endCol":27,"startCol":25},"env":[],"annots":[],"id":275,"label":"[]"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":25},"env":[["seen","[]"]],"annots":[],"id":276,"label":"[] :: seen"},{"span":{"startLine":22,"endLine":22,"endCol":28,"startCol":27},"env":[],"annots":[],"id":277,"label":"1"},{"span":{"startLine":22,"endLine":22,"endCol":25,"startCol":9},"env":[["removeDuplicates","fun xs ->\n  (let rec helper =\n     fun (seen , rest) ->\n       match rest with\n       | [] -> seen\n       | h :: t -> (let seen' =\n                      if mem h seen\n                      then [] :: seen\n                      else [h] :: seen in\n                    helper (seen' , t)) in\n   List.rev (helper ([] , xs)))"]],"annots":[],"id":278,"label":"removeDuplicates"},{"span":{"startLine":16,"endLine":16,"endCol":33,"startCol":29},"env":[["seen","[]"]],"annots":[[0,4,"Redex"]],"id":279,"label":"seen"},{"span":{"startLine":22,"endLine":22,"endCol":32,"startCol":31},"env":[],"annots":[],"id":280,"label":"1"},{"span":{"startLine":16,"endLine":16,"endCol":26,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":281,"label":"mem"},{"span":{"startLine":16,"endLine":16,"endCol":26,"startCol":23},"env":[["mem","fun x ->\n  fun l ->\n    match l with\n    | [] -> false\n    | h :: t -> if x = h\n                then true\n                else mem x t"]],"annots":[],"id":282,"label":"mem"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[],"annots":[],"id":283,"label":"h"},{"span":{"startLine":9,"endLine":9,"endCol":21,"startCol":20},"env":[],"annots":[],"id":284,"label":"h"},{"span":{"startLine":18,"endLine":18,"endCol":36,"startCol":32},"env":[["seen_1","[[1]]"]],"annots":[],"id":285,"label":"seen_1"},{"span":{"startLine":19,"endLine":19,"endCol":17,"startCol":11},"env":[],"annots":[],"id":286,"label":"helper"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":287,"label":"seen'"},{"span":{"startLine":16,"endLine":16,"endCol":28,"startCol":27},"env":[],"annots":[[0,1,"Redex"]],"id":288,"label":"h"},{"span":{"startLine":22,"endLine":22,"endCol":32,"startCol":31},"env":[],"annots":[],"id":289,"label":"1"},{"span":{"startLine":22,"endLine":22,"endCol":28,"startCol":27},"env":[],"annots":[],"id":290,"label":"1"},{"span":{"startLine":17,"endLine":17,"endCol":35,"startCol":31},"env":[["seen","[]"]],"annots":[],"id":291,"label":"seen"},{"span":{"startLine":19,"endLine":19,"endCol":24,"startCol":19},"env":[],"annots":[[0,5,"Redex"]],"id":292,"label":"seen'"}]}